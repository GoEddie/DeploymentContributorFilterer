<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.Tools.Schema.Sql</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.BatchParser.Lexer.AcceptEscapableQuotedText(System.Char)">
            <summary>
            This method reads ahead until the closingChar is found.  When closingChar is found,
            the next character is checked.  If it's the same as closingChar, the character is
            escaped and the method resumes looking for a non-escaped closingChar.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.BatchParser.Lexer.AcceptQuotedText(System.Char)">
            <summary>
            This method reads ahead until the closingChar is found.  This method does not allow for escaping
            of the closingChar.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.BatchPropertyItem">
            <summary>
            Used to set and save property files in batch mode.  Use a null
            value to delete an item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.BuildContributor">
            <summary>
            Implementations of the BuildContributor extension are executed during a project
            build after build has constructed and verified the project's model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.BuildContributor.OnPopulateArguments">
            <summary>
            Called during project load to provide any extensible arguments that users can
            supply on the command line of via project file modification.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.BuildContributor.OnExecute(Microsoft.Data.Tools.Schema.Sql.Build.BuildContributorContext,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Called after the project's model has been completely built giving the build
            contributor an opportunity to examine the model and possible output
            additional files.
            </summary>
            <param name="context"></param>
            <param name="errorsContainer"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionEngineBatchCancelling">
            <summary>
              Looks up a localized string similar to Canceling batch parser wrapper batch execution..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionEngineBatchMessage">
            <summary>
              Looks up a localized string similar to Batch parser wrapper execution engine batch message received:  Message: {0}    Detailed message: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionEngineBatchResultSetFinished">
            <summary>
              Looks up a localized string similar to Batch parser wrapper execution engine batch ResultSet finished..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionEngineBatchResultSetProcessing">
            <summary>
              Looks up a localized string similar to Batch parser wrapper execution engine batch ResultSet processing: DataReader.FieldCount: {0}  DataReader.RecordsAffected: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionEngineError">
            <summary>
              Looks up a localized string similar to SQL Execution error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionError">
            <summary>
              Looks up a localized string similar to Batch parser wrapper execution: {0} found... at line {1}: {2}    Description: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.BatchParserWrapperExecutionFinished">
            <summary>
              Looks up a localized string similar to Batch parser wrapper execution finished with result: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_AssemblyFileRequired">
            <summary>
              Looks up a localized string similar to The assembly file must exist to be deployed ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_DspTypeMustBeSpecified">
            <summary>
              Looks up a localized string similar to The DataProviderService must be specified.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_FatalError">
            <summary>
              Looks up a localized string similar to An error occurred and deployment cannot continue.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_InvalidParameter">
            <summary>
              Looks up a localized string similar to Could not create a type for parameter {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_InvalidTableDefinition">
            <summary>
              Looks up a localized string similar to The table definition for function {0} cannot be deployed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_InvalidTriggerEvent">
            <summary>
              Looks up a localized string similar to The trigger event {0} for method &quot;{1}&quot; is not valid.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_InvalidTriggerTarget">
            <summary>
              Looks up a localized string similar to The trigger target {0} for method &quot;{1}&quot; is not valid.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_MissingAccumulateMethod">
            <summary>
              Looks up a localized string similar to The aggregate {0} is missing the Accumulate method and cannot be deployed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_MissingDependency">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; references &apos;{1}&apos; in the target database, but &apos;{1}&apos; does not exist in the new assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_MissingTableDefinition">
             <summary>
               Looks up a localized string similar to The method &quot;{0}&quot; is marked as a table-valued function and must define a table definition in the ClrFunction attribute.
            .
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ClrDeploy_MissingTerminateMethod">
            <summary>
              Looks up a localized string similar to The aggregate {0} is missing the Terminate method and cannot be deployed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ConnectionObjectError">
            <summary>
              Looks up a localized string similar to Failed to create connection object from connection string.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.CorruptedContents">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; contains corrupted contents..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.DacDoesNotSupportPrePostScripts">
            <summary>
              Looks up a localized string similar to DAC does not support predeploy and postdeploy scripts..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.DacPropertiesRequired">
            <summary>
              Looks up a localized string similar to DAC generation requires all following properties: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.DatabaseRenamed">
            <summary>
              Looks up a localized string similar to Previous copy of database {0} is available as {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Deploy_OutputToScriptOnly">
            <summary>
              Looks up a localized string similar to The deployment script was generated, but was not deployed. You can change the deploy action on the Deploy tab of the project properties..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.InvalidReference">
            <summary>
              Looks up a localized string similar to The reference to {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.MissingContents">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is missing from the dacpac package..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PackageAccessModeInvalid">
            <summary>
              Looks up a localized string similar to Unexpected access mode..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PackageContentMissing">
            <summary>
              Looks up a localized string similar to Unable to provide access to specified content..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PackageIncompatible">
            <summary>
              Looks up a localized string similar to Unsupported version..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PackageTypeMismatch">
            <summary>
              Looks up a localized string similar to File extension does not match the specified type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql100">
            <summary>
              Looks up a localized string similar to SQL Server 2008.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql110">
            <summary>
              Looks up a localized string similar to SQL Server 2012.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql120">
            <summary>
              Looks up a localized string similar to SQL Server 2014.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql130">
            <summary>
              Looks up a localized string similar to SQL Server 2016.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql140">
            <summary>
              Looks up a localized string similar to SQL Server 2017.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql150">
            <summary>
              Looks up a localized string similar to SQL Server 2019.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql160">
            <summary>
              Looks up a localized string similar to SQL Server 2022 or Azure SQL Database Managed Instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_Sql90">
            <summary>
              Looks up a localized string similar to SQL Server 2005.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_SqlAzure">
            <summary>
              Looks up a localized string similar to Microsoft Azure SQL Database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_SqlAzurev12">
            <summary>
              Looks up a localized string similar to Microsoft Azure SQL Database v12.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_SqlDw">
            <summary>
              Looks up a localized string similar to Azure Synapse Dedicated SQL Pool.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.Platform_SqlServerless">
            <summary>
              Looks up a localized string similar to Azure Synapse Serverless SQL Pool.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PowerBuffer_CouldNotSetup">
            <summary>
              Looks up a localized string similar to The target database schema could not be retrieved. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PowerBuffer_MissingServerAuditName">
            <summary>
              Looks up a localized string similar to missing server audit.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PowerBuffer_ModelHasExistingErrors">
            <summary>
              Looks up a localized string similar to The database being updated has objects that are in an error state.  Errors could occur due to undetected blocking dependencies..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PowerBuffer_RenameCollision">
            <summary>
              Looks up a localized string similar to Object {0} cannot be renamed.  An object with the name {1} already exists in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PowerBuffer_WarningBreakingObject">
            <summary>
              Looks up a localized string similar to The object {0} will be dropped or broken if the change is executed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PropertyInvalid">
            <summary>
              Looks up a localized string similar to The value {0} for property {1} was not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PropertyInvalidDefaultUsed">
            <summary>
              Looks up a localized string similar to The value {0} for property {1} was not valid; a default value was used instead. You must fix this value before a build can be successfully performed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.PropertyMissing">
            <summary>
              Looks up a localized string similar to Property {0} must be specified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SemanticVerification_ExtendedVerificationNotSupportThreeFourPartNames">
            <summary>
              Looks up a localized string similar to Extended T-SQL Verification does not support database variable references. Consider disabling Extended T-SQL Verification for files with such references..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SemanticVerification_GeneratedFileHeaderComment">
             <summary>
               Looks up a localized string similar to --------------------------------------------------------------------------------
            --    Generated from database references for use by SQL Server extended verification.    
            --    This code was generated by a tool.
            --
            --    Changes to this file may cause incorrect behavior and will be lost if
            --    the code is regenerated.
            --------------------------------------------------------------------------------.
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SemanticVerification_UnhandledFailure">
            <summary>
              Looks up a localized string similar to Extended T-SQL Verification encoutered a fatal error and cannot continue.  If this problem persists, extended verification can be disabled in the project settings..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.ServerOptionSettingMismatch">
            <summary>
              Looks up a localized string similar to Server option {0}: The source model specified that the option must be &apos;{1}&apos; for deployment, but the target&apos;s option is set to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SourceFileMissing">
            <summary>
              Looks up a localized string similar to The source file &apos;{0}&apos; could not be opened (&apos;{1} &apos;)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SqlProject_SQL2008_SqlProjectType_FriendlyName">
            <summary>
              Looks up a localized string similar to SQL Server 2008 or SQL Server 2008 R2.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.SystemCannotFindFile">
            <summary>
              Looks up a localized string similar to The system cannot find the specified file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.TroubleshootingAssistanceMessage">
            <summary>
              Looks up a localized string similar to For more information about this error, see the troubleshooting topics in the product documentation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.BuildResources.UnrecognizedSqlPlatform">
            <summary>
              Looks up a localized string similar to Unrecognized platform &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.ContributorArgumentConfiguration">
            <summary>
            Instances of this class are created by Build and Deployment contributors during design-time to 
            initialize arguments that are passed to them at runtime.  These arguments are stored in the 
            project file as items as follows:
            
            <ItemGroup>
                <BuildContributorArgument Inclue="Name=Value" Condition="Condition"/>
            </ItemGroup>
            
            Using the above configuration it is possible to collect information from the MSBuild environment
            and pass it to the contributor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.GetPackageVersion(System.String)">
            <summary>
            Returns version for a given dacpac. If the package is corrupted or its version
            can't be recognized, null is returned.
            </summary>
            <param name="packageFile">File path for the package file to be checked</param>
            <returns>Dacpac version</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.GetPackageVersion(System.IO.Stream)">
            <summary>
            Returns version for a given dacpac. If the package is corrupted or its version
            can't be recognized, null is returned.
            </summary>
            <param name="packageFile">
            <see cref="T:System.IO.Stream"/> from which to read the package.
            </param>
            <returns>Dacpac version</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.TryGetDacpacProperties(System.String,Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata@)">
            <summary>
            Returns application name, version, and description for a given data-tier package. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.TryGetDacpacProperties(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage,Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata@)">
            <summary>
            Returns application name, version, and description for a given data-tier package. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.TryGetDacpacProperties(System.IO.Packaging.Package,Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata@)">
            <summary>
            Returns application name, version, and description for a given data-tier package. 
            This can be used to get the properties from a "legacy" dacpac.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.TryReadCollation(System.String,System.String@)">
            <summary>
            Returns collation defined inside the Database element for a given data-tier package. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.ReadManagementModelSchema(System.IO.Stream)">
            <summary>
            Returns Management Model namespace defined inside a given data-tier package. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DacUtilities.TryReadTextContents(System.String,System.String,System.String@)">
            <summary>
            Returns text contents of a stream defined inside a given data-tier package. 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem">
            <summary>
            Aggregates an MSBuild BuildItem and treats it like an ITaskItem
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.#ctor(System.String)">
            <summary>
            This type provides for filenames to carry metadata
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.#ctor(Microsoft.Build.Evaluation.ProjectItem,System.String)">
            <summary>
            See vsproject\xmake\XMakeBuildEngine\Items\BuildItem.cs GetMetadata.  There is a bug
            in the BuildItem calculation of FullPath which assumes CWD is the project directory.
            </summary>
            <param name="buildItem"></param>
            <param name="fullPath"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.BuildItem">
            <summary>
            This is the build item we aggregate.  NOTE: as of MSBuild 4.0
            we can no longer just create one.  We need to simulate a BuildItem if
            it's not available.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.FullPath">
            <summary>
            The full path to this file
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.CloneCustomMetadata">
            <summary>
            See vsproject\xmake\Utilities\TaskItem.cs.  The return from this item
            is a Hashtable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Copy the metadata (but not the ItemSpec) to destinationItem. If a particular metadata already exists on the
            destination item, then it is not overwritten -- the original value wins.
            </summary>
            <owner>psirr</owner>
            <param name="destinationItem">The item to copy metadata to.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.DatabaseTaskItem.ItemSpec">
            <summary>
            Returns the relative path to the file.  For the absolute path call
            myTaskItem.GetMetadata(MSBuildConsts.Metadata_FullPath).
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.ProcessingLargeFile">
            <summary>
            This event is raised when we start processing a large file
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.GetResults(System.Exception@,System.Object@,System.Collections.Generic.IList{System.Tuple{System.String,System.String}}@)">
            <summary>
            Returns the results for the job
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WaitForJobToComplete(System.Int32)">
            <summary>
            Waits for this job to complete.  This call blocks until the
            job has finished or timeoutSpanInMS milliseconds have gone by
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WaitForJobToComplete">
            <summary>
            Waits for this job to complete.  This call blocks until the
            job has finished
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.IsJobRunning">
            <summary>
            Returns true if the job is still running
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.SuppressAllExceptions">
            <summary>
            Forces a cancel of this job by disposing of the DataSchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.BatchLoadOrUpdate(Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle},System.Int32,System.Int32,System.Collections.Generic.List{System.String}@,System.Exception@)">
            <summary>
            This is the BatchLoadOrUpdate used when adding files into the project that appear
            in the project file.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList">
            <summary>
            The is the work to be performed by the model builder job
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.TryGetWorkload(System.Int32@)">
            <summary>
            Get the amount of work in the queues
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.Add(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle})">
            <summary>
            Adds a list of files to be processed by this job
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.AddAttempted(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle},System.Int32)">
            <summary>
            Remove this item from the work list
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.Remove(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Removes these TaskItems (source files) from the schema manager.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.RemoveAttempted(System.String)">
            <summary>
            Remove this item from the work list
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.AddOrUpdate(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Adds custom schema data to be processed by this job
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.AddOrUpdateAttempted(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Remove this item from the work list
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.RemoveCustomSchemaData(System.String)">
            <summary>
            Adds custom schema data which is to be removed from the model
            to this job's queued work.
            </summary>
            <param name="fullPathFilename"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.RemoveCustomSchemaDataAttempted(System.String)">
            <summary>
            Remove this item from the work list
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.IsEmpty">
            <summary>
            Do we have any work to do
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.GetFiles(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Returns the full path filenames for all files in the list
            </summary>
            <param name="unprocessedFiles"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.GetFilesAttemptedAndClear(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Returns a list of files we attempted to load into the model (successful or not)
            </summary>
            <param name="unprocessedFiles"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ModelBuilderJob.WorkList.GetWork(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Returns the work that must be performed
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PlatformCompatibility">
            <summary>
            Defines compatibility relationships for the various SQL platforms.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PlatformCompatibility.#cctor">
            <summary>
            Static constructor/one time initialization
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PlatformCompatibility.IsCompatible(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            True if the source model can be deployed to the target.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PlatformCompatibility.DeterminePlatform(System.Type)">
            <summary>
            Determines the SqlPlatform that corresponds to a given DSP type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PlatformCompatibility.CreateUnrecognizedPlatformException(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Helper method for generating an exception associated with an unrecognized platform.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties">
            <summary>
            This class contains the agnostic project properties
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Versions.IsValidVersion(System.String)">
            <summary>
            Is the project version valid?
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Versions.VersionStringToMajorMinor(System.String,System.Int32@,System.Int32@)">
            <summary>
            Returns the major/minor for the version string
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Versions.IsLaterProjectVersion(System.String)">
            <summary>
            Is the version string later then one we can handle?
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.PreviousProjectVersion">
            <summary>
            This is the project version we upgraded from.  It is used so 
            that features know the project should be upgraded.  We can't do this in
            IVsProjectUpgradeViaFactory because that interface is called prior to
            the project file being loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.DSP">
            <summary>
            This is the property in the project file identifying the DSP we're to create.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.ValidateCasingOnIdentifiers">
            <summary>
            Since model collation is latin general CI, this flag indicates that the
            validation engine should show errors for identifiers which don't match in case.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.ModelCollation">
            <summary>
            This is the collation used when creating the project model
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.TargetLanguage">
            <summary>
            The target Language to use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.PostConversionRemoveFromScc">
            <summary>
            This is a list of files we need to remove from SCC after a conversion
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.PostConversionAddToScc">
            <summary>
            This is a list of files we need to add to SCC after a conversion
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.PostConversionCheckOutFromScc">
            <summary>
            This is a list of files we need to check out from SCC after a conversion
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.DefaultFileStructure">
            <summary>
            The solution explorer file structure
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Project.CopyToOutputDirectory">
            <summary>
            Place this on Build items copy them to the output directory.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.DeploymentConfig.CompareUsingTargetCollation">
            <summary>
            Database Deployment Collation Pref
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.CompatibilityMode">
            <summary>
            This is Compat Level of the sql project
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DatabaseState">
            <summary>
            SqlDatabaseOptions.IsOffline
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.UpdateOptions">
            <summary>
            SqlDatabaseOptions.IsReadonly
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DefaultCursor">
            <summary>
            SqlDatabaseOptions.IsCursorDefaultScopeGlobal
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DatabaseAccess">
            <summary>
            SqlDatabaseOptions.UserAccess
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.Recovery">
            <summary>
            SqlDatabaseOptions.RecoveryMode
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DelayedDurability">
            <summary>
            SqlDatabaseOptions.DelayedDurabilityMode
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.ServiceBrokerOption">
            <summary>
            SqlDatabaseOptions.ServiceBrokerOption
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.PageVerify">
            <summary>
            SqlDatabaseOptions.PageVerifyMode
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.Parameterization">
            <summary>
            SqlDatabaseOptions.ParameterizationOption
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.ChangeTrackingRetentionUnit">
            <summary>
            SqlDatabaseOptions.ChangeTrackingRetentionUnit
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.Containment">
            <summary>
            SqlDatabaseOptions.Containment
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.NonTransactedFileStreamAccess">
            <summary>
            SqlDatabaseOptions.NonTransactedFileStreamAccess
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.TargetRecoveryTimePeriod">
            <summary>
            SqlDatabaseOptions.TargetRecoveryTimePeriod 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.TargetRecoveryTimeUnit">
            <summary>
            SqlDatabaseOptions.TargetRecoveryTimeUnit
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreCaptureMode">
            <summary>
            SqlDatabaseOptions.QueryStoreCaptureMode
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.CatalogCollation">
            <summary>
            SqlDatabaseOptions.CatalogCollation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreDesiredState">
            <summary>
            SqlDatabaseOptions.QueryStoreDesiredState
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreFlushInterval">
            <summary>
            SqlDatabaseOptions.QueryStoreFlushInterval 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreIntervalLength">
            <summary>
            SqlDatabaseOptions.QueryStoreIntervalLength 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreMaxStorageSize">
            <summary>
            SqlDatabaseOptions.QueryStoreMaxStorageSize 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreMaxPlansPerQuery">
            <summary>
            SqlDatabaseOptions.QueryStoreMaxPlansPerQuery 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.QueryStoreStaleQueryThreshold">
            <summary>
            SqlDatabaseOptions.QueryStoreStaleQueryThreshold 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigMaxDOP">
            <summary>
            SqlDatabaseOptions.DbScopedConfigMaxDOP 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigMaxDOPSecondary">
            <summary>
            SqlDatabaseOptions.DbScopedConfigMaxDOPSecondary 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigParameterSniffing">
            <summary>
            SqlDatabaseOptions.DbScopedConfigParameterSniffing 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigParameterSniffingSecondary">
            <summary>
            SqlDatabaseOptions.DbScopedConfigParameterSniffingSecondary 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigLegacyCardinalityEstimation">
            <summary>
            SqlDatabaseOptions.DbScopedConfigLegacyCardinalityEstimation 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigLegacyCardinalityEstimationSecondary">
            <summary>
            SqlDatabaseOptions.DbScopedConfigLegacyCardinalityEstimationSecondary 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigOptimizerHotfixes">
            <summary>
            SqlDatabaseOptions.DbScopedConfigOptimizerHotfixes 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigOptimizerHotfixesSecondary">
            <summary>
            SqlDatabaseOptions.DbScopedConfigOptimizerHotfixesSecondary 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DbScopedConfigDWCompatibilityLevel">
            <summary>
            SqlDatabaseOptions.DbScopedConfigDWCompatibilityLevel 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.TemporalHistoryRetentionEnabled">
            <summary>
            SqlDatabaseOptions.TemporalHistoryRetentionEnabled 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.DataRetentionEnabled">
            <summary>
            SqlDatabaseOptions.DataRetentionEnabled
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.Catalog.IsLedgerOn">
            <summary>
            SqlDatabaseOptions.IsLedgerOn
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.GetValidators">
            <summary>
            Returns the validators used to make sure the properties are ok in the
            property files
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.ProjectProperties.SqlCmdVariable">
            <summary>
            Used to build data for sqlcmd variables as such...
            
            <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
              <ItemGroup>
                    <SqlCmdVariable Include="myVar1">
                        <DefaultValue>OtherDatabaseDefaultValue1</DefaultValue>
                        <Value>$(SQLCMDVAR__1)</Value>;
                    </SqlCmdVariable>
                    <SqlCmdVariable Include="myVar2">
                        <DefaultValue>OtherServerDefaultValue2</DefaultValue>
                        <Value>$(SQLCMDVAR__2)</Value>
                    </SqlCmdVariable>
               </ItemGroup>
            
              <ItemGroup>
                <ProjectReference Include="..\Database1\Database1.sqlproj">
                  <Name>Database1</Name>
                  <Project>{db2d2f09-f922-4c84-91b7-9552b8d97adb}</Project>
                  <DatabaseSqlCmdVariable>myVar1</DatabaseSqlCmdVariable>
                  <ServerSqlCmdVariable>myVar2</ServerSqlCmdVariable>
                </ProjectReference>
              </ItemGroup>
            </Project>
            
            In the .user file
              <PropertyGroup>
                    <SQLCMDVAR__1>MyUserValue</SQLCMDVAR__1>
              </PropertyGroup>
            
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.IPropertyValidator">
            <summary>
            Interface which identifies a class as capable of
            validating project properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.IPropertyValidator.Validate(System.Object)">
            <summary>
            Is this valid valid for the expected types?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.IPropertyValidator.AllowNullOrEmpty">
            <summary>
            Is null or empty allowed for the value
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorBool">
            <summary>
            Validate the property as an bool
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorBool.Validate(System.Object)">
            <summary>
            Is this a valid bool value?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorBool.GetValue(System.Object,System.Boolean@)">
            <summary>
            Returns the value of the value as an bool
            </summary>
            <param name="value"></param>
            <param name="boolValue"></param>
            <returns>Did we successfully convert value to an bool</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorDbScopedConfigMaxDOPSecondary">
            <summary>
            Property validator used for Database Scoped Configuration MAXDOP value for secondary databases.
            Allowed values are 0 through 99999 or Primary.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorInt">
            <summary>
            Validate the property as an int
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorInt.Validate(System.Object)">
            <summary>
            Is this a valid integer value?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorInt.GetValue(System.Object,System.Int32@)">
            <summary>
            Returns the value of the value as an int
            </summary>
            <param name="value"></param>
            <param name="intValue"></param>
            <returns>Did we successfully convert value to an int</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorList">
            <summary>
            Validate the property as one of several string values
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorList.Validate(System.Object)">
            <summary>
            Is this a valid string value?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorList.GetValue(System.Object,System.String@)">
            <summary>
            Returns the value of the value as a string
            </summary>
            <param name="value"></param>
            <param name="strValue"></param>
            <returns>Did we successfully convert value to a string</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorModelCollation">
            <summary>
            Validate the property as an bool
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorModelCollation.Validate(System.Object)">
            <summary>
            Is this a valid Model collation value?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorModelCollation.GetValue(System.Object,System.String@)">
            <summary>
            Returns the value of the value as a string
            </summary>
            <param name="value"></param>
            <param name="stringValue"></param>
            <returns>Did we successfully convert value to a string</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorModelCollation.ConvertToModelCollation(System.String)">
            <summary>
            Splits the string into LCID + CS flag.  The string should be of the
            form 1033,CS.
            
            The 1033 is the lcid, true means CS
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.PropertyValidatorModelCollation.TryConvertToModelCollation(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation@)">
            <summary>
            Splits the string into LCID + CS flag.  The string should be of the
            form 1033,True.
            
            The 1033 is the lcid, true means CS
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage">
            <summary>
            Represents the container of artifacts generated from a .sqlproj
            </summary>    
            <summary>
            Represents the container of artifacts generated from a .sqlproj
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.SqlPackageCachedStream">
            <summary>
            Implementation of SqlPackage that provides access to packaged build output.
            </summary>        
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.#ctor(System.IO.FileInfo,System.IO.FileAccess)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.#ctor(System.IO.FileInfo,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact"/> class
            using the supplied stream as the backing storage for the package.
            </summary>
            <param name="stream">
            <see cref="T:System.IO.Stream"/> used as the backing storage for the package.
            Note that this instance does not take ownership of the stream; meaning it will not be disposed when this instance is disposed.
            </param>
            <param name="access">
            Specifies access mode of package.
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.#ctor(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact"/> class
            using the supplied stream as the backing storage for the package.
            </summary>
            <param name="stream">
            <see cref="T:System.IO.Stream"/> used as the backing storage for the package.
            Note that this instance does not take ownership of the stream; meaning it will not be disposed when this instance is disposed.
            </param>
            <param name="mode">FileMode used to access the stream - must be one of <see cref="F:System.IO.FileMode.Open"/>, 
            <see cref="F:System.IO.FileMode.OpenOrCreate"/>, or <see cref="F:System.IO.FileMode.Create"/>
            </param>
            <param name="access">
            Specifies access mode of package.
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.Dispose(System.Boolean)">
            <summary>
            Allows this subclass to perform required clean-up.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.FullName">
            <summary>
            Gets the full path to the package file artifact associated with this object.
            </summary>
            <value>
            String that specifies the full path to the package file;
            otherwise a null reference if the package was not sourced from a file.
            </value>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.Access">
            <summary>
            Gets the file-access mode for the package file artifact associated with this object.
            </summary>
            <returns>FileAccess.Read or FileAccess.Write</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.GetContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Accessor method for reading or writing content to the package based on the package access mode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.GetContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType,System.IO.FileAccess)">
            <summary>
            Accessor method for reading or writing content to the package based on the given file access mode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.HasContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Query method for determining if the package contains content of the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.ContainsData">
            <summary>
            Query method for determining if the package contains data stream
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.CreatePartUri(System.String)">
            <summary>
            Helper method for generating the uri for package content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.GetContentMetaData(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Helper method for retrieving meta-data associated with the specified content type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.GetPackagePart(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ContentMetaData,System.IO.FileAccess)">
            <summary>
            Helper method for retrieving the package content/part described by the specified meta-data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Artifact.GetPackagePart(System.String,System.String,System.IO.FileAccess)">
            <summary>
            Helper method for retrieving the specified package content/part.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ArtifactContent">
            <summary>
            Exposes discrete content contained within a SqlPackage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ArtifactContent.#ctor(System.IO.Packaging.PackagePart,System.IO.FileAccess,Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType,System.Func{System.IO.Stream})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ArtifactContent.GetInputStream">
            <summary>
            Provides a read-only stream associated with the current content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ArtifactContent.GetOutputStream">
            <summary>
            Provides a writeable stream associated with the current content.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ContentMetaData">
            <summary>
            Defines metadata associated with a given SqlPackageContentType.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ContentMetaData.ContentType">
            <summary>
            Gets the mime-type for the associated content.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ContentMetaData.ContentName">
            <summary>
            Gets the file name for the associated content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Open(System.String,System.IO.FileAccess)">
            <summary>
            Opens a package at a given path.  If the package does not exist, it is opened 
            for write access; otherwise, it is opened for read-only access.
            </summary>
            <param name="file">Specifies the path to the package</param>
            <param name="access"> </param>
            <returns>The opened package</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Open(System.IO.FileInfo,System.IO.FileAccess)">
            <summary>
            Opens a package at a given path.  If the package does not exist, it is opened 
            for write access; otherwise, it is opened for read-only access.
            </summary>
            <param name="fileInfo">Specifies the path to the package</param>
            <param name="access"> </param>
            <returns>The opened package</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.OpenForUpdate(System.IO.FileInfo)">
            <summary>
            Opens a package at a given path for write access, even if the package already exists.
            </summary>
            <param name="fileInfo">Specifies the path to the package</param>
            <returns>The opened package</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.OpenForUpdate(System.IO.Stream)">
            <summary>
            Opens a package represented by a given stream for write access, even if the package already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Dispose">
            <summary>
            Performs required clean-up.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Dispose(System.Boolean)">
            <summary>
            Allows subclasses to perform required clean-up.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.FullName">
            <summary>
            Gets the full path to the package file artifact associated with this object.
            </summary>
            <value>
            String that specifies the full path to the package file;
            otherwise a null reference if the package was not sourced from a file.
            </value>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.Access">
            <summary>
            Gets the file-access mode for the package file artifact associated with this object.
            </summary>
            <returns>FileAccess.Read or FileAccess.Write</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.GetContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Accessor method for reading or writing content to the package based on the package access mode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.GetContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType,System.IO.FileAccess)">
            <summary>
            Accessor method for reading or writing content to the package based on the given file access mode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.HasContent(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Query method for determining if the package contains content of the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage.ContainsData">
            <summary>
            Query method for determining if the package contains data stream
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent">
            <summary>
            Exposes discrete content contained within a SqlPackage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.#ctor(System.IO.FileAccess,Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.Access">
            <summary>
            Gets the file-access mode for the package file artifact associated with this object.
            </summary>
            <returns>FileAccess.Read or FileAccess.Write</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.ContentType">
            <summary>
            Gets the type of content exposed by this object.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.GetStream">
            <summary>
            Provides access to the content stream associated with this object.
            </summary>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException">Unable to acess</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.GetInputStream">
            <summary>
            Provides a read-only stream associated with the current content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContent.GetOutputStream">
            <summary>
            Provides a writeable stream associated with the current content.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType">
            <summary>
            Defines the various types of content supported within a SqlPackage.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.Model">
            <summary>
            Content type representing the serialized model (required)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.RefactorLog">
            <summary>
            Content type representing the refactor log (optional)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.ScriptPostDeployment">
            <summary>
            Content type representing the post deployment script (optional)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.ScriptPreDeployment">
            <summary>
            Content type representing the pre deployment script (optional)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.DacMetadata">
            <summary>
            Content type representing the DAC metadata(required)
            It contains mandatory DAC application name and version and 
            optional DAC application description
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.DacOrigin">
            <summary>
            Content type representing the DAC operational info
            It mainly contains the time the operation performed, the statistics
            data about the database involved, and checksums for some streams
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageContentType.ContributorArtifact">
            <summary>
            Content type representing data stored by a contributor
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException">
            <summary>
            Exception class associated with unexpected failures using the SqlPackage API.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException.#ctor(System.Exception)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException.#ctor(System.String)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.SqlPropertiesHelper.ConvertCollation(System.Object,Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation@)">
            <summary>
            Convert the Deployment Collation to a Sql CE Model Collation
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext">
            <summary>
            Used to serialize the task host
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext.DatabaseSchemaProvider">
            <summary>
            The current DSP
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext.DataSchemaModel">
            <summary>
            The current model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext.ModelStore">
            <summary>
            Returns the current model as a store
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext.IdeMode">
            <summary>
            Are we serializing in the context of the VS ide?
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Build.TaskHostSerializationContext.Dispose">
            <summary>
            Clears the context of any data to free up memory.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Action">
            <summary>
              Looks up a localized string similar to Specifies the action to be performed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorArguments">
            <summary>
              Looks up a localized string similar to Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorArguments_FriendlyName">
            <summary>
              Looks up a localized string similar to Additional deployment contributor arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorConfigurationFiles">
            <summary>
              Looks up a localized string similar to Specifies additional deployment contributor configuration files for the deployment contributors. This property should be a semi-colon delimited list of file paths..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorConfigurationFiles_FriendlyName">
            <summary>
              Looks up a localized string similar to Additional deployment contributor configuration files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorPaths">
            <summary>
              Looks up a localized string similar to Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributorPaths_FriendlyName">
            <summary>
              Looks up a localized string similar to Additional paths to load deployment contributor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributors">
            <summary>
              Looks up a localized string similar to Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalDeploymentContributors_FriendlyName">
            <summary>
              Looks up a localized string similar to Additional deployment contributors.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalImportContributorPaths">
            <summary>
              Looks up a localized string similar to Specifies paths to load additional import contributors. This should be a semi-colon delimited list of values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AdditionalImportContributorPaths_FriendlyName">
            <summary>
              Looks up a localized string similar to Additional paths to load import contributor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowDropBlockingAssemblies">
            <summary>
              Looks up a localized string similar to This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowDropBlockingAssemblies_FriendlyName">
            <summary>
              Looks up a localized string similar to Allow drop blocking assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowExternalLanguagePaths">
            <summary>
              Looks up a localized string similar to Allows file paths, if available, to be used to generate external language statements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowExternalLanguagePaths_FriendlyName">
            <summary>
              Looks up a localized string similar to Use file paths for external language.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowExternalLibraryPaths">
            <summary>
              Looks up a localized string similar to Allows file paths, if available, to be used to generate external library statements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowExternalLibraryPaths_FriendlyName">
            <summary>
              Looks up a localized string similar to Use file paths for external libraries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowIncompatiblePlatform">
            <summary>
              Looks up a localized string similar to Specifies whether to attempt the action despite incompatible SQL Server platforms..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowIncompatiblePlatform_FriendlyName">
            <summary>
              Looks up a localized string similar to Allow incompatible platform.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowUnsafeRowLevelSecurityDataMovement">
            <summary>
              Looks up a localized string similar to Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AllowUnsafeRowLevelSecurityDataMovement_FriendlyName">
            <summary>
              Looks up a localized string similar to Allow unsafe row level security data movement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AlwaysCreateNewDatabase">
            <summary>
              Looks up a localized string similar to Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AlwaysCreateNewDatabase_FriendlyName">
            <summary>
              Looks up a localized string similar to Always create new database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiNulls">
            <summary>
              Looks up a localized string similar to Specifies the ANSI_NULLS connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiNulls_FriendlyName">
            <summary>
              Looks up a localized string similar to AnsiNulls.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiPadding">
            <summary>
              Looks up a localized string similar to Specifies the ANSI_PADDING connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiPadding_FriendlyName">
            <summary>
              Looks up a localized string similar to AnsiPadding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiWarnings">
            <summary>
              Looks up a localized string similar to Specifies the ANSI_WARNINGS connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AnsiWarnings_FriendlyName">
            <summary>
              Looks up a localized string similar to AnsiWarnings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ArgumentCannotBeADirectory">
            <summary>
              Looks up a localized string similar to The {0} argument cannot reference a directory..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ArithAbort">
            <summary>
              Looks up a localized string similar to Specifies the ARITH_ABORT connection setting. This setting overrides the corresponding value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ArithAbort_FriendlyName">
            <summary>
              Looks up a localized string similar to ArithAbort.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureSharedAccessSignatureToken">
            <summary>
              Looks up a localized string similar to Azure shared access signature (SAS) token with access to the storage container path to authenticate with using Shared Access Signature identity..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureSharedAccessSignatureToken_FriendlyName">
            <summary>
              Looks up a localized string similar to Azure shared access signature token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureSharedAccessSignatureToken_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageBlobEndpoint">
            <summary>
              Looks up a localized string similar to Azure blob storage endpoint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageBlobEndpoint_FriendlyName">
            <summary>
              Looks up a localized string similar to AzureStorageBlobEndpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageBlobEndpoint_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageContainer">
            <summary>
              Looks up a localized string similar to Azure blob storage container..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageContainer_FriendlyName">
            <summary>
              Looks up a localized string similar to Azure blob storage container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageContainer_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageKey">
            <summary>
              Looks up a localized string similar to Azure storage account key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageKey_FriendlyName">
            <summary>
              Looks up a localized string similar to AzureStorageKey.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageKey_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageRootPath">
            <summary>
              Looks up a localized string similar to Storage root path within the container. Without this property, the path defaults to `servername/databasename/timestamp/`..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageRootPath_FriendlyName">
            <summary>
              Looks up a localized string similar to Azure storage root path.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.AzureStorageRootPath_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BackupDatabaseBeforeChanges">
            <summary>
              Looks up a localized string similar to Backups the database before deploying any changes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BackupDatabaseBeforeChanges_FriendlyName">
            <summary>
              Looks up a localized string similar to Backup database before changes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockIncrementalDeploymentIfDataLoss">
            <summary>
              Looks up a localized string similar to Specifies that the publish episode should be terminated if there is a possibility of data loss resulting from the publish operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockIncrementalDeploymentIfDataLoss_FriendlyName">
            <summary>
              Looks up a localized string similar to Block incremental deployment if data loss.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockOnPossibleDataLoss">
            <summary>
              Looks up a localized string similar to Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be conve [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockOnPossibleDataLoss_FriendlyName">
            <summary>
              Looks up a localized string similar to Block on possible data loss.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockWhenDriftDetected">
            <summary>
              Looks up a localized string similar to Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.BlockWhenDriftDetected_FriendlyName">
            <summary>
              Looks up a localized string similar to Block on schema registration drift.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CommandTimeout">
            <summary>
              Looks up a localized string similar to Specifies the command timeout in seconds when executing queries against SQL Server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CommandTimeout_FriendlyName">
            <summary>
              Looks up a localized string similar to Command timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CommentOutSetVarDeclarations">
            <summary>
              Looks up a localized string similar to Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CommentOutSetVarDeclarations_FriendlyName">
            <summary>
              Looks up a localized string similar to Comment out SetVar declarations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CompareUsingTargetCollation">
            <summary>
              Looks up a localized string similar to This setting dictates how the database&apos;s collation is handled during deployment; by default the target database&apos;s collation will be updated if it does not match the collation specified by the source. When this option is set, the target database&apos;s (or server&apos;s) collation should be used..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CompareUsingTargetCollation_FriendlyName">
            <summary>
              Looks up a localized string similar to Compare using target collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CompressionOption">
            <summary>
              Looks up a localized string similar to Specifies the type of compression. The default is Normal..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CompressionOption_FriendlyName">
            <summary>
              Looks up a localized string similar to Compression type in target file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ConcatNullYieldsNull">
            <summary>
              Looks up a localized string similar to Specifies the CONCAT_NULL_YIELDS_NULL connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ConcatNullYieldsNull_FriendlyName">
            <summary>
              Looks up a localized string similar to ConcatNullYieldsNull.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CreateNewDatabase">
            <summary>
              Looks up a localized string similar to Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.CreateNewDatabase_FriendlyName">
            <summary>
              Looks up a localized string similar to Create new database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseEdition">
            <summary>
              Looks up a localized string similar to Defines the edition of an Azure SQL Database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseEdition_FriendlyName">
            <summary>
              Looks up a localized string similar to Database edition.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseEdition_onlineAddendum">
            <summary>
              Looks up a localized string similar to See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseLockTimeout">
            <summary>
              Looks up a localized string similar to Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseLockTimeout_FriendlyName">
            <summary>
              Looks up a localized string similar to Database lock timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseMaximumSize">
            <summary>
              Looks up a localized string similar to Defines the maximum size in GB of an Azure SQL Database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseMaximumSize_FriendlyName">
            <summary>
              Looks up a localized string similar to Database maximum size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseServiceObjective">
            <summary>
              Looks up a localized string similar to Defines the performance level of an Azure SQL Database such as &quot;P0&quot; or &quot;S1&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseServiceObjective_FriendlyName">
            <summary>
              Looks up a localized string similar to Database service objective.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseSpecification">
            <summary>
              Looks up a localized string similar to Defines optional parameters specific to a Microsoft Azure SQL Database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DatabaseSpecification_FriendlyName">
            <summary>
              Looks up a localized string similar to Optional database parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DeployDatabaseInSingleUserMode">
            <summary>
              Looks up a localized string similar to if true, the database is set to Single User Mode before deploying..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DeployDatabaseInSingleUserMode_FriendlyName">
            <summary>
              Looks up a localized string similar to Deploy database in single user mode .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DeploymentError">
            <summary>
              Looks up a localized string similar to Deployment Error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableAndReenableDdlTriggers">
            <summary>
              Looks up a localized string similar to Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableAndReenableDdlTriggers_FriendlyName">
            <summary>
              Looks up a localized string similar to Disable and reenable DDL triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableIndexesForDataPhase">
            <summary>
              Looks up a localized string similar to Disable indexes before importing data into SQL Server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableIndexesForDataPhase_FriendlyName">
            <summary>
              Looks up a localized string similar to Disable indexes for data phase.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableParallelismForEnablingIndexes">
            <summary>
              Looks up a localized string similar to Not using parallelism when rebuilding indexes while importing data into SQL Server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DisableParallelismForEnablingIndexes_FriendlyName">
            <summary>
              Looks up a localized string similar to Disable parallelism for enabling indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterChangeDataCaptureObject">
            <summary>
              Looks up a localized string similar to Specifies whether objects with data cpature are identified during verification..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterChangeDataCaptureObject_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not ALTER change data capture object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterChangeDataCaptureObjects">
            <summary>
              Looks up a localized string similar to If true, Change Data Capture objects are not altered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterChangeDataCaptureObjects_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not alter Change Data Capture objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterReplicatedObjects">
            <summary>
              Looks up a localized string similar to Specifies whether objects that are replicated are identified during verification..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotAlterReplicatedObjects_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not ALTER replicated objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAggregates">
            <summary>
              Looks up a localized string similar to When false, Aggregates in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAggregates_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop aggregates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropApplicationRoles">
            <summary>
              Looks up a localized string similar to When false, Application Roles in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropApplicationRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop application roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAssemblies">
            <summary>
              Looks up a localized string similar to When false, Assemblies in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAssemblies_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAsymmetricKeys">
            <summary>
              Looks up a localized string similar to When false, Asymmetric Keys in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAsymmetricKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop asymmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAudits">
            <summary>
              Looks up a localized string similar to When false, Audits in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropAudits_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop audits.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropBrokerPriorities">
            <summary>
              Looks up a localized string similar to When false, Broker Priorities in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropBrokerPriorities_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop broker priorities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCertificates">
            <summary>
              Looks up a localized string similar to When false, Certificates in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCertificates_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop certificates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropClrUserDefinedTypes">
            <summary>
              Looks up a localized string similar to When false, Clr User Defined Types in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropClrUserDefinedTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop clr user defined types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropColumnEncryptionKeys">
            <summary>
              Looks up a localized string similar to When false, column encryption keys in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropColumnEncryptionKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop column encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropColumnMasterKeys">
            <summary>
              Looks up a localized string similar to When false, column master keys in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropColumnMasterKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop column master keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropContracts">
            <summary>
              Looks up a localized string similar to When false, Contracts in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropContracts_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCredentials">
            <summary>
              Looks up a localized string similar to When false, Credentials in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCredentials_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCryptographicProviders">
            <summary>
              Looks up a localized string similar to When false, Cryptographic Providers in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropCryptographicProviders_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop cryptographic providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseAuditSpecifications">
            <summary>
              Looks up a localized string similar to When false, Database Audit Specifications in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseAuditSpecifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop database audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseEncryptionKeys">
            <summary>
              Looks up a localized string similar to When false, Database Encryption Keys in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseEncryptionKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop database encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseRoles">
            <summary>
              Looks up a localized string similar to When false, Database Roles in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop database roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseScopedCredentials">
            <summary>
              Looks up a localized string similar to When false, Database scoped credentials in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseScopedCredentials_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop database scoped credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseTriggers">
            <summary>
              Looks up a localized string similar to When false, Database Triggers in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseTriggers_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop database triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseWorkloadGroups">
            <summary>
              Looks up a localized string similar to When false, Database WorkloadGroups in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDatabaseWorkloadGroups_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop Database workload groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDefaults">
            <summary>
              Looks up a localized string similar to When false, Defaults in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropDefaults_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEndpoints">
            <summary>
              Looks up a localized string similar to When false, Endpoints in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEndpoints_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop endpoints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropErrorMessages">
            <summary>
              Looks up a localized string similar to When false, Error Messages in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropErrorMessages_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop error messages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEventNotifications">
            <summary>
              Looks up a localized string similar to When false, Event Notifications in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEventNotifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop event notifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEventSessions">
            <summary>
              Looks up a localized string similar to When false, Event Sessions in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropEventSessions_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop event sessions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExtendedProperties">
            <summary>
              Looks up a localized string similar to When false, Extended Properties in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExtendedProperties_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalDataSources">
            <summary>
              Looks up a localized string similar to When false, External Data Sources in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalDataSources_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external data sources.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalFileFormats">
            <summary>
              Looks up a localized string similar to When false, External File Formats in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalFileFormats_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external file formats.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalLanguages">
            <summary>
              Looks up a localized string similar to When false, External Languages in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalLanguages_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external languages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalLibraries">
            <summary>
              Looks up a localized string similar to When false, External Libraries in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalLibraries_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external libraries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalStreamingJobs">
            <summary>
              Looks up a localized string similar to When false, External Streaming Jobs in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalStreamingJobs_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external streaming jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalStreams">
            <summary>
              Looks up a localized string similar to When false, External Streams in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalStreams_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external streams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalTables">
            <summary>
              Looks up a localized string similar to When false, External Tables in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropExternalTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop external tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFilegroups">
            <summary>
              Looks up a localized string similar to When false, Filegroups in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFilegroups_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop filegroups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFiles">
            <summary>
              Looks up a localized string similar to When false, Files in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFiles_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFileTables">
            <summary>
              Looks up a localized string similar to When false, File Tables in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFileTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop file tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFullTextCatalogs">
            <summary>
              Looks up a localized string similar to When false, Full Text Catalogs in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFullTextCatalogs_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop full text catalogs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFullTextStoplists">
            <summary>
              Looks up a localized string similar to When false, Full Text Stoplists in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropFullTextStoplists_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop full text stoplists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLinkedServerLogins">
            <summary>
              Looks up a localized string similar to When false, Linked Server Logins in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLinkedServerLogins_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop linked server logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLinkedServers">
            <summary>
              Looks up a localized string similar to When false, Linked Servers in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLinkedServers_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop linked servers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLogins">
            <summary>
              Looks up a localized string similar to When false, Logins in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropLogins_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropMessageTypes">
            <summary>
              Looks up a localized string similar to When false, Message Types in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropMessageTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop message types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropObjectTypes">
            <summary>
              Looks up a localized string similar to Specifies a set of object types that will not be dropped from the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropObjectTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop object types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPartitionFunctions">
            <summary>
              Looks up a localized string similar to When false, Partition Functions in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPartitionFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop partition functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPartitionSchemes">
            <summary>
              Looks up a localized string similar to When false, Partition Schemes in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPartitionSchemes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop partition schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPermissions">
            <summary>
              Looks up a localized string similar to When false, Permissions in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropPermissions_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropQueues">
            <summary>
              Looks up a localized string similar to When false, Queues in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropQueues_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop queues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRemoteServiceBindings">
            <summary>
              Looks up a localized string similar to When false, Remote Service Bindings in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRemoteServiceBindings_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop remote service bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRoleMembership">
            <summary>
              Looks up a localized string similar to When false, Role Members in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRoleMembership_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop role membership.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRoutes">
            <summary>
              Looks up a localized string similar to When false, Routes in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRoutes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop routes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRules">
            <summary>
              Looks up a localized string similar to When false, Rules in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropRules_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop rules.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropScalarValuedFunctions">
            <summary>
              Looks up a localized string similar to When false, Scalar Valued Functions in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropScalarValuedFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop scalar valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSearchPropertyLists">
            <summary>
              Looks up a localized string similar to When false, Search Property Lists in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSearchPropertyLists_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop search property lists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSecurityPolicies">
            <summary>
              Looks up a localized string similar to When false, Security Policies in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSecurityPolicies_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop security policies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSequences">
            <summary>
              Looks up a localized string similar to When false, Sequences in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSequences_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop sequences.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerAuditSpecifications">
            <summary>
              Looks up a localized string similar to When false, Server Audit Specifications in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerAuditSpecifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop server audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerRoleMembership">
            <summary>
              Looks up a localized string similar to When false, Server Role Membership in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerRoleMembership_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop server role membership.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerRoles">
            <summary>
              Looks up a localized string similar to When false, Server Roles in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop server roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerTriggers">
            <summary>
              Looks up a localized string similar to When false, Server Triggers in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServerTriggers_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop server triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServices">
            <summary>
              Looks up a localized string similar to When false, Services in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropServices_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSignatures">
            <summary>
              Looks up a localized string similar to When false, Signatures in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSignatures_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop signatures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropStoredProcedures">
            <summary>
              Looks up a localized string similar to When false, Stored Procedures in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropStoredProcedures_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop stored procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSymmetricKeys">
            <summary>
              Looks up a localized string similar to When false, Symmetric Keys in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSymmetricKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop symmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSynonyms">
            <summary>
              Looks up a localized string similar to When false, Synonyms in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropSynonyms_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop synonyms.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropTables">
            <summary>
              Looks up a localized string similar to When false, Tables in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropTableValuedFunctions">
            <summary>
              Looks up a localized string similar to When false, Table Valued Functions in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropTableValuedFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop table valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUserDefinedDataTypes">
            <summary>
              Looks up a localized string similar to When false, User Defined Data Types in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUserDefinedDataTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop user defined data types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUserDefinedTableTypes">
            <summary>
              Looks up a localized string similar to When false, User Defined Table Types in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUserDefinedTableTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop user defined table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUsers">
            <summary>
              Looks up a localized string similar to When false, Users in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropUsers_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop users.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropViews">
            <summary>
              Looks up a localized string similar to When false, Views in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropViews_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropWorkloadClassifiers">
            <summary>
              Looks up a localized string similar to When false, WorkloadClassifiers in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropWorkloadClassifiers_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop workload classifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropXmlSchemaCollections">
            <summary>
              Looks up a localized string similar to When false, Xml Schema Collections in the target database that are not defined in the source will be dropped during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotDropXmlSchemaCollections_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not drop xml schema collections.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotEvaluateSqlCmdVariables">
            <summary>
              Looks up a localized string similar to Specifies whether SQLCMD variables to not replace with values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotEvaluateSqlCmdVariables_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not evaluate SQLCMD variables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotUseAlterAssemblyStatementsToUpdateCLRTypes">
            <summary>
              Looks up a localized string similar to Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DoNotUseAlterAssemblyStatementsToUpdateCLRTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Do not use alter assembly statements to update CLR types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropConstraintsNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropConstraintsNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop constraints not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropDmlTriggersNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropDmlTriggersNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop DML triggers not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropExtendedPropertiesNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropExtendedPropertiesNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop extended properties not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropIndexesNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropIndexesNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop indexes not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropObjectsNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropObjectsNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop objects not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropPermissionsNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropPermissionsNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop permissions not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropRoleMembersNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropRoleMembersNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop role members not defined in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropStatisticsNotInSource">
            <summary>
              Looks up a localized string similar to Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropStatisticsNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop statistics not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.DropSystemVersioningNotInSource_FriendlyName">
            <summary>
              Looks up a localized string similar to Drop system-versioning not in source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.EnclaveAttestationProtocol">
            <summary>
              Looks up a localized string similar to Specifies an attestation protocol to be used with enclave based Always Encrypted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.EnclaveAttestationProtocol_FriendlyName">
            <summary>
              Looks up a localized string similar to Enclave attestation protocol.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.EnclaveAttestationUrl">
            <summary>
              Looks up a localized string similar to Specifies the enclave attestation URL (an attestation service endpoint) to be used with enclave based Always Encrypted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.EnclaveAttestationUrl_FriendlyName">
            <summary>
              Looks up a localized string similar to Enclave attestation URL.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ErrorExecutingDacPostDeploymentScript">
            <summary>
              Looks up a localized string similar to Error Executing post-deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ErrorExecutingDacPreDeploymentScript">
            <summary>
              Looks up a localized string similar to Error Executing pre-deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ErrorInReverseEngineerOperation">
            <summary>
              Looks up a localized string similar to Error extracting database:{0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ErrorSavingReportToDisk">
            <summary>
              Looks up a localized string similar to Error saving report to disk: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAggregates">
            <summary>
              Looks up a localized string similar to When true, Aggregates will be excluded from consideration during deployment. No Aggregates will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAggregates_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude aggregates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeApplicationRoles">
            <summary>
              Looks up a localized string similar to When true, Application Roles will be excluded from consideration during deployment. No Application Roles will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeApplicationRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude application roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAssemblies">
            <summary>
              Looks up a localized string similar to When true, Assemblies will be excluded from consideration during deployment. No Assemblies will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAssemblies_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAssemblyFiles_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude Assembly Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAsymmetricKeys">
            <summary>
              Looks up a localized string similar to When true, Asymmetric Keys will be excluded from consideration during deployment. No Asymmetric Keys will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAsymmetricKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude asymmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAudits">
            <summary>
              Looks up a localized string similar to When true, Audits will be excluded from consideration during deployment. No Audits will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeAudits_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude audits.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeBrokerPriorities">
            <summary>
              Looks up a localized string similar to When true, Broker Priorities will be excluded from consideration during deployment. No Broker Priorities will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeBrokerPriorities_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude broker priorities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCertificates">
            <summary>
              Looks up a localized string similar to When true, Certificates will be excluded from consideration during deployment. No Certificates will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCertificates_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude certificates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeClrUserDefinedTypes">
            <summary>
              Looks up a localized string similar to When true, Clr User Defined Types will be excluded from consideration during deployment. No Clr User Defined Types will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeClrUserDefinedTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude clr user defined types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeColumnEncryptionKeys">
            <summary>
              Looks up a localized string similar to When true, column encryption keys will be excluded from consideration during deployment. No Column Encryption Keys will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeColumnEncryptionKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude column encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeColumnMasterKeys">
            <summary>
              Looks up a localized string similar to When true, column master keys will be excluded from consideration during deployment. No Column Master Keys will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeColumnMasterKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude column master keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeContracts">
            <summary>
              Looks up a localized string similar to When true, Contracts will be excluded from consideration during deployment. No Contracts will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeContracts_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCredentials">
            <summary>
              Looks up a localized string similar to When true, Credentials will be excluded from consideration during deployment. No Credentials will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCredentials_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCryptographicProviders">
            <summary>
              Looks up a localized string similar to When true, Cryptographic Providers will be excluded from consideration during deployment. No Cryptographic Providers will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeCryptographicProviders_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude cryptographic providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseAuditSpecifications">
            <summary>
              Looks up a localized string similar to When true, Database Audit Specifications will be excluded from consideration during deployment. No Database Audit Specifications will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseAuditSpecifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseEncryptionKeys">
            <summary>
              Looks up a localized string similar to When true, Database Encryption Keys will be excluded from consideration during deployment. No Database Encryption Keys will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseEncryptionKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseOptions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude Database Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseRoles">
            <summary>
              Looks up a localized string similar to When true, Database Roles will be excluded from consideration during deployment. No Database Roles will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseScopedCredentials">
            <summary>
              Looks up a localized string similar to When true, Database scoped credentials will be excluded from consideration during deployment. No Database credentials will be added, modified or dropped...
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseScopedCredentials_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database scoped credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseTriggers">
            <summary>
              Looks up a localized string similar to When true, Database Triggers will be excluded from consideration during deployment. No Database Triggers will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDatabaseTriggers_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDefaults">
            <summary>
              Looks up a localized string similar to When true, Defaults will be excluded from consideration during deployment. No Defaults will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeDefaults_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEndpoints">
            <summary>
              Looks up a localized string similar to When true, Endpoints will be excluded from consideration during deployment. No Endpoints will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEndpoints_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude endpoints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeErrorMessages">
            <summary>
              Looks up a localized string similar to When true, Error Messages will be excluded from consideration during deployment. No Error Messages will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeErrorMessages_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude error messages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEventNotifications">
            <summary>
              Looks up a localized string similar to When true, Event Notifications will be excluded from consideration during deployment. No Event Notifications will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEventNotifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude event notifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEventSessions">
            <summary>
              Looks up a localized string similar to When true, Event Sessions will be excluded from consideration during deployment. No Event Sessions will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeEventSessions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude event sessions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalDataSources">
            <summary>
              Looks up a localized string similar to When true, External Data Sources will be excluded from consideration during deployment. No External Data Sources will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalDataSources_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external data sources.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalFileFormats">
            <summary>
              Looks up a localized string similar to When true, External File Formats will be excluded from consideration during deployment. No External File Formats will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalFileFormats_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external file formats.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalLanguages">
            <summary>
              Looks up a localized string similar to When true, External Languages will be excluded from consideration during deployment. No External Languages will be added, modified, or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalLanguages_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external languages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalLibraries">
            <summary>
              Looks up a localized string similar to When true, External Libraries will be excluded from consideration during deployment. No External Libraries will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalLibraries_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external libraries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalStreamingJobs">
            <summary>
              Looks up a localized string similar to When true, External Streaming Jobs will be excluded from consideration during deployment. No External Streaming Jobs will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalStreamingJobs_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external streaming jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalStreams">
            <summary>
              Looks up a localized string similar to When true, External Streams will be excluded from consideration during deployment. No External Streams will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalStreams_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external streams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalTables">
            <summary>
              Looks up a localized string similar to When true, External Tables will be excluded from consideration during deployment. No External Tables will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeExternalTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude external tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFilegroups">
            <summary>
              Looks up a localized string similar to When true, Filegroups will be excluded from consideration during deployment. No Filegroups will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFilegroups_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude filegroups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFiles">
            <summary>
              Looks up a localized string similar to When true, Files will be excluded from consideration during deployment. No Files will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFiles_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFileTables">
            <summary>
              Looks up a localized string similar to When true, File Tables will be excluded from consideration during deployment. No File Tables will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFileTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude file tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFullTextCatalogs">
            <summary>
              Looks up a localized string similar to When true, Full Text Catalogs will be excluded from consideration during deployment. No Full Text Catalogs will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFullTextCatalogs_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude full text catalogs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFullTextStoplists">
            <summary>
              Looks up a localized string similar to When true, Full Text Stoplists will be excluded from consideration during deployment. No Full Text Stoplists will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeFullTextStoplists_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude full text stoplists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLinkedServerLogins">
            <summary>
              Looks up a localized string similar to When true, Linked Server Logins will be excluded from consideration during deployment. No Linked Server Logins will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLinkedServerLogins_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude linked server logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLinkedServers">
            <summary>
              Looks up a localized string similar to When true, Linked Servers will be excluded from consideration during deployment. No Linked Servers will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLinkedServers_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude linked servers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLogins">
            <summary>
              Looks up a localized string similar to When true, Logins will be excluded from consideration during deployment. No Logins will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeLogins_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeMasterKey_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude Master Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeMessageTypes">
            <summary>
              Looks up a localized string similar to When true, Message Types will be excluded from consideration during deployment. No Message Types will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeMessageTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude message types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeObjectTypes">
            <summary>
              Looks up a localized string similar to Specifies a set of object types whose differences will be ignored when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeObjectTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude object types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludePartitionFunctions">
            <summary>
              Looks up a localized string similar to When true, Partition Functions will be excluded from consideration during deployment. No Partition Functions will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludePartitionFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude partition functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludePartitionSchemes">
            <summary>
              Looks up a localized string similar to When true, Partition Schemes will be excluded from consideration during deployment. No Partition Schemes will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludePartitionSchemes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude partition schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeQueues">
            <summary>
              Looks up a localized string similar to When true, Queues will be excluded from consideration during deployment. No Queues will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeQueues_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude queues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRemoteServiceBindings">
            <summary>
              Looks up a localized string similar to When true, Remote Service Bindings will be excluded from consideration during deployment. No Remote Service Bindings will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRemoteServiceBindings_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude remote service bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRoutes">
            <summary>
              Looks up a localized string similar to When true, Routes will be excluded from consideration during deployment. No Routes will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRoutes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude routes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRules">
            <summary>
              Looks up a localized string similar to When true, Rules will be excluded from consideration during deployment. No Rules will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeRules_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude rules.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeScalarValuedFunctions">
            <summary>
              Looks up a localized string similar to When true, Scalar Valued Functions will be excluded from consideration during deployment. No Scalar Valued Functions will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeScalarValuedFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude scalar valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSearchPropertyLists">
            <summary>
              Looks up a localized string similar to When true, Search Property Lists will be excluded from consideration during deployment. No Search Property Lists will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSearchPropertyLists_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude search property lists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSecurityPolicies">
            <summary>
              Looks up a localized string similar to When true, Security Policies will be excluded from consideration during deployment. No Security Policies will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSecurityPolicies_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude security policies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSequences">
            <summary>
              Looks up a localized string similar to When true, Sequences will be excluded from consideration during deployment. No Sequences will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSequences_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude sequences.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerAuditSpecifications">
            <summary>
              Looks up a localized string similar to When true, Server Audit Specifications will be excluded from consideration during deployment. No Server Audit Specifications will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerAuditSpecifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude server audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerRoleMembership">
            <summary>
              Looks up a localized string similar to When true, Server Role Membership will be excluded from consideration during deployment. No Server Role Membership will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerRoleMembership_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude server role membership.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerRoles">
            <summary>
              Looks up a localized string similar to When true, Server Roles will be excluded from consideration during deployment. No Server Roles will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerRoles_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude server roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerTriggers">
            <summary>
              Looks up a localized string similar to When true, Server Triggers will be excluded from consideration during deployment. No Server Triggers will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServerTriggers_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude server triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServices">
            <summary>
              Looks up a localized string similar to When true, Services will be excluded from consideration during deployment. No Services will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeServices_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSignatures">
            <summary>
              Looks up a localized string similar to When true, Signatures will be excluded from consideration during deployment. No Signatures will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSignatures_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude signatures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeStoredProcedures">
            <summary>
              Looks up a localized string similar to When true, Stored Procedures will be excluded from consideration during deployment. No Stored Procedures will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeStoredProcedures_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude stored procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSymmetricKeys">
            <summary>
              Looks up a localized string similar to When true, Symmetric Keys will be excluded from consideration during deployment. No Symmetric Keys will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSymmetricKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude symmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSynonyms">
            <summary>
              Looks up a localized string similar to When true, Synonyms will be excluded from consideration during deployment. No Synonyms will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeSynonyms_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude synonyms.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeTables">
            <summary>
              Looks up a localized string similar to When true, Tables will be excluded from consideration during deployment. No Tables will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeTables_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeTableValuedFunctions">
            <summary>
              Looks up a localized string similar to When true, Table Valued Functions will be excluded from consideration during deployment. No Table Valued Functions will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeTableValuedFunctions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude table valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUserDefinedDataTypes">
            <summary>
              Looks up a localized string similar to When true, User Defined Data Types will be excluded from consideration during deployment. No User Defined Data Types will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUserDefinedDataTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude user defined data types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUserDefinedTableTypes">
            <summary>
              Looks up a localized string similar to When true, User Defined Table Types will be excluded from consideration during deployment. No User Defined Table Types will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUserDefinedTableTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude user defined table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUsers">
            <summary>
              Looks up a localized string similar to When true, Users will be excluded from consideration during deployment. No Users will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeUsers_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude users.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeViews">
            <summary>
              Looks up a localized string similar to When true, Views will be excluded from consideration during deployment. No Views will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeViews_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeXmlSchemaCollections">
            <summary>
              Looks up a localized string similar to When true, Xml Schema Collections will be excluded from consideration during deployment. No Xml Schema Collections will be added, modified or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExcludeXmlSchemaCollections_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude xml schema collections.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractAllTableData">
            <summary>
              Looks up a localized string similar to Indicates whether data from all user tables is extracted. If &apos;true&apos;, data from all user tables is extracted, and you cannot specify individual user tables for extracting data. If &apos;false&apos;, specify one or more user tables to extract data from..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractAllTableData_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract all table data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractApplicationScopedObjectsOnly">
            <summary>
              Looks up a localized string similar to If true, only extract application-scoped objects for the specified source. If false, extract all objects for the specified source..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractApplicationScopedObjectsOnly_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract application-scoped objects only.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractEncounteredErrors">
            <summary>
              Looks up a localized string similar to Errors were encountered while importing the target database. The database snapshot (.dacpac) file will still be created, but may not be complete..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractIgnoreExtendedProperties">
            <summary>
              Looks up a localized string similar to Specifies whether extended properties should be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractIgnorePermissions">
            <summary>
              Looks up a localized string similar to Specifies whether permissions should be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractReferencedLogins">
            <summary>
              Looks up a localized string similar to If true, extract login objects referenced by source database objects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractReferencedLogins_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract referenced logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractReferencedServerScopedElements">
            <summary>
              Looks up a localized string similar to If true, extract login, server audit and credential objects referenced by source database objects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractReferencedServerScopedElements_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract referenced server scoped elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractTarget">
            <summary>
              Looks up a localized string similar to Specifies alternative output formats of the database schema, default is &apos;DacPac&apos; to output a `.dacpac` single file. Additional options output one or more `.sql` files organized by either &apos;SchemaObjectType&apos; (files in folders for each schema and object type), &apos;Schema&apos; (files in folders for each schema), &apos;ObjectType&apos; (files in folders for each object type), &apos;Flat&apos; (all files in the same folder), or &apos;File&apos; (1 single file)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractTarget_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract target.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractUsageProperties">
            <summary>
              Looks up a localized string similar to Specifies whether usage properties, such as table row count and index size, will be extracted from the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ExtractUsageProperties_FriendlyName">
            <summary>
              Looks up a localized string similar to Extract usage properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.GenerateDropsIfNotInProject">
            <summary>
              Looks up a localized string similar to Specifies whether to drop objects in target database if the objects do not exist in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.GenerateDropsIfNotInProject_FriendlyName">
            <summary>
              Looks up a localized string similar to Generate drops if not in project.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.GenerateSmartDefaults">
            <summary>
              Looks up a localized string similar to Automatically provides a default value when updating a table that contains data with a column that does not allow null values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.GenerateSmartDefaults_FriendlyName">
            <summary>
              Looks up a localized string similar to Generate smart defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.HashObjectNamesInLogs">
            <summary>
              Looks up a localized string similar to Specifies whether to replace all object names in logs with a random hash value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.HashObjectNamesInLogs_FriendlyName">
            <summary>
              Looks up a localized string similar to Hash object names in logs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreAnsiNulls">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreAnsiNulls_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore ANSI NULLS.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreAuthorizer">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreAuthorizer_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore authorizer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreColumnCollation">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the column collations should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreColumnCollation_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore column collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreColumnOrder">
            <summary>
              Looks up a localized string similar to Specifies whether differences in table column order should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreColumnOrder_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore column order.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreComments">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the comments should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreComments_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore comments.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreCryptographicProviderFilePath">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreCryptographicProviderFilePath_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore cryptographic provider file path.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDatabaseWorkloadGroups">
            <summary>
              Looks up a localized string similar to Specifies whether to exclude workload groups that exist on the target during deployment.  No Database Workload Groups will be added, modified, or dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDatabaseWorkloadGroups_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database workload groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDdlTriggerOrder">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDdlTriggerOrder_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore DDL trigger order.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDdlTriggerState">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDdlTriggerState_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore DDL trigger state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDefaultSchema">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the default schema should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDefaultSchema_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore default schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDmlTriggerOrder">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDmlTriggerOrder_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore DML trigger order.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDmlTriggerState">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreDmlTriggerState_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore DML trigger state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreExtendedProperties">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the extended properties should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreExtendedProperties_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFileAndLogFilePath">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFileAndLogFilePath_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore file and log file path.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFilegroupPlacement">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFilegroupPlacement_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore filegroup placement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFileSize">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFileSize_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore file size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFillFactor">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFillFactor_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore fill factor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFullTextCatalogFilePath">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the file path for the full-text catalog should be ignored or whether a warning should be issued when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreFullTextCatalogFilePath_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore full text catalog file path.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIdentitySeed">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIdentitySeed_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore identity seed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIncrement">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIncrement_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore increment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumns">
            <summary>
              Looks up a localized string similar to Specifies whether indexes or statistics on columns encrypted using randomized encryption and enclave-enabled column encryption keys should be ignored (not included in the generated bacpac). By default (false) any index or a statistic on a column encrypted using randomized encryption and an enclave-enabled column encryption key will block the export action..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumns_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore indexes statistics on enclave enabled columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexOptions">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the index options should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexOptions_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore index options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexPadding">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the index padding should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreIndexPadding_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore index padding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreKeywordCasing">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreKeywordCasing_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore keyword casing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreLockHintsOnIndexes">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreLockHintsOnIndexes_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore lock hints on indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreLoginSids">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreLoginSids_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore login SIDs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreNotForReplication">
            <summary>
              Looks up a localized string similar to Specifies whether the not for replication settings should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreNotForReplication_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore not for replication.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreObjectPlacementOnPartitionScheme">
            <summary>
              Looks up a localized string similar to Specifies whether an object&apos;s placement on a partition scheme should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreObjectPlacementOnPartitionScheme_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore object placement on partition schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnorePartitionSchemes">
            <summary>
              Looks up a localized string similar to Specifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnorePartitionSchemes_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore partition schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnorePermissions">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the permissions should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnorePermissions_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreQuotedIdentifiers">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreQuotedIdentifiers_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore quoted identifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreRoleMembership">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreRoleMembership_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude role membership.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreRouteLifetime">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreRouteLifetime_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore route lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreSemicolonBetweenStatements">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreSemicolonBetweenStatements_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore semicolon between statements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreSensitivityClassifications">
            <summary>
              Looks up a localized string similar to Specifies whether data sensitivity classifications on columns should be ignored when comparing schema models. This only works for classifications added with the ADD SENSITIVITY CLASSIFICATION syntax introduced in SQL 2019..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreSensitivityClassifications_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore column data sensitivity classifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreStatisticsSample">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the sample used for CREATE STATISTICS will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreTableOptions">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the table options will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreTableOptions_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore table options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreTablePartitionOptions">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics dedicated SQL pool databases..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreTablePartitionOptions_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore table partition options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreUserLoginMappings">
            <summary>
              Looks up a localized string similar to Specifies whether relationships between users and logins will be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreUserLoginMappings_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore user login mappings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreUserSettingsObjects">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreUserSettingsObjects_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore user settings objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWhitespace">
            <summary>
              Looks up a localized string similar to Specifies whether differences in white space will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWhitespace_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore whitespace.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWithNocheckOnCheckConstraints">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWithNocheckOnCheckConstraints_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore with nocheck on check constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWithNocheckOnForeignKeys">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWithNocheckOnForeignKeys_FriendlyName">
            <summary>
              Looks up a localized string similar to Ignore with nocheck on foreign keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWorkloadClassifiers">
            <summary>
              Looks up a localized string similar to Specifies whether to exclude workload classifiers that exist on the target during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IgnoreWorkloadClassifiers_FriendlyName">
            <summary>
              Looks up a localized string similar to Exclude database workload classifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ImportContributorArguments">
            <summary>
              Looks up a localized string similar to Specifies deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ImportContributorArguments_FriendlyName">
            <summary>
              Looks up a localized string similar to Deployment contributor arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ImportContributors">
            <summary>
              Looks up a localized string similar to Specifies the deployment contributors which should run when the bacpac is imported. This should be a semi-colon delimited list of fully qualified build contributor names or IDs..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ImportContributors_FriendlyName">
            <summary>
              Looks up a localized string similar to Deployment contributors.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IncludeCompositeObjects">
            <summary>
              Looks up a localized string similar to Include all composite elements with the same database as part of a single publish operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IncludeCompositeObjects_FriendlyName">
            <summary>
              Looks up a localized string similar to Include composite objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IncludeTransactionalScripts">
            <summary>
              Looks up a localized string similar to Specifies whether transactional statements should be used where possible when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IncludeTransactionalScripts_FriendlyName">
            <summary>
              Looks up a localized string similar to Include transactional scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InstallingDacPac">
            <summary>
              Looks up a localized string similar to Installing DAC..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InstallingDacPostDeploymentScript">
            <summary>
              Looks up a localized string similar to Executing DAC post-deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InstallingDacPreDeploymentScript">
            <summary>
              Looks up a localized string similar to Executing DAC pre-deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InvalidAzureMaxSize">
             <summary>
               Looks up a localized string similar to The AzureMaxSize property has an invalid value: {0}. 
            The value must be one of the following values: ({1})..
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InvalidConnectionStringProperty">
            <summary>
              Looks up a localized string similar to Invalide Connection String property :&apos; {0}&apos;  Value: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.InvalidDeployPropertyValue">
            <summary>
              Looks up a localized string similar to Property {0} has an invalid value: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IsAlwaysEncryptedParameterizationEnabled">
            <summary>
              Looks up a localized string similar to Enables variable parameterization on Always Encrypted columns in pre/post deployment scripts..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.IsAlwaysEncryptedParameterizationEnabled_FriendlyName">
            <summary>
              Looks up a localized string similar to Enable parameterization for Always Encrypted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.LongRunningCommandTimeout">
            <summary>
              Looks up a localized string similar to Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.LongRunningCommandTimeout_FriendlyName">
            <summary>
              Looks up a localized string similar to Long running command timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.NoAlterStatementsToChangeClrTypes">
            <summary>
              Looks up a localized string similar to Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.NoAlterStatementsToChangeClrTypes_FriendlyName">
            <summary>
              Looks up a localized string similar to No alter statements to change Clr types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.NumericRoundAbort">
            <summary>
              Looks up a localized string similar to Specifies the NUMERIC_ROUNDABORT connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.NumericRoundAbort_FriendlyName">
            <summary>
              Looks up a localized string similar to NumericRoundAbort.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.OutputPath">
            <summary>
              Looks up a localized string similar to Required if /Action:Report or /Action:Script is specified. Valid value is a file path to where the comparison report shall be written..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.OverwriteFiles">
            <summary>
              Looks up a localized string similar to Specifies if sqlpackage.exe should overwrite existing files. Specifying false causes sqlpackage.exe to abort action if an existing file is encountered. Default value is True..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PerformDatabaseBackup">
            <summary>
              Looks up a localized string similar to Specifies whether the target database should be backed up prior to publishing to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PerformDatabaseBackup_FriendlyName">
            <summary>
              Looks up a localized string similar to Perform database backup.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PopulateFilesOnFileGroups">
            <summary>
              Looks up a localized string similar to Specifies whether a new file is also created when a new FileGroup is created in the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PopulateFilesOnFileGroups_FriendlyName">
            <summary>
              Looks up a localized string similar to Populate files on File groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PreserveIdentityLastValues">
            <summary>
              Looks up a localized string similar to Specifies whether last values for identity columns should be preserved during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.PreserveIdentityLastValues_FriendlyName">
            <summary>
              Looks up a localized string similar to Preserve identity last values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Profile">
            <summary>
              Looks up a localized string similar to Optional if /Action:Publish is specified. Valid value is a file path to a Publish Profile. A user shall be able to use a Publish Profile to define the collection of Publish Properties to use for a Publish episode..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Properties">
            <summary>
              Looks up a localized string similar to A name value pair for a Publish property, {PropertyName}={Value}. Refer to the help for the Publish action for valid property names..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Quiet">
            <summary>
              Looks up a localized string similar to Specifies whether detailed feedback is suppressed. Defaults to False..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.QuotedIdentifier">
            <summary>
              Looks up a localized string similar to Specifies the QUOTED_IDENTIFIER connection setting. This setting overrides the value in the database snapshot (.dacpac) file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.QuotedIdentifier_FriendlyName">
            <summary>
              Looks up a localized string similar to Quoted identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RebuildIndexesOfflineForDataPhase">
            <summary>
              Looks up a localized string similar to Rebuild indexes offline after importing data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RebuildIndexesOfflineForDataPhase_FriendlyName">
            <summary>
              Looks up a localized string similar to Rebuild indexes offline for data phase.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RegisterDataTierApplication">
            <summary>
              Looks up a localized string similar to Specifies whether the schema is registered with the database server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RegisterDataTierApplication_FriendlyName">
            <summary>
              Looks up a localized string similar to Register Data-Tier Application.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ResolvingModel">
            <summary>
              Looks up a localized string similar to Resolving model..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RestoreSequenceCurrentValue">
            <summary>
              Looks up a localized string similar to Specifies whether sequence object current value should be deployed with dacpac file, the default value is True..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RestoreSequenceCurrentValue_FriendlyName">
            <summary>
              Looks up a localized string similar to Restore sequence current value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RunDeploymentPlanExecutors">
            <summary>
              Looks up a localized string similar to Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.RunDeploymentPlanExecutors_FriendlyName">
            <summary>
              Looks up a localized string similar to Run DeploymentPlanExecutors.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseCollation">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the database collation should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseCollation_FriendlyName">
            <summary>
              Looks up a localized string similar to Script database collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseCompatibility">
            <summary>
              Looks up a localized string similar to Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseCompatibility_FriendlyName">
            <summary>
              Looks up a localized string similar to Script database compatibility.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseOptions">
            <summary>
              Looks up a localized string similar to Specifies whether target database properties should be set or updated as part of the publish action..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDatabaseOptions_FriendlyName">
            <summary>
              Looks up a localized string similar to Script database properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDeployStateChecks">
            <summary>
              Looks up a localized string similar to Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptDeployStateChecks_FriendlyName">
            <summary>
              Looks up a localized string similar to Script state checks.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptFileSize">
            <summary>
              Looks up a localized string similar to Controls whether size is specified when adding a file to a filegroup..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptFileSize_FriendlyName">
            <summary>
              Looks up a localized string similar to Script file size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptNewConstraintValidation">
            <summary>
              Looks up a localized string similar to At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptNewConstraintValidation_FriendlyName">
            <summary>
              Looks up a localized string similar to Script validation for new constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptRefreshModule">
            <summary>
              Looks up a localized string similar to Include refresh statements at the end of the publish script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.ScriptRefreshModule_FriendlyName">
            <summary>
              Looks up a localized string similar to Script refresh module.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SetPropertyException">
            <summary>
              Looks up a localized string similar to An error was encountered while setting property {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SingleUserMode">
            <summary>
              Looks up a localized string similar to Specifies whether generated publish script is executed in single-user mode..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SingleUserMode_FriendlyName">
            <summary>
              Looks up a localized string similar to Single user mode.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceConnectionString">
            <summary>
              Looks up a localized string similar to Specifies a valid SQL Server/Azure connection string to the source database. If this parameter is specified it shall be used exclusively of all other source parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceDatabaseName">
            <summary>
              Looks up a localized string similar to Defines the name of the source database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceEncryptConnection">
            <summary>
              Looks up a localized string similar to Specifies if SQL encryption should be used for the source database connection..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceFile">
            <summary>
              Looks up a localized string similar to Specifies a source file to be used as the source of action instead of a database. For the Publish and Script actions, SourceFile may be a dacpac file or a schema compare scmp file.  If this parameter is used, no other source parameter shall be valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceHostNameInCertificate">
            <summary>
              Looks up a localized string similar to Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourcePassword">
            <summary>
              Looks up a localized string similar to For SQL Server auth scenarios, defines the password to use to access the source database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceServerName">
            <summary>
              Looks up a localized string similar to Defines the name of the server hosting the source database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceTimeout">
            <summary>
              Looks up a localized string similar to Specifies the timeout for establishing a connection to the source database in seconds..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceTrustServerCertificate">
            <summary>
              Looks up a localized string similar to Specifies whether to use SSL to encrypt the source database connection and bypass walking the certificate chain to validate trust..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.SourceUser">
            <summary>
              Looks up a localized string similar to For SQL Server auth scenarios, defines the SQL Server user to use to access the source database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Storage">
            <summary>
              Looks up a localized string similar to Specifies the type of backing storage for the schema model used during extraction..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Storage_FriendlyName">
            <summary>
              Looks up a localized string similar to Storage.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetConnectionString">
            <summary>
              Looks up a localized string similar to Specifies a valid SQL Server/Azure connection string to the target database. If this parameter is specified it shall be used exclusively of all other target parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetDatabase">
            <summary>
              Looks up a localized string similar to Specifies an override for the name of the database that is the target of the Action..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetDatabaseName">
            <summary>
              Looks up a localized string similar to Specifies an override for the name of the database that is the target of sqlpackage.exe Action..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetEncryptConnection">
            <summary>
              Looks up a localized string similar to Specifies if SQL encryption should be used for the target database connection..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetEngineVersion">
            <summary>
              Looks up a localized string similar to Specifies what the target engine version is expected to be. This affects whether to allow objects supported by Microsoft Azure SQL Database servers with V12 capabilities, such as memory-optimized tables, in the generated bacpac..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetEngineVersion_FriendlyName">
            <summary>
              Looks up a localized string similar to Target engine version.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetFile">
            <summary>
              Looks up a localized string similar to Specifies a target file (i.e., a .dacpac files) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetHostNameInCertificate">
            <summary>
              Looks up a localized string similar to Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetPassword">
            <summary>
              Looks up a localized string similar to For SQL Server auth scenarios, defines the password to use to access the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetServerName">
            <summary>
              Looks up a localized string similar to Defines the name of the server hosting the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetTimeout">
            <summary>
              Looks up a localized string similar to Specifies the timeout for establishing a connection to the target database in seconds..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetTrustServerCertificate">
            <summary>
              Looks up a localized string similar to Specifies whether to use SSL to encrypt the target database connection and bypass walking the certificate chain to validate trust..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TargetUser">
            <summary>
              Looks up a localized string similar to For SQL Server auth scenarios, defines the SQL Server user to use to access the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TempDirectoryForTableData">
            <summary>
              Looks up a localized string similar to Specifies the temporary directory used to buffer table data before being written to the package file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TempDirectoryForTableData_FriendlyName">
            <summary>
              Looks up a localized string similar to Temp directory for table data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TreatVerificationErrorsAsWarnings">
            <summary>
              Looks up a localized string similar to Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the ta [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.TreatVerificationErrorsAsWarnings_FriendlyName">
            <summary>
              Looks up a localized string similar to Treat verification errors as warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnmodifiableObjectWarnings">
            <summary>
              Looks up a localized string similar to Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnmodifiableObjectWarnings_FriendlyName">
            <summary>
              Looks up a localized string similar to Unmodifiable object warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsetSqlCmdVariable">
            <summary>
              Looks up a localized string similar to Missing values for the following SqlCmd variables:{0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsupportedDatabaseSourceMessage">
            <summary>
              Looks up a localized string similar to Database source is not a supported version of SQL Server {0}: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsupportedDBSourceAndFileTarget">
            <summary>
              Looks up a localized string similar to The {0} Action does not support a source database and a target file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsupportedPropertyType">
            <summary>
              Looks up a localized string similar to The property {0} has an unsupported data type: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsupportedSourceDacVersion">
            <summary>
              Looks up a localized string similar to The source DACPAC was created using DACFX 2.0 and is currently not supported at this time by SQL Server Data Tools (SSDT). Please create a 3.0 DACPAC from SSDT and publish the DACPAC again..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnsupportedTargetDacVersion">
            <summary>
              Looks up a localized string similar to The target DACPAC was created using DACFX 2.0 and is currently not supported at this time by SQL Server Data Tools (SSDT). Please create a 3.0 DACPAC from SSDT and publish the DACPAC again..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UnusedSqlCmdVariablesError">
            <summary>
              Looks up a localized string similar to The following SqlCmd variables are not defined in the target scripts: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UpgradingDacPac">
            <summary>
              Looks up a localized string similar to Upgrading DAC..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.UseInterpretationMode">
            <summary>
              Looks up a localized string similar to When this option is set to true, the extracted model will be interpreted before it is saved to disk. By default, this option is on, and you should not generally disable it..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.Variables">
            <summary>
              Looks up a localized string similar to Optional only if /Action:Publish is specified. Valid values for parameter name shall be SQL Command variables specified in the .dacpac file only. Parameter names specified that are not declared in the .dacpac shall result in an error. Valid command variable values shall be context-specific based on the command variable itself (e.g., database name vs. schema names)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyCollationCompatibility">
            <summary>
              Looks up a localized string similar to Specifies whether collation compatibility is verified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyCollationCompatibility_FriendlyName">
            <summary>
              Looks up a localized string similar to Verify collation compatibility.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyDeployment">
            <summary>
              Looks up a localized string similar to Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyDeployment_FriendlyName">
            <summary>
              Looks up a localized string similar to Verify deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyExtraction">
            <summary>
              Looks up a localized string similar to Specifies whether the extracted model should be verified. If set to true, schema validation rules are run on the dacpac or bacpac..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyExtraction_FriendlyName">
            <summary>
              Looks up a localized string similar to Verify extraction.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyFullTextDocumentTypesSupported">
            <summary>
              Looks up a localized string similar to Specifies whether the supported full-text document types for Microsoft Azure SQL Database v12 should be verified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources.VerifyFullTextDocumentTypesSupported_FriendlyName">
            <summary>
              Looks up a localized string similar to Verify full-text document types supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineServices.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Helper method that sets properties dynamically using reflection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineServices.GetSetableProperties(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.Type,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
            Helper method that retrieves the properties that are settable on the
            specified targetType
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings">
            <summary>
            This class represents connection (and other) settings specified by called of the DacFx API.  DacFx
            cannot rely on the registry to supply override values therefore setting overrides must be made
            by the top-of-the-stack
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.DefaultSettings">
            <summary>
            Access to the default ambient settings.  Access to these settings is made available
            for SSDT scenarios where settings are read from the registry and not set explicitly through
            the API
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.SupportAlwaysEncrypted">
            <summary>
            Setting that shows whether Always Encrypted is supported.
            If false, then reverse engineering and script interpretation of a database with any Always Encrypted object will fail
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.SkipObjectTypeBlocking">
            <summary>
            Setting that determines whether checks for unsupported object types are performed.
            If false, unsupported object types will prevent extract from being performed.
            Default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.DoNotSerializeQueryStoreSettings">
            <summary>
            Setting that determines whether the Database Options that store Query Store settings will be left out during package serialization.
            Default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.RebuildIndexesOfflineForDataPhase">
            <summary>
            Setting that indicates indexes should be rebuilt offline after importing data into SQL Server.
            Default value is false.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.CreateSettingsContext">
            <summary>
            Called by top-of-stack API to setup/configure settings that should be used
            throughout the API (lower in the stack).  The settings are reverted once the returned context
            has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.AmbientData">
            <summary>
            Data-transfer object that represents a specific configuration
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.AmbientData.TraceSettings">
            <summary>
            Logs the Ambient Settings
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.AmbientSettings.StackConfiguration">
            <summary>
            This class encapsulated the concept of configuration that is set on the stack and
            flows across multiple threads as part of the logical call context
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.CacheCollection`1">
            <summary>
            Base class for database related cache objects. The size of the cache is limited and when the capacity limit is reached, 
            old items get removed from cache
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.CacheCollection`1.AddOrUpdate(System.String,`0)">
            <summary>
            Adds a key/value pair to the cache
            </summary>
            <param name="key">cache key</param>
            <param name="addValue">cache value</param>
            <returns>cache value</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.CacheCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Attempts to get the value associated with the specified key from the cache
            </summary>
            <param name="key">cache key</param>
            <param name="addValue">cache value</param>
            <returns>cache value. Returns null if the key doesn't exist in the cache</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry">
            <summary>
            Telemetry class for DacFx operations (Import, export, extract, publish, script ...)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.CreateNew(Microsoft.Data.Tools.Schema.Sql.DacTask)">
            <summary>
            Starts a telemetry session for a new dacfx operations
            </summary>
            <param name="action"></param>
            <param name="sqlConnectionFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.Start(System.Object)">
            <summary>
            Send an even for starting an operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.Stop">
            <summary>
            Sends and event for dacfx operation result
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddResult(System.Boolean)">
            <summary>
            Add telemetry property for the operation result
            </summary>
            <param name="succeeded"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.TrackException(Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetrySourceName,System.Exception)">
            <summary>
            Sends a telemetry event for an exception  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddErrors(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryError})">
            <summary>
            Add Dac errors and type
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddSourceAndTargetInfo(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Adds telemetry property for source and target. 
            We need to get the version from db and model when they are available. They might be ready at the end of the process
            So start event might miss these info
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddDacOriginInfo(Microsoft.Data.Tools.Schema.Sql.Dac.DacOrigin)">
            <summary>
            Adds DacOrigin Information to telemetry
            </summary>
            <param name="dacOrigin"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddProperty``1(Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryPropertyName,``0,``0)">
            <summary>
            Adds a telemetry property to operation properties
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="propertyValue">Property value</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.TelemetrySession">
            <summary>
            Telemetry Session
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.DacTaskCommonProperties">
            <summary>
            Common telemetry properties for DacFx operations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.OperationDuration">
            <summary>
            The object to track the duration of the whole operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.AddOptions(System.Object)">
            <summary>
            Adds dacfx operation options to telemetry properties. The option property name is used as telemetry property name.
            Only using options that are not string type to avoid storing any PII
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DacFxOperationTelemetry.CanUsePropertyForTelemetry(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the property name and value can be added to telemetry properties.
            Avoid the types that can include PII. for now only accepting numbers, boolean and enum
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DatabaseModelUtils.GetPlatformFriendlyName(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Returns the friendly name (usable for UI) for the platform
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DatabaseModelUtils.NonNegativeIntValidator(System.Int32@)">
            <summary>
            Used in several annotations to check for acceptable property value
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DatabaseModelUtils.GetInstantiateInterfaceType(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get a list of interface this ElementClass implements, get the most close and instantiatable interface
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification">
            <summary>
            Utility class for different Data Classification operations
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.ResolveInterpretationError(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,System.Collections.Generic.List{System.String})">
            <summary>
            Resolves correct error code and message during interpretation phase 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.IsSupported(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Checks if data classification is supported for the provided platform
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.IsMetadataView(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Checks if sensitivity classification is stored in metadata view
            for the provided platform (SQL 150 and higher, SQL Azure V12, DW)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.IsFromExtendedPropertiesToMetadataView(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Checks if source platform uses extended properties to store sensitivity
            information while target uses metadata view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.IsSensitivityExtendedProperty(System.String)">
            <summary>
            Checks whether provided extended property is sensitivity property
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.Exists(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.String)">
            <summary>
            Checks whether provided column is classified for
            the provided extended property name
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.Exists(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Checks whether provided column is classified
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.Reset(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Resets column's classification fields
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.AreEqual(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Checks whether provided columns have same classification
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.Apply(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.String,System.String)">
            <summary>
            Applies classification on column for versions [100, 140].
            Works by contract with 'IsSensitivityExtendedProperty'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.Apply(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.SensitivityClassificationOption})">
            <summary>
            Applies classification on column for SQL 150 and higher, Azure V12 and DW
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.AddStatements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Returns list of AddSensitivityClassification statements for table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.AddStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Returns AddSensitivityClassification statement for column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.DropStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Returns DropSensitivityClassification statement for column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.AddExtendedPropertyStatements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Returns list of classified 'sp_addextendedproperty' statements for table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.AddExtendedPropertyStatements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Returns list of classified 'sp_addextendedproperty' statements for column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DataClassification.DropExtendedPropertyStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.String)">
            <summary>
            Returns classified sp_dropextendedproperty statement for column
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.DeploymentScriptHelper">
            <summary>
            Helper class to parsing deployment script file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.DeploymentScriptHelper.AllSqlCmds">
            <summary>
            Get all SQLCMDs
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DeploymentScriptHelper.GetSqlcmdStrings(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get all SQLCMD strings with offsets and lengths from the file content.
            </summary>
            <param name="content">The string content.</param>
            <param name="sqlcmdList">The sqlcmd list to check against.</param>
            <returns>Canoni
            cal SQLCMD strings and its start offset and length.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DeploymentScriptHelper.FindCmdsInLine(System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Get all SQLCMD strings with offsets and lengths from a line.
            </summary>
            <param name="line">The line to parse.</param>
            <param name="offset">Start offset of the line within multiple lines.</param>
            <param name="sqlcmdList">The sqlcmd list to check against.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.DeploymentScriptHelper.CanonicalizeCommand(System.String)">
            <summary>
            Remove extra whitespaces and quotes from a sql command.
            </summary>
            <param name="command">The sql command to process.</param>
            <returns>New command after removing extra whitespaces and built in canonical way.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.Exceptions.PropertiesFileException">
            <summary>
            This exception is thrown wne a deployment configuration file or a 
            sqlcmdvariables file fails to load.  The inner exception could be an
            IOException, SecurityException or XmlException
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch">
            <summary>
            Single batch of SQL command
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Creates and initializes a batch object
            </summary>
            <param name="isResultExpected">Whether it is one of "set [something] on/off" type of command,
            that doesn't return any results from the server
            </param>
            <param name="sqlText">Text of the batch</param>
            <param name="execTimeout">Timeout for the batch execution. 0 means no limit </param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.HasValidText">
            <summary>
            Is the Batch's text valid?
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.Text">
            <summary>
            SQL text that to be executed in the Batch
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.AlwaysEncryptedParameterizer">
            <summary>
            SQL Parameterization instance
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.IsAlwaysEncryptedParameterizationEnabled">
            <summary>
            Set Always Encrypted Parameterization Mode
            </summary>
            <value>
            True to enable parameterization variables in post/pre deployment scripts
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.IsResultsExpected">
            <summary>
            Determines whether batch execution returns any results
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.ExecutionTimeout">
            <summary>
            Determines the execution timeout for the batch
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.TextSpan">
            <summary>
            Determines the textspan to wich the batch belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchIndex">
            <summary>
            Determines the batch index in the collection of batches being executed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RowsAffected">
            <summary>
            Returns how many rows were affected. It should be the value that can be shown
            in the UI. 
            </summary>
            <remarks>
            It can be used only after the execution of the batch is finished
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.IsSuppressProviderMessageHeaders">
            <summary>
            Determines if the error.Source should be used when messages are written
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.ScriptTrackingId">
            <summary>
            Gets or sets the id of the script we are tracking
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.IsScriptExecutionTracked">
            <summary>
            Gets or sets a value indicating whether to track the current batch in the tracking table
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchError">
            <summary>
            fired when there is an error message from the server
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchMessage">
            <summary>
            fired when there is a message from the server
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchResultSetProcessing">
            <summary>
            fired when there is a new result set available. It is guarnteed
            to be fired from the same thread that called Execute method
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchCancelling">
            <summary>
            fired when the batch recieved cancel request BEFORE it 
            initiates cancel operation. Note that it is fired from a
            different thread then the one used to kick off execution
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.BatchResultSetFinished">
            <summary>
            fired when we've done absolutely all actions for the current result set
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.Reset">
            <summary>
            Resets the object to its initial state
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.Execute(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ShowPlanType)">
            <summary>
            Executes the batch 
            </summary>
            <param name="connection">Connection to use</param>
            <param name="expectedShowPlan">ShowPlan type to be used</param>
            <returns>result of execution</returns>
            <remarks>
            It does not return until execution is finished
            We may have received a Cancel request by the time this function is called
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.Execute(System.Data.IDbConnection,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ShowPlanType)">
            <summary>
            Executes the batch 
            </summary>
            <param name="connection">Connection to use</param>
            <param name="expectedShowPlan">ShowPlan type to be used</param>
            <returns>result of execution</returns>
            <remarks>
            It does not return until execution is finished
            We may have received a Cancel request by the time this function is called
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.Cancel">
            <summary>
            Cancels the batch
            </summary>
            <remarks>
            When batch is actually cancelled, Execute() will return with the appropiate status 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.HandleExceptionMessage(System.Exception)">
            <summary>
            Fires an error message event
            </summary>
            <param name="ex">Exception cought</param>
            <remarks>
            Non-SQL exception
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.HandleSqlMessages(Microsoft.Data.SqlClient.SqlErrorCollection)">
            <summary>
            Fires a message event
            </summary>
            <param name="errors">SqlClient errors collection</param>
            <remarks>
            Sql specific messages.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.OnSqlInfoMessageCallback(System.Object,Microsoft.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            method that will be passed as delegate to SqlConnection.InfoMessage
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.OnStatementExecutionFinished(System.Object,System.Data.StatementCompletedEventArgs)">
            <summary>
            Delegete for SqlCommand.RecordsAffected
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This is exposed as a regular message
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.ProcessResultSet(System.Data.IDataReader)">
            <summary>
            Called on a new ResultSet on the data reader
            </summary>
            <param name="dataReader">True if result set consumed, false on a Cancel request</param>
            <returns></returns>
            <remarks>
            The GridStorageResultSet created is owned by the batch consumer. It's only created here.
            Additionally, when BatchResultSet event handler is called, it won't return until
            all data is prcessed or the data being processed is terminated (i.e. cancel or error)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.FormatSqlErrorMessage(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Helper method to format the provided SqlError
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.HandleSqlException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Handles a Sql exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseBatchError(System.String,Microsoft.Data.SqlClient.SqlError,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.TextSpan)">
            <summary>        
            Called when an error message came from SqlClient
            </summary>
            <param name="message"></param>
            <param name="description"></param>
            <param name="line"></param>
            <param name="textSpan"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseBatchError(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs)">
            <summary>
            Called when an error message came from SqlClient
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseBatchMessage(System.String,System.String,Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Called when a message came from SqlClient
            </summary>
            <remarks>
            Additionally, it's being used to notify the user that the script execution
            has been finished.
            </remarks>
            <param name="detailedMessage"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseBatchResultSetProcessing(System.Data.IDataReader,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ShowPlanType)">
            <summary>
            Called when a new result set has to be processed
            </summary>
            <param name="resultSet"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseBatchResultSetFinished">
            <summary>
            Called when the result set has been processed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch.RaiseCancelling">
            <summary>
            Called when the batch is being cancelled with an active result set 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs">
            <summary>
            Error _totalAffectedRows for a Batch
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs.#ctor(System.String)">
            <summary>
            Constructor with message and no description
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with exception and no description
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor with message and description
            </summary>
            <param name="message"></param>
            <param name="description"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs.#ctor(System.String,System.String,System.Int32,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.TextSpan,System.Exception)">
            <summary>
            Constructor with message, description, textspan and line number
            </summary>
            <param name="message"></param>
            <param name="description"></param>
            <param name="line"></param>
            <param name="textSpan"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchMessageEventArgs">
            <summary>
            Event args for notification about non-error _message
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParser.RaiseScriptError(System.String,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptMessageType)">
            <summary>
            Called when the script parsing has errors/warnings
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParser.RaiseScriptMessage(System.String)">
            <summary>
            Called on parsing info message
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParser.RaiseHaltParser">
            <summary>
            Called on parsing info message
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParserSqlCmd.#ctor">
            <summary>
            Constructor taking a Parser instance
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParserSqlCmd.GetVariable(Microsoft.Data.Tools.Schema.Sql.BatchParser.PositionStruct,System.String)">
            <summary>
            Looks for any environment variable or internal variable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchParserSqlCmd._internalVariables">
            <summary>
            The internal variables that can be used in SqlCommand substitution.
            These variables take precedence over environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchResultSetEventArgs.#ctor(System.Data.IDataReader,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ShowPlanType)">
            <summary>
            Default constructor
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchResultSetEventArgs.DataReader">
            <summary>
            Data reader associated with the result set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchResultSetEventArgs.ExpectedShowPlan">
            <summary>
            Show Plan to be expected if any during the execution
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecuteScript(System.Object)">
            <summary>
            Executes the script
            </summary>
            <param name="scriptArgs">Script to be executed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecuteBatch(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptExecutionArgs)">
            <summary>
            Executes a given batch
            </summary>
            <param name="batchScript"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ParseScript(System.String,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler)">
            <summary>
            Parses the script locally
            </summary>
            <param name="script">script to parse</param>
            <param name="batchEventsHandler">batch handler</param>        
            <remarks>
            The batch parser functionality is used in this case
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.Close(System.Boolean)">
            <summary>
            Close the current connection
            </summary>
            <param name="isCloseConnection"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.Close(System.Boolean,System.Boolean)">
            <summary>
            Close/Discard the current connection
            </summary>
            <param name="isCloseConnection"></param>
            <param name="isDiscard"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.Close(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Close/Discard the current connection
            </summary>
            <param name="isCloseConnection">true if connection has to be closed</param>
            <param name="isDiscard">true if connection has to be discarded</param>
            <param name="isFinishExecution">Raises the script execution finish event</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.Dispose" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.DoBatchExecution(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch)">
            <summary>
            Batch to be executed
            </summary>
            <param name="batch">Batch to execute</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ResetScript">
            <summary>
            Resets the script's related fields 
            </summary>
            <remarks>
            Once the execution thread is nulled, all handles will be closed and GC will collect it 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ConfigureBatchParser">
            <summary>
            Configures the script for execution
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ConfigureBatch">
            <summary>
            Configures the batch before execution
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseBatchParserExecutionError(System.String,System.String,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptMessageType)">
            <summary>
            Called when batch parser found an error
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseScriptExecutionFinished(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptExecutionResult)">
            <summary>
            Called just after the script has been executed
            </summary>
            <param name="result">scipt execution result</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseScriptError(System.String,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptMessageType)">
            <summary>
            Called when the script parsing has errors/warnings
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseBatchParserExecutionFinished(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptExecutionResult)">
            <summary>
            Called just after batch has been executed
            </summary>
            <param name="batch"></param>
            <param name="batchResult"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseBatchParserExecutionStarted(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.TextSpan)">
            <summary>
            Called right before a batch is executed
            </summary>
            <param name="batchLineNumber"></param>
            <param name="batch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.RaiseBatchMessage(System.String)">
            <summary>
            Called when a message needs to be notified to the consumer
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecuteBatchInternal(System.String,System.Int32,System.Int32)">
            <summary>
            Executes a given batch given the number of times
            </summary>
            <param name="batchScript"></param>
            <param name="num"></param>
            <param name="lineNumber"></param>
            <returns>True if we should continue processing, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecuteBatchTextSpanInternal(System.String,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.TextSpan,System.Boolean@)">
            <summary>
            Executes the batch text given the text span
            </summary>
            <param name="batchScript"></param>
            <param name="textSpan"></param>
            <param name="continueProcessing"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.DoScriptExecution(System.Boolean)">
            <summary>
            Executes the script by calling ManagedBatchParser.Parse()
            <remarks>
            The parser will in turn call to the ProcessBatch() which is the 
            one starting the execution process
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.DoExecute(System.Boolean)">
            <summary>
            Executes the script (on a separated thread)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.CancelCurrentBatch">
            <summary>
            Cancels the current batch being executed
            </summary>
            <remarks>
            This method is meant to be called from a separate thread
            in combination with the Cancel method()
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.BatchSeparator">
            <summary>
            Gets the Batch Separator statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.CreatePrePostConditionBatches">
            <summary>
            Create a set of batches to be executed before and after the script is executed
            </summary>
            <remarks>
            This is the way some server side settings can be set. Additionally, it supports
            a way to wrap the script execution within a transaction block
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecutePrePostConditionBatches(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch})">
            <summary>
            Executes a list of batches related to the Pre and Post scripts
            </summary>
            <param name="batches"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ConfigurePrePostConditionBatches(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch})">
            <summary>
            Cleans up any prev
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ConfigureBatchEventHandlers(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.Batch,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler,System.Boolean)">
            <summary>
            Binds/Unbinds the methods defined in IBatchEventHandlers with the batch events
            </summary>
            <param name="batch">Batch to be used in the event binding</param>
            <param name="handlers">object implementing the IBatcgEventHandlers interface</param>
            <param name="isHookup">Binds or Unbinds the evnts</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.CheckForDiscardedConnection">
            <summary>
            If a discarded state is found, we will close the connection
            </summary>
            <remarks>
            The discarded state is possible only on a synch Cancel request
            </remarks>
            <returns>
            True if this is discarded connection
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.OnHaltParser">
            <summary>
            Called when parser is about to halt the execution
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.OnErrorActionChanged(Microsoft.Data.Tools.Schema.Sql.BatchParser.OnErrorAction)">
            <summary>
            Changed when parser changed the error action type
            </summary>
            <param name="ea"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.OnConnectionChanged(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Called when parser requests a new connection
            </summary>
            <param name="connectionStringBuilder"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ConnectSqlCmdInternal(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Connects when :connect is identified within the script
            </summary>
            <param name="connectionStringBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.DisconnectSqlCmdInternal">
            <summary>
            Disconnects a sqlcmd connection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.CloseConnection(System.Data.IDbConnection)">
            <summary>
            Closes a connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ExecuteInternal(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ScriptExecutionArgs,System.Boolean)">
            <summary>
            Setups the script execution
            </summary>
            <param name="scriptExecutionArgs"></param>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.BatchParserExecutionFinished">
            <summary>
            This event gets fired when execution of one batch is completed
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.BatchParserExecutionStart">
            <summary>
            This event gets fired when execution of a batch is about to start
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.BatchParserExecutionError">
            <summary>
            This event gets fired when when there's an error/warnings from the scripting engine
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine.ScriptExecutionFinished">
            <summary>
            This event gets fired when the script execution is completed
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngine._internalVariables">
            <summary>
            The internal variables that can be used in SqlCommand substitution.
            These variables take precedence over environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.#ctor(Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions)">
            <summary>
            Overloaded constructor taking another ExecutionEngineCondition object as a reference
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsParseOnly">
            <summary>
            Checks the syntax of each Transact-SQL statement and returns any error messages 
            without compiling or executing the statement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsTransactionWrapped">
            <summary>
            Script is wrapped withint BEGIN TRAN/COMMIT-ROLLBACK
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsScriptExecutionTracked">
            <summary>
            Gets or a set a value indicating whether script execution is tracked
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsHaltOnError">
            <summary>
            Halts the execution if an error is found
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsEstimatedShowPlan">
            <summary>
            Use estimated show plan
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsActualShowPlan">
            <summary>
            Use actual show plan
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsSuppressProviderMessageHeaders">
            <summary>
            Use Source information on messages shown to the user
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsNoExec">
            <summary>
            SET NO EXEC {on/off}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsStatisticsIO">
            <summary>
            SET STATISTICS IO {on/off}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsShowPlanText">
            <summary>
            SET SHOWPLAN_TEXT {on/off}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsStatisticsTime">
            <summary>
            SET STATISTICS IO {on/off}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.IsSqlCmd">
            <summary>
            SqlCmd support
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.ExecutionEngineConditions.BatchSeparator">
            <summary>
            Batch separator statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler.OnBatchError(System.Object,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchErrorEventArgs)">
            <summary>
            fired when there is an error message from the server
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler.OnBatchMessage(System.Object,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchMessageEventArgs)">
            <summary>
            fired when there is a message from the server
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler.OnBatchResultSetProcessing(System.Object,Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.BatchResultSetEventArgs)">
            <summary>
            fired when there is a new result set available. It is guarnteed
            to be fired from the same thread that called Execute method
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler.OnBatchResultSetFinished(System.Object,System.EventArgs)">
            <summary>
            fired when we've done absolutely all actions for the current result set
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.ExecutionEngine.IBatchEventsHandler.OnBatchCancelling(System.Object,System.EventArgs)">
            <summary>
            fired when the batch recieved cancel request BEFORE it 
            initiates cancel operation. Note that it is fired from a
            different thread then the one used to kick off execution
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.IStackSettingsContext">
            <summary>
            This interface controls the lifetime of settings created as part of the
            top-of-stack API.  Changes made to this context's AmbientData instance will
            flow to lower in the stack while this object is not disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility._alterSystemVersioningNotAllowedDebugAssertMessage">
            <summary>
            Message to display when a ledger table system versioning is trying to be altered.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.AlterSystemVersioningNotAllowedDebugAssertMessage">
            <summary>
            Message to display when a ledger table system versioning is trying to be altered.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsTemporalLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a temporal ledger table.
            
            Ledger tables now leverage the temporal system versioning history table
            relatioship to auto generate history tables when doing an extract from
            a sql script (sql project scenario), even when they are not temporal since
            non-temporal ledger tables have history tables as well, so the following
            properties cannot be used anymore to identify a temporal ledger table:
              * TemporalSystemVersioningCurrentTable.
              * TemporalSystemVersioningHistoryTable.
            
            The only thing left to do to identify whether a ledger table is temporal
            is to check if it has generated always row columns, which are only present
            in temporal tables, whether they are temporal ledger or only temporal.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the given model element is a temporal ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsTemporalGeneratedAlwaysColumn(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a temporal generated always column.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the given model element is a temporal generated always column; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.ToSqlColumnGeneratedAlwaysType(Microsoft.SqlServer.TransactSql.ScriptDom.GeneratedAlwaysType)">
            <summary>
            Converts from ScriptDom GeneratedAlwaysType to SqlColumnGeneratedAlwaysType.
            </summary>
            <param name="generatedAlwaysType">ScriptDom Generated always type.</param>
            <returns>The corresponding SqlColumnGeneratedAlwaysType enum value.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerGeneratedAlwaysEndType(System.Nullable{Microsoft.SqlServer.TransactSql.ScriptDom.GeneratedAlwaysType})">
            <summary>
            Tells whether the given type is a ledger generated always end type.
            </summary>
            <param name="generatedAlwaysType">Generated always type.</param>
            <returns>True if the given generated always type is a ledger generated always end type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerGeneratedAlwaysColumn(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given columns is a ledger generated always column.
            </summary>
            <param name="modelElement">Column.</param>
            <returns>True if the given column is a generated always column; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerGeneratedAlwaysEndColumn(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given columns is a ledger generated always end column.
            </summary>
            <param name="modelElement">Column.</param>
            <returns>True if the given column is a generated always end column; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsHiddenLedgerGeneratedAlwaysColumn(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given column is a hidden ledger generated always column.
            </summary>
            <param name="modelElement">Column.</param>
            <returns>True if the given column is a hidden ledger generated always column; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsNonLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is NOT a ledger table or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the given model is NOT a ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsAnyLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is any type of ledger table or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is any type of ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a ledger table or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is a ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsUpdatableLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is an updatable ledger table or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is an updatable ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerHistoryTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a ledger history table or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is a ledger history table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsLedgerView(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a ledger view or not.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is a ledger view; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsAnyDroppedLedgerTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is any dropped ledger table:
              * Dropped ledger current table.
              * Dropped ledger history table.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the model element is any dropped ledger table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsDroppedLedgerCurrentTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a dropped ledger current table.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the given model element is a dropped ledger current table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.IsDroppedLedgerHistoryTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the given model element is a dropped ledger history table.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>True if the given model element is a dropped ledger history table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.ContainsAnyLedgerTables(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase})">
            <summary>
            Tells whether the given enumerable contains any ledger tables or not.
            </summary>
            <param name="tables">Tables</param>
            <returns>True if the enumerable contains any ledger tables; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerHistoryTableSchemaName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the ledger history table schema name of the model elemenet if the
            model element is an updatable ledger table; otherwise it returns null.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>Ledger history table schema name if the model element is an updatable ledger table; otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerHistoryTableName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Gets the ledger history table name of the model element if the model
            element is an updatable ledger table in the element name style specified.
            </summary>
            <param name="modelElement">Model element.</param>
            <param name="elementNameStyle">Element name style.</param>
            <returns>Ledger history table name if the model element is an updatable ledger table; otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerViewName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Gets the ledger view name if the model element is a ledger table in
            the element name style specified.
            </summary>
            <param name="modelElement">Model element.</param>
            <param name="elementNameStyle">Element name style.</param>
            <returns>Ledger view name if the model element is a ledger table; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerViewIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the ledger view identifier if this is a ledger table; otherwise it returns null.
            Note: the CreateIdentifier() method creates the identifer if it does not exist since
                  the ledger view is never added to the sql schema model.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>Ledger view identifier if this is a ledger table; otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerHistoryTableIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the ledger history table identifier if this is an updatable ledger table;
            otherwise it returns null.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>Ledger history table identifier if this is an updatable ledger table; otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.GetLedgerHistoryTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the ledger history table if this an updatable ledger table;
            otherwise it returns null.
            </summary>
            <param name="modelElement">Model element.</param>
            <param name="model">Model.</param>
            <returns>Ledger history table if this is an updatable ledger table; otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.DeleteLedgerViewDroppedLedgerColumns(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlView)">
            <summary>
            Deletes all dropped ledger columns from a ledger view.
            </summary>
            <param name="ledgerView">Ledger view.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.LedgerUtility.ClearTemporalAutoGeneratedHistoryTablesRelationship(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Clears the TemporalSystemVersioningHistoryTable relationship and the IsAutoGeneratedHistoryTable field
            of the ledger history table and its ledger current table to prevent conflicts in the Temporal logic.
            </summary>
            <param name="ledgerHistoryTable">Ledger history table.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo">
            <summary>
            This class caches server and database information for subsequent use
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.AddOrUpdateServerInfo(System.Data.IDbConnection,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo)">
             <summary>
             Adds or updates the CachedInfo object
             </summary>
            <param name="connection">A reference to the connection object</param>
            <param name="serverInfo">ServerInfo to cache</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.AddOrUpdateServerInfo(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo)">
             <summary>
             Adds or updates the CachedInfo object
             </summary>
            <param name="builder">A reference to the connection string builder</param>
            <param name="serverInfo">ServerInfo to cache</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.AddOrUpdateServerInfo(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo)">
             <summary>
             Adds or updates the CachedInfo object
             </summary>
            <param name="connectionFactory">A reference to the connection factory object</param>
            <param name="serverInfo">ServerInfo to cache</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.TryGetServerInfo(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
            <summary>
            Gets server info from cache
            </summary>
            <param name="builder">Connection string builder</param>
            <param name="serverInfo">server info to get from cache</param>
            <returns>true if the key was found in the cache</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.TryGetServerInfo(System.Data.IDbConnection,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
            <summary>
            Gets server info from cache
            </summary>
            <param name="connection">SQL connection instance</param>
            <param name="serverInfo">server info to get from cache</param>
            <returns>true if the key was found in the cache</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.TryGetServerInfo(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
            <summary>
            Gets server info from cache
            </summary>
            <param name="connectionFactory">Connection factory</param>
            <param name="serverInfo">server info to get from cache</param>
            <returns>true if the key was found in the cache</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.GetQueryTimeoutSeconds(System.Data.IDbConnection)">
            <summary>
            Return the query time out seconds
            </summary>
            <param name="connection">A reference to the connection object.</param>
            <returns>The query time out seconds</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.GetQueryTimeoutSeconds(System.String)">
            <summary>
            Return the query time out seconds
            </summary>
            <param name="connection">The data source</param>
            <returns>The query time out seconds</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.AddOrUpdateServerInfo(System.String,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo)">
             <summary>
             Adds or updates the CachedInfo object
             </summary>
            <param name="dataSource">The name of the datasource.</param>
            <param name="serverInfo">Server info to cache</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.GetSqlConnectionStringBuilder(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Creates a SqlConnectionStringBuilder from a SqlConnectionFactory
            </summary>
            <param name="connection">SQL connection</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlClient.CachedServerAndDatabaseInfo.GetSqlConnectionStringBuilder(System.Data.IDbConnection)">
            <summary>
            Creates a SqlConnectionStringBuilder from a connection
            </summary>
            <param name="connection">SQL connection</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.SqlPropertyConverter">
            <summary>
            Used to convert the DSP project property from its string value
            to a Sql Version Number
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlPropertyConverter.DspToSqlVersionNumber(System.String)">
            <summary>
            Converts the dsp as a string (i.e. Microsoft.Data.Tools.Schema.Sql.Sql90DatabaseSchemaProvider)
            to a version number.
            </summary>
            <param name="dsp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.SqlPropertyConverter.SqlVersionNumberToDSP(System.Int32)">
            <summary>
            Converts the sql version number to the dsp as a string (i.e. Microsoft.Data.Tools.Schema.Sql.Sql90DatabaseSchemaProvider)
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.SqlSchemaModelErrorCodes.ServiceActions">
            <summary>
            These codes are used to message specific actions for extract and deployment operations.
            The primary consumer of these codes is the Import/Export service.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.StringPositionConverter">
            <summary>
            this class is designed to convert a string's offset to line / column
            and the reverse
            
            A line is defined as a sequence of characters followed by a carriage return ("\r"), 
            a line feed ("\n"), or a carriage return immediately followed by a line feed. 
            ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETDEVFX.v20.en/cpref8/html/M_System_IO_StringReader_ReadLine.htm
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.StringPositionConverter.ComputeLineColumn(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            A line is defined as a sequence of characters followed by a carriage return ("\r"), 
            a line feed ("\n"), or a carriage return immediately followed by a line feed. 
            ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETDEVFX.v20.en/cpref8/html/M_System_IO_StringReader_ReadLine.htm
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.StringPositionConverter.GetOffsetFromLineColumn(System.Int32,System.Int32,System.Int32@)">
            <summary>
            get offset based on line / column
            </summary>
            <param name="line">line number starting from 0</param>
            <param name="column">column number starting from 0</param>
            <param name="offset">offset starting from 0</param>
            <returns>true when success, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.StringPositionConverter.GetLineColumnFromOffset(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            get line / column values based on the offset
            </summary>
            <param name="offset">offset starting with 0</param>
            <param name="line">line starting with 0</param>
            <param name="column">column starting with 0</param>
            <returns>true when successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.StringPositionConverter.GetColumnOfPrecedingWhitespace(System.Int32,System.Int32,System.Int32@)">
            <summary>
            get the column number of the whitespace characters that precede the designed
            line / column
            </summary>
            <param name="line"></param>
            <param name="column"></param>
            <param name="newColumn"></param>
            <returns>true when successful, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.SubStringReader">
            <summary>
            This class implements a text reader that reads from a part of a string.
            
            This class is very similar to StringReader in CLR.  Only the constructor is different
            but we can't derive from it because there are no protected properties for the internals.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorBase">
            <summary>
            the class acts as the base class for calculators of various
            data types. a concrete class that is derived from this class
            calculates results of constant expressions of a particular
            data type. 
            
            the overriding methods should always return 
            an object of ConstantEvalutionResult, which is either newed up
            by the method or the method from base class (this class).
            
            when assigning a value to a ConstantEvalutionResult object
            through one of its setters, the corresponding datatype and
            evaluted properties are automatically set as well.
            
            the general pattern of EvaluateXXXX methods is to calculate
            the expressions that it understands and return the corresponding
            methods from base class otherwise.
            
            the EvaluateXXXX methods can always ignore checking null parameters,
            since it has been done bofore the methods are invoked. in addtion,
            all the operands have been acertained that they are all evaluted
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForAsciiString">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForBinary">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForBinary.CompareBinaryStrings(System.Byte[],System.Byte[])">
            <summary>
            compare two binary strings
            </summary>
            <param name="binary1"></param>
            <param name="binary2"></param>
            <returns>
            0: equal, 
            positive: lhs is greater than rhs, 
            negative: lhs is less than rhs</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForDecimal">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForInteger">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForMoney">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForReal">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantCalculatorForUnicodeString">
            <summary>
            please see ConstantColculatorBase for general comments
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantEvaluator.Evaluate(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantTypeCastingInfo}@)">
            <summary>
            this method can be used to evaluate a whole constant expression
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.Constants">
            <summary>
            This is just a wrapper for some frequently used constants.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#cctor">
            <summary>
            static ctor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo)">
            <summary>
            Copy constructor
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataType)">
            <summary>
            Constructor for datatype provided only
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataType,System.Int32)">
            <summary>
            Constructor for datatype with length, precision, or scale info provided
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataType,System.Int32,System.Int32)">
            <summary>
            Constructor for datatype, precision and scale provided
            </summary>
            <param name="type"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeReference)">
            <summary>
            Constructor for parser DataType
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTypeSpecifierBase)">
            <summary>
            Constructor for SqlTypeSpecifier
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeCompatibilityHelper.FindBestCompatibility(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,System.Boolean@)">
            <summary>
            find the best possible compatibility among two types when they are used 
            as operands for comparison and normal arithmetic operators such as regular
            plus and minus(not for string or binary data concatenation)
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="lhsIsPromoted">if return value is NoCasting or Incompatible,
            this output parameter has no meaning; if return value is Compatible or
            CompatibleWithDataLoss, true means lhs is promoted; false means rhs is
            promoted</param>
            <returns>the best possible compatibility</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeCompatibilityHelper.GetTypePrecedence(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo)">
            <summary>
            obtain type precedence
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeCompatibilityHelper.AdjustCompatibilityForConstantConversion(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.CompatibilityType)">
            <summary>
            obtaining compatibility for conversion is performed with the assumption 
            that both FROM and To are non-constant expressions. if FROM is a constant, 
            the compatibility is not accurate. the method adjusts the compatibility 
            type to reflect the actual situation
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="compatibilityType">current compatibility type</param>
            <returns>adjusted compatibility type</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeCompatibilityHelper.AdjustCompatibilityForConstantOperand(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.CompatibilityType)">
            <summary>
            compatibility checking for binary expressions is performed with the assumption 
            that both LHS and RHS are non-constant expressions. if one of them is a 
            constant, the compatibility is not accurate. the method adjusts the 
            compatibility type to reflect the actual situation.
            
            note that this adjustment is different from the adjustment for assignments
            in that for the assignment, the type of LHS is determined; but for the binary
            expressions, the types of the both operands can change. for instance,
            the compatibility type for @int = 0.99 is CompatibleWithDataLoss; but
            @int + 0.99 is Compatible (no data loss here, since they are both promoted
            to FLOAT(53)). In fact, this adjustement only handles the situations that
            are escaped from the assignment adjustment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetEvaluationResults(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression})">
            <summary>
            obtain the type evalution results for a list of expressions
            </summary>
            <param name="expressionList">operands for a FunctionCall</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.BooleanTernaryExpression)">
            <summary>
            the only ternary expression is BETWEEN 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.CreateTypeInfoForConversion(Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeReference,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo)">
            <summary>
            creating an object of TSqlDataTypeInfo based on SqlDataType particularly for
            CAST or CONVERT. It requires special treatment is due to the fact that 
            CAST / CONVERT uses 30 as default length for string / binary 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.AddTypeCastingIssue(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TSqlDataTypeInfo,Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.CompatibilityType,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Add a type casting issue if there is one. this version is used for the situation
            where an incompatible issue may exist
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="type"></param>
            <param name="astNode"></param>
            
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetTypeInfoForConstant(Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.ConstantEvaluationResult)">
            <summary>
            find the T-SQL data type for a constant
            </summary>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetConstantIntegerType(System.Int64)">
            <summary>
            for a given integer constant, find out the smallest T-SQL integer type
            that can hold its value
            </summary>
            <param name="integerValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetConstantRealType(System.Double)">
            <summary>
            for a given floating point (real) constant, find out if
            FLOAT or REAL is needed to hold its value
            </summary>
            <param name="realValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetConstantDecimalTypeInfo(System.Decimal)">
            <summary>
            For a given decimal constant, find out its precision and scale
            </summary>
            <param name="decimalValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Common.TypeEvaluator.TypeEvaluator.GetConstantMoneyType(System.Decimal)">
            <summary>
            for a given money constant, find out if MONEY or SMALLMONEY
            is needed to hold its value
            </summary>
            <param name="moneyValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Batch">
            <summary>A batch of SQL statements.</summary>
            <remarks>
            A batch is a set of SQL statements that can be executed on a SQL Server. A batch
            can contain more than one line (for example, the SQL code to create a stored procedure
            could contain 100 lines). The batch can also contain more than one SQL statement, but
            this is not usually the case.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="contents">The SQL statement that the batch contains</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="contents">The SQL statement that the batch contains</param>
            <param name="repeating">The SQL statement that the batch contains</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="contents">The SQL statement that the batch contains</param>
            <param name="repeating">The SQL statement that the batch contains</param>
            <param name="marker">True if the SQL statement should not be executed but is merely a marker (eg a GO statement)</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="contents">The SQL statement that the batch contains</param>
            <param name="repeating">The SQL statement that the batch contains</param>
            <param name="marker">True if the SQL statement should not be executed but is merely a marker (eg a GO statement)</param>
            <param name="extraCrLf">True if an extra CRLF has been appended to the SQL statement</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.ExtraCrLf">
            <summary>True if an extra CRLF has been appended to the batch.</summary>
            <remarks>
                Sometimes the definitions of stored procedures, views, and so on, do not end in a
                CRLF. If they are executed in SQL Query Analyzer, an extra CRLF is appended. If
                this flag is set, the extra CRLF will be stripped when the script is run using
                <see cref="!:Utils.ExecuteBlock"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.Marker">
            <summary>True if this batch is a separator (for example, a GO statement).</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.Repeating">
            <summary>
            True if the contents of the batch must be executed every time a command is
            executed.
            </summary>
            <remarks>
            If a variable declaration is made, this will be set to true because the variable
            must be declared at the beginning of every statement that is executed.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Batch.Contents">
            <summary>The contents of the batch.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.TargetObjectNullExText">
            <summary>
            Used when throwing an exception
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ObjectNotSupportedText">
            <summary>
            Used when the NotSupportedException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.NotSupportedText">
            <summary>
            Used when the NotSupportedException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.SinglePartName">
            <summary>
            Used when generating single part names
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.TwoPartName">
            <summary>
            Used when generating two part names
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ThreePartName">
            <summary>
            Used when generating three part names
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.BlobMissingSysCommentsEntry">
            <summary>
            Used when a blob has missing syscomments entries
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptRVAText">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_MissingClass">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_ClassCountsDiffer">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_DiffInAssemblyNames">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptDosStub">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptMetaDataTablesHeader">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptMetaDataHeader1">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptMetaDataHeader2">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptPEOptionalHeader1">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptPEOptionalHeader2">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_CorruptPEFileHeader">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrComparer_Onlyx86Assemblies">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_FieldMissing">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_DifferentField">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_DifferentMethodNumber">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_DifferentMethod">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_DifferentFieldNumber">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_DifferentClass">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_MissingClass">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.ClrClass_MissingMethod">
            <summary>
            Used when the ClrAssemblyComparerException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.CompareConstants.StatusEvent_NoStatus">
            <summary>
            Text sent along with StatusEvent to signal that no more
            status is forthcomming.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.CompareProgressEventArgs">
            <summary>
            Used to notify consumers of the progress of the schema compare
            operation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.AssemblySelectionDialogSchemaFilterText">
            <summary>
              Looks up a localized string similar to Data-tier Application Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.BatchParserWrapperExecutionEngineError">
            <summary>
              Looks up a localized string similar to SQL Execution error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.MissingReference">
            <summary>
              Looks up a localized string similar to No file was supplied for reference {0}; When {1} was created, the original referenced file was located {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.NotInReadMode">
            <summary>
              Looks up a localized string similar to Not writing any more - in read mode.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.SchemaCompare_BadSQLSchemaFileDNE">
            <summary>
              Looks up a localized string similar to Schema Compare does not support the specified Data-tier Application file. The file does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.SchemaCompare_InvalidSnapshotFile_ErrorMessage">
            <summary>
              Looks up a localized string similar to {0} is not a valid Data-tier Application file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.SQLSchemaFileInvalidDSP_ErrorMessage">
            <summary>
              Looks up a localized string similar to The database version obtained from Data-tier Application file {0} is not a valid database platform service..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResource.SQLSchemaFileSchemaVersionNotSupported_ErrorMessage">
            <summary>
              Looks up a localized string similar to Schema Version found in Data-tier Application file {0} is not supported..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Compare_SyncAction_Create">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Compare_SyncAction_Drop">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Compare_SyncAction_Skip">
            <summary>
              Looks up a localized string similar to No Action.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Compare_SyncAction_Update">
            <summary>
              Looks up a localized string similar to Change.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.CompareCannotHandleDacPac">
            <summary>
              Looks up a localized string similar to Schema Compare can not handle this dacpac version..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_BadConnectionString">
            <summary>
              Looks up a localized string similar to Schema Compare does not support the specified connection string..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_BadDSPType">
            <summary>
              Looks up a localized string similar to {0}: Schema Compare does not support the specified database version..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_BadSQLSchemaFile">
            <summary>
              Looks up a localized string similar to Schema Compare does not support the specified Data-tier Application file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_BadSQLSchemaFileNotExist">
            <summary>
              Looks up a localized string similar to The file does not exist: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_CapabilitiesMismatchErrorMessage">
            <summary>
              Looks up a localized string similar to You have specified types of schema models that cannot be compared. For more information, press F1..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ConnectionBased_UnableToDetermineDatabaseName">
            <summary>
              Looks up a localized string similar to {0}: Unable to determine the default initial catalog.  The database may be unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ConnectionBased_UnableToDetermineDSP">
            <summary>
              Looks up a localized string similar to {0}: Unable to determine the database platform type.  The database may be unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ConnectionBased_UnnamedDatabase">
            <summary>
              Looks up a localized string similar to &lt;unnamed&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ConnectionBasedModelCreator_LoadError">
            <summary>
              Looks up a localized string similar to {0}: Error during loading SchemaCompareConnectionBasedModelCreator extension..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_DBFileExtensionNotValid">
            <summary>
              Looks up a localized string similar to {0} does not have a valid Data-tier Application file extension..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_DefaultCatalog">
            <summary>
              Looks up a localized string similar to &lt;Default&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_GroupByAction">
            <summary>
              Looks up a localized string similar to Action.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_GroupByNone">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_GroupBySchema">
            <summary>
              Looks up a localized string similar to Schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_GroupByType">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_MissingSqlAuthPassword">
            <summary>
              Looks up a localized string similar to Unable to restore the password.  Enter a password by editing the connection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_NoDialogToDisplayError">
            <summary>
              Looks up a localized string similar to No dialog box has been registered for the target platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_NoSchemaName">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_OptionTitle">
            <summary>
              Looks up a localized string similar to Schema Compare Options for {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_OrphanedElement">
            <summary>
              Looks up a localized string similar to &lt;Orphaned&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_PropertyTypeName">
            <summary>
              Looks up a localized string similar to Property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_Provider_Database">
            <summary>
              Looks up a localized string similar to Database ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_Provider_File">
            <summary>
              Looks up a localized string similar to Data-tier Application File ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_Provider_Project">
            <summary>
              Looks up a localized string similar to Project ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_SchemaUnavailable">
            <summary>
              Looks up a localized string similar to Schema unavailable: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ScriptGeneration_CannotGenerateDeploymentPlan">
            <summary>
              Looks up a localized string similar to Cannot generate deployment plan..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ScriptGenerationError">
            <summary>
              Looks up a localized string similar to Error encountered during generation of script for {0} from category {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_ScriptGenerationMessage">
            <summary>
              Looks up a localized string similar to Script Generation: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_SourceChanged">
            <summary>
              Looks up a localized string similar to The source has been modified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_Update_UnknownError">
            <summary>
              Looks up a localized string similar to The target schema could not be updated successfully. For more information, see the Error List window..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.SchemaCompare_UpdateToProjectNotAllowed">
            <summary>
              Looks up a localized string similar to You cannot write updates to this type of target project..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.Unnamed">
            <summary>
              Looks up a localized string similar to &lt;unnamed&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.UpdateTargetConfirmationMessage">
            <summary>
              Looks up a localized string similar to Are you sure that you want to update the target?.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.UpdateTargetSaveFailed">
            <summary>
              Looks up a localized string similar to Update Target failed. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareResources.UpdateTargetSaveRequired">
            <summary>
              Looks up a localized string similar to One or more files will be saved before the update..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs">
            <summary>Arguments used in status events.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs.#ctor(System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="message">The status message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="percentage">The percentage complete.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="message">The status message.</param>
            <param name="percentage">The percentage complete.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs.Message">
            <summary>A progress message.</summary>
            <remarks>This can be <em>null</em>.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.CompareStatusEventArgs.Percentage">
            <summary>A percentage complete.</summary>
            <remarks>This can be <em>-1</em> if there is no percentage complete information.</remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString">
            <summary>A class representing a comparison between two single-line strings.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.#ctor">
            <summary>Constructor.</summary>
            <remarks>This is not usually called externally.</remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <remarks>This is not usually called externally.</remarks>
            <exclude/>
            <excludetoc/>
            <param name="leftString">The string to be displayed on the left.</param>
            <param name="rightString">The string to be displayed on the right.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Constructor.</summary>
            <remarks>This is not usually called externally.</remarks>
            <exclude/>
            <excludetoc/>
            <param name="leftString">The string to be displayed on the left.</param>
            <param name="rightString">The string to be displayed on the right.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs, and so on.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.LeftString">
            <summary>The string that is displayed on the left.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.RightString">
            <summary>The string that is displayed on the right.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.Different">
            <summary>True if the two strings are different.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.LeftStringPresent">
            <summary>True if there is a string on the left.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonString.RightStringPresent">
            <summary>True if there is a string on the right.</summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonStrings">
            <summary>A collection of single-line strings.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonStrings.#ctor">
            <summary>Constructor.</summary>
            <remarks>This is not usually called externally.</remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonStrings.Append(Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonStrings)">
            <summary>Append another set of ComparisonStrings.</summary>
            <param name="comparisonStrings">The object to append.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.DiffHelper">
            <summary>A helper class used to generate side-by-side string comparisons.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.DiffHelper.CompareStrings(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a representation of the side-by-side differences between two
            strings.
            </summary>
            <returns>A <see cref="T:Microsoft.Data.Tools.Schema.Sql.Compare.ComparisonStrings"/> object representing the differences.</returns>
            <param name="string1">The first string to compare.</param>
            <param name="string2">The second string to compare.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs, and so on.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType">
            <summary>Unicode types for SaveToFile.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType.UTF8">
            <summary>UTF-8 encoding, without preamble.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType.UTF8WithPreamble">
            <summary>UTF-8 encoding, with 3-byte preamble.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType.Unicode">
            <summary>UTF-16 encoding.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType.ASCII">
            <summary>ASCII encoding.</summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock">
            <summary>A series of SQL batches to be executed.</summary>
            <remarks>
            	<para>An ExecutionBlock contains a series of SQL batches that can be executed
                against a SQL database. It is essentially a wrapper over a text file, with extra
                information about batch markers (GO statements) and statements that must be
                repeated before any batch is run (such as variable declarations).</para>
            	<para>
                    An ExecutionBlock contains <see cref="T:Microsoft.Data.Tools.Schema.Sql.Compare.Batch"/> objects which, in turn,
                    contain <see cref="T:Microsoft.Data.Tools.Schema.Sql.Compare.Line"/> objects.
                </para>
            	<para>
                    The underlying stream can be accessed from
                    <see cref="!:Microsoft.Data.Tools.Schema.Compare.ExecutionBlock.GetFileStream">M</see>.
                </para>
            	<para>
                    ExecutionBlock objects are created by
                    <see cref="!:Microsoft.Data.Tools.Schema.Sql.Compare.Data.SqlProvider.GetMigrationSQL">M</see>
                    and <see cref="!:Microsoft.Data.Tools.Schema.Compare.Schema.Work.BuildFromDifferences">M</see>. It
                    should not be necessary to create an ExecutionBlock manually.
                </para>
            	<para>
                    It is essential to call the <see cref="M:System.IDisposable.Dispose"/> method of ExecutionBlock
                    objects to ensure that temporary files are deleted.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.#ctor(System.Int64)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.Dispose">
            <summary>Disposes of the object.</summary>
            <remarks>
            The ExecutionBlock makes extensive use of temporary files. It is therefore
            essential to dispose of the object to ensure that these files are deleted.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.AddBatch(System.String)">
            <summary>Adds a batch of SQL code.</summary>
            <param name="batch">The SQL statement to add.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.AddBatch(System.String,System.Boolean)">
            <summary>Adds a batch of SQL code to be repeated on every execution.</summary>
            <param name="batch">The SQL statement that the batch contains.</param>
            <param name="repeating">
            True if the batch must be repeated each time it is executed (for example, for a
            variable declaration).
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.GuardBatchSize(System.Int32)">
            <summary>
            Check if adding the number of characters in the current line will cause the current batch to overflow.
            </summary>
            <param name="bytesInLine">Number of bytes in the current line</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.AddOneLineFromBatch(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes one line from a batch to disk, updating indices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.CharCount">
            <summary>The number of characters in the ExecutionBlock.</summary>
            <remarks>
            Note that this is not always the same as the number of bytes because of Unicode
            issues.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.AddBatchMarker">
            <summary>Add a 'GO' statement as a batch marker.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.BatchWritten">
            <summary>For internal use only.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.MaxLineLength">
            <summary>The maximum length of a line.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.BatchCount">
            <summary>The number of batches.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.LineCount">
            <summary>The number of lines.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.GetLine(System.Int64)">
            <summary>Gets a line of SQL code.</summary>
            <returns>A line of SQL code.</returns>
            <param name="index">The index of the line to get.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.GetBatch(System.Int64)">
            <summary>Gets a batch of SQL code.</summary>
            <returns>A batch of SQL code.</returns>
            <param name="index">The index of the batch to get.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.StopWriting">
            <summary>Indicates that you have finished writing.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.ValidateSizeConstraint(System.Int32)">
            <summary>
            Checks if the temp file genereated for Execution block is under the limit
            </summary>
            <param name="fileSizeLimitInMB">Size Limit given in MB, this number should be greater than 0</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.GetString">
            <summary>Returns the contents of the ExecutionBlock.</summary>
            <returns>A large SQL statement.</returns>
            <remarks>
            If the ExecutionBlock contains a lot of SQL code, this method can cause virtual
            memory problems; you are recommended to use GetFileStream instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.GetFileStream">
            <summary>Returns a stream to the underlying SQL text file.</summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ExecutionBlock.SaveToFile(System.String,Microsoft.Data.Tools.Schema.Sql.Compare.EncodingType)">
            <summary>Saves a copy of the ExecutionBlock to a text file with the given encoding.</summary>
            <param name="fileName">The name of the file.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.IBlockWriter.AddBatch(System.String)">
            <summary>
            For internal use
            </summary>
            <param name="batch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.IBlockWriter.AddBatchMarker">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.IBlockWriter.BatchWritten">
            <summary>
            For internal use
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.ICancellable">
            <summary>An interface for objects with operations that can be cancelled.</summary>
            <remarks>
                SQL Compare and SQL Data Compare have operations that can take a long time and may
                need to be cancelled. Examples include registering databases in SQL Compare,
                generating SQL Data Compare scripts, and executing SQL scripts. 
                <para>If a long-running operation is cancelled, an OperationCanceledException is
                thrown.</para>
            	<para>
                    See <see cref="!:Microsoft.Data.Tools.Schema.Sql.Compare.Data.ComparisonSession"/> for a
                    code sample.
                </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.ICancellable.Status">
            <summary>An event handler for providing progress feedback.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.ICancellable.CancelOperation">
            <summary>Cancels the operation.</summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.StatusEventHandler">
            <summary>The delegate for status events.</summary>
            <param name="sender">The sender object.</param>
            <param name="e">The status event argument.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Line">
            <summary>Represents a line of SQL code.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Line.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="contents"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Line.Contents">
            <summary>The contents of the line.</summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Line.StartIndex">
            <summary>For internal use.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.DatabaseCatalogDriftDetectionAdaptor">
            <summary>
            Default IDriftDetectionAdaptor implementation which uses the static classes for drift detection.  SQLClient exceptions can be thrown from this
            class if connectivity to the DB is lost.  Is it expected that these exceptions will be caught higher in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IDriftDetectionAdaptor">
            <summary>
            Adaptor for Drift Detection functionality which can be overridden for testing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IDriftDetectionAdaptor.CreateBaselineStamp(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution)">
            <summary>
            Create a stamp representing the state of a database
            </summary>
            <param name="connectionFactory">database connection factory</param>
            <param name="importScope">The scope of elements to detected drift</param>
            <returns>the stamp</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IDriftDetectionAdaptor.DetectChanges(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp)">
            <summary>
            Detect whether the database has changed.
            </summary>
            <param name="connectionFactory">database connection factory</param>
            <param name="stamp">last stamp (generated by CreateBaselineStamp)</param>
            <returns>true if the database has changed, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IDriftDetectionAdaptor.ApplyTargetDrift(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp,System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Apply changes to the model if the database has drifted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IRefactoringCapableProvider.IsInvalid">
            <summary>
            Determines whether the internal state of the provider is invalid for refactoring-related operations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IRefactoringCapableProvider.ShouldApply">
            <summary>
            Determines whether refactorings should be applied to a model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IRefactoringCapableProvider.PrepareForApply(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Does any preparatory work that is required before applying the refactorings
            </summary>
            <param name="errors">Any errors that occur will be added here</param>
            <returns>true if no errors occured and prepatory work was successful</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.IRefactoringCapableProvider.GetBuildFileInfo">
            <summary>
            Gets the file info of the artifact that contains the refactoring log
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider">
            <summary>
            schema Comapare engine uses two ISchemaCompareModelProvider objects, (source and target) to do the comparison between them.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.ConnectionType">
            <summary>
            Type of Connection, handled by this Provider. 
            Database based, File based or Project Based.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Name">
            <summary>
            User-Visible Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.PathName">
            <summary>
            User-Visible Name with Path
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.InfoTip">
            <summary>
            User-Visible InfoTip
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.DatabaseName">
            <summary>
            Database name used in script generation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.DatabaseSchemaProvider">
            <summary>
            returns the DSP for the current Provider
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.RefactoringProvider">
            <summary>
            Returns the provider for refactoring-related operations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value).  Will not return null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Refactorings">
            <summary>
            Refactorings.  Will not return null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.ShouldRefactoringBeAppliedToModel">
            <summary>
            Returns whether the provider should have refactoring log applied to it
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.CompositeModelSupported">
            <summary>
            Returns whether composite models are allowed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.UnsupportedObjectTypes">
            <summary>
            The sql object types not supported by the model provider
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.IsStale">
            <summary>
            Is the source stale (out of sync with previous schema model that was generated)?
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Validated">
            <summary>
            Has the provider been successfully validated (since the last invalidating event).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.ShouldSaveDirtyModelFilesWhenTarget">
            <summary>
            Should dirty buffers for project model files get saved to disk before an Update Target for this model provider as the target?
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.SchemaModel">
            <summary>
            The currently loaded schema model.  Can be null if no model is loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Validate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Verifies that the ISchemaCompareModelProvider object is valid.
            </summary>
            <param name="errorManager">Error manager to log errors and warnings to</param>
            <returns>true if the model provider is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Populate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Fetch the model from the target.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.PopulateIfStale(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Fetch the model from the target if it is stale or null.  If not stale or null, the current model is returned.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <param name="stale">Whether the model was stale.  true if stale, otherwise false.</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.IsEqual(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider)">
            <summary>
            Check to see if current model provider and given provider are identical
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Serialize(System.Xml.XmlNode)">
            <summary>
            Serializes this model provider to the xml writer
            </summary>
            <param name="parent"></param>
            <returns>True if it was successful</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes state from the xml node
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Uninitialize">
            <summary>
            Used to uninitialize the provider (this happens when the pane goes
            back to the watermark)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.Cancel">
            <summary>
            Requests that any running actions be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.ResetCancel">
            <summary>
            Resets the cancel flag back to uncanceled
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.InitializeDeploymentOptions(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Does necessary sets or overrides when used as a target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.CanContainServerScopedElements(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Returns if the Provider can populate Server scoped elements
            </summary>
            <returns>True is the Provider can populate server elements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.CanContainDatabaseScopedElements(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns if the Provider can populate database scoped elements
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider.PopulateServerScopedObjects">
            <summary>
            Determines if Server scoped elements should should be populated.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonChangeDefinitionModifier">
            <summary>
            Provides primitives for modifying a ModelComparisonChangeDefinition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonResultModifier">
            <summary>
            Provides primitives for modifying a ModelComparisonResult
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonResultRefactoringMediator">
            <summary>
            Modifies ModelComparisonResult to reconcile the fact that the
            comparison results for identity-refactored elements may be equal
            name-wise since the model that did not have refactored elements will
            have the IdentityChangeLog applied to it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonResultRefactoringMediator.Reconcile">
            <summary>
            Makes necessary changes to the comparison result based on the
            assumption that identity change log of the project has been
            applied to either the source or target model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonResultRefactoringMediator.CollectAndInsertChangeDefinitions">
            <summary>
            Finds elements considered equal in the comparison result
            due to the identity change log apply and moves them to their
            appropriate non-equal collection in the comparison result
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ComparisonResultRefactoringMediator.ModifyUpdatesForRefactorings(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ElementKeyValueContext,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition})">
            <summary>
            Goes through the composing and hierarchical children of the given
            elements and determines if they too need to have a doctored
            change definition created.  It also adds properties and 
            relationships to the parent change definition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ElementKeyValueContext">
            <summary>
            Handles the concerns of choosing an element for various contexts when considering swap of source/target models
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ElementKeyValueContext.RefactorLogElement">
            <summary>
            The element that originally had the refactoring done to it
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ElementKeyValueContext.ChangeDefinitionKey">
            <summary>
            The element to use for the key to a change definition in the comparison result *Modified collections
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Refactoring.ElementKeyValueContext.ChangeDefinitionTarget">
            <summary>
            The element to use for the target element of a change definition in the comparison result *Modified collections
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareBuildInfo">
            <summary>
            Represents the file state information for a build artifact.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareBuildInfo.FileName">
            <summary>
            Gets the file name associated with the build info.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareDataColumns">
            <summary>
            The columns that represent the data grid columns
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareColumnMappings">
            <summary>
            Allows access to mappings of column-to-index and column-to-name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareColumnMappings.ColumnIndexMapping">
            <summary>
            Accessor to column-to-index mapping to affect column order
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareColumnMappings.ColumnNameMapping">
            <summary>
            Accessor to column-to-name mapping to affect column naming
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator">
            <summary>
            Creates model from a connection string
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.Cancel">
            <summary>
            Requests that any running actions be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.ResetCancel">
            <summary>
            Resets the cancel flag back to uncanceled
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.Populate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Reverse engineers the database in the same manner as import
            master database will have all server objects but non-master
            databases will remove non-referenced server objects.  All
            object types are brought in with filtering to be handled by
            the post filters
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <returns>
            The resultant DataSchemaModel that contains a representation of the objects in the database,
            which has the connection string of base.ConnectionString; if a SqlReverseEngineerException is caught,
            it will be added as an error in errorManager and null will be returned
            </returns>
            <remarks>Caller should handle exceptions other than SqlReverseEngineerException</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.ConnectionFactory">
            <summary>
            Connection String which contains the connection information
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.OriginalConnectionFactory">
            <summary>
            Connection String used to create this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.DSP">
            <summary>
            The DSP 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.Canceled">
            <summary>
            Bool to see if Population Job has been canceled. It will be used to cancel population
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelCreator.HasServerPermissions(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Returns true if the user has access to server scoped elements. 
            </summary>
            <remarks>
            A special case is made for the master database. This function always returns true for master databases as 
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider">
            <summary>
            This class encapsulates the database, the model provider
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.ConnectionBasedModelProviderElementName">
            <summary>
            The XML element name for serialization
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.ConnectionFactory">
            <summary>
            Connection String which contains the connection information
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.ConnectionBasedModelCreator">
            <summary>
            Encapsulates model creation from connection string
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.ConnectionType">
            <summary>
            Type of Connection, handled by this Provider. 
            It will be "Database" for this type of providers
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.OnValidate(Microsoft.Data.Tools.Schema.ErrorManager)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.Populate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Fetch the model from the target.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.PopulateIfStale(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Fetch the model from the target if it is stale or null.  If not stale or null, the current model is returned.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <param name="stale">Whether the model was stale.  true if stale, otherwise false.</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.IsStale">
            <summary>
            Is the source stale (out of sync with previous schema model that was generated)?
            </summary>
            <remarks>
            The current implementation of Drift Detection does not detect changes to non-timestamped objects (e.g. database options).
            So if the only changes in the DB are non-timestamped objects, then this method will return a false negative.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.Cancel">
            <summary>
            Requests that any running actions be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.ResetCancel">
            <summary>
            Resets the cancel flag back to uncanceled
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.InitializeDeploymentOptions(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Default setting of deploy option
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value)
            </summary>
            <remarks>Databases don't have variable bindings</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionBasedModelProvider.Refactorings">
            <summary>
            Refactorings.
            </summary>
            <remarks>Databases don't actually contain full refactoring records. The have a refactor log, but that only records the applied refactorings.
            The deployment engine always fetches these applied refactorings directly from the database anyway, so we don't need to fetch them here.</remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareConnectionType">
            <summary>
            Type of connection used in ISchemaCompareModelProvider object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement">
            <summary>
            When a row in Schema Compare Grid is skipped from updating, during serialization, that information needs to be
            persisted. This class contains the information needed to save the object in Serialized form.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.ParentElement">
            <summary>
            Parent model element of the skipped model element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.Type">
            <summary>
            Type of the skipped model element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.NameParts">
            <summary>
            Name parts of the skipped model element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.ModelProvider">
            <summary>
            Information about the Connection. (It could be source or taget)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.ParentType">
            <summary>
            Type of the parent Model Element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.ParentNameParts">
            <summary>
            Name parts of Parent Model Element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.GetIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Obtains Identifier information from element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.TryParseExcludedElement(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@)">
            <summary>
            From this ExcludedElement object, it parses out the IModelElement object
            </summary>
            <param name="model"></param>
            <param name="modelElements"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.Deserialize(System.Xml.XmlNode)">
            <summary>
            Call to Deserialazation 
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.Serialize(System.Xml.XmlNode,System.Xml.XmlNode@)">
            <summary>
            Serializes the information to the specified xml node
            </summary>
            <param name="parent"></param>
            <param name="createdNode"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareExcludedElement.GetElementsFromParts(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Type,System.Collections.Generic.IList{System.String},Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Weaves the name parts back into ModelElement. Ideally the number of elements in the list should be just one, but 
            ambiguity may occur. We use other information such as type to eliminate ambiguity.
            </summary>
            <param name="model"></param>
            <param name="type"></param>
            <param name="nameParts"></param>
            <param name="queryFilter"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator">
            <summary>
            This is the definition of one of the Schema Compare Extension points.
            This class provides the DSP specific FileBasedModelCreator
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.SourceFile">
            <summary>
            The associated file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.Refactorings">
            <summary>
            Refactorings
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.UnsupportedObjectTypes">
            <summary>
            Object types not supported by the file type
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.GetDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@,System.Boolean@)">
            <summary>
            Get the key information from the database file, such as DSP, and any other relevant information.
            Get the DSP from the database file
            The Second purpose is to validate that the file is a valid database file and is recognized by the this class
            Return null otherwise.
            </summary>
            <param name="errorManager">
            An object for returning any errors encountered during getting the information from the file
            </param>
            <param name="hasRefactorLog">whether the model contains a refactor log or not</param>
            <param name="shouldApplyRefactorLog">whether refactorlog of source model should be applied to this model as the target</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.Populate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Populates the SchemaModel from the Database file.
            </summary>
            <param name="errorManager">
            An object for returning any errors encountered during the model population
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareFileBasedModelCreator.AddErrorToErrorManager(Microsoft.Data.Tools.Schema.ErrorManager,System.String)">
            <summary>
            Add an error to the error manager
            </summary>
            <param name="errorManager">The error manager.  Must not be null.</param>
            <param name="errorMessage">The error text.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.ConnectionType">
            <summary>
            Type of Connection, handled by this Provider. 
            Database based, File based or Project Based.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.SchemaModel">
            <summary>
            The last populated schema model.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Validate(Microsoft.Data.Tools.Schema.ErrorManager)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.OnValidate(Microsoft.Data.Tools.Schema.ErrorManager)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Populate(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Fetch the model from the target.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.PopulateIfStale(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Fetch the model from the target if it is stale or null.  If not stale or null, the current model is returned.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <param name="stale">Whether the model was stale.  true if stale, otherwise false.</param>
            <returns>The resultant DataSchemaModel that contains a representation of the objects from the target</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Refactorings">
            <summary>
            Refactorings.  Will not return null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.IsEqual(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider)">
            <summary>
            It can be used to check if two providers are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Cancel">
            <summary>
            Requests that any running actions be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.ResetCancel">
            <summary>
            Resets the cancel flag back to uncanceled
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Serialize(System.Xml.XmlNode)">
            <summary>
            Serializes this model provider to the xml writer
            </summary>
            <param name="parent"></param>
            <returns>True if it was successful</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes state from the xml node
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.Uninitialize">
            <summary>
            Used to uninitialize the provider
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.InitializeDeploymentOptions(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Default setting of deploy option
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.IsEqualTemplate(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider)">
            <summary>
            Forces the childClass to implement the following method
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.CanContainServerScopedElements(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean@)">
            <summary>
            Returns if a provider can contain server elements
            </summary>
            <remarks>
            For Database Providers permissions may block server elements from being populated.
            </remarks>
            <returns>True if the provider can contain server elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.CanContainDatabaseScopedElements(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns if a provider can contain database elements
            </summary>
            <remarks>
            For Database Providers permissions may block database elements from being populated.
            </remarks>
            <returns>True if the provider can contain server elements.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareModelProviderBase.PopulateServerScopedObjects">
            <summary>
            Determines if server elements should
            be populated.
            </summary>
            <remarks>
            This property may not be honored by all providers. This only affects database providers that fetch elements based on user permissions.        
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareReverseEngineerFactory">
            <summary>    
            details of creating a reverse engineer instance
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareReverseEngineerFactory.GetREConstructor">
            <summary>
            ReverseEngineerConstructor is used to construct ReverseEngineer object,
            which is than used to reverse engineer the database into a schema model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareReverseEngineerFactory.Creator">
            <summary>
            Refer to creator for necessary properties
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService">
            <summary>
            This is the definition of one of the Schema Compare Extension points.
            Its Implementation will enable the viewing of DSP specific object scripts
            in Object Definition Window, and Update Script Tool Window (which will also be used to 
            update target).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.SqlScriptDomGenerator">
            <summary>
            Get the instance of DSP Specific SqlScriptDomGenerator
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.ScriptGenerator">
            <summary>
            Get the instance of DSP Specific ScriptGenerator
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.Canceled">
            <summary>
            A flag which is set when some running operation needs to be canceled
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.DatabaseSchemaProvider">
            <summary>
            Instance of specific DSP 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GetDependencyInformation(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanArtifact,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@,System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@)">
            <summary>
            It returns the relating and related elements for given modelElement.
            DSP's can have their own implementation of this API.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.ModelComparer">
            <summary>
            Schema Comparing Engine
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GenerateObjectDefinition(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            This is a Generic implementation of a method which will provide the "Create Object Script" for displaying in
            Object Definition window. It should be good for most scenario, but if Providers want to have their own 
            implementation, they can override this method with their own. 
            </summary>
            <param name="modelElement"></param>
            <param name="create">true for create script, false for drop script</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GenerateObjectScript(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Method to Generate script from the fragment
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GetContainingElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Given the model Element, it will return the element which contains the script for the element. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GetHierarchicalScripts(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptContext,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates a script of an element and its hierarchical children in the same order as that of import.
            Multiple child objects of the same type will be in a deterministic order determined by the 
            collation comparer provided by the script context
            </summary>
            <param name="element">The root of the element hierarchy to be scripted</param>
            <param name="context">The script context required to script the element</param>
            <returns>
            a batch script composed of the parent create script and those of applicable hierarchical children
            </returns>
            <remarks>
            The portion of the script for the element passed in will be empty if it is a system object
            or its object type has been excluded, which will not result in a batch separator at the
            beginning of the script
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GetHierarchicalDescendants(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Predicate{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Gets all hierarchical descendants of an element that should be included.
            </summary>
            <param name="element">The element for which to retrieve hierarchical descendants</param>
            <param name="isIncluded">Checks if a hierarchical child element should be included</param>
            <returns>A collection of the hierarchical descendants</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptService.GetScript(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generates a script for an element
            </summary>
            <param name="modelElement">The element to </param>
            <returns>The creation script for the element</returns>
            <remarks>For various reasons, such as the element is a system-object, the script can be empty</remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ObjectCreationScriptItem">
            <summary>
            Information about generated script entry for source and target model elements.
            To calculate script item span one needs to take previous item's script end position.
            In case if source or target elements were missing the corresponding SourceEndPosition or TargetEndPosition
            values will be the same as in previous ObjectCreationScriptItem in the list.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ObjectCreationScriptItem.SourceEndPosition">
            <summary>
            Index of char after the last char of source script.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ObjectCreationScriptItem.TargetEndPosition">
            <summary>
            Index of char after the last char of target script.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ObjectCreationScriptItem.ElementClass">
            <summary>
            The element class of source and/or target script.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService">
            <summary>
            This is the definition of one of the Schema Compare Extension points.
            This class provides the DSP specific settings used by Schema Compare session.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService._types">
            <summary>
            Instance of specific DSP 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.DatabaseSchemaProvider">
            <summary>
            Accessor for DSP
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.IsCmdVariableSubstitutionEnabled">
            <summary>
            returns true, if the DSP supports CmdVariableSubstitution
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Way to override the name of any modelElement so that it could be different from
            what obtained from UserInteractionServices
            </summary>
            <param name="element"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.AddPropertyOverridesBeforeModelPopulation(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider,Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Additions done to the properties before SchemaModels are populated
            </summary>
            <param name="options"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="sourceModelProvider"></param>
            <param name="targetModelProvider"></param>
            <param name="comparerConfig"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.AddPropertyOverridesAfterModelPopulation(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Boolean)">
            <summary>
            Additions done to the properties after SchemaModels are populated
            </summary>
            <param name="projectModel"></param>
            <param name="databaseModel"></param>
            <param name="databaseModelProvider"></param>
            <param name="comparerConfig"></param>
            <param name="isTargetDatabase"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.GetPropertyValue(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Provides override for obtaining the value of a property
            </summary>
            <param name="parentElement"></param>
            <param name="propertyClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.ConvertPropertyValueToString(System.Object)">
            <summary>
            Used for displaying properties in comparison window in string format
            </summary>
            <param name="valueObject"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.ConfigurationOptions">
            <summary>
            Configuration Options used during comparing the schema models, and during generation of deployment script.
            SubClass SqlSchemaCompareSettingsService overrides this property
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.CreateConfigurationOptions">
            <summary>
            Create the configuration options object.  Will not return null.
            </summary>
            <returns>A configuration options object.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.DisplayableTopElementClassesTypes">
            <summary>
            This list is used in populating the default ComparisonFilter getter. 
            It can also be used to populate DisplayableTopElementClasses property getter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.DisplayableTopElementClasses">
            <summary>
            Gives us the list of all ElementClasses which will be displayed while doing schema compare
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.SkippedElementClasses">
            <summary>
            A collection of ModelElementClass that are never to be displayed
            </summary>        
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.AreModelElementsSorted(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            During listing ModelElements in the grid, they will sorted based on their names
            if the following method returns true. Otherwise, they will be listed as per the sequence
            they appear in script.
            </summary>
            <param name="elementClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.IsModelElementDisplayedAtTopLevel(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean@)">
            <summary>
            Encapsulates all the logic that determines if the element should be displayed at the top-level
            </summary>
            <param name="modelElement">the model element in question</param>
            <param name="orphaned">true if the element was a promoted orphan, otherwise false</param>
            <returns>true if it should be displayed; false, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.AddProperty(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Utility to add a child to the xml document
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.GetProperties(System.Xml.XmlNode)">
            <summary>
            Returns a list of properties under the xml node
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.SerializationData">
            <summary>
            Get the options we should serialize
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.Serialize(System.Xml.XmlNode)">
            <summary>
            Serialize out our options
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the state of this service
            </summary>
            <param name="parent">the parent xml node from which to deserialize</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates">
            <summary>
            The states of the schema compare state machine
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.EntryCheckingProviders">
            <summary>
            When launched, checking the providers
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.NotReady">
            <summary>
            Not ready to do an explicit compare action, where both source and target are not specified yet
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ComparingCheckingProviders">
            <summary>
            Comparing - CheckingProviders substate
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ComparingModelRetrieve">
            <summary>
            Comparing - doing drift detection and model retrieval
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ComparingModelCompare">
            <summary>
            Comparing - Actually comparing the two models
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.Error">
            <summary>
            generic error state
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorBothModelsDependencyGraph">
            <summary>
            Error state - Both models have an error when creating the dependency graph after a comparison
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorSourceModelDependencyGraph">
            <summary>
            Error state - Source model has an error when creating the dependency graph after a comparison
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorTargetModelDependencyGraph">
            <summary>
            Error state - Target model has an error when creating the dependency graph after a comparison
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorBothModelsGenerateScript">
            <summary>
            Error state - Both models have an error when generating update script
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorSourceModelGenerateScript">
            <summary>
            Error state - Source model has an error when generating update script
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareStates.ErrorTargetModelGenerateScript">
            <summary>
            Error state - Target model has an error when generating update script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Sql100SchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80,90 and 100 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Sql110SchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80, 90, 100, and 110 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Sql120SchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80, 90, 100, 110 and 120 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Sql130SchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80, 90, 100, 110 , 120 and 130 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.Sql90SchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80,90 and 100 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlAzureSchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80,90 and 100 types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlDwSchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the toplevel class types in priority order.  This allows merging of
            80, 90, 100, 110, 120 and 130 types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SQLSchemaBasedModelCreator.LoadReferencesInSQLSchemaFile(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader,System.String,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Todo: To be refactored after GDR so that we have a common place to call this from Deployment.cs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.DisplayableTopElementClassesTypesInPriority">
            <summary>
            Used to collect the top level class types in priority order.  This allows merging of
            80,90 and 100 types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.DisplayableTopElementClasses">
            <summary>
            Gives us the list of top level ElementClasses which will be displayed while doing schema compare
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.CreateConfigurationOptions">
            <summary>
            Create the configuration options object.  Will not return null.
            </summary>
            <returns>A configuration options object.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.IsCmdVariableSubstitutionEnabled">
            <summary>
            IsCmdVariableSubstitutionEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.SerializationData">
            <summary>
            Return the options we should serialize
            Set the options in this class from a set of serialized options
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.AddPropertyOverridesAfterModelPopulation(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.Compare.Schema.ISchemaCompareModelProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Boolean)">
            <summary>
            1. Based on Tools options settings, modify source side SqlDatabaseOptions object
            2. Call SqlDeployment.AddPropertyOverrides, when source is project and target is database
            3. Call ImportServerModel()
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareSettingsService.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Override to allow special treatments for unnamed inline constraints who might have name in 
            annotation
            </summary>
            <param name="element"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.InsertAfterType(System.Collections.Generic.IList{System.Type},System.Type,System.Type)">
            <summary>
            Inserts a schema compare type into the list of types (which are in display order)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.CompareSchemaModelByVersion(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Returns either 0, -1, or 1 indicating if sourcePlatform is different than targetPlatform.
            </summary>
            <returns>
            - 0 if sourcePlatform is the same as targetPlatform.
            - 1 if targetPlatform is higher than sourcePlatform.
            - -1 otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.IsModelElementACompositeProjectReference(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            In Composite project Schenario, this method will be called to find out if the modelElement
            is really a external reference.
            </summary>
            <param name="modelElement">The model element in question</param>
            <returns>true if it is a composite project reference</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.GetElementType(System.String)">
            <summary>
            Returns an element type for the argument type string, but ignores the assembly version
            </summary>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.IsValidComparisonForDw(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Compares whether the given Source and Target platforms are valid for Dw.
            </summary>
            <param name="sourcePlatform">The Source platform</param>
            <param name="targetPlatform">The Target platform</param>
            <returns>Returns true if the comparison is valid</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SqlSchemaCompareUtilities.IsValidComparisonForSqlServerless(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Compares whether the given Source and Target platforms are valid for SQL Serverless pools.
            </summary>
            <param name="sourcePlatform">The Source platform</param>
            <param name="targetPlatform">The Target platform</param>
            <returns>Returns true if the comparison is valid</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Compare.Utils">
            <summary>
            A utilities class that contains methods used in both SQL Compare and SQL Data
            Compare.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Compare.Utils.GetSchemaName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareSettingsService)">
            <summary>
            Finds the schema parent and returns its simple name if found
            If modelElement is orphaned, then the special schema for orphaned elements is returned;
            If modelElement is not top-level, then string.Empty is returned;
            otherwise, the simple name of the schema is returned, or a
            default when there is no schema associated with the element
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.StreamUtils.BufferSize">
            <summary>
            Buffer size to be used by the package routines
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.StreamUtils.CopyStream(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            This method copies the source stream to the package part target stream.
            </summary>
            <param name="source">The data to write to the package.</param>
            <param name="target">The destination where the data should be written.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.GraphUtils.IsGraphColumnReference(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression)">
            <summary>
            True indicates the column reference expression is a graph column reference.
            </summary>
            <param name="column">The column reference expression.</param>
            <returns>Returns 'True' if the column is a graph column reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.GraphUtils.IsGraphPseudoColumn(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnType)">
            <summary>
            Determines if the graph column type is a pseudo column.
            </summary>
            <param name="columnType">The column type.</param>
            <returns>True if the column type is a pseudo column.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.GraphUtils.GetGraphColumnReferenceName(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression)">
            <summary>
            Gets the pseudo column string name if the column reference is not null and is a pseudo column.
            </summary>
            <param name="column">The column to check.</param>
            <returns>String.Empty if the column is null or not a pseudo column, the appropriate name otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.GraphUtils.GetGraphColumnReferenceFromColumnType(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnType)">
            <summary>
            Gets the graph pseduo column name from the provided column type.
            </summary>
            <param name="columnType">The column type.</param>
            <returns>The pseudo column name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.GraphUtils.SetGraphColumnTypeAndSubstituteName(System.Int32,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGraphType@,System.String@)">
            <summary>
            Sets the column graph type and substitute column name for the indexed column populators based on the graph type
            and the 'isNode' flag. 
            </summary>
            <param name="graphType">The integer graph type (from the engine).</param>
            <param name="isNode">True indicates a node table.</param>
            <param name="sqlColumnGraphType">A reference to the sql column graph type to set. Defaults to 'None'.</param>
            <param name="substituteColumnName">A reference to the substitute column name. Defaults to 'null'.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager">
            <summary>
            This class provides connection management abstraction.
            </summary>
            <summary>
            This class provides connection management abstraction.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.Create(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Boolean)">
            <summary>
            Creates connection manager from given connection.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="cacheConnections">If true connections are reused between operations.</param>
            <returns>Connection manager.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.EngineInfo">
            <summary>
            Gets the engine type and version info of connected server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.VersionMajor">
            <summary>
            Gets the major version of the Server connected to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.ConnectionFactory">
            <summary>
            Gets the connection factory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.GetExecutionContext">
            <summary>
            Gets any execution context.
            Given context will have undetermined database associated with.
            </summary>
            <returns>Returns IExecutionContext object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.GetExecutionContextWithRetry">
            <summary>
            Gets any execution context.
            Given context will have undetermined database associated with.
            </summary>
            <returns>Returns IExecutionContext object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.GetDatabaseExecutionContext(System.String)">
            <summary>
            Gets execution context for given database.
            All statements executed in this context will be executed having current database
            set to given database.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Returns IExecutionContext object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.GetDatabaseExecutionContextWithRetry(System.String)">
            <summary>
            Gets execution context for given database.
            All statements executed in this context will be executed having current database
            set to given database.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Returns IExecutionContext object.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ConnectionRetryPolicy">
            <summary>
            Gets or sets ConnectionRetryPolicy used to determine how to handle connection level failures
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.CommandRetryPolicy">
            <summary>
            Gets or sets CommandRetryPolicy used to determine how to handle command level failures
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.CreateSqlBulkCopy(Microsoft.Data.SqlClient.SqlBulkCopyOptions,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Create a SqlBulkCopy class given the options.  This object should be placed in a using block to ensure it is cleaned up.
            </summary>
            <param name="copyOptions">SqlBulkCopyOptions desired for the new object</param>
            <param name="sqlTransaction">Optional SqlTransaction object</param>
            <returns>A new SqlBulkCopy instance</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.CreateSqlTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Create a transaction for this context
            </summary>
            <param name="isolationLevel">Optional isolation level.</param>
            <returns>A SqlTransaction instance.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ConnectionContextId">
            <summary>
            Gets the context_info for the current connection.  This will return an empty guid for in prem, but will
            give us to the contextid for Sql Azure.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteNonQuery(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. No retry policy is used.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteNonQuery(System.String)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. No retry policy is used.
            </summary>
            <param name="sqlString">The sql text string to be executed.  This is turned into a sqlcommand and executed as a nonquery.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteNonQueryWithRetry(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteNonQueryWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry a failure while executing the sqlCommand.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteNonQueryWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the sqlCommand.
            Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The sqlCommand retry policy defining whether to retry a sqlCommand if it fails while executing.</param>
            <param name="connectionRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the sqlCommand.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReader(System.String)">
            <summary>
            Sends the specified string as a sqlCommand to the current connection. No retry policy is used.
            </summary>
            <param name="sqlString">The sql string to execute</param>
            <returns>A System.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReader(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Sends the specified sqlCommand to the connection. No retry policy is used when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReader(Microsoft.Data.SqlClient.SqlCommand,System.Data.CommandBehavior)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. No retry policy is used.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object containing the results.
            Uses the default retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object containing the results.
            Uses the specified retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry if failure occurs while executing the sqlCommand.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object containing the results.
            Uses the specified retry policy when executing the sqlCommand. Uses a separate specified retry policy when
            establishing a connection.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The sqlCommand retry policy defining whether to retry a sqlCommand if it fails while executing.</param>
            <param name="connectionRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the sqlCommand.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand,System.Data.CommandBehavior)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. Uses the default retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand,System.Data.CommandBehavior,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. Uses the specified retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry if a failure occurs while executing the sqlCommand.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteReaderWithRetry(Microsoft.Data.SqlClient.SqlCommand,System.Data.CommandBehavior,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Sends the specified sqlCommand to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. Uses the specified retry policy when executing the sqlCommand.
            Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <param name="commandRetryPolicy">The sqlCommand retry policy defining whether to retry a sqlCommand if it fails while executing.</param>
            <param name="connectionRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the sqlCommand.</param>
            <returns>A Microsoft.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteScalar(System.String)">
            <summary>
            Executes the sql, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            No retry policy is used.  The string is used to create a sql command.
            </summary>
            <param name="sqlString">The sql string to be executed</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteScalar(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            No retry policy is used.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteScalarWithRetry(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the default retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteScalarWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the specified retry policy when executing the sqlCommand.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry if a failure occurs while executing the sqlCommand.</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.ExecuteScalarWithRetry(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the specified retry policy when executing the sqlCommand. Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="sqlCommand">The sqlCommand object</param>
            <param name="commandRetryPolicy">The sqlCommand retry policy defining whether to retry a sqlCommand if it fails while executing.</param>
            <param name="connectionRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the sqlCommand.</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.EnsureValidConnection(Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Given a SqlCommand, make sure we have a valid open sql connection.  If we don't apply the given retry policy to establish one.
            </summary>
            <param name="sqlCommand">The SqlCommand we are checking</param>
            <param name="connectionRetryPolicy">The retrypolicy to be applied if we don't have a connection</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager.SingleDatabaseModeConnectionManager.ExecutionContext.UpdateLogEntry(Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry)">
            <summary>
            Updates DacLogEntry based upon this current connection context
            </summary>
            <param name="entry">Dac log entry.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.RegistrationValidationException">
            <summary>
            This is the base abstract class for registration validation exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.RegistrationValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegistrationValidationException class with a specified error message. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.RegistrationValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RegistrationValidationException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.RegistrationValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RegistrationValidationException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.MissingDacSchemaException">
            <summary>
            This exception is used when the Schema is missing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingDacSchemaException.#ctor">
            <summary>
            Initializes a new instance of the MissingDacSchemaException class
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingDacSchemaException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the MissingDacSchemaException class with a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingDacSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingDacSchemaException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.MissingServerPermissionsException">
            <summary>
            This exception is used when the caller does not have the right permissions on the server to
            register
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingServerPermissionsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingServerPermissionsException class with a specified error message. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingServerPermissionsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingServerPermissionsException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.MissingServerPermissionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingDacSchemaException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacException">
            <summary>
            Base exception class for all Dac exception classes
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.Init">
            <summary>
            Initializes instance properties
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.ProdVer">
            <summary>
            Product Version
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.SetHelpContext(System.String)">
            <summary>
            Sets Help Context
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacException.HelpLink">
            <summary>
            will output a link to the help web site
            <!--http://www.microsoft.com/products/ee/transform.aspx?ProdName=Microsoft%20SQL%20Server&ProdVer=09.00.0000.00&EvtSrc=MSSQLServer&EvtID=15401-->
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.BacpacException">
            <summary>
            This exception is thrown when an invalid operation occurs during Bacpac operations
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.BacpacException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BacpacException class with a specified error message. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.BacpacException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BacpacException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacExportException.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacExportException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacExportException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacExportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacOrigin.SetPublicDeploymentContributors(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets public deployment contributor data
            </summary>
            <param name="requiredContributors">Deployment contributor info - cannot be null</param>
            <param name="contributorArguments">Contributor arguments - can be null</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData">
            <summary>
            DacRegistrationData class represents a instance of a DAC type. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.#ctor(System.Byte[],System.String,System.Guid,System.DateTime,System.String)">
            <summary>
            Constructs a new Dac Instance
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.Name">
            <summary>
            InstanceName uniquely identifies an installed DAC Package
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.Id">
            <summary>
            This acts like an application id for a given package. 
            It also uniquely identifies an installed Dac instance on the back end store
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.TypeStream">
            <summary>
            Blob format of the corresponding DAC Type
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.DateCreated">
            <summary>
            This property gives the creation DateTime of the DAC instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationData.CreatedBy">
            <summary>
            This gets the login which created the DAC instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager">
            <summary>
            Manages the dac sysdac_history_internal and sysdac_instances views
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.IsRegistered">
            <summary>
            Determines if the sysdac_instances view is populated already
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.Register(System.String,System.String,System.String,System.Byte[],System.Guid)">
            <summary>
            Registers this dac in the sysdac_instances view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.UpdateRegistration(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Updates this dac in the sysdac_instances view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.GetDacRegistrationData(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String)">
            <summary>
            Returns the registration data from the sysdac_instances view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.UnRegister">
            <summary>
            Unregisters this dac in the sysdac_instances view
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.IsHistoryDisabled">
            <summary>
            Should we record history entries?
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.StartDeploy">
            <summary>
            Adds a history entry to indicate that a deploy has started.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.StartUnregister">
            <summary>
            Adds a history entry to indicate that an unregister has started.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.StartRegister">
            <summary>
            Adds a history entry to indicate that a register has started.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.Complete(System.Exception)">
            <summary>
            Completes the action in the history table
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacInstancesManager">
            <summary>
            Manages the sysdac_instances view
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager">
            <summary>
            This class allows access to the dac history table
            Azure       dbo.sysdac_history_internal on master
            non-Azure   dbo.sysdac_history_internal on msdb
            
            At the bottom of this class are some typical outputs produced by V2 dacpacs.  V3+ dacpacs
            attempt to correspond to the spirit of the history table, but not the exact sequence
            of events.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager.StartDeploy(System.Guid)">
            <summary>
            Starts a deploy operation over an already registered dacpac
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager.StartUnregister(System.Guid)">
            <summary>
            Starts an unregister operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager.StartRegister(System.Guid)">
            <summary>
            Starts an register operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager.Complete(System.Exception)">
            <summary>
            Complete the history entry operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DacRegistrationManager.DacHistoryManager.Start">
            <summary>
            Writes the inital entry
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ActionFailure">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ActionStarted">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ActionSuccess">
            <summary>
              Looks up a localized string similar to Complete.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.BacpacIOError">
            <summary>
              Looks up a localized string similar to 30001: Bacpac file stream must be writeable, have proper permissions, and enough free space for the operation to complete. A file IO exception has occurred..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.BacpacPackagePartExists">
            <summary>
              Looks up a localized string similar to 10013: Bacpac package part already exists for binary file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.BacpacPackagePartMissing">
            <summary>
              Looks up a localized string similar to 10014: Bacpac package part missing for binary file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ClassNumber">
            <summary>
              Looks up a localized string similar to Class: {0} Number: {1} .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.CommandRetryMessage">
            <summary>
              Looks up a localized string similar to Command retry number {0}. Delaying {1} ms before retry. Exception: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ConnectionRetryMessage">
            <summary>
              Looks up a localized string similar to Connection retry number {0}. Delaying {1} ms before retry. Exception: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DbTypeException">
            <summary>
              Looks up a localized string similar to 50006: Error the database type &apos;{0}&apos; is not understood by the data reader..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DeployContributor_DuplicateContributorId">
            <summary>
              Looks up a localized string similar to The DAC package contains duplicate entries for the deployment contributor id {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DeployContributor_InvalidContributorIndentifier">
            <summary>
              Looks up a localized string similar to Invalid contributor identifier &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DeployContributor_UnsupportedStreamVersion">
            <summary>
              Looks up a localized string similar to Unsupported deployment contributor stream version {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DeserializationError">
            <summary>
              Looks up a localized string similar to 10019: Unable to deserialize row from JSON provider.  File may be corrupt or in non supported format..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DisablingIndexesMessage">
            <summary>
              Looks up a localized string similar to Disabling indexes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.DisablingIndexMessage">
            <summary>
              Looks up a localized string similar to Disabling index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.EnablingIndexesMessage">
            <summary>
              Looks up a localized string similar to Enabling indexes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.EnablingIndexMessage">
            <summary>
              Looks up a localized string similar to Enabling index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ExportHeartBeat">
            <summary>
              Looks up a localized string similar to Export still processing....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ExportTableElapsed">
            <summary>
              Looks up a localized string similar to Exported table &apos;{0}&apos; in {1} milliseconds..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ExportTablePartCount">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; has a part count of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ExportTablePartRange">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos;. Export table part range ({1} - {2}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ExtractData">
            <summary>
              Looks up a localized string similar to Extract Data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.GatherTableStatistics">
            <summary>
              Looks up a localized string similar to Found estimated size of table {0}: {1} KB .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumnsError">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported index or statistic on an encrypted column using randomized encryption and an enclave-enabled column encryption key. Such objects are not allowed when used as part of a data package (bacpac file). Drop the object in the source database and retry the operation, or use sqlpackage.exe with the /p:IgnoreIndexesStatisticsOnEnclaveEnabledColumns=True option. For more information see https://go.microsoft.com/fwlink/?linkid=2124580..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumnsWarnings">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported index or statistic on an encrypted column using randomized encryption and an enclave-enabled column encryption key. The index or the statistic will not be included the resulting data package (bapcac file . For more information see https://go.microsoft.com/fwlink/?linkid=2124580.) .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ImportFormatException">
            <summary>
              Looks up a localized string similar to 50002: Bacpac header error: the header may be corrupt..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ImportIncorrectFormat">
            <summary>
              Looks up a localized string similar to 50004: Bacpac header contains invalid or unknown format &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ImportTableElapsed">
            <summary>
              Looks up a localized string similar to Imported table &apos;{0}&apos; in {1} milliseconds..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ImportTableHeaderMismatch">
            <summary>
              Looks up a localized string similar to 50003: Bacpac Table header does not match. &apos;{0}&apos; does not match &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LedgerAppendOnlyTableExtractWithDataError">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}] is an append-only ledger table. Extract with data is not supported for this table since the target database append-only ledger table data cannot be deleted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LedgerGeneratedAlwaysColumnWarning">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}].[{2}] is a column with system-generated values (a GENERATED ALWAYS column) in a ledger table. The data stored in the column will not be captured in the resulting bacpac file or the dacpac file. For more information see https://go.microsoft.com/fwlink/?linkid=2166135..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LedgerHistoryTableWarning">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}] is a history table for the [{2}].[{3}] updatable ledger table. Migrating data in history tables is not supported. The data will not be included in the resulting bacpac file or the dacpac file. For more information see https://go.microsoft.com/fwlink/?linkid=2165963..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LedgerViewDataWarning">
            <summary>
              Looks up a localized string similar to The ledger data in system views will not be captured in the resulting bacpac file or the dacpac file. For more information see https://go.microsoft.com/fwlink/?linkid=2165963..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LogEntryTitleAndMessage">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.LoggerProgressMessageFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ProgressPercentCompleted">
            <summary>
              Looks up a localized string similar to {0:P} done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ProgressTable">
            <summary>
              Looks up a localized string similar to Processing Table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ProgressTask">
            <summary>
              Looks up a localized string similar to Processing {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.PublishData">
            <summary>
              Looks up a localized string similar to Publish Data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.RetryOperationLimitExceeded">
            <summary>
              Looks up a localized string similar to 100007: A Sql operation has exceeded a defined limit for retry operations or retry timing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantDatetime2DataLossWarning">
            <summary>
              Looks up a localized string similar to There will be data loss when a value in a sql_variant DATETIME2 column with scale greater than 3 is deployed by the DAC Framework. The DATETIME2 value is limited to a scale equal to 3 during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantDecimalPrecisionNotSupportedWarning">
            <summary>
              Looks up a localized string similar to The DAC Framework is unable to deploy a DAC package containing a data value of type DECIMAL or NUMERIC within a sql_variant column that has precision greater than 28..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantLimitationsDetailWarningOnExport">
            <summary>
              Looks up a localized string similar to These limitations do not affect the fidelity of the data types and values stored in the DAC package created by the DAC Framework; they only apply to the data types and values resulting from deploying a DAC package to a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantLimitationsErrorOnImport">
            <summary>
              Looks up a localized string similar to Operation failed due to data limitations in the DAC Framework. View the deployment log for details or go to {0} for more information..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantLimitationsInformationLink">
            <summary>
              Looks up a localized string similar to For complete detail about the data that is affected and instructions for how to work around this for data deployment, please go to {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantLimitationsWarningOnExport">
            <summary>
              Looks up a localized string similar to This DAC package contains one or more data types or values to which these limitations apply..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.SqlVariantTypeFidelityLossWarning">
            <summary>
              Looks up a localized string similar to Certain properties on certain data types used within a sql_variant column are not preserved when deployed by the DAC Framework..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.DacResources.ThreePartNamesNotSupportedByPlatform">
            <summary>
              Looks up a localized string similar to External references are not supported when creating a package from this platform..
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ProcedureCommand.AddParameter(System.String,System.Object)">
            <summary>
            Add a sql parameter to the collection
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ProcedureCommand.ExecuteInSystemDatabase(Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager)">
            <summary>
            Create DacInstance script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.EnsureDacCreatorCommand.Execute">
            <summary>
            Ensure Dac creator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.CreateDacInstanceCommand.Execute">
            <summary>
            Create DacInstance script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DropDacInstanceCommand.Execute">
            <summary>
            Execute sp_sysdac_drop_database that detaches/drops the database based on
            DetachDatabase param.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.UpdateHistoryEntryCommand.Execute">
            <summary>
            Updates an existing entry in the history table
            </summary>
            <returns>number of rows in result</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.InsertHistoryEntryCommand.Execute">
            <summary>
            Inserts a new entry into history table
            </summary>
            <returns>action_id of the row that is being inserted</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.UpdateDacInstanceCommand.Execute">
            <summary>
            Create DacInstance script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.QueryDacInstancesId.Execute">
            <summary>
            Set the database to either in a readonly mode or readwrite mode.
            This kills all the existing connections and rollsback currrent transactions immediately.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.DatabaseUtils.GenerateTwoPartName(System.String,System.String)">
            <summary>
            This helper generates a two part name from an object name and schema.
            </summary>
            <param name="schema">The name of the schema.</param>
            <param name="objectName">The name of the schema bound object.</param>
            <returns>The name in the form '[schema].[object]'.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage">
            <summary>
            This class represents a bacpac in a package (ZIP) format.  It abstracts the data 
            subdirectory in the zip file and has helper logic to store data.
            <para>
            This class assumes that the zip file already exists (there is no code to create the file using
            this class) and the operations either read or modify the existing file.
            </para><para>
            One important method in this class is the stream to stream copy which takes a source stream
            and writes it into the zip file part stream.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.PackageBaseUri">
            <summary>
            URI of the base directory within the package to create table data directories
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TableDataFilename">
            <summary>
            The name of the file that table data is stored in under the schema.table directory
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BcpTableDataWithBatchTemplate">
            <summary>
            The template for the table data with a batch number
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BcpTableDataWithBatchPartitionTemplate">
            <summary>
            The template for the table data with a batch number and a partition number
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TableBlobTemplate">
            <summary>
            The template for the table binary file (BCP).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MinBinarySizeInBytes">
            <summary>
            The size a binary has exceed to be stored in an external file rather than inline.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.LoggingSize">
            <summary>
            The default size to wait for table rows to be processed to log during import and export operations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MinBatchSizeRowCount">
            <summary>
            The minimum row count in batches for use during import and export operations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TargetBatchSizeRowCount">
            <summary>
            The target batch size for export operations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MaxBatchSizeRowCount">
            <summary>
            The maximum row count in batches for use during import and export operations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MaxBatchSizeInBytes">
            <summary>
            The maximum byte count in batches for use during import and export operations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BlobChunkSizeInBytes">
            <summary>
            The size of the blob chunk. Blob reads and writes should be done in batches with size being mutliples of chunk size.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TwoGigabytesInBytes">
            <summary>
            Used as a stand-in for DATALENGTH value of encrypted columns.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MinBlobSizeInBytes">
            <summary>
            The minimum size of a blob to be retrieved separately rathen than with the rowstream.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BlobBatchSizeInBytes">
            <summary>
            The size of the blob chunk. Blob reads and writes should be done in batches with size being mutliples of chunk size.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.MaxBinarySizeInBytes">
            <summary>
            The maximum size of a binary column values we will allow.  Columns larger than this must be streamed, otherwise will throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.ExportTablePartCount">
            <summary>
            The desired number of table parts during export.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BinColumnFileMarker">
            <summary>
            The string that marks a column as a column as a binary file on disk rather than inline.
            The reason this is safe is because this byte combination cannot occur in BASE64.
            (A-Z a-z 0-9 are only legal values in BASE64)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BCPTableBlobIdentifierFormat">
            <summary>
            The string that marks a column as a binary file on disk rather than inline for BCP
            is composed of the BinColumnFileMarker followed by a GUID value that is the blob identifier
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BacpacEncoding">
            <summary>
            The encoding used in bacpac files to represent text data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.CompressionOption">
            <summary>
             Sets the compression option in the final package
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.BuildDirectoryName(System.String,System.String)">
            <summary>
            Given a table and schema name, derive what the directory should be named.
            </summary>
            <param name="schemaName">Name of the SQL Schema</param>
            <param name="tableName">Name of the SQL Table</param>
            <returns>String representing the name of the directory using the schema and table combined.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.Close">
            <summary>
            Closes the package
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.Dispose">
            <summary>
            Disposes the package
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TableToFilePartRelationship.PartUri">
            <summary>
            Gets or sets the table file part uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage.TableToFilePartRelationship.Tags">
            <summary>
            Gets or sets the tags array, which has an array element for the table and schema name this table file part is associated with.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacUtils.GetKeyPartitionRangeQuery(Microsoft.Data.Tools.Schema.Sql.Dac.Data.TableMetadata,System.Object)">
            <summary>
            Generates a query that slices a table into uniform partitions. To do so, we iterate and SELECT the last key in the
            TOP n rows where the key is greater than the key found in the last iteration. This process is meant to loop until there
            is no result returned from the SELECT, indicating the end of table.
            The inner query selects the top n rows from the table where the keys are greater than the lastKeyValue in clustered index's
            defined sorting order. The outer query selects the top 1 key from the inner chunk but ordered by the opposite of the
            clustered index's defined sorting order which effectively returns the bottom 1 key from the inner chunk of n rows.
            </summary>
            <param name="tableMetadata">Information about the table being partitioned such as Index name, sort order and table name</param>
            <param name="lastKeyValue">The upper bound key that was returned by the last iteration of running this query.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacUtils.IsComparableType(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType)">
            <summary>
            Returns true in SQL type cannot be used in comparison operations
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacUtils.LoadStats(Microsoft.Data.Tools.Schema.Sql.Dac.ConnectionManager,System.String,Microsoft.Data.Tools.Schema.Sql.Dac.Data.TableMetadata)">
            <summary>
            Loads table stats and if table doesn't have any stats tries to create it by running select 
            queries against table columns
            </summary>
            <returns>The name of table stats</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage">
            <summary>
            This class manages package functionality. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.#ctor(Microsoft.Data.Tools.Schema.Sql.Dac.PackageProxy,System.Runtime.Remoting.Lifetime.ClientSponsor,System.Boolean)">
            <summary>
            Constructs DacPackage 
            </summary>
            <param name="package"></param>
            <param name="sponsor">optional sponsor</param>
            <param name="disposePackage">If true, disposed the package on close.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.#ctor(Microsoft.Data.Tools.Schema.Sql.Dac.PackageProxy,System.Runtime.Remoting.Lifetime.ClientSponsor)">
            <summary>
            Constructs DacPackage 
            </summary>
            <param name="package"></param>
            <param name="sponsor">optional sponsor</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.MakeUri(System.String)">
            <summary>
            Create a package URI with the input string
            </summary>
            <param name="uriString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.MakeUri(System.Uri,System.String)">
            <summary>
            Create a package URI with the uriString extended to the baseString
            </summary>
            <param name="baseUri"></param>
            <param name="uriString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.GetPackagePart(System.Uri)">
            <summary>
            Gets the package part associated with uri in the package
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.CreatePackagePart(System.Uri,System.String)">
            <summary>
            Creates a new package part of the given uri in the package
            </summary>
            <param name="uri"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.CreateUncompressedPackagePart(System.Uri,System.String)">
            <summary>
            Creates a new package part of the given uri in the package
            </summary>
            <param name="uri"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.AddPartRelationshipToPackage(System.Uri,System.String)">
            <summary>
            Establishes a relationship between the part represented by the uri with
            the package.
            </summary>
            <param name="uri"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.GetRelativeUriString(System.Uri,System.Uri)">
            <summary>
            
            </summary>
            <param name="baseUri"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.GetPartRelationshipsFromPackageByType(System.String)">
            <summary>
            Enumerates all the URIs of the parts in the package that have the
            given relationship.
            </summary>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy Source Stream to Target Stream
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.GetBytes(System.IO.Stream)">
            <summary>
            Get byte array of source stream
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.Close">
            <summary>
            Closes the dac package
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DacPackage.Dispose">
            <summary>
            Disposes the dac package
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DatabaseUtils.NullCondition.None">
            <summary>None value.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DatabaseUtils.NullCondition.Null">
            <summary>Null value.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DatabaseUtils.NullCondition.NotNull">
            <summary>NotNull value.</summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.DatabaseUtils.NullCondition.Any">
            <summary>Any value.</summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.ExportDataStep.Execute(System.Boolean)">
            <summary>
            Execution logic for the data export step
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Export.ColumnEncryptionMigrationTableMetadata">
            <summary>
            Export table metadata class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Export.ExportTableMetadata">
            <summary>
            Export table metadata class.
            </summary>
            <summary>
            Export table metadata class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportBacpacHelper.StartLargeObjectHeapCompaction">
            <summary>
            Starts the timer that will run large object heap compaction every 30 seconds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportBacpacHelper.TryGetDacFxLohCompactionIntervalEnvironmentVariable(System.Int32@)">
            <summary>
            Attempts to load the 'DACFX_LOH_COMPACTION_INTERVAL' environment variable value, which overrides the default large object heap compaction interval.
            </summary>
            <param name="intervalInSeconds">The interval in seconds.</param>
            <returns>True if the value was loaded and parsed from the environment variable.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportBacpacHelper.OnLargeObjectHeapCompactionInterval(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Runs a large object heap compaction.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportBacpacHelper.StopLargeObjectHeapCompaction">
            <summary>
            Stops the timer running large object heap compaction.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportBacpacHelper.WithNoParallelism(System.Action)">
            <summary>
            Executes the given action after setting MAXDOP to 1. the function will set MAXDOP to original value after action is done
            even if it fails
            </summary>
            <param name="action"></param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportTableBatchHelper.BcpStarting">
            <summary>
            Exposed to enable connection error injection during testing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportTableBatchHelper.SqlRowsCopied(System.Object,Microsoft.Data.SqlClient.SqlRowsCopiedEventArgs)">
            <summary>
            Callback to Log the passage of bulk copy rows.  This could be used for a type of progress indicator with importing a table.
            </summary>
            <param name="sender">system object that sent the message</param>
            <param name="e">The data for the bulk copy API stating the progress</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.Import.ImportTableMetadata">
            <summary>
            Import table metadata class.
            </summary>
            <summary>
            Import table metadata class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.ITemporaryStorageProvider">
            <summary>
            Temporary Storage provided that can create a temporary file used during export
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.ITemporaryStorageProvider.CreateTemporaryFile(System.Int64)">
            <summary>
            Create a temporary file of provided maximum size
            </summary>
            <param name="maxSize">Value for maxsize of the temporary file</param>
            <returns>Temporary file</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.ITemporaryStorageFile">
            <summary>
            Temporary Storage file used for writing cached values during export
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.ITemporaryStorageFile.GetStream">
            <summary>
            Return the stream which can be used in export process
            </summary>
            <returns>Stream corresponding to the temporary file</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Data.SqlServerTypeConverter.ToSqlBinary(System.Object)">
            <summary>
            Convert an object to a SqlBinary object.  This routine does NOT handle if the binary was 
            stored in an external file.  That should have been detected prior to this point.
            </summary>
            <param name="value">object containing the SqlBinary</param>
            <returns>Newly created SqlBinary object.</returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.TableHeader.TableFormat.none">
            <summary>
            No format has been set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.Data.TableHeader.TableFormat.ArrayV1">
            <summary>
            Sparse Array based JSON format
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.IExecutionContext">
            <summary>
            Interface for execution sql in specified context.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry">
            <summary>
            This class provides the format for log entries coming from DAC framework
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.#ctor">
            <summary>
            Initializes a new instance of the DacLogEntry class for a given SQL Server connection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.EntryID">
            <summary>
            Gets or sets Entry ID, used to identify
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.ParentID">
            <summary>
            Gets or sets Parent ID, used to categorize the log entries
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.Title">
            <summary>
            Gets or sets Title of the log entry message
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.Text">
            <summary>
            Gets or sets Text, representing the details, of the log entry message
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.EventID">
            <summary>
            Gets or sets Event ID, used to categorize the log entries
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.DatabaseName">
            <summary>
            Gets or sets Database Name corresponding to any DAC operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.ServerName">
            <summary>
            Gets or sets Server Name corresponding to any DAC operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.SessionID">
            <summary>
            Gets or sets SessionID to capture the connection details.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.Save">
            <summary>
            This method returns the content of a log entry in a serailized string format.
            </summary>
            <returns>serialized string format of the log entry</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.Logging.DacLogEntry.GetDetailedException(System.Exception)">
            <summary>
            Get a string of an exception message in a common format
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.LoggingMessageType.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.LoggingMessageType.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.LoggingMessageType.Error">
            <summary>
            Serious, possibly fatal issue.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.OperationStatus.Pending">
            <summary>
            Operation has not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.OperationStatus.Running">
            <summary>
            Operation is executing.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.OperationStatus.Completed">
            <summary>
            Operation has finished execution.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.OperationStatus.Faulted">
            <summary>
            Operation did not complete execution.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.OperationStatus.Cancelled">
            <summary>
            Operation was cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.ObjectModel.Index.IsGraphSystemGenerated">
            <summary>
            Determines if this index is named 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.SqlConnectionExtensions">
            <summary>
            Provides a set of extension methods adding retry capabilities into the standard <see cref="!:System.Data.SqlClient.SqlConnection"/> implementation in case of .NET full and <see cref="!:Microsoft.Data.Sqlclinet.SqlConnection"/> implementation in case of .NET standard.
            
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.SqlConnectionExtensions.OpenWithRetry(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Opens a database connection with the connection settings specified in the ConnectionString property of the connection object.
            Uses the specified retry policy when opening the connection.
            </summary>
            <param name="connection">The connection object which is required as per extension method declaration.</param>
            <param name="connectionRetryPolicy">The retry policy defining whether to retry a request if the connection fails to be opened.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition">
            <summary>
            SERVERPROPERTY(EngineEdition) 
            Documented publicly at https://docs.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver15 as EngineEdition
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.Unknown">
            <summary>
            Unknown engine edition
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.Personal">
            <summary>
            Personal or Desktop Engine (Not available in SQL Server 2005 and later versions.)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.Standard">
            <summary>
             Standard (This is returned for Standard, Web, and Business Intelligence.)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.Enterprise">
            <summary>
             Enterprise (This is returned for Evaluation, Developer, and both Enterprise editions.)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.Express">
            <summary>
            Express (This is returned for Express, Express with Tools and Express with Advanced Services)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.SQLDatabase">
            <summary>
            SQL Azure Database
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.SQLDataWarehouse">
            <summary>
            SQL Azure Synapse Analytics (formerly called Azure SQL DW)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.SQLManagedInstance">
            <summary>
            SQL Managed Instance (Cloud Lifter)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.SQLDatabaseEdge">
            <summary>
            SQL Database Edge Instance
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition.SQLServerless">
            <summary>
            Azure Synapse serverless SQL pool
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineType.Unknown">
            <summary>
            Unknown engine type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineType.SqlServer">
            <summary>
            Sql Server.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineType.SqlAzure">
            <summary>
            Sql Azure.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.SqlScriptHelper.CreateAlterIndexStatement(Microsoft.Data.Tools.Schema.Sql.Dac.ObjectModel.Index,Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexType)">
            <summary>
            Returns AlterIndexStatement statement for give index
            </summary>
            <param name="index">Index element</param>
            <returns>The new ALTER INDEX statement</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Dac.TargetEngineInfo.Platforms">
            <summary>
            Returns SQL Platform for the target version
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Dac.LimitedConcurrencyTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.LimitedConcurrencyTaskScheduler.#ctor(System.Int32,Microsoft.Data.Tools.Schema.Sql.Dac.ISchedulerQueue,System.Boolean)">
            <summary>
            Creates a task scheduler which ensures a maximum concurrency level. 
            </summary>
            <param name="maxDegreeOfParallelism">Maximum of concurrently running tasks</param>
            <param name="queue">Scheduler queue implementation. Queue may implement different prioretization strategies.</param>
            <param name="enableTaskInlining">Enables inlining of tasks. Set it to false if tasks must be processed in order. Inlining
              may cause task to skip to the begining of the queue.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.LimitedConcurrencyTaskScheduler.#ctor(System.Int32,System.Boolean,Microsoft.Data.Tools.Schema.Sql.Dac.ISchedulerQueue,System.Boolean)">
            <summary>
            Creates a task scheduler which ensures a maximum concurrency level. 
            </summary>
            <param name="maxDegreeOfParallelism">Maximum of concurrently running tasks</param>
            <param name="executeAsyncTasksWithoutLimit">Async tasks are run in a different thread pool</param>
            <param name="queue">Scheduler queue implementation. Queue may implement different prioretization strategies.</param>
            <param name="enableTaskInlining">Enables inlining of tasks. Set it to false if tasks must be processed in order. Inlining
              may cause task to skip to the begining of the queue.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.TSqlQueryResult.ReadValue``1(System.Int32)">
            <summary>
            Reads a value from the reader. Method expects that the value is NOT DBNull.
            </summary>
            <typeparam name="T">Expected type of the value.</typeparam>
            <param name="index">Index of the column to read value for.</param>
            <returns>Value that is read.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.TSqlQueryResult.ReadValue``1(System.String)">
            <summary>
            Reads a value from the reader. Method expects that the value is NOT DBNull.
            </summary>
            <typeparam name="T">Expected type of the value.</typeparam>
            <param name="name">Name of the column to read value for.</param>
            <returns>Value that is read.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Dac.TSqlQueryResult.TryReadValue(System.Int32,System.Object)">
            <summary>
            Tries to read a value from the reader. Returns defaultValue when retrieved value is DBNull, otherwise returns the value that is read.
            </summary>
            <param name="index">Index of the column to read value for.</param>
            <param name="defaultValue">Default value in case if value is DBNull.</param>
            <returns>Value read if not DBNull, otherwise defaultValue.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.BlockLedgerTableNonNullableColumnAddition">
            <summary>
            Blocks ledger table non nullable column additions.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.BlockLedgerTableUnorderedColumnAddition">
            <summary>
            Blocks column addition when the new added columns change the order of
            existing columns for all ledger tables since this situation requires
            table recreation but this operation is not allowed for ledger tables.
            The exception to blocking this column addition is when the deployment
            option IgnoreColumnOrder is provided to avoid table recreation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.BlockLedgerTableUnorderedColumnAddition.AreThereAnyTableColumnsToAdd(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Tells whether the table change adds any new columns to the table.
            </summary>
            <param name="tableChange">Table change.</param>
            <returns>True if there are any table columns to add; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.BlockUnsupportedLedgerTableColumnAlter">
            <summary>
            Blocks the following unsupported ledger table column alters:
              * Block ledger table column property changes except the following supported ones:
                - IsNullable.
                - IsSparse.
                - Collation.
                - IsRowGuidColumn.
                - MaskingFunction.
                - IsHidden.
              * Block ledger table colum type change.
              * Block ledger table colymn type property modified except the following supported ones:
                - Length.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedColumnsOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Column {0} cannot be encrypted because the parent table {1} in target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedColumnsOnStretchRuleName">
            <summary>
              Looks up a localized string similar to Column encryption is not allowed on table with stretch option enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedOnlineApproachMultiTableRule">
            <summary>
              Looks up a localized string similar to The specified columns are contained in more than one table. UseOnlineApproach can only be used if all specified columns are contained in the same table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedOnlineApproachMultiTableRuleName">
            <summary>
              Looks up a localized string similar to UseOnlineApproach can only be used if all specified columns are contained in the same table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedRandomizedEncryptionWithIndexOrStatisticsName">
            <summary>
              Looks up a localized string similar to Column encryption is not allowed on a column that is included in an index or statistic..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedRandomizedEncryptionWithIndexOrStatisticsRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Cannot encrypt column {0}. This tool version does not support randomized encryption with enclave-enabled keys for columns that have dependent objects such as statistics or indexes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedTypeConversionRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Type conversion on encrypted column {0} is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockAlwaysEncryptedTypeConversionRuleName">
            <summary>
              Looks up a localized string similar to Type conversion on encrypted column is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockDataMotionOnRowLevelSecurity">
            <summary>
              Looks up a localized string similar to The current operation will cause data motion on table {0}. Data motion can not be performed on this table because it has row level security enabled by policy {1}. To allow this operation use SqlPackage.exe with option /p:AllowUnsafeRowLevelSecurityDataMovement=true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockDataMotionOnRowLevelSecurityRule">
            <summary>
              Looks up a localized string similar to Table Data motion is not allowed on table with RLS..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockDataMotionOnRowLevelSecurityRuleName">
            <summary>
              Looks up a localized string similar to Table Data motion is not allowed on table with RLS..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockDirectUpdateDeleteScriptToStretchTableRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Deploying {0} with update or delete statement on {1} is not allowed because {1} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockDirectUpdateDeleteScriptToStretchTableRuleName">
            <summary>
              Looks up a localized string similar to Triggers and Procedures cannot update or delete tables that have stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockExportOnStretch">
            <summary>
              Looks up a localized string similar to The source database cannot be exported because it has the stretch database feature enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockImportOnStretch">
            <summary>
              Looks up a localized string similar to Import cannot proceed because the target database has the stretch database feature enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockIndirectUpdateDeleteScriptToStretchTableRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Deploying {0} with update or delete statement on {1} is not allowed because {1} references {2} and {2} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockIndirectUpdateDeleteScriptToStretchTableRuleName">
            <summary>
              Looks up a localized string similar to Triggers and Procedures cannot update or delete views that reference tables that have stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableColumnDropRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Dropping column {0} is not allowed because it belongs to a ledger table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableColumnDropRuleName">
            <summary>
              Looks up a localized string similar to Dropping columns of ledger tables is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableNonNullableColumnAdditionRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding column {0} is not allowed because it is non-nullable and it belongs to a ledger table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableNonNullableColumnAdditionRuleName">
            <summary>
              Looks up a localized string similar to Adding non-nullable columns to ledger tables is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableUnorderedColumnAdditionRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding new columns to table {0} is not possible since it changes the order of column {1} causing its table recreation but this operation is not allowed for ledger tables. Try to deploy with the &quot;IgnoreColumnOrder&quot; deployment option to avoid table recreation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockLedgerTableUnorderedColumnAdditionRuleName">
            <summary>
              Looks up a localized string similar to Ledger tables are not allowed to be recreated when adding new columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockReferenceFromForeignKeyConstraintToStretchTableRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding a reference from foreign key constraint {1} to table {0} is not possible because table {0} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockReferenceFromForeignKeyConstraintToStretchTableRuleName">
            <summary>
              Looks up a localized string similar to References are not allowed from foreign key constraints to a stretched table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockReferenceFromIndexedViewToStretchTableRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding a reference from indexed view {1} to table {0} is not possible because table {0} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockReferenceFromIndexedViewToStretchTableRuleName">
            <summary>
              Looks up a localized string similar to References are not allowed from indexed views to a stretched table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockTablesWithDataMigrationOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Deploying changes to table {0} is not possible because the changes will require copying the contents of table {0} into a new table, but table {0} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockTablesWithDataMigrationOnStretchRuleName">
            <summary>
              Looks up a localized string similar to Deploying changes to table is not possible because the changes will require copying the contents of table into a new table, but the table in target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedIndexAndConstraintsRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding the {0} {1} to table {2} is not possible because table {2} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedIndexAndConstraintsRuleName">
            <summary>
              Looks up a localized string similar to Check constraints, default constraints, XML indexes, full-text indexes, and spatial indexes are not allowed on stretched tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedLedgerTableColumnAlterRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Altering the property or type {0} of column {1} is not allowed because it belongs to a ledger table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedLedgerTableColumnAlterRuleName">
            <summary>
              Looks up a localized string similar to Altering the format of columns of ledger tables is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedTableColumnsOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding the column {0} of type {1} to table {2} is not possible because table {2} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedTableColumnsOnStretchRuleName">
            <summary>
              Looks up a localized string similar to Adding a computed column, column set or column of type geometry, geography, heirarchyid, timestamp, sql_variant, image, text, ntext, XML or user defined data types to a stretched table is not possible..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedTablePropertiesOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Enabling {0} on table {1} is not possible because table {1} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.BlockUnsupportedTablePropertiesOnStretchRuleName">
            <summary>
              Looks up a localized string similar to Stretched table does not support all table properties..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.ChangeDataCaptureProperty">
            <summary>
              Looks up a localized string similar to change data capture property .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.ChangeTackingProperty">
            <summary>
              Looks up a localized string similar to change tracking property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.FileStreamProperty">
            <summary>
              Looks up a localized string similar to file stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.LimitNumberOfColumnsOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding more than 1023 columns on table {0} is not possible because table {0} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.LimitNumberOfIndexesOnStretchRule">
            <summary>
              Looks up a localized string similar to Operation blocked: Adding more than 998 indexes on table {0} is not possible because table {0} in the target has stretch enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.MemoryOptimizationProperty">
            <summary>
              Looks up a localized string similar to memory optimization property .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.DeploymentRulesResource.ReplicationProperty">
            <summary>
              Looks up a localized string similar to replication property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all enabled rules against the specified model 
            </summary>
            <param name="sourceSchema">The source schema to be deployed</param>
            <param name="targetSchema">The target Schema against which the deployment will be performed</param>
            <param name="options">Deployment Options to decide behavior of rules</param>
            <param name="diff">The model comparison difference between source and target</param>
            <param name="plan">The deployment plan for target</param>
            <param name="rules">All the rules which are to be run</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentRuleEngine.ExecuteElementRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all enabled rules against the specified model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="targetSchema">The target Schema against which the deployment will be performed</param>
            <param name="diff">The model comparison difference between source and target</param>
            <param name="plan">The deployment plan for target</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentRuleEngine.ExecuteModelRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all enabled rules against the the full model
            </summary>
            <param name="sourceSchema">The source model against which the rules are executed</param>
            <param name="targetSchema">The target Schema against which the deployment will be performed</param>
            <param name="options">Deployment Options to decide behavior of rules</param>
            <param name="diff">The model comparison difference between source and target</param>
            <param name="plan">The deployment plan for target</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentRuleExecutionContext,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleScope,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Executes rules against elements or model based on scope provided
            </summary>
            <param name="context">The execution context to be used by rules</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="sqlRuleScope">The scope in which rules are to run</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRule.ExecutionTime">
            <summary>
            This is to ensure that these rule can be filtered for deploy time execution
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRule.Diff">
            <summary>
            This is to contain Model Comparison Result that rule will work on
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRule.DataMotionSteps">
            <summary>
            This is to contain Data Motion Steps 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRule.DeploymentOptions">
            <summary>
            Deployment Options are to be used in deciding how a particular rule is support to act
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Analyze function
            </summary>
            <param name="ruleSetting">Settings corresponding to the rule</param>
            <param name="context">SqlRuleExecutionContext containing the element and model to be deployed</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DeploymentValidation.SqlDeploymentValidationRuleProxy">
            <summary>
            Sql Deployment Validation Rule proxy class
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.Analyzer.CollationComparer">
            <summary>
            Returns a collation sensitive comparer based on the user's configuration
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.Analyzer.AddChange(System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Analyzer helper to add a change to a changeset
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.Analyzer.AddChangeToAllRoutines(System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Analyzer helper to add a change to all elements of changeset if required
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.DefaultAnalyzer">
            <summary>
            The default analyzer just performs default analysis based on the current operation.  For
            instance - Analyze create returns, well, create
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.DefaultAnalyzer.CanBeAltered(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass},System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass})">
            <summary>
            Helper method that returns true if all of the changed relationship entries
            are specified in the allowedAltersSet
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.DefaultAnalyzer.CanBeAltered(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass})">
            <summary>
            Helper method that returns true if all of the changed properties
            are specified in the allowedAltersSet
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.DefaultAnalyzer.OnlyDiffersBySpecifiedRelationship(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry})">
            <summary>
            Checks to see if the relationships to add/relationships to drop results in a difference of one specific
            relationship class.  This returns true if the specified relationship is being added, or dropped, or both.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey">
            <summary>
            Helper struct to cache/represent elements by their name as well as their
            instance
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalDataSourceAnalyzer">
            <summary>
            This class defines an external data source deployment analyzer.
            It is invoked during the deployment plan generation process and
            is used to provide external data source specific deployment analysis.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalDataSourceAnalyzer.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalDataSourceAnalyzer.AnalyzeAlter(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Overrides the default AnalyzeAlter method to conditionally specify the Alter operation on the SQL130 and SQL140 platform (for Polybase) 
            for the external data source model element that was changed.
            On all other platforms (for GQ), Drop/Create operations are used instead of the Alter operation until GQ support the Alter operation on external data sources.
            </summary>
            <param name="sourceElement">The changed model element.</param>
            <param name="change">The model change definition.</param>
            <returns>A list of operations.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalLanguageAnalyzer">
            <summary>
            This class defines an external language deployment analyzer. It is
            invoked during the deployment plan generation process and is used to
            properly compare two external language objects.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalLibraryAnalyzer">
            <summary>
            This class defines an external library deployment analyzer. It is
            invoked during the deployment plan generation process and is used to
            properly compare two exernal library objects.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalLibraryAnalyzer.IsSubset``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            True if d1 is a subset of d2. Compares both the keys and the values.
            </summary>
            <param name="d1">the dictionary to check</param>
            <param name="d2">the superset dictionary</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamAnalyzer">
            <summary>
            This class defines an external data source deployment analyzer.
            It is invoked during the deployment plan generation process and
            is used to provide external data source specific deployment analysis.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamAnalyzer.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamAnalyzer.AnalyzeAlter(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Overrides the default AnalyzeAlter method to conditionally specify the Alter operation for the external data stream model element that was changed.
            [8/26/2020] For now this always supports drop and create as alter ddl is not defined
            </summary>
            <param name="sourceElement">The changed model element.</param>
            <param name="change">The model change definition.</param>
            <returns>A list of operations.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamingJobAnalyzer">
            <summary>
            This class defines an external streaming job deployment analyzer.
            It is invoked during the deployment plan generation process and
            is used to provide deployment analysis specific to external streaming jobs.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamingJobAnalyzer.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ExternalStreamingJobAnalyzer.AnalyzeAlter(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Overrides the default AnalyzeAlter method to conditionally specify the Alter operation for the external streaming job model element that was changed.
            [4 Sept, 2020] For now this always supports drop and create as alter ddl is not defined
            </summary>
            <param name="sourceElement">The changed model element.</param>
            <param name="change">The model change definition.</param>
            <returns>A list of operations.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext">
            <summary>
            Encapsulates the core components for a deployment operation: the
            source, target, and options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext.LookupTargetElement``1(``0)">
            <summary>
            Uses the model comparison result to perform an efficent lookup of the
            target element using the source element as a key.  This allows the lookup
            to find un-named elements that were structurally compared during 
            the model comparison.  If the element cannot be found in the model comparison 
            and it is named, it is looked up in the target model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext.LookupSourceElement``1(``0)">
            <summary>
            Uses the model comparison result to perform an efficent lookup of the
            source element using the source element as a key.  This allows the lookup
            to find un-named elements that were structurally compared during 
            the model comparison.  If the element cannot be found in the model comparison 
            and it is named, it is looked up in the source model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.SaveDependencyGraphs">
            <summary>
            Flag to save a copy of dependency graph information during plan generation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.CollationComparer">
            <summary>
            Returns a collation sensitive comparer based on the user's configuration
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.ConfigureDropRequests(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.DropRequest})">
            <summary>
            Configured the mediator to explcitly issue DROPs for the specified objects.  It is assumed
            this method is called after the models have been compared and the comparison result
            has been set on this instance
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.RetrieveTargetModificationSteps">
            <summary>
            Retrieve an ordered list of deployment steps representing changes made to the
            target via proposed changes from target model modifier(s)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.GetFullyQualifiedOriginalElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns the element's "original name" before any preservation of intent operations
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.GetDeltaTableChanges(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns the set of table changes that have occurred since the last time the set of
            changes were baselined.  If no changes have been baselined then the current
            set of changes are returned.  This method is used during script generation so that
            we only unbind any new changes
            </summary>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.BaselineTableChanges(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Changes are baselined during preservation of intent operations so that unbind operations
            can "know" which changes actually have to be made versus those changes that were already
            made during prior processing
            </summary>
            <param name="targetElement"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.GetIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This simple helper method looks up an element in the identifiers dictionary
            if available.  If the identifiers dictionary has not been populated a new identifier
            is generated using the element's hashcode
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.ReverseLookup(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            A fast lookup to find a source element given a target element.  This lookup
            handles elements that do not have names
            </summary>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.TrimChanges">
            <summary>
            Provides an opportunity to process the proposed changes prior to
            generating the plan
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.BuildDependencyOrderedSteps(System.Int32,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass},System.Collections.Generic.List{System.Int32},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            This method builds a dependency tree based on relating objects for each object in
            the change list.  After the dependency tree is built we will look for leaf elements
            of a particular type so that we can group like type changes together.  After all leaves
            have been processed we will move forward to the next type.  A couple of additional points:
            * We will keep a list of types that we have already processed so that once we see leaf 
             whose type has already been processed we will process it immediately
            * Once we have finished the type list we will just process the remaining tree trimming
            and leaves
            * If we still have nodes and we cannot find any leaves we have a cycle we do not know how to
            break.  This is an error condition :(
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.GetElementParent(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Helper method to follow "up" the element's parent hierarchy based on the type of 
            element
            </summary>
            <param name="currentElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.FixupElementModel(System.Int32,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey)">
            <summary>
            Helper method that encapsulates adjusting the element in the ElementKey based on the operation
            being performed during dependency analysis
            </summary>
            <param name="operation"></param>
            <param name="changeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.FindLeaves(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey},System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}})">
            <summary>
            Transverse the set of elementsRemaining looking for elements that have no remaining
            dependencies.  As elements are found nodes referenced by the leaf are marked as having 
            one less dependency. 
            
            This method will continue looking for leaves until no leaves are found during one pass.
            </summary>
            <param name="elementsRemaining"></param>
            <param name="processedTypes"></param>
            <param name="dependedOnByLookup"></param>
            <param name="dependsOnLookup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.TrimDependencies(System.Int32,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode})">
            <summary>
            Called while processing the dependency graph in order to break
            cycles that many not actually block deployment
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.AddObjectDependencies(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{System.Int32}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}})">
            <summary>
            There are some dependencies that are not expressed by the model that have to
            do with Sql rules - for instance, the first index on a must be a unique clustered index and
            all other indexes must be created after that index.  This call provides a hook to
            allow us to add any additional object-specific dependencies
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.AddDependency(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.GraphNode}})">
            <summary>
            Helper method to wire up a dependency during graph creation
            </summary>
            <param name="element"></param>
            <param name="dependency"></param>
            <param name="dependsOnLookup"></param>
            <param name="dependedOnByLookup"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.AddCoreOperationIfExists(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass},System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            A helper method that adds an operation to the set of plan operations
            if an operation in the proposed operation set is a core operation and
            the element class is one of the classes to be processed in the core set
            </summary>
            <param name="element"></param>
            <param name="proposedOperations"></param>
            <param name="coreClasses"></param>
            <param name="acceptedCoreOperations"></param>
            <param name="planOperations"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.TargetOperationRequiresDependencyAnalysis(Microsoft.Data.Tools.Schema.Sql.Deployment.TargetModelOperation)">
            <summary>
            Detect whether a proposed model change requires dependency analysis to 
            prepare dependencies for the actual change
            </summary>
            <param name="targetOperation"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.CheckDwTableHasDropCreateOrDataMotionOrCTAS(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,System.Collections.Generic.HashSet{System.Int32}},Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.IncludeElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Helper method that returns whether the specified element should be processed
            or not
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.GetAnalyzer(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Gets the analyzer assigned to a particular element class.  Returns back the default
            analyzer if no analyzer if assigned
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.IsInlineHierarchialChanged(System.Collections.Generic.KeyValuePair{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition})">
            <summary>
            This helper method works around a bug in the model where indexes/triggers are defined
            as hierarchical children on a table valued function because SqlTableValuedFunction inherits
            the ISqlColumnSource interface.  This is a bug because indexes and triggers must be defined
            inline to the function meaning any changes to these indexes or triggers must be affected on the
            target by ALTERing the parent function itself.
            </summary>
            <param name="change"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.ResetKeys``1(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.ElementKey,``0},System.Func{``0,``0,``0})">
            <summary>
            Helper method to reset the keys that exist in a change dictionary 
            </summary>
            <param name="keys"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator.ElementKeyEqualityComparer">
            <summary>
            Helper class to aid in comparing elements that may exist in different
            stores
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.RoleAnalyzer">
            <summary>
            This class analyzes roles and role memberships and ensures that the
            appropriate dependencies are taken into account.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.SequenceAnalyzer">
            <summary>
            This class analyzes sequences and ensures that the appropriate dependencies
            are taken into account.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.SqlTypesAnalyzer">
            <summary>
            This class analyzes custom "types" in SQL and ensures that the appropriate
            dependencies are taken into account
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.ContributeErrors">
            <summary>
            Any messages generated during ALTER analysis
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.ContributeValidationSteps">
            <summary>
            Any statements we generated to verify target state before deployment.  An example
            is detecting that a table has data when we know that we are adding a column that does not
            allow null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.VerifySourceAndTargetConstraintColumnsCountAndOrder(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Verifies the column count for source and target constraints(primary key, and unique constraint) and checks the column orders are identical
            </summary>
            <param name="sourceIndex"></param>
            <param name="change"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsTemporalTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Return true if the table is system versioning current/history table
            </summary>
            <param name="modelElement"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsTemporalSystemVersioningHistoryTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsSystemVersioningTableHasComputedColumn(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Verify if the system versioning current table has computed column
            </summary>
            <param name="modelElement"></param>
            <returns>returns true if temporal table have computed columns, else false.
            returns false for all other tables</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsSystemVersioningTableRebuildRequired(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Verifying whether the current system versioning table needs a rebuild or not
            Ignoring case: when table have computed columns
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <returns>
            Returns false, if no need of rebuild unnecessarily, then ignoreColumnOrder = true.
            Returns true, if tables need to rebuild then ignoreColumnOrder = false
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.CanIgnoreColumnOrder(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Tells whether the column order can be ignored or not on the source and target
            model elements when adding new columns during extract/publish.
            True for all tables except temporal tables with computed columns; false otherwise.
            Ledger tables, ledger with temporal tables both support ignoreColumnOrder
            </summary>
            <param name="source">Source mode element.</param>
            <param name="target">Target mode element.</param>
            <returns>True for all tables except non-ledger temporal tables that have computed columns; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.CheckForNameConflict(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Checks if a constraint change owner. If it did it will unbind the constraint for data motion.
            </summary>
            <param name="targetConstraint">Constraint to check in a target schema</param>
            <param name="sourceTable">Source table. If constraint in source will have this onwer, no operation is added.</param>
            <param name="changes">Dictionary will change operations to update.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsParentTableBeingRebuilt(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediator,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            This method is examining the proposed changes to determine if the table is already
            being re-built.
            NOTE: This method does NOT do the analysis to determine whether a table should
            be rebuilt, or not.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.UnbindRebindRenamedColumnDependencies(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Unbinds and rebinds elements that are related to the specified column so that the
            column can be renamed.  This requires special processing because dependency rules for a rename are
            different that an ALTER
            </summary>
            <param name="renamedColumn"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.ProposePartitionSchemeChanges(System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Analyze and propose any changes for a partition scheme change
            </summary>
            <param name="change"></param>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsNonDeployableConstraintOrIndex(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            A helper method that returns true if the specified is a constraint
            and is not deployable
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.IsRecreateTable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition,System.String@)">
            <summary>
            Helper method to determine whether a table must be recreated because all the data columns
            in the target table are going to be removed either directly or cannot be copied because of
            an incompatible type change
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.AddEmptyTableCheck(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,System.String,System.Boolean)">
            <summary>
            Adds an empty table check or a warning for the specified table depending on whether
            the user has specified block on data loss or not
            </summary>
            <param name="sourceTable"></param>
            <param name="warningsCommentContents"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.AddWarningStep(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.String)">
            <summary>
            Adds a warning using the specified message.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.GetColumnDefinition(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn)">
            <summary>
            Simple helper method that returns the definition for the specified column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.PropertyChangesAlterable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            A helper method to verify whether changes to an existing column can be persisted to the
            target database by an ALTER rather than via data motion
            </summary>
            <param name="column"></param>
            <param name="changeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.UnbindRebindFullTextIndexes(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.HashSet{System.Int32}})">
            <summary>
            Unbinds/rebinds any full-text indexes that reference the index
            </summary>
            <param name="definingTable"></param>
            <param name="index"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.CanCastDecimalWithoutDataLoss(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor)">
            <summary>
            Helper method to detect if a decimal/numeric can be changed without dataloss
            </summary>
            <param name="fromDescriptor"></param>
            <param name="toDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges.IsUnbound(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
            <summary>
            Returns true if the specified column is an unbound column
            </summary>
            <param name="targetColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges.GenerateNewChanges(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges)">
            <summary>
            Returns a new TableElementChanges instance that represents the set of
            changes that are in this instance that are not in the baseline instance
            </summary>
            <param name="baselineChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges.GetSourceTailComputedColumns">
            <summary>
            Returns the set of computed columns that are at the tail end of the
            source table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges.DropTailingTargetColumns(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
            <summary>
            Adds any computed columns that are defined after the specified column
            to the dropped columns set.  During change proposal additional
            any trailing computed columns need to be dropped so that the specified
            computed column can be ALTERed back into the table's definition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.AzureDatabaseSpecification">
            <summary>
            Specifies optional parameters used when creating an Azure database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.CachedRegistryConnectionString">
            <summary>
            Uses the <typeparamref name="ConnectionStringSecurer"/> to retrieve 
            cached password from the registry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.CachedRegistryConnectionString.ConnectionFactory">
            <remarks>If configured to load from the registry, the 
            connection is used as a key for a cached connection string in the registry. 
            If no registry entry is found or the instance is not configured to load from the registry,
            the original connection string is returned.
            </remarks>
            <exception cref="T:Microsoft.Data.Tools.Schema.Common.Exceptions.InvalidConnectionStringException">When connection string fails validation.</exception>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintData">
            <summary>
            Encapsulates constraint data retrieved from the database and hold state regarding the target
            state after the deployment has completed
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintManager">
            <summary>
            This class encapsulates retrieving/manipulating constraint information.  It is used by deployment to 
            determine the state of constraints in the DB.  In addition it is also used to manipulate sets of constraints in 
            conjunction with a deployment plan and source model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintManager.MapExpectedEndState(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlConstraint,Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintData})">
            <summary>
            Helper method that populates the target state of each constraint data from the supplied
            model element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintManager.MapConstraintsToElements(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintData})">
            <summary>
            This method maps constraints in the deployment plan to constraints in the supplied
            list.  
            
            Assumptions:
            * There is expected a constraint in the list for every newly created constraint in the plan
            * The constraints are sorted in creation order (using a mechanism like AddConstraints(...))
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintManager.AddConstraints(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.DateTime)">
            <summary>
            Retrieves constraints (Check / FK) created after the specified date sorted by create date.  This method
            does connect to the database and exceptions thrown by that connection will bubble up to the caller.  If
            an exception occurs while processing the state of the object is not modified
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo">
            <summary>
            Defines basic information about an expected contributor: ID, 
            version, and whether the version information should be used when matching 
            during contributor load scenarios
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DacpacHeaderLoader">
            <summary>
            Loads information from a Dacpac, including references, Refactors, and other info.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DacpacHeaderLoader.Load(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean)">
            <summary>
            Helper method that loads files referenced by the specified model.  If any errors
            exist after loading is completed an exception is thrown
            Note: Considering the default value for includeCompositeObjects as False. 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentCompatibilityException">
            <summary>
            Exception raised when a target platform is not considered compatibile
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContext">
            <summary>
            Encapsulates the core components for a deployment operation:
                1) source-model
                2) target-model
                3) deployment-options
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContext.IsDwTarget">
            <summary>
            Returns true when the Target provider is of type SqlDwDatabaseSchemaProvider,
            otherwise returns false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContext.IsSqlServerlessTarget">
            <summary>
            Returns true when the Target provider is of type SqlServerlessDatabaseSchemaProvider,
            otherwise returns false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor">
            <summary>
            The base class for deployment contributors.  Subclasses of this class
            participate in a deployment by modifying a deployment plan or by executing
            the plan
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.ContributorSource.Internal">
            <summary>
            Indicates this contributor is part of the 
            internal pipeline. These should be run
            before any public contributors have a chance to run
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.ContributorSource.Public">
            <summary>
            Indicates this contributor may come from a public source,
            and should be run after all internal contributors have run
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.Source">
            <summary>
            Indicates whether this contributor is part of the internal, built-in pipeline,
            or whether it may reference code from an external source. Externally sourced
            contributors should run after all internal contributors to avoid interfering 
            with internal operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.OnCanceled">
            <summary>
            Provides a chance for subclasses to perform an action when the <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor"/>
            method is called on this object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.OnQuerySupportedContributorIds(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo})">
            <summary>
            Queries whether this contributor supports any of the contributors with Ids specified by the 
            <paramref name="expectedContributors"/> parameter. Also gives a chance for the called contributor to
            filter running contributors to those specified in the list of expected contributors
            </summary>
            <param name="expectedContributors"><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo"/> defining
            what contributor Ids are being looked for</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo"/> specifying which contributor Ids are
            supported and the version of those contributors (if a version number is specified)</returns>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">Thrown if something went wrong during the query process</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributor.QuerySupportedContributorIds(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo})">
            <summary>
            Queries whether this contributor supports any of the contributors with Ids specified by the 
            <paramref name="expectedContributors"/> parameter. Also gives a chance for the called contributor to
            filter running contributors to those specified in the list of expected contributors
            </summary>
            <param name="expectedContributors"><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo"/> defining
            what contributor Ids are being looked for</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ContributorInfo"/> specifying which contributor Ids are
            supported and the version of those contributors (if a version number is specified)</returns>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">Thrown if something went wrong during the query process</exception>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorHelper">
            <summary>
            This is a helper class for loading/sorting deployment contributors
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext">
            <summary>
            Encapsulates the core components for a deployment operation: the
            source, target, and options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan">
            <summary>
            A sequence of deployment steps that represent a set of 
            operations used to create ot update a database
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext.DeploymentMasterPath">
            <summary>
            Set if a deployment script is also being generated against an Azure target
            (which requires that the portion executed against master be its own script)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext.DeploymentScriptPath">
            <summary>
            Set if a deployment script is also being generated.  This
            enables other deployment contributors to correlate error messages back to a script/file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext.ErrorManager">
            <summary>
            Allows contributor to generate errors that can be examined by the deployment process.
            </summary>
            <remarks>
            Added to allow UndeployableElementModifier to pass error information to the deployment
            process since error information raised on the DeploymentContributor.Message event
            is consumed directly by the deployment client.
            
            Exercise caution when consuming this instance of the error-manager or additional scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext.ConstraintsCheckedByDataEngine(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Callback used by constraint processing to determine if checking the specified constraint is handled
            by data processing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext.HasDataEngineIntegration">
            <summary>
            Returns true if schema deployment is integrated with data deployment
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanExecutor">
            <summary>
            This class represents a deployment constributor that executes the deployment plan.  An
            example of a constributor would be one who executes deployment steps to create a target database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle">
            <summary>
            Represents a handle to a deployment plan
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle.Head">
            <summary>
            Returns the head on the plan or null if the plan is empty
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle.Tail">
            <summary>
            Returns the tail of the plan or null if the plan is empty
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanModifier">
            <summary>
            This class represents a constributor that can modify a deployment plan
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanModifier.AddBefore(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Provides a way for subclasses to modify the plan by adding a
            step after the specified step
            </summary>
            <param name="step"></param>
            <param name="newStep"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanModifier.AddAfter(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Provides a way to modify the existing plan by adding a step after the existing step
            </summary>
            <param name="step"></param>
            <param name="newStep"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanModifier.Remove(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanHandle,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Provides a way to remove the specified step from the plan
            </summary>
            <param name="step"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.AddingSystemVersioning">
            <summary>
              Looks up a localized string similar to Adding system-versioning to {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.AeV2CMKRotationInProgress">
            <summary>
              Looks up a localized string similar to Encryption cannot occur during an active column master key rotation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.AeV2InvalidColumn">
            <summary>
              Looks up a localized string similar to No existing column to update..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.AlteringObject">
            <summary>
              Looks up a localized string similar to Altering {0} {1}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.BlockDataLossForDroppedTable">
            <summary>
              Looks up a localized string similar to Table {0} is being dropped.  Deployment will halt if the table contains data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.BulkCopyOperation">
            <summary>
              Looks up a localized string similar to Data is bulk loaded at this point in deployment execution.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnDropped">
            <summary>
              Looks up a localized string similar to The column {0} is being dropped, data loss could occur..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnEncryptionDataMigrationEnding">
            <summary>
              Looks up a localized string similar to Completing data migration for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnEncryptionDataMigrationStarting">
            <summary>
              Looks up a localized string similar to Starting column encryption..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnEncryptionMigrationStep">
            <summary>
              Looks up a localized string similar to Column encryption migration step.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnTypeChangeIncompatibleWarning">
            <summary>
              Looks up a localized string similar to The type for column {0} in table {1} is currently {2} but is being changed to {3}. There is no implicit or explicit conversion..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ColumnTypeChangeWarning">
            <summary>
              Looks up a localized string similar to The type for column {0} in table {1} is currently {2} but is being changed to {3}. Data loss could occur and deployment may fail if the column contains data that is incompatible with type {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CommentForUnsupportedUseStatementOnMasterDb">
            <summary>
              Looks up a localized string similar to /* Please run the below section of statements against &apos;master&apos; database. */.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CommentForUnsupportedUseStatementOnUserDb">
            <summary>
              Looks up a localized string similar to /* Please run the below section of statements against the database name that the above [$(DatabaseName)] variable is assigned to. */.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ConnectionFailed">
            <summary>
              Looks up a localized string similar to Could not connect to {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ConnectionStringNotDefined">
            <summary>
              Looks up a localized string similar to Before you can deploy a database, you must specify a connection string in the project properties or at a command prompt..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Contributor_MissingRequiredContributor">
            <summary>
              Looks up a localized string similar to Required contributor with id &apos;{0}&apos; could not be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ContributorIdHasMultipleTypes">
            <summary>
              Looks up a localized string similar to Contributor id &apos;{0}&apos; is associated with multiple contributor types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CreateTableAsSelect">
            <summary>
              Looks up a localized string similar to Create Table as Select on {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CreateUddtAlias">
            <summary>
              Looks up a localized string similar to Creating temporary type {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CreatingDatabase">
            <summary>
              Looks up a localized string similar to Creating database {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.CreatingObject">
            <summary>
              Looks up a localized string similar to Creating {0} {1}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_DriftCheckFailure">
            <summary>
              Looks up a localized string similar to Unable to validate database drift..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_DriftCheckUnexpectedFailure">
            <summary>
              Looks up a localized string similar to An unexpected internal error has blocked the ability to validate database drift..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_DriftExists">
            <summary>
              Looks up a localized string similar to Database has drifted from its registered data-tier application..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_ExportingDataFromTable">
            <summary>
              Looks up a localized string similar to Extracting data from table {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_NoPackage">
            <summary>
              Looks up a localized string similar to Data-tier application not available for registration..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_RegistrationImportFailure">
            <summary>
              Looks up a localized string similar to Unable to import database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_RegistrationMetadataFailure">
            <summary>
              Looks up a localized string similar to Unable to identify application metadata..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_RegistrationMissingFailure">
            <summary>
              Looks up a localized string similar to Cannot update a database that has been registered as a data-tier application without also updating its registration..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_RegistrationSerializationFailure">
            <summary>
              Looks up a localized string similar to Unable to read data-tier application registration..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_RegistrationUnknownFailure">
            <summary>
              Looks up a localized string similar to Unable to register data-tier application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_SchemaMissing">
            <summary>
              Looks up a localized string similar to Databases registered as a DAC database must be hosted by an instance of SQL 2005 SP4, SQL 2008 SP2, SQL 2008 R2, SQL 2012, SQL 2014 or Microsoft Azure SQL Database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Dac_UploadingDataToTable">
            <summary>
              Looks up a localized string similar to Uploading data to table {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DatabaseContainmentDiffersOnServer">
            <summary>
              Looks up a localized string similar to The database containment option has been changed to {0}.  This may result in deployment failure if the state of the database is not compliant with this containment level..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DatabaseUpdateNotSupported">
            <summary>
              Looks up a localized string similar to Updating the database through deployment is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DataDownloadForColumnEncryptionProgress">
            <summary>
              Looks up a localized string similar to Downloading data from table {0}. {1} % done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DataMigrationStarted">
            <summary>
              Looks up a localized string similar to Starting data migration for cryptographic operations in table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DataUploadForColumnEncryptionProgress">
            <summary>
              Looks up a localized string similar to Uploading data for table {0}. {1} % done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deploy_ImportFailed">
            <summary>
              Looks up a localized string similar to Errors occurred while modeling the target database.  Deployment can not continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeployContributor_InitializationError">
            <summary>
              Looks up a localized string similar to Contributor initialization error..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeployContributorLoadError">
            <summary>
              Looks up a localized string similar to An error occurred while loading deployment contributors..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_AlteredTableMissingClusteredIndex">
            <summary>
              Looks up a localized string similar to Table {0} is being updated with no clustered index defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_AlwaysEncryptedDotNet46Requirement">
            <summary>
              Looks up a localized string similar to Deployment cannot proceed because updates to column encryption requires .NET 4.6..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ConstraintCheckMessage">
            <summary>
              Looks up a localized string similar to Checking constraint: {0} [{1}].[{2}].
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ConstraintCheckSkipUntrustedMessage">
            <summary>
              Looks up a localized string similar to Skipping checking untrusted constraint: {0} [{1}].[{2}]..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ConstraintCheckStartMessage">
            <summary>
              Looks up a localized string similar to Checking constraint: .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ContraintCheckErrorMessage">
            <summary>
              Looks up a localized string similar to Constraint verification failed:.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ContraintCheckFailureMessage">
            <summary>
              Looks up a localized string similar to An error occurred while verifying constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_CreateTableMissingClusteredIndex">
            <summary>
              Looks up a localized string similar to Table {0} is being created without a clustered index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_CycleDetected">
            <summary>
              Looks up a localized string similar to {0} has an unresolved dependency to {1}. A deployment script with correct ordering cannot be created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_DeployToServerless">
            <summary>
              Looks up a localized string similar to Deployed to developer instance..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ExternalAuthenticationProviderUsersWillBeConverted">
            <summary>
              Looks up a localized string similar to The source contains users that rely on an external authentication provider that is not supported by the target. These users will be treated as users without logins..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_Manifest_NoSourceModelFile">
            <summary>
              Looks up a localized string similar to No source model file was specified in the deployment manifest..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_Manifest_TooManySourceModelFiles">
            <summary>
              Looks up a localized string similar to More than one source model file was specified. Only one model can be deployed at one time..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_PlanGenerationError">
            <summary>
              Looks up a localized string similar to An error occurred during deployment plan generation. Deployment cannot continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ReferenceError">
            <summary>
              Looks up a localized string similar to An error occurred while adding references.  Deployment cannot continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_RemovingClusteredIndex">
            <summary>
              Looks up a localized string similar to &quot;Clustered index for table {0} is being removed.  Deployment will halt if table contains data.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_RequireNewerScriptDom">
            <summary>
              Looks up a localized string similar to The provided database option &apos;{0}&apos; is not supported in this version of Microsoft® SQL Server® Transact-SQL ScriptDom library. You need to install a newer version of the library..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SecurityPolicyConflictDetail">
            <summary>
              Looks up a localized string similar to Source security policy &apos;{0}&apos; conflicts with one or more target security policies &apos;{1}&apos;. .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SecurityPolicyConflicts">
            <summary>
              Looks up a localized string similar to Deployment cannot proceed because of conflicts between the source and target row-level security policies. .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SequenceStateRestore">
            <summary>
              Looks up a localized string similar to Restoring state for sequences that were re-created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SequenceStateRestoreFailure">
            <summary>
              Looks up a localized string similar to Failed to restore current value for sequence: .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SequenceStateRestoreSuccess">
            <summary>
              Looks up a localized string similar to Restored current value for sequence: .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_ServerVerificationSkipped">
            <summary>
              Looks up a localized string similar to Server properties were not verified because no connection string was specified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SqlCmdMustBeEnabled">
            <summary>
              Looks up a localized string similar to SQLCMD mode must be enabled to successfully execute this script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SqlCompatibilityWarning">
            <summary>
              Looks up a localized string similar to A project which specifies {0} as the target platform may experience compatibility issues with {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_SqlPlatformMismatch">
            <summary>
              Looks up a localized string similar to A project which specifies {0} as the target platform cannot be published to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_TargetDBNotEnclaveEnabledWarning">
            <summary>
              Looks up a localized string similar to The operation has attempted creating the [{0}] element that is an enclave-enabled column master key for Always Encrypted with secure enclaves. However, the target database does not support enclaves or it does not have an enclave properly configured - no queries that require the enclave will be supported. For more information see https://go.microsoft.com/fwlink/?linkid=2124580..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_TargetModelReferenceError">
            <summary>
              Looks up a localized string similar to An error occurred while adding references for the target model.  Deployment cannot continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_TargetVerificationFailed">
            <summary>
              Looks up a localized string similar to Verification of the deployment target failed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_TestSqlCmdDescription">
             <summary>
               Looks up a localized string similar to Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
            To re-enable the script after enabling SQLCMD mode, execute the following:
            SET NOEXEC OFF; 
            .
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Deployment_UnsupportedDatabaseEdition">
            <summary>
              Looks up a localized string similar to The provided database edition &apos;{0}&apos; is not supported in this version of Microsoft Azure SQL..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentNotInitialized">
            <summary>
              Looks up a localized string similar to Deployment was not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlan_StepAlreadyBelongsToPlan">
            <summary>
              Looks up a localized string similar to This step already belongs to a plan. The step must be removed first..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_BlockingDependency">
            <summary>
              Looks up a localized string similar to This deployment may encounter errors during execution because changes to {0} are blocked by {1}&apos;s dependency in the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_CircularReferenceInSymmetricKeys">
            <summary>
              Looks up a localized string similar to A deployment script with correct ordering cannot be created due to symmetric keys circular dependencies..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_MissingDependency">
            <summary>
              Looks up a localized string similar to This deployment may encounter errors during execution because {0} depends on {1} and {1} does not exist in the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_NotSupportedOperation">
            <summary>
              Looks up a localized string similar to Statements in {0}&apos;s definition cannot be deployed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_NotSupportedOperationForEnginEdition">
            <summary>
              Looks up a localized string similar to Statements in {0}&apos;s definition cannot be deployed to current Engine Edition {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_PossibleDataLoss">
            <summary>
              Looks up a localized string similar to Updates to {0} might cause data loss..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_RuntimeError">
            <summary>
              Looks up a localized string similar to If this deployment is executed, changes to {0} might introduce run-time errors in {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentPlanProblem_TargetObjectDrop">
            <summary>
              Looks up a localized string similar to If this deployment is executed, {0} will be dropped and not re-created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentScriptDom_NoScriptGenerated">
            <summary>
              Looks up a localized string similar to No script could be generated for operation {0} on object &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentScriptDom_UnnamedConstraintGeneration">
            <summary>
              Looks up a localized string similar to unnamed constraint on {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeploymentScriptDom_UnsupportedSqlScriptDomGenerator">
            <summary>
              Looks up a localized string similar to The SqlScriptDomGenerator {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeployPlan_StepDoesNotBelongToPlan">
            <summary>
              Looks up a localized string similar to This step does not belong to the plan..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeployScriptGenerator_GeneratedScript">
             <summary>
               Looks up a localized string similar to Deployment script generated to:
            {0}
            .
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DeployWarning_CollationMismatch">
            <summary>
              Looks up a localized string similar to The project and target databases have different collation settings. Deployment errors might occur..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DroppedLedgerTablesSkipped">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}] is a dropped ledger table. Such objects are excluded from an import or a deployment operation. For more information see https://go.microsoft.com/fwlink/?linkid=2165965..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DroppingNodeTableCanCauseDanglingEdges">
            <summary>
              Looks up a localized string similar to Dropping a node table may result in dangling edges for referencing edge tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DroppingObject">
            <summary>
              Looks up a localized string similar to Dropping {0} {1}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DroppingSystemVersioning">
            <summary>
              Looks up a localized string similar to Dropping system-versioning from {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DSPMismatch">
            <summary>
              Looks up a localized string similar to The target platform for deployment must match the target platform of the source model..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DSPTypeNotAvailable">
            <summary>
              Looks up a localized string similar to The target database platform service could not be determined.  Deployment cannot continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DuplicateBuildtimeDeploymentContributor">
            <summary>
              Looks up a localized string similar to More than one deployment contributor named {0} was stored in the deployment manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.DuplicateSqlCmdVariable">
            <summary>
              Looks up a localized string similar to The SQLCMD variable &apos;{0}&apos; is specified with more than one value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Exception_CannotGenerateBatchFragment">
            <summary>
              Looks up a localized string similar to Cannot generate a batch fragment from a {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Exception_ChangedQueueActivateOptionWithoutProcedure">
            <summary>
              Looks up a localized string similar to One of the queue ACTIVATION options was changed, but no PROCEDURE_NAME was specified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Exception_CreateStatementGeneratorNull">
            <summary>
              Looks up a localized string similar to Sql90AlterStatementGenerator could not get Sql90CreateStatementGenerator..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.Exception_ElementNotInModelDiff">
            <summary>
              Looks up a localized string similar to An element that claims to have changed was not found in the model differences..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ExpectedChangeDoesNotExist">
            <summary>
              Looks up a localized string similar to The change for {0} was not found. No ALTER statement can be generated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ExpectedObjectDoesNotExistInTarget">
            <summary>
              Looks up a localized string similar to The object does not exist in the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ExtensibilityExceptionLoadingDSP">
            <summary>
              Looks up a localized string similar to Unable to determine the data service provider for server &apos;{0}&apos; due to an extensibility exception. Please check if the target SQL Server version is supported by this tool version..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.FileAutoGeneratedHeaderComment">
             <summary>
               Looks up a localized string similar to This code was generated by a tool.
            Changes to this file may cause incorrect behavior and will be lost if
            the code is regenerated..
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.FileStreamNotSupported">
            <summary>
              Looks up a localized string similar to FILESTREAM is not supported in this edition of SQL Server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ImportBacpacProblem_GetCurrentUser">
            <summary>
              Looks up a localized string similar to Unable to query current user..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ImportFailed">
            <summary>
              Looks up a localized string similar to Failed to import target model {0}. Detailed message {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InitialSeedingCompleted">
            <summary>
              Looks up a localized string similar to Initial seeding for table &apos;{0}&apos; completed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidBuildtimeDeploymentContributorMetadata">
             <summary>
               Looks up a localized string similar to The DeploymentContributor {0} does not match the contributor registered at build time; the {1} does not match.  {2} was expected, but {3} was found.  
            Because the values are different the deployment contributor is different and it is possible that the script generated by deployment will not behave as expected..
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidDatabaseEdition">
            <summary>
              Looks up a localized string similar to The provided database edition {0} is invalid. The valid editions are ({1})..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidEnclaveUrlForNoneProtocol">
            <summary>
              Looks up a localized string similar to Specifying EnclaveAttestationURL is not valid with EnclaveAttestationProtocol = None..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidReference">
            <summary>
              Looks up a localized string similar to The reference to {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidServerEndpoint">
            <summary>
              Looks up a localized string similar to Unable to connect to target server &apos;{0}&apos;. Please verify the connection information such as the server name, login credentials, and firewall rules for the target server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.InvalidSqlCmdVariableFormat">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an invalid format for a SQLCMD variable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.LedgerDatabaseOptionsMismatch">
            <summary>
              Looks up a localized string similar to The value of the LEDGER property in the bacpac file or the dacpac file is {0} and it does not match the value of the LEDGER property in the target database. Recreate the database with the same value of the LEDGER property as in the bacpac file or the dacpac file and retry the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.LedgerHistoryTableRename">
            <summary>
              Looks up a localized string similar to Renaming ledger history table {0} to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.LedgerViewRename">
            <summary>
              Looks up a localized string similar to Renaming ledger view {0} to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MissingBuildtimeDeploymentContributor">
            <summary>
              Looks up a localized string similar to The DeploymentContributor {0} that was present during build is missing.  Because the deployment contributor is missing, it is possible that the script generated by deployment will not behave as expected..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MissingPlanGenerator">
            <summary>
              Looks up a localized string similar to No deployment plan generator is registered for database platform service {0}.  Deployment cannot proceed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MissingReference">
            <summary>
              Looks up a localized string similar to No file was supplied for reference {0}; deployment might fail. When {1} was created, the original referenced file was located {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MissingReference_NoPackagePath">
            <summary>
              Looks up a localized string similar to No file was supplied for reference {0}; deployment might fail. When package was created, the original referenced file was located {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MultipleConstraintRenameAnnotations">
            <summary>
              Looks up a localized string similar to A constraint has more than one ({0}) temp name associated with it: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.MultipleEndAltersInPlan">
            <summary>
              Looks up a localized string similar to Multiple SqlEndAltersSteps were created in the plan; there should be only one.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NoConstraintRenameAnnotations">
            <summary>
              Looks up a localized string similar to A user-named constraint that isn&apos;t rebound later has no temp names associated with it.  Should have exactly one..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NodeTableMigrationPossibleDataLoss">
            <summary>
              Looks up a localized string similar to Edge tables may contain references to nodes from {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NodeToEdgeOrEdgeToNodeConversion">
            <summary>
              Looks up a localized string similar to Node tables cannnot be converted into edge tables or vice versa..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NoEndAltersInPlan">
            <summary>
              Looks up a localized string similar to No SqlEndAltersStep was created in the plan; there should be exactly one.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NotEmptyTableError">
            <summary>
              Looks up a localized string similar to Rows were detected. The schema update is terminating because data loss might occur..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.NullToNotNullColumnChange">
            <summary>
              Looks up a localized string similar to The column {0} on table {1} must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardChangeTrackingChangesLost">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. The duration of seeding or one of a catch-up iteration exceeded the specified change retention..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardDivergentCountExceeded">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. The operation was unable to keep up with the rate of changes in the table (the number of rows processed in the last {1} consecutive iterations has been increasing). Please consider reducing the rate of change in the table by stopping some applications and retrying the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardFailed">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. Error: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardInitializationFailed">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. Cannot initialize Change Tracking. Reason: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardInMemoryTableNotSupported">
            <summary>
              Looks up a localized string similar to Table {0} is an in-memory table. UseOnlineApproach cannot be used for in-memory tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardInvalidChangeTrackingOperation">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. The Change Tracking log contains the {1} operation, which is invalid. Please report this error to Microsoft..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardInvalidRowOperation">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. Error: Change Tracking log contains a delete or update statement referencing a non-existing row, or an insert statement referencing a row that already exists. Please report this error to Microsoft..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardIterationCompleted">
            <summary>
              Looks up a localized string similar to Catch-up iteration #{0} for table &apos;{1}&apos; completed. Data migration is {2} % done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardIterationProgress">
            <summary>
              Looks up a localized string similar to Catch-up iteration #{0} for table &apos;{1}&apos;: {2} rows processed, {3} rows remaining. Data migration is {4} % done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardIterationProgressUnknownRemaining">
            <summary>
              Looks up a localized string similar to Catch-up iteration #{0} for table &apos;{1}&apos;: {2} rows processed. Data migration is {3} % done..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardIterationsCompleted">
            <summary>
              Looks up a localized string similar to Catch-up phase completed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardIterationStart">
            <summary>
              Looks up a localized string similar to {0} new or updated rows detected in table &apos;{1}&apos;. Starting catch-up iteration #{2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardLockAttempt">
            <summary>
              Looks up a localized string similar to Attempting to lock table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardLowMaxDownTime">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. Could not complete the last catch-up iteration within the specified maximum time of {1} seconds. Number of remaining rows: {2}. Please re-run the operation and report this error to Microsoft, if it persists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardNeedPrimaryKey">
            <summary>
              Looks up a localized string similar to Configuring encryption settings using the online approach for table {0} is not allowed, as the table does not have a primary key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardProcessTakingLonger">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings for table {0}. The processing of changes in the table did not complete within the maximum allowed number of iterations ({1}). Please consider reducing the rate of change in the table by stopping some applications and retrying the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardTableLocked">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; has been locked..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardTableLockFailed">
            <summary>
              Looks up a localized string similar to Attempt to lock table &apos;{0}&apos; failed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardTableSchemaModified">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings, because the schema of table {0} was changed while the operation was in progress..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OnlineAEWizardTableTruncated">
            <summary>
              Looks up a localized string similar to Failed to configure the specified encryption settings, because table {0} was truncated while the operation was in progress. Please re-run the operation and make sure no user or application truncates the table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OrderModifier_CheckingNewConstraints">
            <summary>
              Looks up a localized string similar to Checking existing data against newly created constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OrderModifier_UnnamedCKChecked">
            <summary>
              Looks up a localized string similar to The unnamed check constraint on table {0} will be checked by checking the table.  Name the constraint to avoid checking the entire table and only check the new constraint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.OrderModifier_UnnamedFKChecked">
            <summary>
              Looks up a localized string similar to The unnamed foreign key between tables {0} and {1} will be checked by checking the table.  Name the foreign key to avoid checking the entire table and only check the new constraint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.PlanVerificationFailed">
            <summary>
              Looks up a localized string similar to Plan verification encountered errors; deployment cannot continue..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.PrimaryKeyOrGuidColumnRequired">
            <summary>
              Looks up a localized string similar to Either a primary key column or a guid column is required.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.PublishScriptGenerator_GeneratedScript">
            <summary>
              Looks up a localized string similar to Finished generating publish scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebindAuthorization">
            <summary>
              Looks up a localized string similar to Rebinding authorization {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebindFulltextIndex">
            <summary>
              Looks up a localized string similar to Rebinding full-text index on {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebindSchemaBindingObject">
            <summary>
              Looks up a localized string similar to Adding schema binding to {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebindTableDependencies">
            <summary>
              Looks up a localized string similar to Rebinding columns to changed objects on table {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebuildTableFinished">
            <summary>
              Looks up a localized string similar to Table {0} was rebuilt..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RebuildTableStarting">
            <summary>
              Looks up a localized string similar to Starting rebuilding table {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RefreshingObject">
            <summary>
              Looks up a localized string similar to Refreshing {0} {1}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.RemoveUddtAlias">
            <summary>
              Looks up a localized string similar to Removing temporary type {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_AddClusteredIndex">
            <summary>
              Looks up a localized string similar to {0} on {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_AddSystemVersioning">
            <summary>
              Looks up a localized string similar to Add system-versioning.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_Alter">
            <summary>
              Looks up a localized string similar to Alter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_ColumnEncryptionMigration">
            <summary>
              Looks up a localized string similar to Column encryption migration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_ColumnEncryptionRenameTemporaryTable">
            <summary>
              Looks up a localized string similar to Column encryption rename temporary table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_CompensatingActions">
            <summary>
              Looks up a localized string similar to Supporting actions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_Create">
            <summary>
              Looks up a localized string similar to Create.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_CreateClusteredIndexHighlight">
            <summary>
              Looks up a localized string similar to Clustered indexes that will be created.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_CreateTableAsSelect">
            <summary>
              Looks up a localized string similar to Create table as select.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DataIssueHighlight">
            <summary>
              Looks up a localized string similar to Possible data issues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DataMotion">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DataMotionHighlight">
            <summary>
              Looks up a localized string similar to Tables that will be recreated with data migrated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DisableChangeTrackingDatabase">
            <summary>
              Looks up a localized string similar to Disabling change tracking on database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_Drop">
            <summary>
              Looks up a localized string similar to Drop.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DropClusteredIndex">
            <summary>
              Looks up a localized string similar to {0} on {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DropClusteredIndexHighlight">
            <summary>
              Looks up a localized string similar to Clustered indexes that will be dropped.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_DropSystemVersioning">
            <summary>
              Looks up a localized string similar to Drop system-versioning.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_EnableChangeTrackingDatabase">
            <summary>
              Looks up a localized string similar to Enabling change tracking on database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_ErrorActions">
            <summary>
              Looks up a localized string similar to Errors.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_ExplicitActions">
            <summary>
              Looks up a localized string similar to User actions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_HighlightActions">
            <summary>
              Looks up a localized string similar to Highlights.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_LedgerHistoryTableRename">
            <summary>
              Looks up a localized string similar to Rename ledger view.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_LedgerViewRename">
            <summary>
              Looks up a localized string similar to Rename ledger history table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_MoveSchema">
            <summary>
              Looks up a localized string similar to Move schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_QualifiedName">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_RebindAuthorization">
            <summary>
              Looks up a localized string similar to Rebind authorization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_RebindFulltextIndex">
            <summary>
              Looks up a localized string similar to Rebind fulltext index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_RebindSchemaBinding">
            <summary>
              Looks up a localized string similar to Rebind schemabinding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_RebindTable">
            <summary>
              Looks up a localized string similar to Rebind table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_Refresh">
            <summary>
              Looks up a localized string similar to Refresh.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_Rename">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_TableDataMotion">
            <summary>
              Looks up a localized string similar to Recreate table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindAuthorization">
            <summary>
              Looks up a localized string similar to Unbind authorization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindDataMotionConstraint">
            <summary>
              Looks up a localized string similar to Unbinding constraint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindExecuteAs">
            <summary>
              Looks up a localized string similar to Unbind execute as on {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindFulltextIndex">
            <summary>
              Looks up a localized string similar to Unbind fulltext index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindFulltextStoplist">
            <summary>
              Looks up a localized string similar to Unbind fulltext stoplist.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindSchemaBinding">
            <summary>
              Looks up a localized string similar to Unbind schemabinding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindTable">
            <summary>
              Looks up a localized string similar to Unbind table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_UnbindTriggerOrder">
            <summary>
              Looks up a localized string similar to Unbind trigger order.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ReportBuilder_WarningActions">
            <summary>
              Looks up a localized string similar to Warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ScriptDomGenerator_NoScriptGenerator">
            <summary>
              Looks up a localized string similar to No script generator was defined, the script cannot be generated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ScriptExecutionFailed">
             <summary>
               Looks up a localized string similar to Script execution error.  The executed script:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ScriptGenerationNotSupported">
            <summary>
              Looks up a localized string similar to Generating a deployment script is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SensitiveDataMask">
            <summary>
              Looks up a localized string similar to ******.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionCleanupExtractDataForResume">
            <summary>
              Looks up a localized string similar to Cleanup temporary external tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionDataImport">
            <summary>
              Looks up a localized string similar to Importing data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionDeployExecute">
            <summary>
              Looks up a localized string similar to Updating database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionDeployInitialize">
            <summary>
              Looks up a localized string similar to Initializing deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionDeployReportResults">
            <summary>
              Looks up a localized string similar to Reporting and scripting deployment plan.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionDeployVerify">
            <summary>
              Looks up a localized string similar to Analyzing deployment plan.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionExtractData">
            <summary>
              Looks up a localized string similar to Exporting data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionExtractSchema">
            <summary>
              Looks up a localized string similar to Extracting schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.ServiceActionExtractVerify">
            <summary>
              Looks up a localized string similar to Validating schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SourceMissing">
            <summary>
              Looks up a localized string similar to Unable to resolve deployment source..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SpRefreshParameterEncryptionFail">
            <summary>
              Looks up a localized string similar to {0} failed to refresh module &apos;{1}&apos;. Error: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlBuildStart">
            <summary>
              Looks up a localized string similar to Deployment script for {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlCmdVerifier_FatalError">
            <summary>
              Looks up a localized string similar to A fatal parser error occurred: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlCmdVerifier_FileDoesNotExist">
            <summary>
              Looks up a localized string similar to The included file {0} ({1}) does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlCmdVerifier_InvalidPath">
            <summary>
              Looks up a localized string similar to An invalid path was specified to the :r command..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlCmdVerifier_SyntaxCheckFailed">
            <summary>
              Looks up a localized string similar to The syntax check failed &apos;{0}&apos; in the batch near:
               &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploy_DisableAllDDL">
            <summary>
              Looks up a localized string similar to Disabling all DDL triggers....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploy_DisableSecurityPolicies">
            <summary>
              Looks up a localized string similar to Disabling security policies....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploy_EnableSecurityPolicies">
            <summary>
              Looks up a localized string similar to Enabling security policies....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploy_ReenablingDdlTriggers">
            <summary>
              Looks up a localized string similar to Reenabling DDL triggers....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploy_ServerOnlyToMaster">
            <summary>
              Looks up a localized string similar to The server source is set to deploy to database {0}. A server model can deploy only to the master database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CannotAlterManagementScopedObjects">
            <summary>
              Looks up a localized string similar to The object {0} already exists in database with a different definition and will not be altered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CannotDropManagementScopedObjects">
            <summary>
              Looks up a localized string similar to The object {0} already exists in database and will not be dropped..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CouldNotImportTypeError">
            <summary>
              Looks up a localized string similar to {0} could not be imported but one or more of these objects exist in your source..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CouldNotImportTypeWarning">
            <summary>
              Looks up a localized string similar to {0} could not be imported, errors could occur during deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CouldNotLoadDeployConfig">
            <summary>
              Looks up a localized string similar to The deployment configuration file could not be loaded.  Deployment cannot continue.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_CouldNotSetProperty">
            <summary>
              Looks up a localized string similar to The deployment property {0} could not be used to configure deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_Done">
            <summary>
              Looks up a localized string similar to Update complete..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeployment_SqlCmdFileDoesNotExist">
            <summary>
              Looks up a localized string similar to The SqlCmd file {0} does not exist ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploymentDacDataModifier_NoUserObjectsForBacpacImport">
            <summary>
              Looks up a localized string similar to Data cannot be imported into target because it contains one or more user objects. Import should be performed against a new, empty database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploymentScriptModifier_PostdeploymentScriptDoesNotExist">
            <summary>
              Looks up a localized string similar to The post-deployment script &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlDeploymentScriptModifier_PredeploymentScriptDoesNotExist">
            <summary>
              Looks up a localized string similar to The pre-deployment script &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlProject_SQL2008_SqlProjectType_FriendlyName">
            <summary>
              Looks up a localized string similar to SQL Server 2008 or SQL Server 2008 R2.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_IncompatibleCollation">
            <summary>
              Looks up a localized string similar to An incompatible collation combination has been detected between the source and target. Deploying a case insensitive model to a case sensitive target can produce unintended changes and possible data loss. Consider using a case sensitive source model collation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_SourceCDC">
            <summary>
              Looks up a localized string similar to {0} is under change data capture control, but those settings will not be transferred.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_SourceObjectReplicated">
            <summary>
              Looks up a localized string similar to {0} is replicated but the replication settings will not be transferred.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_TargetCDC">
            <summary>
              Looks up a localized string similar to {0} is under change data capture control and cannot be modified.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_TargetObjectReplicated">
            <summary>
              Looks up a localized string similar to {0} is replicated and cannot be modified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_TargetObjectReplicatedImplicit">
            <summary>
              Looks up a localized string similar to {0} is treated as replicated due to change tracking and cannot be modified..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.SqlVerifier_TargetOnlyALTER">
            <summary>
              Looks up a localized string similar to The object {0} must be changed in order for deployment to succeed; however, {0} only exists in the target database and cannot be changed without introducing unintended side-effects. Allow drop objects not in source for the deployment to proceed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.StartingInPlaceEncryptionOperation">
            <summary>
              Looks up a localized string similar to Starting an in-place cryptographic operation for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableAddColumnNoDefaultNoNull">
            <summary>
              Looks up a localized string similar to The column {0} on table {1} must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableDropped">
            <summary>
              Looks up a localized string similar to The table {0} is being dropped, data loss could occur..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableNotEmptyForColumnEncryptionMigration">
            <summary>
              Looks up a localized string similar to Rows were detected in the table. The schema update to alter column encryption is terminating because it requires migration of data to client and back to server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableRebuildAllColumnsChanged">
            <summary>
              Looks up a localized string similar to The table {0} is being dropped and re-created since all non-computed columns within the table have been redefined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableRebuildComputedColumnWithClusteredIndexDroppedOnAzure">
            <summary>
              Looks up a localized string similar to In Microsoft Azure SQL Database, you cannot drop a clustered index on a table with data. The table {0} is being dropped and re-created since one of the dependencies of the computed column {1} is being altered and this column is referenced by a clustered index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableRebuildDistributionChanged">
            <summary>
              Looks up a localized string similar to The table {0} is being dropped and re-created since the distribution policy for the table has changed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableRebuildIsMemoryOptimized">
            <summary>
              Looks up a localized string similar to The table {0} is being dropped and re-created since its memory-optimized flag has changed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TableRebuildMemoryOptimizedAnyChange">
            <summary>
              Looks up a localized string similar to The table {0} is being dropped and re-created since it has changed and it is a memory-optimized table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TargetDBReadOnly">
            <summary>
              Looks up a localized string similar to The database is readonly.  Updates to the database will not succeed until the database is made read write..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TemporalTable_AlwaysEncryptedColumns">
            <summary>
              Looks up a localized string similar to System-versioned temporal table {0} contains encrypted columns and cannot be deployed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TemporalTable_SchemaMismatch">
            <summary>
              Looks up a localized string similar to System-versioned temporal table {0} must have the same schema as corresponding history table {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TemporalTableDropped">
            <summary>
              Looks up a localized string similar to The table {0} is a system-versioned temporal table, dropping it will also drop the corresponding history table {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TransactionFlagAlreadySet">
            <summary>
              Looks up a localized string similar to TransactionsEnabled flag for encryption migration has already been set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TransactionPlumbing_Failed">
            <summary>
              Looks up a localized string similar to The transacted portion of the database update failed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.TransactionPlumbing_Success">
            <summary>
              Looks up a localized string similar to The transacted portion of the database update succeeded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnableToModifySysAdminSettings">
            <summary>
              Looks up a localized string similar to The database settings cannot be modified. You must be a SysAdmin to apply these settings..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnalteredFileSystemObject">
            <summary>
              Looks up a localized string similar to The source&apos;s object {0} is different than the target&apos;s version of the object but the target object will not be updated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindAuthorization">
            <summary>
              Looks up a localized string similar to Unbinding authorization {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindDataMotionConstraint">
            <summary>
              Looks up a localized string similar to Unbinding constraint {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindExecuteAs">
            <summary>
              Looks up a localized string similar to Unbinding execute as on {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindFulltextIndex">
            <summary>
              Looks up a localized string similar to Unbinding fulltext index on {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindFulltextStoplist">
            <summary>
              Looks up a localized string similar to Unbinding full-text stop list {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindingDataMotionConstraint">
            <summary>
              Looks up a localized string similar to Unbinding constraint {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindSchemaBindingObject">
            <summary>
              Looks up a localized string similar to Removing schema binding from {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindTableDependencies">
            <summary>
              Looks up a localized string similar to Unbinding columns from changing objects on table {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnbindTriggerOrder">
            <summary>
              Looks up a localized string similar to Unbinding trigger order for {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UndeployableElementErrorMessage">
            <summary>
              Looks up a localized string similar to The element {0} cannot be deployed. This element contains state that cannot be recreated in the target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UndeployableElementWithPasswordErrorMessage">
            <summary>
              Looks up a localized string similar to The element {0} cannot be deployed as the password was auto generated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UndeployableEncryptedElementErrorMessage">
            <summary>
              Looks up a localized string similar to The element {0} cannot be deployed as the script body is encrypted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UndroppedObject">
            <summary>
              Looks up a localized string similar to The object {0} exists in the target, but it will not be dropped even though you selected the &apos;Generate drop statements for objects that are in the target database but that are not in the source&apos; check box..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_AutoClose">
            <summary>
              Looks up a localized string similar to The option ON for AUTO_CLOSE is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_Durability">
            <summary>
              Looks up a localized string similar to The option {0} for delayed durability is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_PageVerification">
            <summary>
              Looks up a localized string similar to The option {0} for page verification is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_QueryStoreCaptureMode">
            <summary>
              Looks up a localized string similar to The option {0} for querystore query_capture_mode is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_QueryStoreOperationMode">
            <summary>
              Looks up a localized string similar to The option {0} for querystore operation_mode is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_QueryStoreSizeCleanupPolicyMode">
            <summary>
              Looks up a localized string similar to The option {0} for querystore size_based_cleanup_mode is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_Recovery">
            <summary>
              Looks up a localized string similar to The option {0} for recovery is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_ServiceBroker">
            <summary>
              Looks up a localized string similar to The option {0} for service broker is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_SourceCompatibilityMode">
            <summary>
              Looks up a localized string similar to The compatibility level of the source schema {0} is not supported, which may result in undefined behavior. Please upgrade to a later version which supports this compatibility level..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.UnsupportedOption_TargetCompatibilityMode">
            <summary>
              Looks up a localized string similar to The compatibility level of the target schema {0} is not supported, which may result in undefined behavior. Please upgrade to a later version which supports this compatibility level..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.VardecimalSupportDiffEnabledOnServer">
            <summary>
              Looks up a localized string similar to Vardecimal support is enabled for the database but disabled for the project. See SQL Server Books Online for more information about how to turn off vardecimal support..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentResources.WrongNumberOfTableRenameAnnotations">
            <summary>
              Looks up a localized string similar to Table does not have exactly one rename annotation on it; instead, it has {0}..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptGenerator">
            <summary>
            Agnostic script generator
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptTracker">
            <summary>
            Helper class that exposes methods to drop, create and insert records into the Deployment Steps Tracking table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptTracker.DropCreateTrackingTableScript">
            <summary>
            Gets the sql statement to drop\create the tracking table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptTracker.CreateTrackingTableScript">
            <summary>
            Gets the sql statement to create the tracking table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptTracker.DropTrackingTableScript">
            <summary>
            Gets the sql statement to drop the tracking table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptTracker.GetInsertCommandIntoScriptTrackingTable(System.Data.IDbConnection,System.Int32)">
            <summary>
            Get INSERT statement into tracking table
            </summary>
            <param name="stepId">Deployment Step Id</param>
            <returns>INSERT statement command</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DriftResult">
            <summary>
            Processes a ModelComparisonResult and is able to construct an XML representation
            of the adds, drops and modifications from the model compare.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DriftResult.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,System.Boolean)">
            <summary>
            Creates a DriftResult instance.
            </summary>
            <param name="modelComparisonResult">Used during this c'tor to initialize the DriftResult data.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DriftResult.HasDrift">
            <summary>
            Call this to quickly determine if any drift has been detected.  This is not a statement
            about the entire database, but about the items that a DriftResult is going to be
            reporting on.
            </summary>
            <returns>Returns true if drift has been detected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DriftResult.ToXml">
            <summary>
            This method will return an XML document that contains details on the drift
            that was detected in the database.
            
            Example:
            <DriftReport>
              <Additions>
                <Object Name="[T4]" Parent="[dbo]" Type="SqlTable" />
                <Permission SecurableName="[T4]" SecurableParent="[dbo]" SecurableType="SqlTable" Count="2" />
              </Additions>
              <Removals>
                <Object Name="[T2]" Parent="[dbo]" Type="SqlTable" />
                <Permission SecurableName="[P1]" SecurableParent="[dbo]" SecurableType="SqlProcedure" Count="1" />
              </Removals>
              <Modifications>
                <Object Name="[T3]" Parent="[dbo]" Type="SqlTable" />
                <Permission SecurableName="[C2]" SecurableParent="[dbo].[T3]" SecurableType="SqlSimpleColumn" Count="1" />
              </Modifications>
            </DriftReport>
            
            If there is no drift detected then the Additions, Removals and Modifications 
            elements will be empty.
            </summary>
            <returns>This method always returns a valid XML document.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation">
            <summary>
            Describes the operation that modified an element's identity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.None">
            <summary>
            Indicates that the absence of any refactoring operation or related effect
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.ComposedChildOfOperationTarget">
            <summary>
            Indicates a parent of this element was the target of a refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.HeirarchicalChildOfOperationTarget">
            <summary>
            Indicates a parent of this element was the target of a refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.ParentOfOperationTarget">
            <summary>
            Indicates a composed child of this element was the target of a refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.RenameOperation">
            <summary>
            Indicates the associated element was the target of a rename refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.SchemaMoveOperation">
            <summary>
            Indicates the associated element was the target of a schema-move refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.SchemaCreatedInTarget">
            <summary>
            Indicates the associated element was created in the target model due to a schema move operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.Operations">
            <summary>
            Indicates the associated element was the target of a refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.Relationships">
            <summary>
            Indicates the associated element was in parent/child relation to the target of a refactoring operation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation.ChildRelationships">
            <summary>
            Indicates the associated element was in child relation to the target of a refactoring operation
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext">
            <summary>
            Identifies a model element along with its original identity and a script-fragment
            that contains the CREATE statement that correponds to that element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation,System.Action,System.Action)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.Element">
            <summary>
            Gets the element who's identity has changed in its current (changed) state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.Operation">
            <summary>
            Gets the element who's identity has changed in its current (changed) state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.Capture">
            <summary>
            Captures the current element identity
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.AddCallbacks(System.Action,System.Action)">
            <summary>
            Adds an additional apply callback to the context for the element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.Apply">
            <summary>
            Changes the element to it's post-refactored identity
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext.Revert">
            <summary>
            Reverts the element back to it's pre-refactored identity
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog">
            <summary>
            Retains list of context objects that identify model elements that have had their identity
            changed via a refactoring operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.ChangedElements">
            <summary>
            Gets a collection of model elements that have had their identity changed via
            a refactoring operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.GetIdentityChange(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Retrieves the change context for the given model element.
            </summary>
            <returns>Returns the context associated with the specified model element, or null if none exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.TryGetIdentityChange(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext@)">
            <summary>
            Attempts to retrieve the change context for the given model element.
            </summary>
            <returns>True if the specified element has had its identity changed or false if no such change has occurred.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.Apply">
            <summary>
            Changes all elements to their post-refactored identity
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.Revert">
            <summary>
            Changes all elements to their pre-refactored identity
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.Capture">
            <summary>
            Captures the current identity for all elements in the log.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.CreateLogWriter">
            <summary>
            Factory method that creates a object that writes to the current log instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.LogWriter">
            <summary>
            Retains list of context objects that identify model elements that have had their identity
            changed via a refactoring operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.LogWriter.#ctor(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeContext})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLog.LogWriter.RecordIdentityChange(Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Action,System.Action)">
            <summary>
            Capture an element along with its original identity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLogWriter">
            <summary>
            Defines the contract for recording identity changes when processing the
            refactoring log.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeLogWriter.RecordIdentityChange(Microsoft.Data.Tools.Schema.Sql.Deployment.IdentityChangeOperation,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Action,System.Action)">
            <summary>
            Capture an element along with its original identity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IDeploymentController">
            <summary>
            The DeploymentController exposes an API that can be used to
            run the deployment engine multiple times to generate a
            script based on differing configurations.  This API is used by
            the SchemaCompare engine to generate deployment scripts and
            execute them.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.IDeploymentController.AzureKeyVaultValidationCallback">
            <summary>
            Callback function to validate the presence of AKV token for Column Master Key access
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.IDeploymentController.Options">
            <summary>
            The options used when generating a deployment plan and deploying that plan
            against a database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.ISqlClrDeployHost">
            <summary>
            This is the interface used to communicate to the HostObject for the
            SqlClrDeployTask task.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.BlockOnErrorClasses" -->
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ColumnClasses">
            <summary>
            Defines model classes that correspond to a table column.
            (Column-set, Computed, or Regular)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ConstraintClasses">
            <summary>
            Defines model classes that correspond to a table constraint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.DropOnTableCreationClasses">
            <summary>
            Defines model classes that are dropped a table is created or rebuilt.
            (Often when not defined in source model).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ElementHostClasses">
            <summary>
            Model classes that host other model elements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ExcludeFromDriftClasses">
            <summary>
            Defines model classes that can be omitted from drift detection since
            their parent classes will also be reported as modified
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ImmutableClasses">
            <summary>
            Model classes that are "create-only" for deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.IndexClasses">
            <summary>
            Model classes that correspond to index types
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ImplicitDropClasses">
            <summary>
            Model classes that are allowed to be dropped along when other
            associated (parent) element are changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InterpretedClasses">
            <summary>
            There are only a small set of model classes that we need to interpret when
            analyzing dependencies.  These are the objects where we do not have complete dependency
            information from the server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.NonBlockingClasses">
            <summary>
            Model classes that do not block updates to existing objects they reference.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.NonBlockingRelationships">
            <summary>
            Model relationships that do not block updates to existing objects they reference.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingFunctionViewScriptClasses">
            <summary>
            Model classes that can reference a FUNCTION or VIEW object
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingProcedureScriptClasses">
            <summary>
            Model classes that can reference a PROCEDURE object
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingSequenceScriptClasses">
            <summary>
            Model classes that can reference a SEQUENCE object
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ScriptPropertyClasses">
            <summary>
            Model element properties that correspond to sql script expressions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ServerClasses">
            <summary>
            Model elements that have server-wide scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.SymmetricKeyEncryptionClasses">
            <summary>
            Model classes that can be used to encrypt a symmetric key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.UnalterableClasses">
            <summary>
            Model classes that are dropped and re-created when updated.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.IsSystemGeneratedUniqueGraphIndex(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method determines if the element is a system generated index on a node or edge table.
            System generated indexes always have the same format, a string appended with a guid that has no
            dashes or curly braces. An example would be "GRAPH_UNIQUE_INDEX_5C884534077E464B8CCA8BB2580E47E3".
            An important caveat here, the user is free to create indexes named just like this. And with the
            current engine design there is no way to know if the system created the index or if the user
            created the index with a similar name.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is a system generated index, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.LookupElement(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore)">
            <summary>
            Helper method too lookup an element in a specified store
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeBlockOnErrorClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.BlockOnErrorClasses"/>
            </summary>
            <remarks>
            Indexes are evaluated separately by caller
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeColumnClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ColumnClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeConstraintClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ConstraintClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeDropOnTableCreationClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.DropOnTableCreationClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeElementHostClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ElementHostClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeExcludeFromDriftClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ExcludeFromDriftClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeImmutableClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ImmutableClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeImplicitDropClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ImplicitDropClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeInterpretedClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InterpretedClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeIndexClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.IndexClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeNonBlockingClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.NonBlockingClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeNonBlockingRelationships">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.NonBlockingRelationships"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeScriptProperties">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ServerClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeServerClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ServerClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeReferencingFunctionViewScriptClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingFunctionViewScriptClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeReferencingProcedureScriptClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingProcedureScriptClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeReferencingSequenceScriptClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.ReferencingSequenceScriptClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeSymmetricKeyEncryptionClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.SymmetricKeyEncryptionClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeTriggerClasses">
            <summary>
            <see cref="!:TriggerClasses"/>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.InitializeUnalterableClasses">
            <summary>
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.Deployment.ModelInterpretationUtils.UnalterableClasses"/>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer">
            <summary>
            This class is responsible for serializing and deserializing publish profile files.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer.#ctor">
            <summary>
            Creates an empty profile
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer.#ctor(System.String)">
            <summary>
            Loads an existing profile or creates a new one depending on if
            'filePath' is null;
            </summary>
            <param name="filePath">Full path to a profile file, or null for a new profile</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer.#ctor(System.IO.Stream)">
            <summary>
            Loads an existing profile or creates a new one depending on if
            'filePath' is null;
            </summary>
            <param name="stream">A profile file, or null for a new profile</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer.GetDefaultMsBuildToolSet">
            <summary>
            Returns default MSBuild toolset version for the NetFramework and netcore
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishScriptGenerator">
            <summary>
            Deployment contributor that processes a deployment plan for use during publishing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishScriptGenerator.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishScriptGenerator.OnExecute(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext)">
            <summary>
            Called to initiate plan execution.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishScriptGenerator.ProcessScriptBody(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,System.String,System.Boolean,System.Boolean)">
            <summary>
            Helper method to process the main sections of the plan.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.PublishScriptGenerator.ProcessScriptPrefix(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,System.String@,System.Boolean)">
            <summary>
            Helper method to process the part of the plan that is considered prefix.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.RefactorRequest">
            <summary>
            Base class for refactoring requests to the deployment engine.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.RenameRequest.MakeRenamedParts(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Helper method to create a new name parts based on the newly specified name and the
            previous parts
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.MarkdownReportBuilder">
            <summary>
            Outputs a plan report in Markdown format
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.MarkdownReportBuilder.Report">
            <summary>
            The report that was generated
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder">
            <summary>
            The base class for report builds that report on a deployment plan
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.RequireTableRecreation">
            <summary>
            Whether table recreation is required.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.PossibleDataLoss">
            <summary>
            Whether the deployment could result in data loss.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.HasWarnings">
            <summary>
            Whether there are warnings in the report.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.CreateReport(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.DataSchemaError},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Deployment.DropRequest},Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            Called to analyze and create a report using the specified inputs.  The format
            of the report is determined by the subclass
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.CreateReport(System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.DataSchemaError},System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.DataSchemaError},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.HighlightAction,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}})">
            <summary>
            Overwritten in derived class to output the actions 
            associated with a particular deployment plan
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.GetActionName(Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.HighlightAction)">
            <summary>
            Returns a localized description of the specified action
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.GetOperationName(System.Int32)">
            <summary>
            Returns a localized short description of the specified deployment operation
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.AnalyzePlan(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Deployment.DropRequest},Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.PlanReportBuilder.HighlightAction,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem}})">
            <summary>
            Analyzes the provided plan and populates the action dictionaries based on information
            found in the plan.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedElement">
            <summary>
            Represents a reported element.  This "reported item" is used when
            object names should just be reported with a category
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.ReportedItem">
            <summary>
            Represents a reported highlight/action detected while the plan report builder 
            analyzed a deployment plan
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.TextReportBuilder">
            <summary>
            This is a simple class that outputs a plan report in text format
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.TextReportBuilder.Report">
            <summary>
            The report that was generated
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder">
            <summary>
            Outputs a plan report in xml format
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder.Report">
            <summary>
            The report that was generated
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder.#ctor">
            <summary>
            Create an instance of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder"/> that writes report content to <see cref="T:System.Text.StringBuilder"/> returned from Report property.
            </summary>
            <remarks>
            When this constructor is used, the <see cref="T:System.Text.StringBuilder"/> value returned from Report will contain the report after CreateReport is invoked.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder.#ctor(System.IO.TextWriter)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Reporting.XmlReportBuilder"/> that writes report content to the supplied <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">
            <see cref="T:System.IO.TextWriter"/> to which to write the report.
            </param>
            <remarks>
            <para>
            When this constructor is used, the Report property will always have a value of null.
            </para>
            <para>
            Note that this class does not take ownership of the <see cref="T:System.IO.TextWriter"/>, so callers must dispose the instance.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter">
            <summary>
            A class that helps determine whether a script contains sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter.SensitiveDataVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CertificateStatementBase)">
            <summary>
            Used by CreateCertificateStatement, AlterCertificateStatement and BackupCertificateStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter.SensitiveDataVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.MasterKeyStatement)">
            <summary>
            Used by CreateMasterKeyStatement and AlterMasterKeyStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter.SensitiveDataVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupRestoreMasterKeyStatementBase)">
            <summary>
            Used by BackupMasterKeyStatement, BackupServiceMasterKeyStatement,  RestoreMasterKeyStatement and RestoreServiceMasterKeyStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter.SensitiveDataVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CryptoMechanism)">
            <summary>
            Used by: 
            SymmetricKeyStatement (CreateSymmetricKeyStatement, AlterSymmetricKeyStatement), 
            OpenSymmetricKeyStatement, DatabaseEncryptionKeyStatement, SignatureStatementBase
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SensitiveDataFilter.SensitiveDataVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CredentialStatement)">
            <summary>
            Used by CreateCredentialStatement and AlterCredentialStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql130DeploymentPlanGenerator.DisableSecurityPolicies(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            if we are going to perform update/drop on multiple security policies, we will
            disable them first and then enable them to avoid potential conflicts.
            
            We only need to disable modified policies if they are not disabled 
            yet on target server:
            1. For dropped policies the drop statement will get executed first so 
            we don't need to disable them
            2. For newly added policies they won't cause conflict otherwise
            they won't pass model validation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql130DeploymentPlanGenerator.EnableSecurityPolicies(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            Re-enable modified policies that should be in ENABLED state after the deployment
            We don't need to change Added/Dropped policies
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql130DeploymentPlanGenerator.GenerateAlterDatabaseScopedConfigurationSetStatement(System.Nullable{System.Boolean},Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigSetOptionKind,System.Boolean)">
            <summary>
            Helper function that Generates an AlterDatabaseScopedConfigurationSetStatment for OnOffPrimaryConfigurationOptions.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql140DeploymentPlanGenerator.GenerateAlterDatabaseScopedConfigurationSetGenericStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlGenericDatabaseScopedConfigurationOptions,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlGenericDatabaseScopedConfigurationValueType,System.String,System.Boolean)">
            <summary>
            Helper function that Generates an AlterDatabaseScopedConfigurationSetStatment for generic database options
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql90DeploymentPlanGenerator">
            <summary>
            This class encapsulates creating a deployment script for SqlServer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Sql90DeploymentPlanGenerator.CreateIfSysAdminStatement(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseSetStatement)">
            <summary>
            Helper method that creates an AST that checks for correct access levels and then
            executes the provided ALTER database statement as dynamic sql.
            </summary>
            <param name="sysAdminSets"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlAlterDataLossError">
            <summary>
            This class represents a warning from the SQL deployment engine where the potential for ALTER
            data loss is identified.  The table specified in the constructor should be the source table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlAlterDataLossError.SourceColumn">
            <summary>
            The modified source column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlAlterDataLossError.TargetColumn">
            <summary>
            The original column from the target model
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCmdFileVerifier">
            <summary>
            This class parses a provided SqlCmd file and captures any parse errors that occur during
            processing of that file and and files that are included by it (or its children)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.#ctor(System.Data.IDbConnection,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.String,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext,Microsoft.SqlServer.TransactSql.ScriptDom.SqlScriptGenerator)">
            <summary>
            Constructor for SqlColumnEncryptionOnlineMigration
            </summary>
            <param name="connection">sql connection</param>
            <param name="sourceTable">source table</param>
            <param name="targetTableName">target table name, assuming column names are same as source</param>
            <param name="cancellationToken">cancellation Token</param>
            <param name="loggingContext">logging Context</param>
            <param name="lockScript">lock script</param>
            <param name="context">context</param>
            <param name="scriptGenerator">script generator</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.Initialize">
            <summary>
            Initializes the state of the object and change tracking on the source table.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.Execute">
            <summary>
            Starts copying the source table.
            </summary>
            <returns>time taken in milliseconds</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.IsLikelyToCompleteWithinMaxDownTime(System.Int32)">
            <summary>
            Checks that the amount of work that is left is likely to complete within the _maxDownTimeInMicroseconds.
            A padding buffer of about 33% is allowed to ensure that if the rate of changes spike at the end
            then the process is still likely to finish without error.
            </summary>
            <param name="rowsPending">The number of rows left to process and move over to the temp table</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Returns name string of the given element
            </summary>
            <param name="element">element</param>
            <param name="style">style</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.SetConnection(System.Data.IDbConnection)">
            <summary>
            Sets sql connection with MultipleActiveResultSets = true
            </summary>
            <param name="sqlConnection">Existing connection</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.InitializeColumns">
            <summary>
            Populates all columns names of source table in the variable this._allColumns
            that are not computed columns. Computed columns are skipped because they have
            no actual data to migrate.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.InitializeKeys(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Get all the columns comprising the primary key in the source table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.InitializeChangeTracking">
            <summary>
            Initializes change tracking on the source table 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetInsertIdentityString">
            <summary>
            Returns the raw script to allow inserting identity statements
            </summary>
            <returns>raw script to allow inserting identity statements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.ExecuteNonQuery(System.String,System.Data.IDbConnection,System.Boolean)">
            <summary>
            Utility function to execute all non-queries
            </summary>
            <param name="query">string query to be executed</param>
            <param name="connection">Sql Connection to be used. Default is primary sql connection</param>
            <param name="isLongRunningQuery">true if it is a long running query. appropriate timeout will be set.</param>
            <returns>number of rows effected</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.FinalSteps(System.Boolean)">
            <summary>
            Steps to be executed in the end.
            For now disable change tracking on the source table after the process is completed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.ProcessChanges(System.Int64,System.Boolean,System.Int32)">
            <summary>
             Main function which processes the changes
            </summary>
            <param name="trackingVersion">last processed version</param>
            <param name="lockMode">should the source table be locked</param>
            <param name="rowsPending">rows to be processed in this iteration. this is only for logging purposes.</param>
            <returns>last processed version. return value will be -1 if the current iteration did not process any change because of an error</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.ExecuteCommand(System.Data.IDbCommand,System.Boolean)">
            <summary>
            executes the given command
            </summary>
            <param name="command">command to be executed</param>
            <param name="throwException">if function should throw exception in case of error</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.ClearColumnEncryptionCachedMigrationPlans">
            <summary>
            Clears the procedure cache of all cached execution plans that are related to
            online migration in the event that we experience false cache misses. When this
            happens, we clear the cache of the query and rerun it again and find that the
            query runs successfully.
            False cache misses are identified by the message:  'Could not find prepared statement with handle -1'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetColumnEncryptionMigrationPlanHandles">
            <summary>
            retrieves and returns a list containing of all the procedure cache execution
            plan handles related to this online migration operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetMinimumChangeTrackingVersion">
            <summary>
            Gets minimum change tracking version in the database for source table
            </summary>
            <returns>minimum change tracking version </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetCurrentChangeTrackingVersion">
            <summary>
            Gets current change tracking version in the database
            </summary>
            <returns>current change tracking version </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.LogEncryptionProgress(System.Int32,System.String,System.Double,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingMessageType)">
            <summary>
            Updates the progress for the step.
            After SqlBulkCopy completes and we have the initial snapshot of the source table with encrypted column, progress will be marked to 50%
            After each iteration progress should move by (100- %left)/2 %
            </summary>
            <param name="actionCode"></param>
            <param name="logMessage"></param>
            <param name="progress"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetPercentageComplete(System.Int64,System.Int64,System.Boolean)">
            <summary>
            returns % completed for this process.
            </summary>
            <param name="rowsProcessedInCurrentIteration">rows processed in current iteration</param>
            <param name="totalRowsInCurrentIteration">total rows in current iteration</param>
            <param name="lastIteration">if true then current iteration progress will be 100-currentProgress else (100-CurrentProgress)/2</param>
            <returns>% completed for this process</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionOnlineMigration.GetPendingChangeRowsCount(System.Int64)">
            <summary>
            returns number of rows pending to be processed in change tracking
            </summary>
            <param name="lastSyncVersion">last processed version</param>
            <returns>number of rows pending</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCreateDataLossError">
            <summary>
            This class represents a warning from the SQL deployment engine where the potential for CREATE
            data loss is identified.  The table specified in the constructor is the source table.  Usually this
            error is raised if a new non-nullable column is added to a table without a default.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCreateDataLossError.#ctor(System.String,System.Int32,Microsoft.Data.Tools.Schema.ErrorSeverity,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
            <summary>
            Creates an new instance of this class
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="severity">Should be a warning</param>
            <param name="table">Source table</param>
            <param name="newColumn">The newly added column</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCreateDataLossError.SourceColumn">
            <summary>
            The newly added column.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment">
            <summary>
            Core engine responsible for coordinating all deployment operations.
            </summary>
            <summary>
            Core engine responsible for coordinating all deployment operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Controller">
            <summary>
            Helper class that implements the schema deployment controller interface
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CancelToken">
            <summary>
            Cancelation token
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ComparisonResult">
            <summary>
            The result of comparing the source and target models
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ContributorArguments">
            <summary>
            A set of name value pairs provided to customize deployment extensions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Drops">
            <summary>
            Returns a list that contains the requested drops that should be performed
            when the deployment plan is created
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ErrorManager">
            <summary>
            The error manager supplied when SqlDeployment was created.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IdentityLog">
            <summary>
            Returns the active identity change log, if present.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsCanceled">
            <summary>
            Returns "true" if deployment has been canceled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsDeployToDatabase">
            <summary>
            Specifies whether the deployment engine will deploy to the target database when
            Execute() is called
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsDeployToScript">
            <summary>
            Specifies whether a deployment script will be output when Execute() is called
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsTargetCompatible">
            <summary>
            Gets a flag indicating if the target is compatible for plan generation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Refactors">
            <summary>
            Returns a list of requested refactors that should be performed when the
            deployment plan is created.  It is expected that the requests have already been merged - i.e.
            the same name is not duplicated.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.AugmentDacData(System.Func{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,System.Boolean})">
            <summary>
            Called during dacpac/bacpac deployment to register a callback to the data
            deployment engine
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ConstraintsCheckedByDataEngine(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Called by deployment contributors through the deployment context to determine if a 
            constraint check is being handled by the data deployment engine
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.HasDataEngineIntegration">
            <summary>
            Returns true if integrated with the data deployment engine
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.PlanExecutors">
            <summary>
            The list of deployment plan executors that will be run as part of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.PlanModifiers">
            <summary>
            The list of deployment plan modifiers that will be executed during deployment
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Platform">
            <summary>
            The platform targeted by deployment
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Options">
            <summary>
            The deployment options that control how deployment executes and how scripts are generated
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Source">
            <summary>
            The source model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Target">
            <summary>
            The target model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.SourceEndpoint">
            <summary>
            The source model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.TargetEndpoint">
            <summary>
            The target model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Dispose">
            <summary>
            Perform required clean-up.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Dispose(System.Boolean)">
            <summary>
            Implementation of standard "Dispose" pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.AddSqlCmdVariables(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Helper method that populates the specified set of SqlCmd variable names into the supplied model's header
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.GetSqlCmdVariables(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData})">
            <summary>
            Helper method that loops through the supplied set of headers and returns the set of
            SqlCmd variable names specified within the headers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CheckSqlCmdVariables(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Microsoft.Data.Tools.Schema.DataSchemaError@)">
            <summary>
            Helper method that exposed how SqlCmd variables are checked by the deployment engine.  Will throw DeploymentFailedException
            if a value for an expected variable is not supplied
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Cancel">
            <summary>
            Call to cancel a deployment operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateController">
            <summary>
            Creates a deployment controller for plan generation and plan execution.
            </summary>
            <returns>null if target does not support deployment</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateController(System.Action{Microsoft.Data.Tools.Schema.DataSchemaError})">
            <summary>
            Creates a deployment controller for plan generation and plan execution.
            </summary>
            <param name="msgHandler"><see cref="T:System.Action`1"/> that processes any error messages sent during creation
            of the deployment controller</param>
            <returns>null if target does not support deployment</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.LoadDeploymentConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Configure deployment options.
            </summary>
            <param name="deployConfigProperties">Dictionary of property names and their associated values.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.SetDeployToDatabase(System.Boolean)">
            <summary>
            Toggle whether database is updated when Execute() is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.SetDeployToScript(System.Boolean,System.String)">
            <summary>
            Configures SqlDeployment to generate a script when Execute() is called.
            </summary>
            <param name="deployToScript">True is a script should be generated.
            If true is specified the script path must also be specified</param>
            <param name="scriptPath">The full path for the deployment script or null if no script will be created.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.Execute(System.Action{Microsoft.Data.Tools.Schema.DataSchemaError})">
            <summary>
            Executes the deployment engine to ensure that all objects have been created based on input parameters.
            If specified, a plan is also generated and executed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ConfigureConnectionString(System.String,System.String)">
            <summary>
            This method provides the provides a connection string configured with the specified database name.
            This is also an opportunity to decrypt the connection string based on the encryption/decryption strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ConfigureConnectionFactory(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String)">
            <summary>
            This method provides the provides a connection factory configured with the specified database name.
            This is also an opportunity to decrypt the connection factory based on the encryption/decryption strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateIntentPreservationModifiers">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.DoesModelReferenceServerObjects(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext)">
            <summary>
            Helper method for determining if the model contains any elements of the type
            defines in the list of specified classes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ImportServerModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            Creates a master (server) model from the instance pointed to by the provided connection
            string.  After the model is created it is imported into the catalog model as an external
            reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ImportServerModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Creates a master (server) model from the instance pointed to by the provided connection
            string.  After the model is created it is imported into the catalog model as an external
            reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateExtensionManagerFromModel(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage)">
            <summary>
            Helper method to load the ExtensionManager based on the DSP specified by the serialized model.
            </summary>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">If any error occurs.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.LookupUnnamedConstraint(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Helper method to lookup an unnamed constraint based on annotations within the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.WarnWhenConvertingAADUsers">
            <summary>
            When deploying to a platform that does not support Azure Active Directory users (i.e create user [user@microsoft.com] from external authentication provider),
            we convert the AAD user to a user without login (i.e. create user [user@microsoft.com] without login).  Here we warn the user about this change.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CheckSecurityPolicyConflicts">
            <summary>
            Check possible security policy conflicts if there are policies that won't
            get dropped during deployment
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ReportDrift">
            <summary>
            Throws if unnable to check drift.  Based on configuration will check for drift based on
            current target and put an error in the error manager if drift is detected.  Returns null if no check was performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.MapProblemToError(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanProblem)">
            <summary>
            Helper method to map a plan problem to a database error
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateDatabaseModifier">
            <summary>
            Called to provide an extension that will be used to execute a deployment plan against a live data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreateDeploymentScriptGenerator">
            <summary>
            Returns the default deployment script generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.CreatePublishScriptGenerator(System.String,System.String)">
            <summary>
            Returns the deployment script generator used for "Publish..."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.RunPlanContributor(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributor,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext,System.Action{Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorEventArgs},Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            scoped as "internal" for unit-test
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.ExecuteIntentPreservationModifiers">
            <summary>
            This is the top-level preservation of intent implementation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.LoadTargetModelModifiers">
            <summary>
            Called when deployment is ready to load the DSP's target model modifiers.  Implementers will
            overwrite this method if they support preservation of intent - for instance preserving the intent
            of a rename-refactor out to the deployment script.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.OnLoadDeploymentConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Called when deployment is loading a DSP-specific deployment configuration file.  Implementers are expected
            to overwrite this method so that they can configure the deployment engine based
            on the contents of the configuration file
            </summary>
            <param name="deployConfigProperties"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.OnVerifyPlan(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            This method provides the DSP-implementer an opportunity to verify the deployment plan before the plan has
            been modified or executed by any extensions.
            </summary>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.EnclaveEnableCheck">
            <summary>
            If enclave enabled keys are getting imported or published to a non-enclave enabled database, then
            warnings are raised to alert that some rich queries will not work.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsTargetDBEnclaveEnabled">
            <summary>
            Determines whether the target database is enclave enabled.
            </summary>
            <returns>True if the database is enclave enabled, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.GetEnclaveEnabledKeyNames">
            <summary>
            Finds all of the enclave enabled column master keys in the changeset elements
            and returns a collection of their names
            </summary>
            <returns>The collection of enclave enabled column master key names.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.IsDCSeriesServiceObjective">
            <summary>
            Determines whether a Service Level Objective is defined as a DC-series or not.
            </summary>
            <returns>True if a database's service level objective is defined as a DC-series, or false otherwise.</returns>
            <remarks>
            In Azure SQL Database, Always Encrypted uses Intel Software Guard Extensions (Intel SGX) enclaves, which is a hardware technology
            supported in databases that use the new DC-series hardware generation. Selecting DC-series for your database places it on the
            hardware equipped with Intel SGX, which is a prerequisite for enabling Always Encrypted with secure enclaves.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.PlanVerifier.VerifyPlan(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            Verifies the provided plan to ensure that:
            * Source created/modified objects reference external objects that exist
                in the target model.  For example: User -> Login, View -> Table.  This is only
                for composite projects, we do not verify 3/4 part references.
                
            * No target-only object references a modified object.  
                - If GenerateDropsForObjectsNotInSource == false - any dependent object 
                (in target) must exist in the source model.  If the 
                object does not exist then it is a blocking dependency or
                a potential runtime error
            </summary>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.PlanVerifier.AddPlanProblem(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanProblem,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanProblem})">
            <summary>
            Helper that encapsulates adding a plan problem to the collection and determining whether that
            problems severity should be a warning or error
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment.PlanVerifier.AddCollationProblems(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanProblem})">
            <summary>
            Looks for and adds problems that indicate potential 
            deployment problems due to collation mismatches
            </summary>
            <param name="problems"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor">
            <summary>
            This class is a service constructor for SqlDeployment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.AzureDatabaseCreationDefaults">
            <summary>
            Specificies default parameters to use when creating a SQL Azure database
            </summary>
            <remarks>
            Can be null.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.ComparisonResult">
            <summary>
            The difference between the source and target (Optional).
            </summary>
            <remarks>
            This provides for an optimization between deployment and schema-compare, since
            a comparison result already exists.  Most other scenarios should leave this property null.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.DatabaseName">
            <summary>
            Supplied by the user if they would like to use this database when initially connecting to the server.  If
            a database name is specified as part of the connection string the value supplied within this property "wins."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.Errors">
            <summary>
            Supplied by the user to capture any message generated during deployment execution (Required).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.IdentityLog">
            <summary>
            Supplied if the caller is to be notified of refactoring operations that modify
            the identify of model elements (Optional).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.Options">
            <summary>
            The options to be used during deployment (Optional).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.Source">
            <summary>
            Represents model being deployed (Required).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.SourceSchemaVersion">
            <summary>
            Represents the source schema version (Optional)
            </summary>
            <remarks>
            It's used by some deployment validations and not included in the schema model object.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.Target">
            <summary>
            Represents the database to which deployment is occcuring.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentConstructor.ConstructServiceImplementation">
            <summary>
            Implemented by inheritors to return actual service instance.
            </summary>
            <returns>Constructed SqlDeployment object</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint">
            <summary>
            Represents a model that can be specified as either the source or target endpoint
            for a deployment operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.#ctor(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.#ctor(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.RetrieveSchemaData">
            <summary>
            Retrieves any CustomSchemaData associated with this endpoint when it
            was created / deserialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel)">
            <summary>
            Constructor
            </summary>
            <param name="model">Model associated with this endpoint.</param>
            <remarks>
            The model need not be defined prior to calling deployment, but for the purpose of this
            constructor, null values are not allowed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Dispose">
            <summary>
            Performs required clean-up.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Dispose(System.Boolean)">
            <summary>
            Override by subclasses to perform additional clean-up.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Model">
            <summary>
            The model associated with this endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Provider">
            <summary>
            The DataSchemaProvider associated with this endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Refactors">
            <summary>
            Gets the path to the associated package.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.IsTarget">
            <summary>
            True if this endpoint is acting as the deployment target.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.IsModelLocal">
            <summary>
            Flag that indicates if model should be disposed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Init(Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,System.String,System.Nullable{Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms})">
            <summary>
            First chance initialization for the associated endpoint.  Provider is guaranteed
            not null after this method completes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.Load(Microsoft.Data.Tools.Schema.ErrorManager,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext)">
            <summary>
            Completes any required model loading.  The model is fully loaded when this method completes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpoint.CreateBlankModel(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Creates an empty model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage">
            <summary>
            Represents a deployment endpoint that whose model has an associated build package.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.PackageSource">
            <summary>
            Provides delay-loading of packages from a supplied source.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="location">Path to build package.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="location">Path to build package.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.OpenPackage">
            <summary>
            Return a new <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage"/> associated with this endpoint.
            Callers must dispose the returned <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage"/> instance.
            </summary>
            <returns>
            <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage"/> instance.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.Header">
            <summary>
            Get/set the header captured when reading the model from the associated package.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointPackage.LoadModel(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Deserializes the specified model file.  The header is also captured and returned during deserialization so that
            only one read needs to be made on the serialized model.  The header contains references to all the loaded models before
            it was deserialized.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer">
            <summary>
            Represents a live database as a deployment endpoint.  Currently, this is only
            valid as a target endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.CachedRegistryConnectionString)">
            <summary>
            Constructor.
            </summary>
            <param name="cachedRegistryConnectionString">element that generates a connection string</param>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">When connection string fails validation.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            This constructor should be used when the connection string password is cached in the registry instead of being provided in 
            the connection string directly.
            </remarks>
            <param name="connectionString"></param>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">When connection string fails validation.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            This constructor should be used when the connection string password is cached in the registry instead of being provided in 
            the connection string directly.
            </remarks>
            <param name="connectionString"></param>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentFailedException">When connection string fails validation.</exception>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.ConnectionFactory">
            <summary>
            Connection string that identifies the associated database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.OnInit(Microsoft.Data.Tools.Schema.ErrorManager,System.String,System.Nullable{Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms})">
            <summary>
            Determines the correct DatabaseSchemaProvider based on inspecting the server.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.OnLoad(Microsoft.Data.Tools.Schema.ErrorManager,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext)">
            <summary>
            Reverse engineer the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.GetProviderType(Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Type@,System.Boolean@,Microsoft.Data.SqlClient.SqlException@)">
            <summary>
            Helper method to determine the DSP type compatible based on a provided connection string.  If successful will
            return back the DSP type otherwise will return whether or not the dataSource was valid - it could be a failure
            occurred due to lack of permissions to connect to the specific DB
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.CreateNewModel(Microsoft.Data.Tools.Schema.ErrorManager,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext)">
            <summary>
            This method returns a default "new" model for the case where the target database does not exist or
            is being created new.  The default implementation returns back an "empty" model.  Implementers 
            should override if they want to supply a more "realistic" model - for instance 
            import a template database from the server.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.ImportDatabase(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            This method is the actual import of the target model based on the specified reverse engineer constructor.  
            The base executes reverse engineer.  DSPs may override this method if they have additional work to perform to 
            import a model for deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.ImportTargetServerObjectsIfNeeded(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentEngineContext)">
            <summary>
            Imports the target's master database if the sourceModel has a reference
            to the master database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointServer.DoesDatabaseExist(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,System.Boolean)">
            <summary>
            This method returns false by default.  This should be overwritten by the DSP to detect whether the
            specified database actually exists.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointLegacyPackage.PackageSource">
            <summary>
            An abstract for file-based and stream-based legacy package
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointLegacyPackage.#ctor(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Constructor.
            </summary>
            <param name="path">Path to legacy package.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointLegacyPackage.#ctor(System.IO.Stream,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Constructor.
            </summary>
            <param name="stream">
            <see cref="T:System.IO.Stream"/> from which to load package. </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointLegacyPackage.OpenPackage">
            <summary>
            Return a new <see cref="T:System.IO.Packaging.Package"/> associated with this endpoint.
            Callers must dispose the returned <see cref="T:System.IO.Packaging.Package"/> instance.
            </summary>
            <returns>
            <see cref="T:System.IO.Packaging.Package"/> instance.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentEndpointLegacyPackage.LoadModel(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Deserializes the associated legacy package file.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentExecutionError">
            <summary>
            This class represents an error received by SQL Server during deployment script execution.  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentExecutionError.Error">
            <summary>
            The collection of errors supplied by the SqlException.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentExecutionError.CurrentStep">
            <summary>
            The step that was being executed when the error occurred.  This property can be
            null if the error occurred when not executing a step in the deployment plan.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptionAttribute">
            <summary>
            This attribute is applies to properties to specify what their "public" name should
            be as well as what platform(s) they are available for
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptionAttribute.Name">
            <summary>
            The name of the option as stored in project files and specified on the
            command line.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptionAttribute.SupportedPlatforms">
            <summary>
            The platforms this property affects
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Copy constructor
            </summary>
            <remarks>
            TargetDatabaseName and TargetConnectionString are not copied since they are explicitly specified
            as part of the initialization of SqlDeployment.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AllowIncompatiblePlatform">
            <summary>
            Sets whether the constructor should fail if the target platform is not compatible.
            Default is "false".
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.IncludeCompositeObjects">
            <summary>
            Include all composite elements as part of a single deployment operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.RestoreSequenceCurrentValue">
            <summary>
            Used to specify whether sequence objects should have their current_value restored.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AdditionalDeploymentContributors">
            <summary>
            Specifies additional deployment contributors which should run - in addition
            to those specified in the dacpac origin.xml file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AdditionalDeploymentContributorArguments">
            <summary>
            Specifies additional deployment contributor arguments in addition to those already listed
            in the dacpac origin.xml file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.RunDeploymentPlanExecutors">
            <summary>
            Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.
            Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AllowDropBlockingAssemblies">
            <summary>
            This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of 
            the deployment plan.  By default, any blocking/referencing assemblies will block an assembly update
            if the referencing assembly needs to be dropped.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.DoNotEvaluateSqlCmdVariables">
            <summary>
            Specified whether SQLCMD variable names should be used when comparing schema or their values
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.ExcludedObjectTypesForSchemaCompare">
            <summary>
            Returns a readonly copy of the excluded schema compare types
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AllowExternalLibraryPaths">
            <summary>
            Use file paths (instead of content) for external libraries encoded as paths
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AllowExternalLanguagePaths">
            <summary>
            Use file paths (instead of content) for external languages encoded as paths
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.PreserveDependencyGraphs">
            <summary>
            Setting this option to true will put dependency information into the SqlDeploymentPlanArtifact
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.TargetingServerless">
            <summary>
            That SQL serverless is the target platform
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.ExploitDnrOrdering">
            <summary>
            Used to signal that the deployment engine should attempt to 
            order programmability objects in DNR order 
            rather than dependency order.  This is used to attain a higher level
            of schema deployment success at the cost of additional runtime errors
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.IncludePartitionColumn">
            <summary>
            Include only partition column for Sql DW
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.LoadSqlCmdVariables(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the SourceSqlCmdVariables via the provided gatherer into the source or target dictionary
            </summary>
            <param name="isForSource">true if the source is a DB project; otherwise, target is a DB project</param>
            <param name="sqlCmdVars">The list of sqlcmd variables</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.FlushExcludedObjectTypeForSchemaCompare">
            <summary>
            Clears excluded schema compare type list, and adds SqlDynamicColumnSource to it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.AddExcludedObjectTypeForSchemaCompare(System.Type)">
            <summary>
            Adds a new type to the excluded schema compare type list
            </summary>
            <param name="type">The new type to exclude</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.IsObjectTypeExcludedForSchemaCompare(System.Type)">
            <summary>
            Checks if the given type is included in the list of excluded objectTypes for schema compare
            </summary>
            <param name="type">The type to be checked</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.CreateComparerConfiguration">
            <summary>
            Gives us Comparison Filter 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.Serialize">
            <summary>
            Return the options we should serialize
            Set the options in this class from a set of serialized options
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.Configure(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor)">
            <summary>
            This method provides the DSP the opportunity to configure the reverse engineer constructor used to 
            import the target model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions.Copy(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Copies deployment options between objects.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanArtifact">
            <summary>
            A database schema specific implementation detail created during deployment plan creation
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator">
            <summary>
            This class encapsulates the creation of a deployment plan
            </summary>
            <summary>
            This class encapsulates the creation of a deployment plan
            </summary>
            <summary>
            This class contains the types and methods related to StatementGenerator that gets used by the Deployment Plan for various platforms.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementContextAdapter">
            <summary>
            Implements AlterStatementGeneratorContext for use by
            SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGeneratorContext">
            <summary>
            Defines environmental context for use by AlterStatementGenerator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.DataTypeGenerator">
            <summary>
            Helper generator to generate data types for columns, parameter, return types
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.PopulateScriptFromFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Generates a script fragment from a SQL fragment, converting existing scripts' batches and statements as appropriate.
            </summary>
            <param name="script">Script to be populated with the necessary batches and statements</param>
            <param name="fragment">SQL fragment from which existing batches and statments are to be extracted</param>
            <returns>Number of batches converted</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateStatementBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>Generates a drop statment batch. 
            This method automatically adds individual statements to their own batch if necessary.
            </summary>
            <param name="newElement">Model Element to generate</param>
            <returns>TSqlBatch containing the necessary batch of drop statements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateAlterFilegroupStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a statement altering a filegroup.</summary>
            <param name="oldElement">Existing Model element</param>
            <param name="newElement">Modified Model element</param>
            <returns>TSqlFragment defining the alter statement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateAlterFilegroupNameBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup)">
            <summary>Checks if the filegroup name has changed and if so 
            generates the necessary ALTER DATABASE batch and adds it to the script.
            </summary>
            <param name="script">The script to which any necessary batches are added</param>
            <param name="oldFilegroup">Filegroup before modifications</param>
            <param name="newFilegroup">Filegroup after modifications</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateAlterFilegroupRWBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup)">
            <summary>Checks if the filegroup READ-ONLY property has changed and if so
            generates the necessary ALTER DATABASE batch and adds it to the script.
            </summary>
            <param name="script">The script to which any necessary batches are added</param>
            <param name="oldFilegroup">Filegroup before modifications</param>
            <param name="newFilegroup">Filegroup after modifications</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateAlterFilegroupDefaultBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup)">
            <summary>Checks if the filegroup DEFAULT property has changed and if so 
            generates the necessary ALTER DATABASE batch and adds it to the script.
            </summary>
            <param name="script">The script to which any necessary batches are added</param>
            <param name="oldFilegroup">Filegroup before modifications</param>
            <param name="newFilegroup">Filegroup after modifications</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GetFilegroupName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup)">
            <summary>Obtains the string name of the Filegroup</summary>
            <param name="filegroup">The Filegroup model element</param>
            <returns>The string name of the Filegroup</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGenerator.GenerateAlterFileStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a statement altering a file.</summary>
            <param name="oldElement">Existing Model element</param>
            <param name="newElement">Modified Model element</param>
            <returns>TSqlFragment defining the alter statement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.IsElementCreatedInlineOnCreate(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Helper method to determine whether a constraint should be created inline
            </summary>
            <param name="element"></param>
            <returns>True if this is a constraint that will be created inline (during a CREATE TABLE statement)</returns>
            <remarks>
            There are some situations (like tables with file streams) where the table must be
            defined with a unique constraint
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AddTransactionStatements(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Adds transaction support to a deployment plan
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.BuildServerOperations">
            <summary>
            Provided by derived classes based on DSP-specific types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AppendFileSystemStatements(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup},System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFile})">
            <summary>
            Appends the specified file groups + files to the deployment plan.  Depending on options specified might also add additional
            files to a new file group (that does not have any files assigned to it)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DetermineNewFileCount(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFilegroup)">
            <summary>
            Helper to determine the number of files that will be created when this new filegroup
            is created.  It is possible for the file group to have files but for all those files to be excluded
            from deployment
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.CreateVerifySqlCmdEnabledSteps">
            <summary>
            Helper that creates a deployment step to check whether SQLCMD is enabled and turn off
            execution of the remainder of the script if it is not
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.BuildAlterDatabaseStatements">
            <summary>
            Builds ALTER Database statement based on the source store's options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.CreateAlterDatabaseStatement(System.Boolean)">
            <summary>
            Generates ALTER DATABASE statement with appropriate sqlcmd variable based on whether statement
            is to be converted to a literal string (for sp_executesql) or used as regular sql.
            </summary>
            <remarks>
            Database names that contain single quotes are valid, but must be escaped when expressed as
            part of a literal.  Since the database name is defined as a sqlcmd variable, a second escaped
            variable can be defined that is safe to use in literal expressions.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator">
            <summary>
            This class fills in the gap between the product's script dom generator
            and the functionality needed by deployment.  Basically, this
            component either generates an AST from an element or modifies the
            AST generated by the ScriptDom (from an element) to perform what is required
            by deploy
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.Changes">
            <summary>
            Changes proposed/accepted by the plan mediator during change analysis.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.AddSystemVersioning(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Returns Add system versioning statement with its properties (History name, optionState, retention values, etc)
            </summary>
            <param name="currentTable">System versioning current source table</param>
            <param name="currentTableName">System versioning current table name(could be temp_xx_source table name also)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.LookupElement(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Helper method to lookup an element in the target store using the source element
            </summary>
            <param name="sourceElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.CreateStringLiteral(System.String)">
            <summary>
            Generates an escaped string literal
            </summary>
            <example>
            "AB'CD" becomes "N'AB''CD'"
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateInsertIntoStatement(System.Collections.Generic.Dictionary{System.String,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.CastType},System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Generates INSERT INTO statement that will copy data from sourceTableName to a targetTableName.
            </summary>
            <param name="migrationColumns">
                Map of columns to migrate. Map contains mapping from column name to a cast type. 
                Cast type is only used if targetTableColumnDefinitions is provided for new type ASTs.
            </param>
            <param name="targetTableColumnDefinitions">
                AST for target table column definitions. If provided, explicit type casts will be added where needed for columns from the collection.
            </param>
            <param name="clusteredIndex">If specified, order of columns in SELECT will match clustered index.</param>
            <param name="sourceTableName">Name of the table to copy from.</param>
            <param name="targetTableName">Name of the table to copy to.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.CreateIndexStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.String)">
            <summary>
            Reads all basic and columnstore indexes from the source table and generates statements to create
            them on a temporary table with supplied name.
            </summary>
            <param name="sourceTable">The SqlTable from which the indexes are read</param>
            <param name="temporaryTableName">The name of the table to which the indexes will be added</param>
            <returns>A TsqlBatch of index create statements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.UnbindFulltextStoplist(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Unbind the fulltext from it's referenced stop list.  The generated AST sets the
            stoplist to None.  If the fulltext index exists in the source model it will
            be altered to set the new stoplist
            </summary>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateEnclaveEnabledColumnEncryptionTSQLScripts(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges,System.String@,Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement@,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.AddSensitivityClassificationStatement}@,Microsoft.SqlServer.TransactSql.ScriptDom.InsertStatement@,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement}@,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement}@,System.Collections.Generic.IList{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement}}@,System.Boolean)">
            <summary>
            Generate all scripts needed to encrypt data in the enclave
            </summary>
            <param name="sourceTable">Source Table</param>
            <param name="targetTable">Target Table</param>
            <param name="encryptionChanges">Columns with encryption changes</param>
            <param name="temporaryTableName">Temporary Table Name</param>
            <param name="newTableCreateTableStatement">Statement to create temporary table</param>
            <param name="addSensitivityClassificationStatements">Sensitivity statements to run on temporary table</param>
            <param name="copyDataStatement">Statement to copy data to temporary table</param>
            <param name="alterColumnStatements">Statements to alter column encryption</param>
            <param name="isOnline">If encryption changes should happen online</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateAlterColumnEncryptionScripts(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Boolean)">
            <summary>
            Generates Alter Table Alter Column TSql statements for each column that needs an encryption setting changed
            </summary>
            <param name="updatedColumns">Columns with encryption changes</param>
            <param name="tableName">table name</param>
            <param name="isOnline">If the encryption should happen online</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateColumnEncryptionRenameToOriginalScripts(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript@,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript@)">
            <summary>
            Generates statements to rename a temporarily-named table and its constraints back to the original names
            For use in Always Encrypted data migration
            </summary>
            <param name="sourceTable"></param>
            <param name="renameScript"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateAlterDatabaseChangeTrackingForAlwaysEncrypted(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext,Microsoft.SqlServer.TransactSql.ScriptDom.OptionState)">
            <summary>
            Generate sql query to alter database to alter change tracking status
            </summary>
            <param name="context"></param>
            <param name="state"></param>
            <returns>TSql Statement for alter database change tracking</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateSqlColumnEncryptionMigrationScript(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.BuildMergeScriptForColumnMigration(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.String,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.UpdateStatement,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch})" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.BuildTemporaryTableScript(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.AddSensitivityClassificationStatement},Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAddTableElementStatement,Microsoft.SqlServer.TransactSql.ScriptDom.UpdateStatement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch})" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateSelectStatementToMigrateColumns(System.Collections.Generic.Dictionary{System.String,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableAnalyzer.CastType},System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition},Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.String)">
            <summary>
            Generates SELECT statement that will copy data from sourceTableName to a temporaryTable.
            </summary>
            <param name="migrationColumns">
                Map of columns to migrate. Map contains mapping from column name to a cast type. 
                Cast type is only used if targetTableColumnDefinitions is provided for new type ASTs.
            </param>
            <param name="targetTableColumnDefinitions">
                AST for target table column definitions. If provided, explicit type casts will be added where needed for columns from the collection.
            </param>
            <param name="sourceTableName">Name of the table to copy from.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.AlterTableAddColumnScript(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeOption)">
            <summary>
            Add a new Unique Identifier column to a table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.UpdateTableWithGUID(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.String)">
            <summary>
            Populate the unique identifier column in source table
            </summary>
            <param name="sourceTable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.ConstructMergeQuery(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.String,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},System.String,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn})">
            <summary>
            Generates TSQL script to merge non-modified columns from source table to temporary table.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GetOverlappingColumnsCastType(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn})">
            <summary>
            Get list of columns updated columns
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GetOverlappingNonOverlappingTableMigrationColumns(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},System.Boolean)">
            <summary>
            Get a list of columns which will be downloaded and uploaded which overlap/don't overlap with target table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateUnbindTableSteps(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            This method will generate the deployment steps necessary to completely unbind
            the table in the correct order based on the elements the analysis indicated needed
            to be unbound
            </summary>
            <param name="targetTable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.PopulateDeferedDropComputedColumns(Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.TableElementChanges,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn})">
            <summary>
            Loops through a set of columns and returns a new set of columns that
            only have dependencies on other non-dropped columns in the table.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateDropSystemVersioningStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Drops system-versioning if the target table is a system-versioned temporal table or drop
            system versioning from the 'current' table if the target table is a 'history' table
            </summary>
            <param name="targetTable">Target table for dropping system-versioning</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateDropSystemVersioningStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Drops system-versioning if the target table is a system-versioned temporal table or drop
            system versioning from the 'current' table if the target table is a 'history' table
            </summary>
            <param name="targetTable">Name of a target table for dropping system-versioning</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateAddHiddenStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
             <summary>
             Generates statement for setting temporal period column as HIDDEN. For example:
            
             ALTER TABLE dbo.mytable ALTER COLUMN startcolumn ADD HIDDEN
            
             </summary>
             <param name="targetTable">Table containing column that we need to mark as HIDDEN</param>
             <param name="column">target column</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateDropHiddenStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
             <summary>
             Generates statement for removing HIDDEN flag from temporal period column. For example:
            
             ALTER TABLE dbo.mytable ALTER COLUMN startcolumn DROP HIDDEN
            
             </summary>
             <param name="targetTable">Table containing column that we need to in-mark as HIDDEN</param>
             <param name="column">target column</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateDropTemporalPeriodStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Generates statement for dropping temporal PERIOD. For example:
            
            IF EXISTS (SELECT  TOP 1 1 FROM SYS.PERIODS WHERE PERIOD_TYPE = 1 AND OBJECT_ID('[dbo].[mytable]', 'U') = object_id)
            BEGIN
             ALTER TABLE dbo.mytable DROP PERIOD FOR SYSTEM_TIME
            END
            </summary>
            <param name="targetTable">Table containing temporal PERIOD which is to be dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateAddTemporalPeriodStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
            <summary>
            Generates statement for adding temporal PERIOD. For example:
            
            ALTER TABLE dbo.mytable ADD PERIOD FOR SYSTEM_TIME (startcolumn, endcolumn)
            
            </summary>
            <param name="targetTable">Table where period should be added</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.DecorateInsertIntoStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.SqlServer.TransactSql.ScriptDom.InsertStatement)">
            <summary>
              Creates decorated statement for INSERT INTO. The method will add identity on/off statments and a check for empty tables.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateRenameTableStatementForDw(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Renaming Dw tables can be achieved by using RENAME statement
            This method generates RENAME OBJECT/DATABASE statements
            </summary>
            <param name="tableName">Temporary name on table</param>
            <param name="toTable">Original name</param>
            <returns>Object of type TSQLStatement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateUpdateFileTableOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFileTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFileTable)">
            <summary>
            Helper method that compares two tables and generates a set of statements to update the target
            table's options to look like the source's options
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateUpdateTableOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Helper method that compares two tables and generates a set of statements to update the target
            table's options to look like the source's options
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateUpdateTableOptions(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase)">
            <summary>
            Helper method that compares two tables and generates a set of statements to update the target
            table's options to look like the source's options
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateAddColumnStatement(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn})">
            <summary>
            Helper to generate an ALTER TABLE add statement that will add the specified list
            of columns to the end of a  table
            </summary>
            <param name="columnsToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.GenerateUnbindStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlLegacyDataConstraints,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlLegacyDataConstraintTarget)">
            <summary>
            Generate the execute statement to unbind the legacy constraint from the target
            </summary>
            <param name="legacyConstraint"></param>
            <param name="constraintTarget"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.TableReferencesRemoveNoExpandVisitor">
            <summary>
            A <see cref="T:Microsoft.SqlServer.TransactSql.ScriptDom.TSqlConcreteFragmentVisitor"/> that removes NOEXPAND Table Hint for the NamedTabledReferences
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.ExtendDropFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Called to extend/enhance a drop fragment generated by the ScriptDom generator
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.DropSidAndTypeUserOptions(Microsoft.SqlServer.TransactSql.ScriptDom.CreateUserStatement)">
            <summary>
            Removes the Sid and Type user options from the create user statement
            This will be helpful for the SQL Server managed instance for creating user where the limited options should not be any of Sid and Type in the syntax
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.TrimCompressionOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript)">
            <summary>
            If a compression option is specified on a constraint, an error will occur if the table statement also
            has a compresion option specified.  This method will remove the table option if one is detected on a clustered
            primary or unique constraint.
            The reasoning behind this is that if the index was added as part of an ALTER TABLE STATEMENT subsequent
            to the CREATE TABLE statement, it is the index's option that would be in effect when all was said and done.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.TrimSupportingStatements``1(``0,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,System.Func{``0,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,System.Boolean})">
            <summary>
            Helper method to trim supporting statements 
            from a TSqlScript for table creation or alter
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.TrimAddSensitivityClassificationHelper``1(``0,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            Generic add sensitivity classification trimmer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.TrimFulltextIndexColumnsDropped(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFullTextIndex,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="statement"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.UpdateBoundUddtToFutureOnly(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlLegacyDataConstraints,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript)">
            <summary>
            Legacy constraints (Default, Rule) are automatically bound to any columns that
            reference a type that has the constraint bound to it.  In our system, we require the
            user to explicitly bind constraints to columns.  Any UDDT that are bound to
            a rule/default will be bound using the futureonly parameter to prevent the rule/default
            from being bound to any columns that are using the UDDT
            </summary>
            <param name="legacyConstraint"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator.AddInlineConstraintsAndIndexesForCreate(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,System.Boolean,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.SqlServer.TransactSql.ScriptDom.ConstraintDefinition}@,System.Boolean)">
            <summary>
            Helper method that adds any inline constraints to a create table statement for non-SQL Dw platforms and collects alter table add constraint statements for SQL DW.
            </summary>
            <param name="sourceTable">Source table</param>
            <param name="targetTable">Target table</param>
            <param name="fragment">Create table statement</param>
            <param name="generateTempNames">True or False</param>
            <param name="inlineConstraints">Output parameter that has collection of inline constraints</param>
            <param name="isSqlDw">Optional param, by default false</param>
            <returns>Alter table add constraint statements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.ScriptGeneratorFacade.InitializeConnectionOverrides(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Helper method that completely initializes seven-sets connection overrides from
            the database options and/or defaults
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql110AlterStatementGenerator.SetAlterColumnStoreIndexStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that requires a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql110AlterStatementGenerator.SetAlterColumnStoreIndexStatementOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex)">
            <summary>
            Sets any changed index options on the specified statement.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql120AlterStatementGenerator.SetAlterColumnStoreIndexStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that requires a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql120AlterStatementGenerator.SetAlterIndexStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that require a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql120AlterStatementGenerator.SetAlterIndexOrConstraintStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that require a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index or constraint</param>
            <param name="newIndex">New Index or constraint</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql130AlterStatementGenerator.GenerateAlterExternalDataSourceStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generates an alter external data source statement from two model elements.
            </summary>
            <param name="oldElement">The existing model element.</param>
            <param name="newElement">The new model element.</param>
            <returns>The generated AlterExternalDataSourceStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql130AlterStatementGenerator.GenerateAlterExternalDataSourceStatementCommonSqlServerPlatform(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generates an alter external data source statement from two model elements common for Sql130, 140 and 150.
            </summary>
            <param name="oldElement">The existing model element.</param>
            <param name="newElement">The new model element.</param>
            <returns>The generated AlterExternalDataSourceStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql130AlterStatementGenerator.GenerateExternalDataSourceLiteralOrIdentifierOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOptionKind,Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrValueExpression)">
            <summary>
            Generates an external data source literal or identifier option.
            </summary>
            <param name="optionKind">The external data source option kind.</param>
            <param name="value">The identifier or value expression.</param>
            <returns>An external data source literal or identifier option.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql130AlterStatementGenerator.SetAlterColumnStoreIndexStatementOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnStoreIndex)">
            <summary>
            Sets any changed index options on the specified statement.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql130AlterStatementGenerator.SetAlterCompressionDelayOption(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,System.Int32)">
            <summary>
            Sets the ALTER INDEX statement's compression delay option to the value provided
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="value">Integer value for the option</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql150AlterStatementGenerator.GenerateAlterExternalDataSourceStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generates an alter external data source statement from two model elements.
            </summary>
            <param name="oldElement">The existing model element.</param>
            <param name="newElement">The new model element.</param>
            <returns>The generated AlterExternalDataSourceStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql150AlterStatementGenerator.SetAlterIndexStatementOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Sets any changed index / rebuild options on the specified statement.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql160AlterStatementGenerator.GenerateAlterXmlIndexStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This override method will generate the Alter Xml index statements
            </summary>
            <param name="oldElement"></param>
            <param name="newElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql160AlterStatementGenerator.SetAlterIndexXmlCompressionOptionsToStatement(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlXmlCompressionOption},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlXmlCompressionOption},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPartitionScheme)">
            <summary>
            This method verifies and creates xmlCompression options along with partitions and set to the alter statement options
            </summary>
            <param name="statement"></param>
            <param name="oldCompressions"></param>
            <param name="newCompressions"></param>
            <param name="partitionScheme"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterXMLSchemaCollectionStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to an XmlSchemaCollection
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to an XmlSchemaCollection.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterAssemblyStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to an assembly, not to the assembly's files.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to an assembly, not to the assembly's files.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterSymmetricKeyStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a symmetric key.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a symmetric key.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterCertificateStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a certificate.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a certificate.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterMessageTypeStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a messageType.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a messageType.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterQueueStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a queue.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a queue.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterRouteStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a Route.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a Route.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterServiceStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a Service.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a Service.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterRemoteServiceBindingStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generates a SQL script for the options applied to a RemoteServiceBinding.
            </summary>
            <param name="oldElement">Element before changes</param>
            <param name="newElement">Element after changes</param>
            <returns>A SQL script for the options applied to a RemoteServiceBinding.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterIndexStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generates a SQL Script that contains one or more statement batches which alter an index depending on the differences between the old and new index options.
            </summary>
            <param name="oldElement">The old options</param>
            <param name="newElement">The new optoins</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterIndexRebuildStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex)">
            <summary>
            Adds a statement batch to the script that REBUILDs the given index if options are 
            changed and also establishes the expected disabled/enabled state.
            </summary>
            <param name="script">The script to which the ALTER statement should be added</param>
            <param name="oldIndex">The old index</param>
            <param name="newIndex">The new index</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterIndexRebuildStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Adds a statement batch to the script that REBUILDs a PRIMARY KEY and UNIQUE constraint if certain options change.
            </summary>
            <param name="script">The script to which the ALTER statement should be added</param>
            <param name="oldIndex">The old index</param>
            <param name="newIndex">The new index</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.GenerateAlterIndexOptionsStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Adds a statement batch to the script that ALTERs any index options for PRIMARY KEY and UNIQUE constraints.
            </summary>
            <param name="script">The script to which the ALTER statement should be added</param>
            <param name="oldIndex">The old index</param>
            <param name="newIndex">The new index</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.SetAlterIndexStatementOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Sets any changed index / rebuild options on the specified statement.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.SetAlterIndexStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that require a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index</param>
            <param name="newIndex">New Index</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.SetAlterIndexOrConstraintStatementRebuildOptions(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Sets the options on an ALTER INDEX statement that require a REBUILD.
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="oldIndex">Old Index or constraint</param>
            <param name="newIndex">New Index or constraint</param>
            <returns>True if any of the REBUILD options were changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.SetAlterIndexOption(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.SqlServer.TransactSql.ScriptDom.IndexOptionKind,System.Boolean)">
            <summary>
            Sets the specified ALTER INDEX statment's option ON or OFF
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="optionType">Type of option being set</param>
            <param name="value">True if the option is set to ON otherwise, false</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.SetAlterIndexOption(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement,Microsoft.SqlServer.TransactSql.ScriptDom.IndexOptionKind,System.Int32)">
            <summary>
            Sets the specified ALTER INDEX statement's option to the value provided
            </summary>
            <param name="statement">Statement being populated</param>
            <param name="optionType">Type of optoin being set</param>
            <param name="value">Integer value for the option</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.Sql90AlterStatementGenerator.CreateAlterIndexStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Implementation method for CreateAlterIndexStatement overloads.
            </summary>
            <param name="index">Index element from _target_ model</param>
            <returns>The new ALTER INDEX statement</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.SqlDwAlterStatementGenerator">
            <summary>
            Implements AlterStatementGeneratorContext for use by SqlDeploymentPlanGenerator.DeploymentScriptDomGenerator for SqlDw platform.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.SqlDwAlterStatementGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.AlterStatementGeneratorContext)">
            <summary>
            Constructor for SqlDwAlterStatementGenerator. Invokes the base class with a context object of type AlterStatementGeneratorContext.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentPlanGenerator.SqlDwAlterStatementGenerator.Initialize">
            <summary>
            Initializes the SqlDwAlterStatementGenerator type by invoking the base class type's Initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentProjectBuilder.AddSqlCmdVariable(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a sql cmd variable to the list.  If we find a sql cmd var of the same name
            with two different values this routine will return an error
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar">
            <summary>
            Encapsulates "dac" registration and associated drift check.
            </summary>
            <remarks>
            Exceptions are not handled for client.  Calling code is expected
            to process exceptions.  Operations are IO intensive.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContext)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.CheckDrift(System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Returns an object that provides a drift result that can be evaluated
            to determine if drift has occurred.
            </summary>
            <returns>
            An instance of the DriftReport class, or null if the baseline cannot be found
            (if the database hasn't been registered)
            </returns>
            <remarks>
            SqlDeploymentOptions.BlockOnRegstrationDrift doesn't affect behavior here;
            however, it does affect the usage of this method for SqlDeployment.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.Register(Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Guid)">
            <summary>
            Performs registration of a database with itself.  Targets name
            and connection string specified by the SqlDeploymentOptions.
            </summary>
            <remarks>
            SqlDeploymentOptions.RegisterSchema doesn't affect behavior here; however, it does
            affect the usage of this method for SqlDeployment.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.CheckDriftImpl(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Boolean)">
            <summary>
            Exposed for testing, otherwise the natural scope is private.
            </summary>
            <returns>
            True if no drift was detected; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.GenerateModel(Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Helper method for generating a model from a remote server using the database
            name and connection string from the deployment options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.GenerateModel(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Threading.CancellationToken)">
            <summary>
            Exposed for use in testing, otherwise the natural scope is private instance method.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.GenerateTemporaryPackage(Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel)">
            <summary>
            Helper method for generating a temporary package to use for registration.
            </summary>
            <remarks>
            Path.GetTempFileName() may not be sufficient for partial trust scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.RegisterImpl(Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata,System.IO.FileInfo,System.Guid)">
            <summary>
            Helper method for calling registration API.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.CreateModel(Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Helper method for creating an empty model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.ReadModel(System.IO.FileInfo,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Helper method for reading model from package.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentRegistrar.TryRetrieveRegistration(System.IO.FileInfo@)">
            <summary>
            Helper method for retrieving a registered package.
            Exposed for use in testing, otherwise the natural scope is private instance method.
            </summary>
            <param name="packageFileInfo">
            Path to where package should be written.
            </param>
            <returns>
            True if registered package could be retrieved; otherwise false.
            </returns>
            <remarks>
            Path.GetTempFileName() may not be sufficient for partial trust scenarios.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDropDataLossError">
            <summary>
            This class represents a warning from the SQL deployment engine where the potential for DROP
            data loss is identified.  The table specified in the constructor is the target table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDropDataLossError.TargetColumn">
            <summary>
            The column that will be dropped in the target model
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlEmptyOperation">
            <summary>
            Empty operation, just push message as print statement in deployment script.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanDeployment">
            <summary>
            SQL specific plan executor for deployment to SQL instances
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanDeployment.PublishDdlExecutionErrorMessage">
            <summary>
            Simple helper that formats and published a DDL execution error message 
            using the currently executing DDL batch script (if set).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanDeployment.BatchEventNotificationHandler">
            <summary>
            Internal implementation class to implement IBatchEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier">
            <summary>
            This class runs over a sql deployment plan after it has been created and moves 
            steps around.  Examples of the types of movement performed:
            * Moving indexes to be create right after their parent or resorting indexes
                to be created in clustered to non clustered order
            * Moving custom messages to be sorted english then localized language per id
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.ConstraintCheckModifier">
            <summary>
            This class sets all new FK and CHECK constraints to be NOCHECK when created.  This allows
            constraints to be added to the system without disrupting a schema deployment due to nonconforming
            existing data.  If specified, at the end of the deployment plan all the new named statements are checked
            so that any nonconforming existing data is caught.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.ExploitDnrOrderingModifier">
            <summary>
            This class reorders programmable object ordering to exploit SQL Server's DNR behavior.  When creating
            programmable objects (procedures, scalar / multi-statement functions) SQL Server performs limited validation
            on the script if the object(s) referenced in the script do not exist.  If the object does exist (for instance a table)
            SQL Server performs deep validation on columns / syntax to ensure correctness.  
            
            Although the script as written will not run (it causes a runtime error) there are some cases where the deployment engine
            needs to leverage the database engine's DNR behavior to achieve the highest level of success deploying schema.  In other words,
            get the schema out there, let the DBA sort them out :S
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.IndexOrderModifier">
            <summary>
            This helper class inspects the deployment plan and moves all indexes
            to right after their root object or moves all non-clustered indexes to
            after the clustered index (for the same object).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.IndexOrderModifier.CollectSupportingStatements(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep)">
            <summary>
            Helper that will collect any supporting statements from the step's batch to
            the post index supporting statements list
            </summary>
            <param name="element"></param>
            <param name="step"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.IndexOrderModifier.AddIndex(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,System.Boolean)">
            <summary>
            Collects the element/step for later processing if the element is 
            an index and the step is a create/alter
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.IndexOrderModifier.IsSourceElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns true if the element is from the source model
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.LegacyConstraintModifier">
            <summary>
            When legacy constraint targets are recreated they lose the binding of the
            legacy constraint.  This modifier collects legacy constraint targets that
            were recreated as part of the plan and adds bind statements to the end of the
            main deployment plan.  We rebind at the end of the main deployment plan to 
            prevent adding extra relationships due to defaults/rules being added to UDDT and then
            being added to a table
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.MessageOrderModifier">
            <summary>
            This helper class sorts all custom messages to be created in the "correct" order.
            The correct order is first the english messages and then any localized messages
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.RefreshOrderModifier">
            <summary>
            This helper class inspects the deployment plan and moves all refresh statements
            to the end of the deployment script.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.RefreshOrderModifier.IsMovableRefreshStep(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Returns false iif the step is a refresh step and cannot be moved
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.SequenceStateModifier">
            <summary>
            #556093 - Add required steps to support preservation of sequence state
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.SequenceStateModifier.AddSequenceStatePreservationSteps(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            #556093 - Add required steps to preservation of sequence state
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanOrderModifier.TransactionalStatementPlacementModifier">
            <summary>
            This helper class analyzes statements and possibly moves some statements within a
            batch to beyond the plan transaction boundary.  For instance, server audits can be within
            a transaction but turning them on/off cannot
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPlanProblem">
            <summary>
            Represents a problem discovered during plan verification.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPossibleDataLossError">
            <summary>
            This class represents a warning from the SQL deployment engine where the potential for
            data loss is identified
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPossibleDataLossError.Table">
            <summary>
            The table that contains the data-loss changes
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier">
            <summary>
            This Deployment Modifier provides the framework for the pre- and post-deployment appending/prepending
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.PredeploymentMetadata">
            <summary>
            Metadata associated with input-file configuration for pre-deployment script
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.PostdeploymentMetadata">
            <summary>
            Metadata associated with input-file configuration for post-deployment script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.OnExecute(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext)">
            <summary>
            Executes the modifier
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.ReportError(System.Exception)">
            <summary>
            Reports an error from an Exception
            </summary>
            <param name="ex">Exception to report</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.ReportError(System.String)">
            <summary>
            Reports an error from a message
            </summary>
            <param name="message">Message to report</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.InsertDeploymentScript(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep,System.String,System.Boolean)">
            <summary>
            Inserts a script in before or after the marker
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.GenerateMergedSqlCmdFiles(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorConfigurationSetup,Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorConfigurationStream,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCmdFileMerger,System.String,System.String@)">
            <summary>
            Merges all files included via SqlCmd into one file that is output to a new file using the supplied setup. 
            It is assumed that the SqlCmd file itself has already been verified for correctness via code like the
            SqlCmdVerifier class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrePostDeploymentModifier.GenerateMergedSqlCmdFiles(System.String,System.IO.TextWriter,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCmdFileMerger)">
            <summary>
            Merges all files included via SqlCmd into one file that is output to a new file using the supplied setup. 
            It is assumed that the SqlCmd file itself has already been verified for correctness via code like the
            SqlCmdVerifier class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.AlterElementStep">
            <summary>
            A step in a deployment plan that represent an alter to an element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.AlterElementStep.InnerOperation">
            <summary>
            Populated during deployment plan creation to represent actual operation (rebindSchema/unbindSchema)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.CreateElementStep">
            <summary>
            The step in a deployment plan that represents a create of an element
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Steps.DacBulkCopyStep">
            <summary>
            The DacBulkCopyStep uploads / streams data from the dac package to the target db
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Steps.DacBulkCopyStep.UpdateConnectionFactory(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            TODO: temporary to work around issue with seeding connection string during plan creation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.Steps.DacDropTemporalSchemaBoundElementStep.DropObject(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelElement})">
            <summary>
            Creating drop objects batch to generate the drop script 
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Steps.SqlAddSystemVersioningStep">
            <summary>
            A step in a deployment plan that represents adding temporal system-versioning to the element (table)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.Steps.SqlDropSystemVersioningStep">
            <summary>
            A step in a deployment plan that represents dropping temporal system-versioning from the element (table)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep">
            <summary>
            A step in a deployment plan that represents script generated from a model element or
            a change definition
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.IsMessageInFirstBatch">
            <summary>
            Returns true if the step's message will be the first batch when calling
            GenerateTSql()
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.Operation">
            <summary>
            Populated during deployment plan creation to represent
            an operation (create/alter/drop/etc) 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.IsDacFxCreatedStep">
            <summary>
            Returns false by default for the sql deployment steps, should be set to true for DacFx created steps such as SQL Create/Drop Tracking table steps
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.CommandRetryPolicy">
            <summary>
            A custom retry policy to use when executing commands for this step.
            </summary>
            <returns>RetryPolicy or null if the default RetryPolicy should be used</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.HasCommandRetryPolicy">
            <summary>
            Is there a custom retry policy to use when executing commands for this step?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.GetIgnorableErrorNumbersOnRetry">
            <summary>
            Gets the ignorable error number
            </summary>
            <returns>Error numbers for exceptions that can be ignored for this deployment step during deployment</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.GetStepLogInfo">
            <summary>
            Gets some info about the step so they can be used for logging
            </summary>
            <returns>string containing some data about the step to be logged</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.GetIgnorableErrorNumbersAsString">
            <summary>
            Gets a string representation of the ignorable errors for this step so they can be logged
            </summary>
            <returns>String representation of ignorable errors</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.UseScriptTrackingTable">
            <summary>
            Gets a value indicating whether the script(s) of this deployment step should be tracked through the tracking table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptDomStep.GenerateTSQL">
            <summary>
            Generates a script from the script fragment
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptStep">
            <summary>
            A step in a deployment plan that represents some arbitrary text to be inserted
            into the output script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentScriptStep.GenerateTSQL">
            <summary>
            Returns the text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStepSection">
            <summary>
            Describes the section of plan in which a step is defined.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStepSection.None">
            <summary>
            Step is not defined in relation to the plan.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStepSection.Header">
            <summary>
            Step defined as DeploymentStepSection.Header is included as the prefix for both
            DeploymentStepSection.Master and DeploymentStepSection.User scripts.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStepSection.Master">
            <summary>
            Step defined as DeploymentStepSection.Master will segregated into it's own script
            when executing against an SQL Azure target.  For all other targets, a "use [master]"
            statement will be employed (if needed) to ensure the step is executed against the master database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStepSection.User">
            <summary>
            Step defined as DeploymentStepSection.User will segregated into it's own script
            when executing against an SQL Azure target.  For all other targets, a "use [$(DatabaseName)]"
            statement will be employed (if needed) to ensure the step is executed against the user database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep">
            <summary>
            Represents a step in a deployment plan.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.ToString">
            <summary>
            Returns a string that describes this step.  The base returns the
            type of the step
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.GetStepLogInfo">
            <summary>
            Gets some info about the step so they can be used for logging
            </summary>
            <returns>string containing some data about the step to be logged</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.GenerateTSQL">
            <summary>
            Returns a list of string that represent a set of batches
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.GenerateBatchScript(System.IO.TextWriter,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.HasCommandTimeoutOverride">
            <summary>
            Is there a custom command timeout to use when executing commands for this step?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.Execute(Microsoft.Data.SqlClient.SqlConnection,System.Threading.CancellationToken)">
            <summary>
            Overridden by subclasses to execute inline during deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep.Execute(System.Data.IDbConnection,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            Overridden by subclasses to execute inline during deployment.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlBeginAltersStep">
            <summary>
            Instances of this class mark the portion of the deployment plan where
            ALTERs (and CREATEs) are performed.  This is usually the second half of the plan
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlBeginDropsStep">
            <summary>
            An instance of this class marks the beginning of the "drops" portion of the
            deployment plan.  Drops occur in the plan before Alters.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlBeginPreservationStep">
            <summary>
            This class marks the start (in a deployment plan) of the preservation of intent section of the
            plan.  These operations are ones taken to affect refactoring changes
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlBeginTransactionStep">
            <summary>
            This step marks the beginning of the transactional section of a deployment plan
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.TransactionsEnabled">
            <summary>
            Reflects the state of the IncludeTransactionalStatements flag to determine whether to
            lock the active table and separate data motion to a different connect to avoid log truncation issues.
            Once set, this value may not be changed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.Execute(System.Data.IDbConnection,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            Executes the Always Encrypted migration step all through a single connection.
            This means the table cannot be locked during the data motion step.
            </summary>
            <param name="encryptionEnabledConnection"></param>
            <param name="token"></param>
            <param name="loggingContext"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.Execute(System.Data.IDbConnection,System.Data.IDbConnection,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext,System.Action{Microsoft.Data.SqlClient.SqlConnection})">
            <summary>
            New Execute() step that also takes the original (without "Column Encryption Setting = true") connection.
            The original connection is the one with the transaction, so that's where the table must be locked.
            </summary>
            <param name="originalConnection">Connection with a transaction, enabling the original table to be locked</param>
            <param name="encryptionEnabledConnection"></param>
            <param name="cancellationToken"></param>
            <param name="loggingContext"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.EncryptColumnsInEnclave(System.Data.IDbConnection,System.Data.IDbConnection,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            Encrypts columns in the enclave
            </summary>
            <param name="originalConnection">Original Connection</param>
            <param name="encryptionEnabledConnection">Encryption Enabled Connection</param>
            <param name="encryptionChanges">Contains the changed encryption information</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="loggingContext">Logging context</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.EnsureEncryptionCertificatesExists(System.Data.IDbConnection,System.String,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn},System.String,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn})">
             <summary>
             This method ensures that all the encryption certificates exists and are accessible.
            
             We query all encrypted values of top row of the source table, and put them in SET clause in the UPDATE query of target table.
             This way all encryption certificates in source and target table are accessed.
             </summary>
             <param name="connection"></param>
             <param name="sourceTableName"></param>
             <param name="sourceColumns"></param>
             <param name="targetTableName"></param>
             <param name="targetColumns"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionMigrationStep.MigrationInformation">
            <summary>
            Struct to encapsulate much of the column encryption migration information
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionRenameToOriginalStep.SourceConnectionString">
            <summary>
            Connection factory of the source server/database for which this step has been generated
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionRenameToOriginalStep.TargetConnectionString">
            <summary>
            Connection factory of the target server/database for which this step has been generated
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionRenameToOriginalStep.Execute(System.Data.IDbConnection,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            Generates and executes the scripts to rename the table and constraints to their original names,
            and drop the temporary GUID column (if it has one).
            </summary>
            <param name="connection"></param>
            <param name="cancellationToken"></param>
            <param name="loggingContext"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlColumnEncryptionSPRefreshStep.Execute(System.Data.IDbConnection,System.Threading.CancellationToken,Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext)">
            <summary>
            Generates and executes the scripts to execute sprefresh stored proc on the specified elements
            </summary>
            <param name="connection"></param>
            <param name="cancellationToken"></param>
            <param name="loggingContext"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlCreateTableAsSelectStep">
            <summary>
            Represents a CTAS step in a sql deployment plan 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlEndTransactionStep">
            <summary>
            This step marks the end of the transactional section of a deployment script
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlFinalizeDatabaseAccessStep">
            <summary>
            This step is represents a step in the SQL deployment plan that finalizes the access settings to the database.  These
            settings include Read-Only or Read-Write access, restricted, single user or multi-user, and online versus offline
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlMoveSchemaStep">
            <summary>
            In the deployment plan, instances of this step represent moving the element from a previous schema to
            the new one
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlPrintStep">
            <summary>
            A type of step in a Sql deployment plan that signifies a SQL "print" statement
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlRenameStep">
            <summary>
            Represents a step in the deployment plan that renames a element
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.SqlTableMigrationStep">
            <summary>
            Represents a data motion step in a sql deployment plan 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Deployment.TargetDatabaseConfiguration">
            <summary>
            Includes the data from sys.database table for the target database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.TargetDatabaseConfiguration.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition)">
            <summary>
            Creates new instance of TargetDatabaseConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.TargetDatabaseConfiguration.GetConfigValue(System.String)">
            <summary>
            Returns the value of the given config key if exists in the database
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Deployment.TargetDatabaseConfiguration.ConfigKeys">
            <summary>
            Returns all config keys
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Deployment.TargetDatabaseConfiguration.LoadEnclaveConfig(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,Microsoft.Data.Tools.Schema.Sql.Dac.SqlEngineEdition)">
            <summary>
            Determines whether the connection targets a database that is enclave enabled or not and loads the result as a configuration value.
            </summary>
            <param name="connectionFactory">The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory"/> for the database.</param>
            <remarks>
            For Azure Sql DB/Cloud, we verify if an enclave is configured by checking the flag on sys.configurations.
            If the value_in_use for [column encryption enclave type] is greater than 0 then the target has enclave configured (1 = vbs, 2= sgx).
            For SQL Server/Box/On-Premises, if sys.dm_column_encryption_enclave contains one or more rows then it is enclave supported.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DatabaseObjectChange">
            <summary>
            Represents a change retrived from the database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils">
            <summary>
            Helper class used by design services. This code is ported from DatabaseChangeModel in SSDT codebase.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.GetElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.Collections.Generic.IList{System.String})">
            <summary>
            Helper method to lookup an element by name when there is expected to only be one element of that
            name in the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.IsUnnamedElementClass(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Returns true if elements of the specified element class are unnamed in the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.GetElementName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Helper method that returns an elements name if it has one.  This method also handles
            retrieving the name from inline constraint annotations
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.GetTopLevelElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Boolean)">
            <summary>
            Walks up the composing parent chain and returns the top-most
            composing parent to the specified element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.CreateModelBuilder(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.IDataSchemaModelController)">
            <summary>
            Helper to create a model builder referencing a specific model and optionally using a controller
            </summary>
            <param name="model"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.VisitReferencingElements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType},System.Action{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement})">
            <summary>
            Helper to "visit" elements that are referencing the supplied element.  This method
            discovers elements by looking at ModelBuilderResolvableAnnotations and can operate
            correctly on a model that has not been fully resolved
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DesignServicesUtils.IsInlineConstraintOrIndex(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Checks if an internal element represents an inline constraint or annotation
            </summary>
            <param name="element">The element to check</param>
            <returns>True if the element is an inline constraint or index. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogObjectIdentifier">
            <summary>
            Represents an identifier of an object in a system catalog.  This struct encapsulates
            the complexity around catalog identifiers where the identifier can be scoped at the database level, type or
            at a more fine grained level (for instance within the scope of a parent).
            
            For conveniance this struct also tracks the name parts for the object but does not use those
            name parts for equality comparison
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.Resolution">
            <summary>
            The resolution specified when the catalog was queried
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.DatabaseSchemaProvider">
            <summary>
            The type of database schema provider detected (or specified) when the
            stamp was first created
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.LastModificationTimestamp">
            <summary>
            The most recent modification time stamp retrieved from the system catalog(s).  
            If the database was empty this is the MinimumUpdateStamp.  This timestamp is 
            used to detect modifications when calling DetectChanges.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.ExistingObjects">
            <summary>
            Enumerate the existing objects contained within the catalog at the time this
            stamp was created
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.Count">
            <summary>
            The number of objects when the stamp was taken
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.UpdateLastModified(System.DateTime)">
            <summary>
            Allows update of the last modified stamp if it is determined that any object has changed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.MergeStamps(Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Helper method that "merges" the two specified stamps if they both exist.  If both exist the second stamp
            is merged into the first stamp and the first stamp is returned.  If duplicate data is stored between the two
            stamps the second overwrites the first.
            
            This method is meant to merge stamps representing database + server objects into one stamp
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.AddDecorator(Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogObjectIdentifier,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the specified decorator to the set of decorators for the specified parent id
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp.DecoratorIdentifier">
            <summary>
            Represents a "decorator" (permission/extended property) of a top-level object
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStampDelta">
            <summary>
            Represents a delta between to CatalogStamp instances.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog">
            <summary>
            The DatabaseCatalog class provides a set of method that enable callers to detect "drift" in a target
            database based on data retrieved while communicating with the target database.  
            
            Where possible when detecting drift the last modified data in the system catalogs is used to 
            detect when objects have been modified since the last time a CatalogStamp was taken.  
            In cases where the system catalogs do not provide last modified data support
            subsequent drift detection calls will only detect drops and creates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.UnsupportedElementTypes">
            <summary>
            Returns an enumeration of element classes that are not supported when detecting
            drift.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.IsReferencableByUserDB(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Returns true if the specified object is a server-level object referencable from
            within a user database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.CreateBaselineStamp(System.String,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution)">
            <summary>
            Communicates with the DB specified in the connection string and creates a CatalogStamp that
            represents the current state of the database based on the specified resolution.  If the
            database is not available or if the DSP for the database cannot be determined null is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.CreateBaselineStamp(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution)">
            <summary>
            Communicates with the DB specified in the connection string and creates a CatalogStamp that
            represents the current state of the database based on the specified resolution.  If the
            database is not available or if the DSP for the database cannot be determined null is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.DetectChanges(System.String,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Provided a connection and previous catalog stamp detect if any drift has occurred
            in the target database.  Optionally returns back what the drift actually way
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.DetectChanges(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Provided a connection and previous catalog stamp detect if any drift has occurred
            in the target database.  Optionally returns back what the drift actually way
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.OpenConnections(Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution,System.Type,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.SqlClient.SqlConnection@,Microsoft.Data.SqlClient.SqlConnection@)">
            <summary>
            Helper that encapsulates whether one or two connections need to be opened based on the DSP type
            and the type of drift that needs to be detected
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.IsCloudDsp(System.Type)">
            <summary>
            Helper to determine if the specified type is the Azure or AzureV12 DSP type
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.IsDwDsp(System.Type)">
            <summary>
            Helper to determine if the specified type is SqlDw DSP type
            </summary>
            <param name="dspType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.IsLoginManager(Microsoft.Data.SqlClient.SqlConnection)">
            <summary>
            Helper to determine if the user is a member of the LoginManager server role.
            </summary>
            <param name="connection">Connection to query permissions on</param>
            <remarks>
            Because there are no server permissions in Azure, the only way to determine if a user is a 
            member of the LoginManager is to detect if they have select permissions on the sys.sql_logins DMV.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.CreateStamp(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlConnection,System.Type,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution,System.DateTime,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogObjectIdentifier})">
            <summary>
            Helper method that creates and populates a CatalogStamp at the specified resolution using the specified
            lastModification timestamp to optionally detect changes that have occurred beyond a certain point in time
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.PopulateStamp(Microsoft.Data.SqlClient.SqlConnection,System.Type,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution,System.DateTime,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogObjectIdentifier},Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.VersionedQueries)">
            <summary>
            Helper method that populates a catalog stamp by executing a query that returns a well known schema like this:
            id - object identifier
            type - the string (usually the "type" SQL uses for schema objects) that maps to an element class
            name1 - the first name of the object (would be schema)
            name2 - the second name of the object
            modtimestamp - the date (if applicable) of when the object was modified
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.PopulateColumns(Microsoft.Data.SqlClient.SqlDataReader,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Helper method that populates all columns' id and their checksum so
            that important column renames can be detected
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.PopulateSxiPaths(Microsoft.Data.SqlClient.SqlDataReader,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Helper method that populates all SXI path's id and their checksum so
            that path changes can be detected and index state updated
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.PopulateSxiNamespaces(Microsoft.Data.SqlClient.SqlDataReader,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Helper method that populates all SXI namespace's id and their checksum so
            that path changes can be detected and index state updated
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.PopulateDecorators(Microsoft.Data.SqlClient.SqlDataReader,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            This helper method reads through the reader's current resultset and 
            populates decorators (extended properties/permissions)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.GetQueries(System.Type,Microsoft.Data.SqlClient.SqlConnection)">
            <summary>
            Helper method to retrieve version specific queries
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.VersionedQueries">
            <summary>
            Version specific queries (where applicable)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries">
            <summary>
            This class holds queries for Sql Dw. These queries are used during create server/database stamp 
            and when detecting model drift changes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.#ctor">
            <summary>
            SqlDwQueries class constructor. Initializes string arrays for various categories with queries needed for Dw. 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.DatabaseObjectQueries">
            <summary>
            Returns database object queries for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.ReferencedServerObjectQueries">
            <summary>
            Returns referenced server object queries for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.UnreferencedServerObjectQueries">
            <summary>
            Returns unreferenced server object queries for Dw.
            Overriding abstract method with empty query for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.DatabaseDecoratorQueries">
            <summary>
            Returns database decorator query for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlDwQueries.Columns">
            <summary>
            Returns column object query for Dw.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.#ctor">
            <summary>
            SqlServerlessQueries class constructor. Initializes string arrays for various categories with queries needed for SQL Serverless.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.DatabaseObjectQueries">
            <summary>
            Returns database object queries for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.ReferencedServerObjectQueries">
            <summary>
            Returns referenced server object queries for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.UnreferencedServerObjectQueries">
            <summary>
            Returns unreferenced server object queries for Dw.
            Overriding abstract method with empty query for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.DatabaseDecoratorQueries">
            <summary>
            Returns database decorator query for Dw.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseCatalog.SqlServerlessQueries.Columns">
            <summary>
            Returns column object query for Dw.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp">
            <summary>
            This class represent a "stamp" of a database so that various drift detection mechanisms can detect when a change or drift
            has occured.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution">
            <summary>
            Enumeration that specifies the resolution used when checking for drift.  The higher the
            resolution the more costly the check.  When last modified data is not captured identifiers+names
            are used to determine whether drift has occurred
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution.Database">
            <summary>
            Drift for all database-scoped objects
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution.ReferencedServerObjects">
            <summary>
            Drift for server-level objects that can be referenced by objects inside a database
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution.UnreferencedServerObjects">
            <summary>
            Drift for server-level objects that cannot be structurally 
            referenced by objects inside a database
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution.Server">
            <summary>
            Detect drift in objects at the server level
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.CreateDatabaseStamp(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStamp)">
            <summary>
            Helper that retrieves the databaseId and creation data for the databaswe connected to by the supplied connection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.CreateBaselineStamp(System.String,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution)">
            <summary>
            Creates a baseline database stamp for the database targeted by the supplied connection string.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.CreateBaselineStamp(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DriftResolution)">
            <summary>
            Creates a baseline database stamp for the database targeted by the supplied connection string.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.DetectChanges(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp)">
            <summary>
            Detects changes that have occured within the specified database and returns true if the database has drifted
            from the supplied baseline
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.DetectChanges(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.DatabaseStamp@,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStampDelta@)">
            <summary>
            Detects changes to the supplied database based on the supplied baseline
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.ModelDrift.CollectAltersDueToRenames(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.DesignServices.DriftDetection.CatalogStampDelta,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor})">
            <summary>
            Analyzes the supplied catalog delta and returns back the set of objects that need to be (re)retrieved based on their
            structural dependency to the renamed object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter">
            <summary>
            Internal support class that enables deletion of objects from the model.
            This is required when performing actions such as deleting an existing element and
            replacing it with a script-backed element during SCA.
            
            This code has been ported from the SSDT code base: SchemaToolsSql\DesignServices\DatabaseChangeModel.cs
            If updates are needed in the future, we should consider merging the two code bases and using this class
            in both locations
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.DeleteElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.ChildDelete)">
            <summary>
            Deletes the specified elements from the model.  Will also delete any hierarchical children that are marked
            as inline
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.DeleteElementHelper(Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.ChildDelete,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Helper that returns true/false based on the supplied delete behavior and element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.DeleteElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Predicate{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement})">
            <summary>
            Deletes the specified element and if the element is a column source any of it's hierarchical children based on the
            response of the predicate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.DoDeleteElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Boolean)">
            <summary>
            Helper method that encapsulates deleting a model-built element from the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.DesignServices.SqlModelDeleter.VisitReferencingElements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType},System.Action{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement})">
            <summary>
            Helper to "visit" elements that are referencing the supplied element.  This method
            discovers elements by looking at ModelBuilderResolvableAnnotations and can operate
            correctly on a model that has not been fully resolved
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.MessageGeneratedEventArgs">
            <summary>
            The data for the ImportDatabaseEngine and ImportManager MessageGenerated
            events.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.MessageGeneratedEventArgs.GeneratedMessage">
            <summary>
            The actual message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.MessageGeneratedEventArgs.MessageSeverity">
            <summary>
            The severity of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.MessageGeneratedEventArgs.InternalEvent">
            <summary>
            If another event caused this one here is the originator
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.ProgressEventArgs">
            <summary>
            Used to send progress through progress events.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer">
            <summary>
            The analyzer that performs analysis on each registed refactoring transaction record, 
            and provide a list of TargetModelOperation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.SupportedOperationName">
            <summary>
            The refactoring operation name that this analyzer is interested in.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.Analyze(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord)">
            <summary>
            Analyze the refactoring transaction record based on the current source model and target model.
            </summary>
            <param name="sourceModel">Source model for deployment</param>
            <param name="targetModel">Target model for target database.</param>
            <param name="record">The transaction record this analyzer is interested in.</param>
            <returns>A list of TargetModelOperation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.MergeTransactionRecords(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord})">
            <summary>
            Give a list of refactoring transaction records this analyzer registed for.  And let the analyzer
            do analysis and merge the records if possible.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.DatabaseSchemaProvider">
            <summary>
            The DatabaseSchemaProvider for this analyzer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.SetExtensionHandle(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Set the ExtensionHandle for this RefactoringDeploymentAnalyzer extension.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentAnalyzer.ExtensionHandle">
            <summary>
            The ExtensionHandle for current RefactoringDeploymentAnalyzer extenson.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentModifier">
            <summary>
            The deployment modifier for refactoring preservation of intennt.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentModifier.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Create a Refactoring deloyment modifer with passed in deployment steps.
            </summary>
            <param name="refactorStep"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringDeploymentModifier.OnExecute(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlanContributorContext)">
            <summary>
            Inserts the refactoring deploy step before post deployment steps.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord">
            <summary>
            Refactoring transaction record represents each transaction record.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.OperationName">
            <summary>
            The name of the refactoring operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.ChangeDateTime">
            <summary>
            The change time of when the reafctoring happened.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.Properties">
            <summary>
            All properties for this record
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.OperationKeys">
            <summary>
            All refactoring operation keys
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.AddProperty(System.String,System.String)">
            <summary>
            Add property with key value pair.
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.GetProperty(System.String)">
            <summary>
            Get property of the property key.
            </summary>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.AddOperationKey(System.String)">
            <summary>
            Add operation key to the record
            </summary>
            <param name="operationKey"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord.AddOperationKey(System.Collections.Generic.IList{System.String})">
            <summary>
            Add operation keys to the record
            </summary>
            <param name="operationKeys"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor">
            <summary>
            Responsible for refactoring preservation of intent deployment contributor.
            Inside the contributor, it will analyze the refactor log file and provide
            correct deployment steps according to users intent for refactoring operations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactorLogMetadata">
            <summary>
            Metadata assocaited with input-file configuration for refactor log
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.OnEstablishDeploymentConfiguration(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorConfigurationSetup)">
            <summary>
            During build time, this method will look at all configurationFiles and find all files with refactorlog extension
            and merge all refactorlog files, and provide a new file as build output.
            </summary>
            <param name="setup">configuration setup.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.OnApplyDeploymentConfiguration(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorContext,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorConfigurationStream})">
            <summary>
            During deployment time, after we get all files in ContributorConfigurationSetup, we will find that one merged refactorlog file,
            and create a list of RefactoringTransctionRecord in order.  
            We will first filter any already deployed refactoring operation records.  And then go through each remaining
            record and construct a list of RefactoringTransactionRecord in order.  The order of records in the file will be 
            respected.
            </summary>
            <param name="context">context </param>
            <param name="configurationStreams">Deployment configuration files. </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.ProposeTargetOperations(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorContext)">
            <summary>
            This method will return this as Enumerator for TargetModelOperation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.ProvideDeploymentModifier(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorContext)">
            <summary>
            Provide sdeployment modifier for preservation intent operation.  This
            modifier will add steps before post deployment steps.
            </summary>
            <returns>Deployment modifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.FilterDeployedTransactionRecords(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentContributorContext,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord})">
            <summary>
            Filter any already deployed on target DB refactoring transaction log.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.MergeTransactionRecords(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.Refactoring.RefactoringRecord})">
            <summary>
            Merge transaction records if possible.
            The base implementation will go through all the records in order, if the continous records are for same analyzer, then
            it will add the records to a temp list, until hit a record need to be analyzed by another analyzer.  Then it calls the
            analyzer to merge the list of records and add the result to the merged results.
            </summary>
            <param name="sourceModel">the model </param>
            <param name="records">Orginal refactoring transaction records.</param>
            <returns>Merged transaction records.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.Current">
            <summary>
            Current operation for target model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.System#Collections#IEnumerator#Current">
            <summary>
            Current operation for target model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.MoveNext">
            <summary>
            Move to next operation for target model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.Reset">
            <summary>
            Reset the target operations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.GetEnumerator">
            <summary>
            Get enumerator of the target model operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringDeploymentContributor.RefactoringTargetModelOperationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of the target model operations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog">
            <summary>
            This class represents a refactoring log file.  It is a base class for database schema providers that
            want to provide programmatic access to their refactoring logfiles.  Refactoring logs are used by deployment
            to preserve a user's design-time intent during deployment.  For instance, if renaming a table is supported this
            log might contain information to inform deployment to rename a table rather than drop/create.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.#ctor">
            <summary>
            Creates a new instance of this class and a new in-memory refactoring logfile will be created.  Any XML or IO exceptions
            encountered while opening/reading the file must be handled by the caller.  ApplicationExceptions are
            thrown if the file is not in the correct format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.#ctor(System.String)">
            <summary>
            Creates a new instance of this class and opens the specified file if it exists.  If
            the file does not exist, a new refactoring logfile will be created.  Any XML or IO exceptions
            encountered while opening/reading the file must be handled by the caller.  ArgumentException is
            thrown if the file is not in the correct format.
            </summary>
            <param name="logPath">The path to the refactoring logfile.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.Save">
            <summary>
            Writes the refactoring log to the path specified when the instance was created.  Any 
            IO/XML exceptions need to be handled by the caller.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.AppendOperation(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Appends the specified operation to the refactoring log
            </summary>
            <param name="operationName"></param>
            <param name="operationProperties"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.OpenRefactoringLog(System.String)">
            <summary>
            Opens a XmlDocument containing the specified contents.
            </summary>
            <param name="fileContent">If null, null is returned.  If string.Empty an newly formatted
            refactoring log file is returned.  Otherwise, the contents are processed 
            and returned in the XmlDocument instance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.ValidateRefactoringLog(System.IO.Stream,System.String)">
            <summary>
            Performs basic validation of the refactor log content.
            Exceptions will be thrown if the file is not in the expected format 
            (i.e. not valid XML or does not contain an Operations node).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.AppendRenameRecord(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.String)">
            <summary>
            Appends a rename record to the current log.  If preserving the intent to rename the element is
            not supported no record will be added to the log.
            </summary>
            <param name="elementToRename">The element to be renamed.  
            The element has not been renamed - i.e. it still has its previous name</param>
            <param name="newName">The new name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringLog.AppendMoveSchemaRecord(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.String)">
            <summary>
            Appends a move schema record to the log.  If moving this type of object to a new schema is not
            supported no entry will be added to the log.
            </summary>
            <param name="elementToMove">The element to move to the new schema.  The element should still be
            owned by it's previous schema</param>
            <param name="newOwnerSchema">The name of the schema the element should be moved to.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.CouldNotFindOperationsNode">
            <summary>
              Looks up a localized string similar to The refactoring log {0} does not contain an Operations node..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.CouldNotOpenRefactoringLog">
            <summary>
              Looks up a localized string similar to The refactoring log {0} could not be opened..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.CreateSchema">
            <summary>
              Looks up a localized string similar to Create schema {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_MoveSchemaElementMoved">
            <summary>
              Looks up a localized string similar to Move Schema refactoring operation with key {0} is skipped, element {1} has already been moved to schema {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_MoveSchemaFailedToFindSchema">
            <summary>
              Looks up a localized string similar to Move Schema refactoring operation with key {0} is skipped, new schema {1} is external and does not exist in target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_MoveSchemaInvalidElementSqlDw">
            <summary>
              Looks up a localized string similar to The Move to Schema refactoring operation will skip key {0} because it is not supported for Azure Synapse Dedicated SQL Pool..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_MoveSchemaInvalidSchema">
            <summary>
              Looks up a localized string similar to Move Schema refactoring operation with key {0} is skipped, the new schema {1} is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_MoveSchemaNoElement">
            <summary>
              Looks up a localized string similar to Move Schema refactoring operation with key {0} is skipped, model element {1} is not found in target database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.Error_RenameElementSkipped">
            <summary>
              Looks up a localized string similar to Rename refactoring operation with key {0} is skipped, element {1} ({2}) will not be renamed to {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.FailedToLoadFile">
            <summary>
              Looks up a localized string similar to The file {0} could not be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.FailedToReadContent">
            <summary>
              Looks up a localized string similar to The content could not be read from {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.FailedToReadContent_NoFile">
            <summary>
              Looks up a localized string similar to The content could not be read from package..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.MoveObjectSchema">
            <summary>
              Looks up a localized string similar to Move object {0} to different schema {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.RefactoringLogWithKey">
            <summary>
              Looks up a localized string similar to The following operation was generated from a refactoring log file {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.RenameObject">
            <summary>
              Looks up a localized string similar to Rename {0} to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Refactoring.SqlRefactoringResources.UpdateTargetRefactoringKeys">
            <summary>
              Looks up a localized string similar to Refactoring step to update target server with deployed transaction logs.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionFileManager.GetRelativeFilePath(System.String)">
            <summary>
            return the relative path for a full path based on the current project folder
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.IsSuppressedRule(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.String,System.String)">
            <summary>
            return true if the given model element and rule are suppressed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.UpdateSuppressedRules">
            <summary>
            reload the suppressed rules from XML file to reflect the possible change
            performed by users through directly modifying XML file contents
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.UpdateNamespace(System.String)">
            <summary>
            Update suppression Xml's namespace.        
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressRules(System.Collections.Generic.IEnumerable{System.Tuple{System.String,Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            suppress all rules stored in a collection
            </summary>
            <param name="rulesToBeSuppressed">the first value of the tuple is the full filepath</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.UnsuppressRulesFromFile(System.String)">
            <summary>
            Unsuppress all suppressed-rules from a certain file
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.LoadSuppressedRules(System.String)">
            <summary>
            load suppressed rules from an XML string
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.ReadSuppressedRules(System.Xml.XmlReader)">
            <summary>
            read info for each suppressed rule from an XmlReader 
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressOneRule(System.String,System.String,System.String)">
            <summary>
            suppress one rule based on the relative filepath and the category, rule id
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.AddSuppressedRuleItem(System.String,Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            store a suppressed rule into a dictionary with the key of relative filepath
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.RuleIsAlreadySuppressed(System.String,Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem)">
            <summary>
            check if one rule has been suppressed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.GenerateSuppressionXmlString(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            generate an XML string to represent a set of suppressed rules
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SaveSuppressedRulesToXmlDocument(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            serialize all the suppressed rules into an XML document
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.CreateXmlElementForOneFile(System.Xml.XmlDocument,System.String,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem})">
            <summary>
            create an XML element for a file and suppressed rules associated with it
            </summary>
            <param name="xmlDocument"></param>
            <param name="relativeFilePath"></param>
            <param name="suppressedItems"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.MergeSuppressedRules(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            merge two sets of suppressed rules and store the result into the second set
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.InsertNewSuppressedRulesToXmlString(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.SuppressedRuleItem}})">
            <summary>
            create XML fragements for newly suppressed rules, and insert
            the XML fragments into the existing XML string for currently
            suppressed rules
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.MessageSuppressionManager.StripHeadAndTail(System.String,System.String,System.String)">
            <summary>
            strip the head and tail of a string
            </summary>
            <param name="originalString">string to be stripped</param>
            <param name="headPattern">regex pattern to define head</param>
            <param name="tailPattern">regex pattern to define tail</param>
            <returns>stripped string</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule">
            <summary>
            Abstract class to hold the detailed information of a rule
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule.RuleProperties">
            <summary>
            Get / set the descriptive properties of this rule.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule.PopulateProperties">
            <summary>
            Populate rule properties
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule.Analyze(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Analyze a model element and returns problems detected in the element
            </summary>
            <param name="ruleSetting">Rule Setting for the current rule</param>
            <param name="context">The context for this analysis</param>
            <returns>The problems detected by the rule in the given element</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute">
            <summary>
            Class to hold rule attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.Namespace">
            <summary>
            Rule namespace
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.Id">
            <summary>
            Ruld id
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.FullId">
            <summary>
            Rule full Id which is a concatenation of namespace and id
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.ResourceBaseName">
            <summary>
            Fully qualified resource base name that contains rule name, description and category strings
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.DisplayNameResourceId">
            <summary>
            Resource string id for rule name 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.Category">
            <summary>
            The category (non-localizable)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.DescriptionResourceId">
            <summary>
            Resource string id for displayed warning message
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.HelpUrl">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.HelpKeyword">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.RuleScope">
            <summary>
            Scope of this rule. Choose between schema bound and model bound.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of DataRuleAttribute
            </summary>
            <param name="namespace">Rule namespace</param>
            <param name="id">Rule Id</param>
            <param name="resourceBaseName">Resource base name</param>
            <param name="displayNameResourceId">Rule name resource string id</param>
            <param name="category">Category (non localizable)</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine">
            <summary>
            The class in charge of loading and executing data rules
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.GetRules``1(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Get all rules defined for the given DatabaseSchemaProvider and report possible errors to the given ErrorManager
            </summary>
            <param name="databaseSchemaProvider">The DatabaseSchemaProvider for which the rules are defined</param>
            <param name="errors">The list of errors which happened while getting rules</param>
            <returns>The rules defined for the given DatabaseSchemaProvider</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute specified rules against a model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute specified rules against a model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute specified rules against a model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all rules against the a set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute all rules against the a set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all rules against the a set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all rules against a model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute all rules against a model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem"></param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all rules against a model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="rules">The rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all enabled rules against the specified model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute all enabled rules against the specified model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem"></param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all enabled rules against the specified model element
            </summary>
            <param name="modelElement">The model element against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all enabled rules against the specified model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute all enabled rules against the specified model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all enabled rules against the specified model and each model element found in the model
            </summary>
            <param name="dataSchemaModel">The model against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            Execute all enabled rules against the specified set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext})">
            <summary>
            Execute all enabled rules against the specified set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRules(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Func{System.Boolean})">
            <summary>
            Execute all enabled rules against the specified set of model elements
            </summary>
            <param name="modelElements">The set of model elements against which the rules are executed</param>
            <param name="ruleSettings">The settings for the rules to be executed</param>
            <param name="errors">The errors that occurred when executing rules</param>
            <param name="suppressProblem">The predicate to suppress problems detected by a rule against an element</param>
            <param name="executeCanceled">The callback function to abort executing rules</param>
            <returns>The problems detected by executing the rules excluding the suppressed problems</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngine.ExecuteRuleImpl(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext,System.Predicate{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.DataSchemaError}@)">
            <summary>
            actual implementation for executing rules
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotConstructSuppressionXmlFilePath">
            <summary>
              Looks up a localized string similar to The path for the XML suppression file cannot be constructed. Error message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotCreateResourceManager">
            <summary>
              Looks up a localized string similar to Can&apos;t create ResourceManager for {0} from {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotFindModelElementFile">
            <summary>
              Looks up a localized string similar to The associated file could not be found from the given element. .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotFindRegistryKeyForDBPro">
            <summary>
              Looks up a localized string similar to The registry key to find the SQLDB folder cannot be obtained..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotLoadRule">
            <summary>
              Looks up a localized string similar to Can&apos;t load rule {0} due to the following error: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotLoadSuppressionMessagesFromXmlString">
            <summary>
              Looks up a localized string similar to The XML string for a suppression message cannot be parsed. Error message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotReadResourceString">
            <summary>
              Looks up a localized string similar to Can&apos;t read resource string for &quot;{0}&quot; from {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotReadSuppressionMessageFromXmlFile">
            <summary>
              Looks up a localized string similar to The suppression message could not be read from the XML file. Error message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.CannotSaveSuppressionMessagesToXmlString">
            <summary>
              Looks up a localized string similar to Suppression messages cannot be saved to the XML string. Error message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.DuplicateName">
            <summary>
              Looks up a localized string similar to You have {0} code analysis rules that have the same name &apos;{1}&apos;. These rules will load and run correctly, but you should consider giving them unique names to avoid confusion..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.InvalidHelpUrl">
            <summary>
              Looks up a localized string similar to Help url &apos;{0}&apos; for rule {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.MissingDataRuleAttributeProperty">
            <summary>
              Looks up a localized string similar to {0} of DataRuleAttribute for rule {1} is empty.	.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.MissingNameSpaceNameID">
            <summary>
              Looks up a localized string similar to Rule &apos;{0}&apos; in assembly &apos;{1}&apos; was ignored because it is missing a namespace, an ID, or a name..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.NoDataRuleAttributeAttached">
            <summary>
              Looks up a localized string similar to No DataRuleAttribute attached to rule {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.StaticCodeAnalysisException_Critical">
            <summary>
              Looks up a localized string similar to A critical exception was thrown when the &apos;{0}&apos; rule was applied. The exception text is: {1}. Static code analysis has been terminated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.StaticCodeAnalysisException_Mild">
            <summary>
              Looks up a localized string similar to An exception was thrown when the ‘{0}’ rule was applied. The exception text is: ‘{1}’..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.StaticCodeAnalysisException_NullRule">
            <summary>
              Looks up a localized string similar to The rule is null. You must call SetHandle before you use RuleProxy..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.SuppressionSchemaFileDoesntExist">
            <summary>
              Looks up a localized string similar to The XML schema file ({0}) for message suppression does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.UnloadableRuleErrorMessage">
            <summary>
              Looks up a localized string similar to Two or more database analysis rules were ignored because they have the same namespace and identifier (namespace, ID, assembly): .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineResources.UnloadableRuleList">
            <summary>
              Looks up a localized string similar to &lt;{0}, {1}, {2}&gt; .
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.IsKeyword(System.String)">
            <summary>
            Check if given name is one of keywords
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.IsSqlKeyword(System.String)">
            <summary>
            Check if a given name is one of SQL keywords
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.IsOdbcKeyword(System.String)">
            <summary>
            Check if a given name is one of ODBC keywords
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.IsFutureKeyword(System.String)">
            <summary>
            Check if a given name is one of future keywords
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSchemaObjectName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Get the schema object name in EscapedFullyQualifiedName format from an ISqlModelElement
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSchemaObjectName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Get the schema object name in EscapedFullyQualifiedName format from a Sql element Descriptor
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElementDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSchemaObjectName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Get the schema object name in user's choice of format from a Sql element Descriptor
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElementDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSchemaObjectName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Get the schema object name in user's choice of format from an ISqlModelElement
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="style"></param>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.IsTopLevelElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Check if the model element is a top-level element
            An element is at top level if it doesn't have composite owner and it is not an inline constraint
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.RemoveParenthesis(Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression)">
            <summary>
            recursively remove parenthesises of an TSql parser expression
            </summary>
            <param name="expression">Expression to parse</param>
            <returns>Expression without parenthesis</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSqlModelElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Get the corresponding SqlModelElement of a SqlElementDescriptor
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElementDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetSqlModelElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Type)">
            <summary>
            Get the corresponding SqlModelElement of an identifier
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetNearestNamedParent(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the nearest (in hierarchy) named element
            </summary>
            <param name="element">Element to get the name for</param>
            <returns>Nearest named parent</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleEngineUtils.GetRuleSettingStringFromRuleSettings(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting})">
            <summary>
            write the rule setting to the project property
            </summary>
            <param name="ruleSetting"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleError">
            <summary>
            Specialized DataSchemaError to represent static code analysis problems
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleError.#ctor(System.String,System.String,System.Int32,System.Int32,Microsoft.Data.Tools.Schema.ErrorSeverity,System.String)">
            <summary>
            Initialize a new instance of DataRuleError
            </summary>
            <param name="message">Error or waring message</param>
            <param name="document">Script file where warning is raised</param>
            <param name="line">Line number of where problem is detected</param>
            <param name="column">Column number of where problem is detected</param>
            <param name="severity">Severity of this error</param>
            <param name="fullRuleId">Full id of a rule that raised this error</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleError.FullRuleId">
            <summary>
            Get full id of a rule that raised this error
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleException">
            <summary>
            Represent an exception that may occur during a static code analysis run
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleException.#ctor">
            <summary>
            Initialize a new instance of DataRuleException
            Exception message and inner exceptions are set to null
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleException.#ctor(System.String)">
            <summary>
            Initialize a new instance of DataRuleException with a message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of DataRuleException with a message and an inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception to attached to this exception</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext">
            <summary>
            Defines the context in which a static code analysis rule is executed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext.ModelElement">
            <summary>
            Gets the element being analyzed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext.SchemaModel">
            <summary>
            Gets the model being analyzed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext.ScriptFragment">
            <summary>
            Gets the script fragment which defines the element being analyzed.  May be null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleManager">
            <summary>
            The class keeps the set of rules loaded by the current DSP
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule})">
            <summary>
            Initialize a new instance of DataRuleManager
            </summary>
            <param name="rules">The list of rules that are loaded by the current DSP</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleManager.GetRuleFromRuleKey(System.String)">
            <summary>
            Get a rule instance based on a rule key (Author.Category#Id)
            </summary>
            <param name="ruleKey">Rule key to look up a rule</param>
            <returns>the rule found</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleManager.Rules">
            <summary>
            Get all rules stored in the rule manager
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem">
            <summary>
            Class to store the details of a problem detected by a rule
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.#ctor(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule,System.String,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor with all parameters required.
            </summary>
            <param name="rule">Rule</param>
            <param name="description">Description of the problem</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.#ctor(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem)">
            <summary>
            Copy constructor
            </summary>
            <param name="problem">The source problem.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.Rule">
            <summary>
            Rule used to detect the current problem
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.ModelElement">
            <summary>
            ModelElement associated with the current problem
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.Severity">
            <summary>
            The severity of this problem, can be error, warning.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.FileName">
            <summary>
            File containing the detected problem 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.StartLine">
            <summary>
            Start line of the token
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.EndLine">
            <summary>
            End line of the token
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.StartColumn">
            <summary>
            Start column of the token
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.EndColumn">
            <summary>
            End column of the token
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.ErrorMessageString">
            <summary>
            The string for displaying the error message
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.Equals(System.Object)">
            <summary>
            Override the Equals Method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem.GetHashCode">
            <summary>
            override the GetHashCode() Methods
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSeverity">
            <summary>
            The type of message for reporting problems
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext">
            <summary>
            The context information for suppressing a SCA problem
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext.ModelElement">
            <summary>
            The element being analyzed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext.SchemaModel">
            <summary>
            The Schema Model the rule is checking against
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext.Rule">
            <summary>
            The Rule detecting the problem
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSuppressionContext.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            Initialize a new instance of DataRuleProblemSuppressionContext
            </summary>
            <param name="element">The element being analyzed</param>
            <param name="schemaModel">The Schema Model the rule is checking against</param>
            <param name="rule">The Rule detecting the problem</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties">
            <summary>
            Represents rule properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.Id">
            <summary>
            Rule Id
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.FullId">
            <summary>
            Full Id which is a concatenation of Namespace and Id
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.Namespace">
            <summary>
            Rule namespace
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.DisplayName">
            <summary>
            Rule name used in UI
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.Category">
            <summary>
            Rule category
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.Description">
            <summary>
            Rule error message
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.HelpUrl">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.HelpKeyword">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.RuleScope">
            <summary>
            Rule scope
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.SupportedElementTypes">
            <summary>
            Types of elements checked by this rule
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProperties.GetSqlRuleProperties(System.Type)">
            <summary>
            Initialize an instance of SqlDataRuleProperties
            </summary>
            <param name="ruleType">Rule type associated with this property</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.Problems">
            <summary>
            Get all the problems
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.AddProblem(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem)">
            <summary>
            add a problem found by the current analyzer
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.ClearProblems">
            <summary>
            clean up all the problems
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.SqlSchemaModel">
            <summary>
            get the SQL schema manager used by the current analyzer
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.Rule">
            <summary>
            Get the the rule associated with the current analyzer
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.SqlModelElement">
            <summary>
            Get the ISqlModelElement for which the current analyzer works
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSchemaAnalyzer.DebugWriteLine(System.String)">
            <summary>
            Print a message to debug window in Debug mode
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleScope">
            <summary>
            The scope examined by a static code analysis rule.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleScope.Element">
            <summary>
            The rule examines a single element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleScope.Model">
            <summary>
            The rule examines the entire model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting">
            <summary>
            The class stores the settings for a particular rule and in a particular configuration
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.#ctor(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            Constructor with only rule provided
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.#ctor(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule,System.Boolean,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblemSeverity)">
            <summary>
            Constructor with values to set all fields
            </summary>
            <param name="rule">The rule to which current setting applies</param>
            <param name="enabled">Enable or disable the rule</param>
            <param name="severity">Prolbems detedted by the rule are errors or warnings</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.Rule">
            <summary>
            Get the rule associated with the current Rule Setting
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.Enabled">
            <summary>
            Get if the rule is enabled or disabled
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.Severity">
            <summary>
            Get the severity (Error or Warning) for the problems detected by the rule
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.Equals(System.Object)">
            <summary>
            Override the Equals Method
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting.GetHashCode">
            <summary>
            override the GetHashCode() Methods
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager">
            <summary>
            the class manages a set of RuleSettings, one for each of currently 
            loaded rules
            the rule settings stored in this class is associated with 
            a particular configuration, so we have one instance of this
            class for each existing configuration
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager._dirty">
            <summary>
            this class is used to keep track of rule settings, which most likely
            involves user interaction, so we introduce this field to trace whether
            the settings have been modified to avoid unnecessary persistence
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule})">
            <summary>
            ctor with a set of rules provided
            </summary>
            <param name="rules"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting})">
            <summary>
            ctor with a set of rule setting provided
            </summary>
            <param name="ruleSettings"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.EnableRule(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            include one rule for execution
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.DisableRule(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            exclude one rule from execution
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.TreatRuleProblemAsWarning(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            treat the problems found by one rule as warnings
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.TreatRuleProblemAsError(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            treat the problems found by one rule as errors
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.IsRuleDisabled(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            check if one rule is disabled
            </summary>
            <param name="rule"></param>
            <returns>true when disabled; false, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.IsRuleProblemTreatedAsError(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlAnalysisRule)">
            <summary>
            check if the problem found by one rule is treated as error
            </summary>
            <param name="rule"></param>
            <returns>true if the problem is treated as error; false otherwise</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.Dirty">
            <summary>
            setting has been changed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.DisabledRules">
            <summary>
            get all disabled rules
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.RulesWhoseProblemsTreatedAsErrors">
            <summary>
            get all rules whose problems are treated as errors
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSettingsManager.RuleSettings">
            <summary>
            get all rule settings
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SupportedElementTypeAttribute">
            <summary>
            Indicates a type of element against which a DataRule should run.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SupportedElementTypeAttribute.ElementType">
            <summary>
            The type of the element to be examined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.RuleEngine.SupportedElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of SupportedElementTypeAttribute
            </summary>
            <param name="type">The type of the element to be examined.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ProjectFilePath">
            <summary>
            Path of the .sqlproj file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.TargetScripts">
            <summary>
            .sql files in the project
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.Dsp">
            <summary>
            Database schema provider of the project
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ExtractTarget">
            <summary>
            Extract target of the project
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.DspString">
            <summary>
            String representation of dsp
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.RefreshModelBeforeCompare">
            <summary>
            Whether the model should be refreshed before comparing
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.DebuggerDisplay">
            <summary>
            Debugger display summary
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.#ctor(System.String,System.String[],System.String,Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal,System.Boolean)">
            <summary>
            Constructor for the schema compare participant for project
            </summary>
            <param name="projectFilePath"> path of the local project </param>
            <param name="targetScripts"> .sql files included in the project </param>
            <param name="dsp"> database schema provider of the project </param>
            <param name="extractTarget">Extract target of the project</param>
            <param name="refreshModelBeforeCompare">Whether the model should be refreshed before comparing</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.Populate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Populate a SqlSchemaModel for the participant
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.IsStale">
            <summary>
            Checks if the current instance is stale
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.SetSqlSchemaModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel)">
            <summary>
            Sets the schema model to the passed in schema model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.CreateSqlSchemaModel">
            <summary>
            Generate a new sql schema model from the dsp
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.CreateExtensionManager">
            <summary>
            Gets appropriate extension manager based on dsp version
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.PushScriptsIntoModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript})">
            <summary>
            Adds model scripts to a sql schema model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.SerializeToXML(System.Xml.XmlNode)">
            <summary>
            Serializes participant. Need to save project path, extract target and dsp in order to have the information needed to call constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.DeserializeFromXML(System.Xml.XmlNode)">
            <summary>
            Deserializes participant
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.OnValidate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Validates the project
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ValidateProject(System.String)">
            <summary>
            Validates the project
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript">
            <summary>
            Object used to hold scripts that can be pushed into a SQL model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript.Path">
            <summary>
            Path of the script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript.Script">
            <summary>
            Content of the script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript.Metadata">
            <summary>
            Metadata of the script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            ModelScript constructor that assigns fields needed by project participant
            </summary>
            <param name="script">
            Content of the script
            </param>
            <param name="path">
            Path of the script
            </param>
            <param name="metadata">
            Metadata of the script
            </param>
            <exception cref="T:System.ArgumentNullException">
            If any parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareParticipantForProject.ModelScript.Convert(System.Collections.Generic.List{System.String})">
            <summary>
            Converts scripts in string form to model scripts
            </summary>
            <param name="paths">
            Script paths
            </param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Add">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CantDetectDatabaseVersion">
            <summary>
              Looks up a localized string similar to Can&apos;t detect the version of the database specified by the connection string &apos;{0}&apos;, or its version is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CantImportDatabaseSchema">
            <summary>
              Looks up a localized string similar to Can&apos;t import the database schema from the connection string &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Change">
            <summary>
              Looks up a localized string similar to Change.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CLRMethod">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CLRMethods">
            <summary>
              Looks up a localized string similar to CLR Methods.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CLRParameter">
            <summary>
              Looks up a localized string similar to Parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CLRProperties">
            <summary>
              Looks up a localized string similar to CLR Properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.CLRProperty">
            <summary>
              Looks up a localized string similar to Property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Column">
            <summary>
              Looks up a localized string similar to Column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.ColumnEncryptionKeyValues">
            <summary>
              Looks up a localized string similar to Column Encryption Key Values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Columns">
            <summary>
              Looks up a localized string similar to Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Compare">
            <summary>
              Looks up a localized string similar to Compare.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_GenerateScript">
            <summary>
              Looks up a localized string similar to Generate Script.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_IncludeObjects">
            <summary>
              Looks up a localized string similar to IncludeObjects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Log_asynchronous">
            <summary>
              Looks up a localized string similar to  (asynchronous).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Log_Completed">
            <summary>
              Looks up a localized string similar to {0} completed at {1} ({2}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Log_Incompleted">
             <summary>
               Looks up a localized string similar to {0} not completed in {1} milliseconds.
            Status messages:   {2}.
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Log_StartAt">
            <summary>
              Looks up a localized string similar to {0} started at {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Log_Waiting">
            <summary>
              Looks up a localized string similar to {0} waiting for completion signal at {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_SetFilter">
            <summary>
              Looks up a localized string similar to Set Filter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_SetGroupByOption">
            <summary>
              Looks up a localized string similar to Set Groupby Option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_SetOptions">
            <summary>
              Looks up a localized string similar to Set Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_SetSource">
            <summary>
              Looks up a localized string similar to Set Source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_SetTarget">
            <summary>
              Looks up a localized string similar to Set Target.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_Switch">
            <summary>
              Looks up a localized string similar to Switch.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_ToggleObjects">
            <summary>
              Looks up a localized string similar to Toggle Objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Command_UpdateTarget">
            <summary>
              Looks up a localized string similar to Update Target.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.DataCompressionOption">
            <summary>
              Looks up a localized string similar to Data Compression Option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.DataCompressionOptions">
            <summary>
              Looks up a localized string similar to Data Compression Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.DataType">
            <summary>
              Looks up a localized string similar to Data Type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.ExecuteAs">
            <summary>
              Looks up a localized string similar to Execute As.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Identity">
            <summary>
              Looks up a localized string similar to Identity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.IncompatObjectWhenAllowIncompatOptionIsNotSelected">
            <summary>
              Looks up a localized string similar to Some objects in source are not supported in the target platform. Please refer to errors in the error list. If you want to continue this operation, please check &quot;Allow incompatible platform&quot; in Schema Compare Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.IncompatObjectWithAllowIncompatSelected">
            <summary>
              Looks up a localized string similar to Some objects in source are not supported in the target platform. Please refer to errors in the error list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.IndexedColumns">
            <summary>
              Looks up a localized string similar to Indexed Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.MasterDatabaseRequiresServerPermission">
            <summary>
              Looks up a localized string similar to Comparing the master database requires VIEW ANY DEFINITION permission..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.NoAction">
            <summary>
              Looks up a localized string similar to No Action.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.None">
            <summary>
              Looks up a localized string similar to &lt;None&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.Orphaned">
            <summary>
              Looks up a localized string similar to &lt;Orphaned&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.PropertiesAndRelationships">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_BadDacFileDNE">
            <summary>
              Looks up a localized string similar to Schema Compare does not support the specified Data-tier Application file. The file does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CancelingOperations">
            <summary>
              Looks up a localized string similar to Stopping....
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotFindElement">
            <summary>
              Looks up a localized string similar to Cannot find the element {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotGenerateDeploymentPlan">
            <summary>
              Looks up a localized string similar to Cannot generate deployment plan due to an internal error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotGenerateDeploymentPlanUnknownReason">
            <summary>
              Looks up a localized string similar to Cannot generate deployment plan due to an internal error..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotGenerateScript">
            <summary>
              Looks up a localized string similar to Cannot generate script due to an internal error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotGenerateScriptNoDeploymentPlan">
            <summary>
              Looks up a localized string similar to Cannot generate script as no deployment plan was available..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotPerformComparison">
            <summary>
              Looks up a localized string similar to Cannot perform comparison due to an internal error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotUpdateTarget">
            <summary>
              Looks up a localized string similar to Cannot update target due to an internal error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_CannotUpdateTargetNoDeploymentPlan">
            <summary>
              Looks up a localized string similar to Cannot update target as no deployment plan was available..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_ConnectionBased_DatabasePermissionsMissing_Source">
            <summary>
              Looks up a localized string similar to Cannot read database model for the source. The login for does not have the required permissions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_ConnectionBased_DatabasePermissionsMissing_Target">
            <summary>
              Looks up a localized string similar to Cannot read database model for the target. The login for does not have the required permissions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_ConnectionBased_ServerPermissionsMissing_Source">
            <summary>
              Looks up a localized string similar to Cannot read database model for the source. The login for does not have the VIEW ANY DEFINITION permission..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_ConnectionBased_ServerPermissionsMissing_Target">
            <summary>
              Looks up a localized string similar to Cannot read database model for the target. The login for does not have the VIEW ANY DEFINITION permission..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_DDL_Template">
            <summary>
              Looks up a localized string similar to {0}_Update.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_DeserializeSourceProviderError">
            <summary>
              Looks up a localized string similar to The serialized source failed to deserialize.  Enable tracing for details..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_DeserializeTargetProviderError">
            <summary>
              Looks up a localized string similar to The serialized target failed to deserialize.  Enable tracing for details..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_FileVersionIsDifferent_error">
            <summary>
              Looks up a localized string similar to The Schema Compare file cannot be loaded because this version of the file is not supported by this release..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_FileVersionIsMissing_error">
            <summary>
              Looks up a localized string similar to The Schema Compare file cannot be loaded because it does not contain version information..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_MissingSourceAzureServerPermissions">
            <summary>
              Looks up a localized string similar to The source login in not a member of the &apos;loginmanager&apos; role. The comparison will be restricted to database scoped elements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_MissingTargetAzureServerPermissions">
            <summary>
              Looks up a localized string similar to The target login in not a member of the &apos;loginmanager&apos; role. The comparison will be restricted to database scoped elements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_PopulationException_Source">
            <summary>
              Looks up a localized string similar to Unexpected exception caught during population of source model: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_PopulationException_Target">
            <summary>
              Looks up a localized string similar to Unexpected exception caught during population of target model: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_StateStatus_SourceParticipantChanged">
            <summary>
              Looks up a localized string similar to A different source schema has been selected.  Press Compare to see the comparison..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompare_StateStatus_TargetParticipantChanged">
            <summary>
              Looks up a localized string similar to A different target schema has been selected.  Press Compare to see the comparison..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareObjectId_InvalidTypeName0">
            <summary>
              Looks up a localized string similar to The type name &apos;{0}&apos; is not a valid, known type name..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareObjectId_NoExternalNamePartsAllowed">
            <summary>
              Looks up a localized string similar to Objects referenced by SchemaComparisonExcludedObjectId cannot have external name parts..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareObjectId_NoNullOrEmptyNamePartsAllowed">
            <summary>
              Looks up a localized string similar to Objects referenced by SchemaComparisonExcludedObjectId must not have name parts that are null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareObjectId_ObjectMustHaveName">
            <summary>
              Looks up a localized string similar to Objects referenced by SchemaComparisonExcludedObjectId must have name parts..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_CannotParse">
            <summary>
              Looks up a localized string similar to Cannot parse {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_DacPacDoesNotExist">
            <summary>
              Looks up a localized string similar to The DAC file {0} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_EmptyElement">
            <summary>
              Looks up a localized string similar to Expected non-empty text for node {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_ErrorSerializing">
            <summary>
              Looks up a localized string similar to An error occured while attempting to serialize the document..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_ExceptionWhileSerializing">
            <summary>
              Looks up a localized string similar to An exception occurred trying to read/write the Schema Compare document.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_IncorrectSCMPFileFormat">
            <summary>
              Looks up a localized string similar to The SCMP file is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_MissingAttribute">
            <summary>
              Looks up a localized string similar to Expecting node {0} to have an attribute of name {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_MissingElement">
            <summary>
              Looks up a localized string similar to Expecting node {0} to have a child element of name {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_NonValidXML">
            <summary>
              Looks up a localized string similar to There was an error reading the XML file at line number {0}, position {1}.  {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaCompareSerialization_Unexpected">
            <summary>
              Looks up a localized string similar to Unexpected element {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaDependencyAddChangeInfoMessage">
            <summary>
              Looks up a localized string similar to {1} ({0}) depends on {3} ({2}). {3} must be updated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchemaDependencyDeleteInfoMessage">
            <summary>
              Looks up a localized string similar to {3} ({2}) depends on {1} ({0}). {3} must be updated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SchmeaCompare_IsNotEnabled">
            <summary>
              Looks up a localized string similar to {0} is not enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SecurityPredicates">
            <summary>
              Looks up a localized string similar to Predicates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SourceServerPermissionsMissing">
            <summary>
              Looks up a localized string similar to The login for the source does not have the VIEW ANY DEFINITION permission. The comparison will be restricted to database scoped elements if the target is a database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SqlTask_InvalidDiffEntryType">
            <summary>
              Looks up a localized string similar to Hierarchy in XSD file is invalid, the DiffEntryType element should be nested in a GroupType element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SqlTask_InvalidGroupType">
            <summary>
              Looks up a localized string similar to Hierarchy in XSD file is invalid, the GroupType element should be nested in a ResultType element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SqlTask_InvalidResultType">
            <summary>
              Looks up a localized string similar to Hierarchy in XSD file is invalid, the ResultType element should be on the top..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SqlTask_InvalidSchema">
            <summary>
              Looks up a localized string similar to XML schema is null  or does not contain any element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.SqlTask_MissResultTypeElement">
            <summary>
              Looks up a localized string similar to Hierarchy in XSD file is invalid, it should contain a ResultType element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaCompare.SchemaCompareResource.TargetServerPerimssionsMissing">
            <summary>
              Looks up a localized string similar to The login for the target does not have the VIEW ANY DEFINITION permission. The comparison will be restricted to database scoped elements if the source is a database..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AlterStatementsFilterSchemaAnalyzer">
            <summary>
            The Schema Analyzer that filters out model-building related message (IdentifiedElement and IdentifiedRelationship) for ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AnnotationPopulators.ColumnDefinition90AnnotationPopulator">
            <summary>
            This class populates the properties for a SqlColumn
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AnnotationPopulators.SqlAnnotationPopulator">
            <summary>
            The visitor that adds annoations to the given holder.  
            </summary>   
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AnnotationPopulators.SqlAnnotationPopulator.Annotate">
            <summary>
            Performs the actual annotating
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper">
            <summary>
            Holds the data associated with a SqlClr assembly which is to
            be added to the schema manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.CanWrap(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Can this wrapper wrap this custom schema data?
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.CustomSchemaData">
            <summary>
            Returns the custom schema data we wrap
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.CanonicalizedFileName">
            <summary>
            The canonicalized file path.  This can be used as the key or one
            of the keys when comparing custom schema datas.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.AssemblyName">
            <summary>
            The Sql Assembly Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.PermissionSet">
            <summary>
            The Sql Assembly PermissionSet
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.Owner">
            <summary>
            The Sql Assembly Owner
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyCustomSchemaDataWrapper.RetrieveAssemblyName(System.String)">
            <summary>
            Gets the assembly name from the specified assembly or returns null if the
            file is not an assembly
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AssemblyDependencyManager">
            <summary>
            This class constructs assembly dependency relationship
            </summary>
            <summary>
            The portion of class AssemblyDependencyManager to handle persistency
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AutoGenerationType">
            <summary>
            Enumeration to describe what part of an element is auto-generated by a model builder.
            </summary>
            <remarks>
            This is used by a model builder to indicate what properties of an element where auto generated. 
            The Reverse Engineer model builder annotates encrypted sys comment objects.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyComparerException">
            <summary>
            This exception is used when two CLR assemblies are compared.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyMetaData.RvaToOffset(System.UInt32)">
            <summary>
            Converts relative virtual addresses to physical offsets.
            </summary>
            <param name="rva"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyMetaData.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructs the AssemblyMetaData class. 
            </summary>
            <param name="binaryReader"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyMetaData.GetStringFromStringStream(System.Int32)">
            <summary>
            Gets a UTF8 string from the string stream (note that the string stream might not be contiguous and
            may contain all kinds of stuff)
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyMetaData.GetBlobFromBlobStream(System.Int32,System.IO.BinaryReader)">
            <summary>
            Gets a binary blob from the blob stream. (note that the blob stream might not be contiguous and
            may contain all kinds of stuff)
            </summary>
            <param name="offset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ClrAssemblyReader.ClrAssemblyMetaData.GetPEHeaderOffset(System.UInt32,System.IO.BinaryReader)">
            <summary>
            Gets the PE file header offset from the dos stub
            </summary>
            <param name="dosStubOffset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnsInPrimaryKeysLookupHelper">
            <summary>
            The class to check whether a column is used inside a primary key
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource">
            <summary>
            This class represents a source of columns
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource._isVariable">
            <summary>
            Holds whether this is a variable source (FROM #tbl)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource.IsVariable">
            <summary>
            Gets whether this is a variable source (FROM #tbl)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource.StripWildcardExpansionRights" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource.MarkAsAmbigousSchemaName">
            <summary>
            Marks this source as having an ambigous schema name
            </summary>
            <remarks>The reason why this is a method instead of a setter property is because having it as a
            method will make it easier to track where we mark the source as such
            We only want to mark the source as having an ambigous schema in very select places (pun intended)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource.GetEffectiveAffinity(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor)">
            <summary>
            Return affinity for column potential that should be used for a resolved column potential
            in the context of this <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource"/> instance.
            </summary>
            <param name="potential">
            <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor"/> instance that represents a potential for a column.
            </param>
            <returns>
            Either affinity of potential, or an adjusted value based on the affinity of the current <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource"/> instance.
            </returns>
            <remarks>
            This implementation always returns the affinity of the potential.
            </remarks>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.GetEffectiveAffinity(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor)"/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror">
            <summary>
            This class represents a mirrored column source
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror._target">
            <summary>
            Mirror target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.IsCommonTableExpression">
            <summary>
            Gets whether the mirrored object is a CTE
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.HasKnownColumns">
            <summary>
            Gets whether there are known columns or not
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.TargetDescriptor">
            <summary>
            Gets the descriptor of the mirror
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.ExposedName">
            <summary>
            Gets the final name for the source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.IsVariable">
            <summary>
            Gets whether the mirrored object is a variable source (FROM #tbl)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="target">ColumnSource to mirror</param>
            <param name="affinity">Affinity of the source</param>
            <param name="memberOfWildcardExpansion">Whether or not this source plays a role in wildcard expansion</param>
            <param name="isCTE">Whether or not this is a CTE</param>
            <param name="alias">Alias for the source</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.Clone">
            <summary>
            Clones the source
            </summary>
            <returns>Return a new instance of this object</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.AddKnownColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor)">
            <summary>
            Adds a known column to the ColumnSource
            </summary>
            <param name="resolvedColumn">ResolvedColumn to add</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.AddKnownColumn(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor})">
            <summary>
            Adds multiple known columns to the columnSource
            </summary>
            <param name="resolvedColumns">Known columns to add</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSourceMirror.GetEffectiveAffinity(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor)">
             <summary>
             Return affinity for column potential that should be used for a resolved column potential
             in the context of this <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource"/> instance.
             </summary>
             <param name="potential">
             <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor"/> instance that represents a potential for a column.
             </param>
             <returns>
             Either affinity of potential, or an adjusted value based on the affinity of the current <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource"/> instance.
             </returns>
             <remarks>
             When the affinity of the potential is less than the affinity of the column source,
             adjust affinity of potential to match affinity "level" of column source.
             
             Each "level" of affinity has two values, and the affinity values start at zero.
             Example: Zero and one are level zero, two and three are level one, etc.
             These levels represent levels of nesting of query specifications where these column sources and columns occur.
            
             Within each level, the lower value represents a potential for an object in the default schema, such as "dbo.Table1.C1",
             and the higher value represents a potential for an object in the containing schema, such as "Schema1.Table1.C1".
            
             We need to increase the affinity of the potential to "bring it up to" the level of the column source,
             while maintaining the relative affinity based on the schema.
            
             Example:
             If the column source affinity is three (level one), and there are two potentials with affinities of zero and one (level zero),
             we need to adjust the affinities of the potentials to two and three (level one), respectively.
             </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateExternalUserMode">
            <summary>
            Used to select whether script-generation creates Azure Active Directory users
            with "FROM EXTERNAL PROVIDER" or SID/Type syntax (in the event that both SID and Type are known).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateExternalUserMode.SidAndType">
            <summary>
            Generated Create User statement will use WITH SID = 0x0..., TYPE=E syntax
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateExternalUserMode.FromExternalProvider">
            <summary>
            Generated Create User statement will use FROM EXTERNAL PROVIDER syntax
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateSchemaObjectAction">
            <summary>
            This class gets the information for each of the schema objects based on the R/E Request
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode">
            <summary>
            Defines various flavors for how constraints are generated within a CREATE TABLE statement.
            </summary>
            <remarks>
            Update SqlScriptDomGenerator.InlineConstraintsOption.GetOptionFlagsFromMode() changing this definition.
            All values in this enum must map to some combination of InlineConstraintsOption flags.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode.None">
            <summary>
            No constraints are generated inline.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode.ModelFidelity">
            <summary>
            Constraint elements annotated with SqlInlineConstraintAnnotation will be generated inline.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode.Deployment">
            <summary>
            Generates primary-key and unique-key constraints inline and never as part of a column definition.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode.Import">
            <summary>
            Inlines all constraint elements and ignores column associations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode.MemoryOptimizedMigration">
            <summary>
            Used for data migration in data motion script in case of memory optimized tables.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializer">
            <summary>
            This class unpacks a legacy dacpac of version 1.0, 1.05, 1.1, or 2.0 and constructs an SQL 11 model 
            to represent the database schema captured inside the dacpac.
            
            Notice that the model is not a full-blown model, and the model is intended to be used to generate
            T-SQL scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializer.PendingRelationship.#ctor(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.String)">
            <summary>
            Elements from both sides are not determined
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializer.PendingRelationship.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.String)">
            <summary>
            Element from RHS is not determined
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializer.PendingRelationship.#ctor(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Element from LHS is not determined
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.EmptyKey">
            <summary>
              Looks up a localized string similar to &lt;empty key&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_IncorrectNumberOfNameParts">
            <summary>
              Looks up a localized string similar to The name for {0} &quot;{1}&quot; has {2} part(s) while it should have {3} part(s)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_IncorrectNumberOfTypeParts">
            <summary>
              Looks up a localized string similar to The type for {0} &quot;{1}&quot; has {2} part(s) while it should have {3} part(s)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_InlineFunctionWithoutReturn">
            <summary>
              Looks up a localized string similar to The inline function &quot;{0}&quot; should start with RETURN..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_MissingOrCorruptedMember">
            <summary>
              Looks up a localized string similar to The member &quot;{0}&quot; is missing or corrupted for the element &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_NoPermissionFound">
            <summary>
              Looks up a localized string similar to Permission &quot;{0}&quot; is not found for element with a key of &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_NoPermissionsForSecurable">
            <summary>
              Looks up a localized string similar to Cannot find permissions defined for {0} that is to be revoked..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_UnknownHostForCheckConstraint">
            <summary>
              Looks up a localized string similar to The check constraint &quot;{0}&quot; has an unknown host type: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_UnknownHostForDefaultConstraint">
            <summary>
              Looks up a localized string similar to The default constraint &quot;{0}&quot; has an unknown host type: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.DacDeserializerResources.LegacyDacpacError_UnknownPermissionAction">
            <summary>
              Looks up a localized string similar to The element &quot;{0}&quot; has an unknown permission action: {1}..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacHelper">
            <summary>
            This class unpacks a legacy dacpac of version 1.0, 1.05, 1.1, or 2.0 and 
            1. creates T-SQL scripts to represent the database schema captured inside the dacpac, or
            2. creates a full-fledged schema model by applying the normal model building pipeline on the scripts extracted from a dacpac
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException">
            <summary>
            Exception class for DAC de-serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException.#ctor(System.Exception)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException.#ctor(System.String)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DacSerialization.LegacyDacpacException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataItem">
            <summary>
            This class represents the object which is serialized/deserialized in OfflineSqlReader mode
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataItem.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a DataItem object that is to be serialized
            </summary>
            <param name="name"></param>
            <param name="sqlTypeName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataItem.#ctor(System.Xml.XmlTextReader)">
            <summary>
            Creates a DataItem object from the Reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes a DataItem object by writing into XML
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataTypeAnnotation">
            <summary>
            This annotation denotes the dependency on a SqlDatatype
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DataTypeAnnotation.GetPossibleTargets(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement@,System.Boolean@)">
            <summary>
            Gets all objects this annotation could be pointing to 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer._trailer">
            <summary>
            Next SA
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.Trailer">
            <summary>
            Gets or sets the trailing analyzers
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.HasTrailer">
            <summary>
            Gets whether there is a trailer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.BeginBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            This method handles pre-batchprocessing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.EndBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            This method handles post-batchprocessing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.BeginDdlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles pre-DDL statement processing 
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.EndDdlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles post-DDL statement processing
            </summary>
            <param name="fragment">Node that was processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.IdentifiedElement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            This method handles the discovery of a new Symbol
            </summary>
            <param name="fragment">Fragment the symbol belongs to</param>
            <param name="sqlElementDescriptor">The element descriptor</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.IdentifiedSupportingStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            This method handles the supporting statements
            </summary>
            <param name="fragment"></param>
            <param name="sqlElementDescriptor"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.IdentifiedRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.IdentifiedAmbiguousRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.BeginDmlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles the pre-DML statement processing
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.EndDmlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles the post-DML statement processing
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.VisitFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorRelevance)">
            <summary>
            This method handles additional processing required for a node/schemaidentifier
            </summary>
            <param name="fragment">Node to be processed</param>
            <param name="sqlElementDescriptor">Descriptor to be processed</param>
            <param name="relevance">Relevance</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DecoratableSchemaAnalyzer.VisitAmbiguousFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            This method handles additional processing required for a node/schemaidentifier
            </summary>
            <param name="fragment">Node to be processed</param>
            <param name="possibilities">An enumerable of possible hits</param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DefaultResilienceStrategy.DefaultRetriesPerPhase">
            <summary>
            Deprecated - constant is no longer used but maintained for binary compatibility with SSDT
            Defect 1090970 covers how this should be removed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DefaultResilienceStrategy.RetryPolicy">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DefaultResilienceStrategy.RegisterOn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer,System.Int32)">
            <summary>
            </summary>
            <param name="re"></param>
            <param name="retriesPerPhase">
            Deprecated - parameter is no longer used but maintained for binary compatibility with SSDT. 
            Defect 1090970 covers how this should be removed
            </param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DeleteActions">
            <summary>
            This class has the actions that are applied when a qualifying element is deleted.
            The actions are evaluated and initialized lazily depending on the element class of the deleted item.
            First inlude types are looked at, if any of them is a base, and non of the excludes disqualify, the given delete action is 
            applied to the element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ElementID">
            <summary>
            This class is used by Reverse engineering to detect when we are moving to
            a new database object.  The main reason it is in its own class is because
            objectid wasn't enough to detect that a stored proc is different because of
            numbered stored procs.  So there is another class that inherits from this one
            called ProcedureElementID that provides the details for knowing when a
            we are dealing with a new stored proc as we are fetching data during RE.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FileTableSystemGeneratedConstraintType">
            <summary>
            Enumeration used to mark the system-defined elements associated with a FileTable element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FileTableSystemGeneratedConstraintType.GenericConstraint">
            <summary>
            Used to mark system-defined objects created during FileTable construction
            that don't require any special handling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FileTableSystemGeneratedConstraintType.PrimaryKeyConstraint">
            <summary>
            Primary key of the FileTable; defined against the path_locator column.
            The element can be named by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FileTableSystemGeneratedConstraintType.FullPathUniqueConstraint">
            <summary>
            Unique constraint on the parent_path_locator and name columns.
            The element can be named by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FileTableSystemGeneratedConstraintType.StreamIdUniqueConstraint">
            <summary>
            Unique constraint on the stream_id column.
            The element can be named by the user.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.FindChildFragmentVisitor">
            <summary>
            Helper visitor that used to find a matching child fragment from parent ast.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportConstants.ScriptableModelElementTypes">
            <summary>
            Don't alter the list of these elements.  This affects the order of creation.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.Canceled">
            <summary>
            Raises when the job is canceled
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.MessageGenerated">
            <summary>
            Raised when this job has a message for the caller
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.Progress">
            <summary>
            Progress
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.#ctor(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer,System.String,System.Text.Encoding,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor for ImportScriptJob
            </summary>
            <param name="dsp">The DSP of the target model</param>
            <param name="comparer">The comparison manager</param>
            <param name="scriptFileName">The full path filename for the script to import</param>
            <param name="scriptEncoding">The encoding of the script file</param>
            <param name="quotedIdentifier">Quoted Identifier status</param>
            <param name="defaultSchema">The default schema for objects</param>
            <param name="ignoreExtendedProperties">Ignore extended properties?</param>
            <param name="ignorePermissions">Ignore permissions?</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.ElementResults">
            <summary>
            These are the scripts that represent schema objects
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.ScriptResults">
            <summary>
            These are the scripts that should be routed to the pre/post
            deployment areas.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.ScriptToImport">
            <summary>
            Returns the script we need to import
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.ThrownException">
            <summary>
            This is the exception thrown during the operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.Run">
            <summary>
            Run this job - this kicks off import
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.DoImportScript">
            <summary>
            Actually do the import
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.RaiseCancelEvent">
            <summary>
            Raises the cancel event
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.RaiseMessageEvent(Microsoft.Data.Tools.Schema.Sql.MessageGeneratedEventArgs)">
            <summary>
            Raises the Message event
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ImportScriptJob.RaiseProgressEvent(Microsoft.Data.Tools.Schema.Sql.ProgressEventArgs)">
            <summary>
            Raises the progress event
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError">
            <summary>
            Class to represent the errors specific to interpretation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.CreateErrorForMissingArgument(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            factory method to create an interpretation error for MissingArgument error
            </summary>
            <param name="fragment"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.CreateErrorForInvalidArgument(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            factory method to create an interpretation error for InvalidArgument error
            </summary>
            <param name="fragment"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.CreateArgumentError(System.String,System.Int32,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            create an interpretation error for argument error
            </summary>
            <param name="fragment"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.ParseErrors">
            <summary>
            Gets list of the ParseErrors generated by the parser; the value can be null if no ParseError presented
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.ArgumentName">
            <summary>
            Gets the argument name associated with the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError.RelatedToElement">
            <summary>
            Gets or sets element to which errors is related. Can be null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AlterDbAddFileStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the ADD FILE / ADD LOG FILE part of ALTER DATABASE statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AlterDbAddFileStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer and SqlInterpretationHelper provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AlterFullTextIndexStatementInterpretationVisitor">
             <summary>
            ALTER FULLTEXT INDEX ON table_name
               { ENABLE 
               | DISABLE
               | SET CHANGE_TRACKING { MANUAL | AUTO | OFF }
               | ADD ( column_name 
                 [ TYPE COLUMN type_column_name ] 
                 [ LANGUAGE language_term ] [,...n] )
                 [ WITH NO POPULATION ]
               | DROP ( column_name [,...n] )
                 [WITH NO POPULATION ] 
               | START { FULL | INCREMENTAL | UPDATE } POPULATION
               | { STOP | PAUSE | RESUME } POPULATION 
               }
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AlterFullTextIndexStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AlterUserStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterUserStatement)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ApplicationRoleStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateApplicationRoleStatement)">
            <summary>
            CREATE APPLICATION ROLE application_role_name WITH PASSWORD = 'password' [ , DEFAULT_SCHEMA = schema_name ]
            </summary>
            <param name="statement">Node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor">
            <summary>
            This class handles the interpretation of AssemblyStatements
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor._isCreation">
            <summary>
            Holds whether we are in a creation statement or not
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor._assembly">
            <summary>
            Holds the assembly referenced
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateAssemblyStatement)">
            <summary>
            Performs visitation on CreateAssemblyStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterAssemblyStatement)">
            <summary>
            Performs visitation on AlterAssemblyStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropAssemblyStatement)">
            <summary>
            Performs visitation on DropAssemblyStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AssemblyInterpretationVisitor.VisitAssemblyStatementBase(Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyStatement)">
            <summary>
            Handles both Create and Alter assembly 
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.AsymmetricKeyStatementsInterpretationVisitor90">
             <summary>
             CREATE ASYMMETRIC KEY Asym_Key_Name [ AUTHORIZATION database_principal_name ]
              {
                  FROM &lt;Asym_Key_Source&gt;
                  |
                  WITH ALGORITHM = { RSA_512 | RSA_1024 | RSA_2048 }
               }
               ENCRYPTION BY PASSWORD = 'password' 
            
            &lt;Asym_Key_Source&gt;::=
               FILE = 'path_to_strong-name_file'
               |
               EXECUTABLE FILE = 'path_to_executable_file'
               |
               ASSEMBLY Assembly_Name
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.BodyDependencyInterpretationVisitor">
            <summary>
            This class is responsible for making sure that we track the body dependencies
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.BodyDependencyInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="Analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.BodyDependencyInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.StatementList)">
            <summary>
            visits the body of the object 
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor._certificateDescriptor">
            <summary>
            Descriptor for the current certificate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.Certificate">
            <summary>
            Gets the descriptor for the current certificate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCertificateStatement)">
            <summary>
            Clear the certificate descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCertificateStatement)">
            <summary>
            Visits the CreateCertificateStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyEncryptionSource)">
            <summary>
            avoid visiting children
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CertificateStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyEncryptionSource)">
            <summary>
            establish relationship to assembly encryption source
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ColumnEncryptionKeyStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnEncryptionKeyStatement)">
            <summary>
            CREATE COLUMN ENCRYPTION KEY [key_name] statement
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ColumnMasterKeyStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnMasterKeyStatement)">
            <summary>
            CREATE COLUMN MASTER KEY [key_name] statement
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateAggregateStatement
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor._aggregateDescriptor">
            <summary>
            Descriptor for the current aggregate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor.Aggregate">
            <summary>
            Gets the descriptor for the current aggregate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateAggregateStatement)">
            <summary>
            Clear the aggregate descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateAggregateStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateAggregateStatement)">
            <summary>
            Visits the CreateAggregateStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateDefaultStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateDefaultStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateDefaultStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateEventNotificationStatementInterpretationVisitor">
             <summary>
             CREATE EVENT NOTIFICATION event_notification_name 
            ON { SERVER | DATABASE | QUEUE queue_name } 
            [ WITH FAN_IN ]
            FOR { event_type | event_group } [ ,...n ]
            TO SERVICE 'broker_service' , { 'broker_instance_specifier' | 'current database' }
            [ ; ]
             </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateEventNotificationStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateFullTextIndexStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateFullTextIndexStatement)">
             <summary>
             CREATE FULLTEXT INDEX ON table_name
            [(column_name [TYPE COLUMN type_column_name] 
                 [LANGUAGE language_term] [,...n])]
            KEY INDEX index_name
                 [ON fulltext_catalog_name]
            [WITH 
                 {CHANGE_TRACKING {MANUAL | AUTO | OFF [, NO POPULATION]}}
            ]
             </summary>
             <param name="statement"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateIndexStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer and SqlInterpretationHelper provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.Index">
            <summary>
            the descriptor for the index
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.IndexedObject">
            <summary>
            the descriptor for the indexed object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.InterpretCreateIndex(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,System.Type,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Interpret index creation against a column source in order
            to create the index model element and relationship to the indexed object.
            </summary>
            <param name="createIndexNode">
            Statement that corresponds to the CREATE INDEX statement.
            </param>
            <param name="indexOnName">
            Name of the indexed object.
            </param>
            <param name="indexName">
            Name of the index.
            </param>
            <param name="indexElementType">
            Element type of the index.
            </param>
            <param name="indexedObjectClass">
            Class of the relationship from index to indexed object.
            </param>
            <remarks>
            This method sets the <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.Index"/> and <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor.IndexedObject"/> properties of this instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateIndexStatementInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer and SqlInterpretationHelper provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateRuleStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateRuleStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateRuleStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateSelectiveXMLIndexStatementInterpretationVisitor110">
            <summary>
            This class handles the interpretation of CreateSelectiveXmlIndexStatement
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateStatisticsStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CREATE STATISTICS statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateStatisticsStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateUserStatementInterpretationVisitor.CreateLoginRelationshipFromUserName">
            <summary>
            Get or set boolean that specifies if a relationship from user to login
            should be created in the visitation of the <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateUserStatementInterpretationVisitor.UserStatement"/>,
            using the user name to implicitly specify the login (as opposed to using the FOR LOGIN syntax).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateUserStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateUserStatement)">
             <summary>
             CREATE USER user_name 
            [ { { FOR | FROM }
              { 
                LOGIN login_name 
                | CERTIFICATE cert_name 
                | ASYMMETRIC KEY asym_key_name
              } 
              | WITHOUT LOGIN
            ] 
            [ WITH DEFAULT_SCHEMA = schema_name ]
             </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateXMLIndexStatementInterpretationVisitor160">
            <summary>
            This class handles the interpretation of the CreateXmlIndexStatement
            Inherits from SqlInterpretationVisitor so that we can interpret the FileGroupOrPartitionScheme which is inherited from SqlInterpretationVisitor like all other classes
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateXMLIndexStatementInterpretationVisitor160.XmlIndex">
            <summary>
            the descriptor for the xml index
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CreateXMLIndexStatementInterpretationVisitor160.XmlIndexedObject">
            <summary>
            the descriptor for the indexed object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CredentialStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCredentialStatement)">
            <summary>
            CREATE ROLE role_name [ AUTHORIZATION owner_name ]
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.CteInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.XmlNamespaces)">
            <summary>
            Visits the XmlNameSpaces (WITH XMLNAMESPACE ...)
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DatabaseCredentialStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCredentialStatement)">
            <summary>
            CREATE DATABASE SCOPED CREDENTIAL
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExistsPredicate)">
            <summary>
            Creates a new DML visitor for the subQuery
            </summary>
            <param name="node">node to visit</param>
            <remarks>Overridden in the DML visitor</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.InPredicate)">
            <summary>
            Creates a new DML visitor for the subQuery
            </summary>
            <param name="node">node to visit</param>
            <remarks>Overridden in the DML visitor</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SimpleCaseExpression)">
            <summary>
            Interprets the CaseExpression
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ResolveColumnAliasAgainstSelectColumns(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor})">
            <summary>
            Get possible potential element descriptors for a column alias against select columns
            </summary>
            <param name="column"></param>
            <param name="selectColumns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Visits the FunctionCall
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UserDefinedTypePropertyAccess)">
            <summary>
            Visits the UDT property access
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.OrderByColumnFilter">
            <summary>
            Compares column potentials used in ORDER BY clause against SELECT column potentials.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.OrderByColumnFilter._selectColumnPotentials">
            <summary>
            Set of potentials for explicit column references in SELECT statement.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.OrderByColumnFilter._selectColumnSourcePotentials">
            <summary>
            List of potentials for column sources referenced in SELECT statement.
            These potentials are generated when a wildcard (*) is used in the SELECT.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlCommonPhrasesInterpretationVisitor90.OrderByColumnFilter.FilterColumnPotentials(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Determine list of column potentials that match potentials generated from column references in corresponding SELECT statement.
            </summary>
            <param name="columnPotentials">
            List of column potentials
            </param>
            <returns>
            List of column potentials with matching potential from SELECT column.
            If there are no matching potentials, an empty list is returned.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DmlSubExpressionDependencyInterpretationVisitor110">
            <summary>
            Visits expression nodes to identify any element dependencies.
            </summary>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.InterpretDependenciesInSubExpression(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)"/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.DynamicTableInterpretationVisitor">
            <summary>
            Class to interpret temp table and variable table
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors">
            <summary>
            handles interpretation of CREATE /ALTER END POINT statements
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors._endpointDescriptor">
            <summary>
            Descriptor for the current end point
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors._languageSpecifierDescriptor">
            <summary>
            Descriptor for the language specifier of the current end point
            it exists for SOAP, SERVICE_BROKER, and DATABASE_MIRRORING, but not for TSQL 
            it is mainly used to establish relationship from language specifier to certificate for SERVICE_BROKER and DATABASE_MIRRORING
            it is also used to establish relationship from language specifier to soap methods for SOAP
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors._languageSpecifier_certificate">
            <summary>
            Relationship class from language specifier to certificate
            this data member is used to establish relationship from language specifier to certificate
            only SERVICE_BROKER and DATABASE_MIRRORING can have certificate as authentication method
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors._isCreate">
            <summary>
            Set to true if the current statement is a CREATE ENDPOINT statement
            Set to false if the current statement is an ALTER ENDPOINT statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.Endpoint">
            <summary>
            Gets the descriptor for the current endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.LanguageSpecifier_Certificate">
            <summary>
            Gets the relationship class from language specifier to certificate
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.LanguageSpecifier">
            <summary>
            Gets the descriptor for the language specifer of the current endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.IsCreate">
            <summary>
            Check if the current statement is a CREATE ENDPOINT statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateEndpointStatement)">
            <summary>
            Visits the CreateEndpointStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.EndpointStatementsInterpretationVisitors.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterEndpointStatement)">
            <summary>
            Visits the AlterEndpointStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExecuteStatementInterpretationVisitor">
             <summary>
             Interprets the ExecuteStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>
             [ { EXEC | EXECUTE } ]
              { 
                  [ @return_status = ]
                  { module_name [ ;number ] | @module_name_var } 
                    [ [ @parameter = ] { value 
                                       | @variable [ OUTPUT ] 
                                       | [ DEFAULT ] 
                                       }
                    ]
                  [ ,...n ]
                  [ WITH RECOMPILE ]
                }
            [;]
            
            Execute a character string
            { EXEC | EXECUTE } 
                    ( { @string_variable | [ N ]'tsql_string' } [ + ...n ] )
                [ AS { LOGIN | USER } = ' name ' ]
            [;]
            
            Execute a pass-through command against a linked server
            { EXEC | EXECUTE }
                    ( { @string_variable | [ N ] 'command_string' } [ + ...n ]
                    [ {, { value | @variable [ OUTPUT ] } } [...n] ]
                    ) 
                [ AS { LOGIN | USER } = ' name ' ]
                [ AT linked_server_name ]
            [;]
             </example>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExecuteStatementInterpretationVisitor110">
            <summary>
            Adds interpretation of WITH RESULTS SETS clause to base class interpretation of EXECUTE statement.
            </summary>
            <remarks>
            Interpretation of WITH RESULTS SETS identifies the following fragments:
            1. ISqlColumnSource specified with WITH RESULT SETS ( AS OBJECT SomeColumnSource )
            2. SqlTableType specified with WITH RESULT SETS ( AS TYPE SomeTableType )
            3. Column data type specified with WITH RESULTS SETS ( (C1 int, C2 MyUDDT) )
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor">
            <summary>
            ExternalDataSourceStatementsInterpretationVisitor class that implements the visitor design pattern
            to interpret the CreateExternalDataSourceStatement AST node and create a Schema model element for it.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor.ExternalDataSourceDescriptor">
            <summary>
            External data source model element descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Interprets the CreateExternalDataSourceStatement AST node and creates a Schema model element for it.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalDataSourceStatement)">
            <summary>
            Interprets the AlterExternalDataSourceStatement AST node and creates a Schema model element for it.
            </summary>
            <param name="node">The AlterExternalDataSourceStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalDataSourceStatementsInterpretationVisitor.VisitExternalDataSourceStatement(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceStatement,System.Boolean)">
            <summary>
            Interprets the ExternalDataSourceStatement AST node and creates a Schema model element for it.
            This method is called when the CreateExternalDataSource or the AlterExternalDataSource AST nodes are interpreted.
            For the create case, a new model element is created and its properties are populated.
            For the alter case, we want to validate an existing model element.  Also, for relationships we don't want to validate related model elements,
            as they might not exist in the current model.  This is only true for the alter case and not for the create case, where we do validate relationships.
            </summary>
            <param name="node">The ExternalDataSourceStatement AST node.</param>
            <param name="isCreate">A flag to determine if this is a create external data source or an alter external data source scenario.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalFileFormatStatementsInterpretationVisitor">
            <summary>
            ExternalFileFormatStatementsInterpretationVisitor class that implements the visitor design pattern
            to interpret the CreateExternalFileFormatStatement AST node and create a Schema model element for it.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalFileFormatStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalFileFormatStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Interprets the CreateExternalFileFormatStatement AST node and creates a Schema model element for it.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as there are no additional processing required for child nodes.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalLanguageStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalLibraryStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamingJobStatementsInterpretationVisitor">
            <summary>
            ExternalStreamingJobStatementsInterpretationVisitor class that implements the visitor design pattern
            to interpret the CreateExternalStreamingJobStatement AST node and create a Schema model element for it.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamingJobStatementsInterpretationVisitor.ExternalStreamingJobDescriptor">
            <summary>
            External streaming job model element descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamingJobStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">SQL schema analyzer object</param>
            <param name="context">SQL interpretation context</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamingJobStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamingJobStatement)">
            <summary>
            Interprets the CreateExternalStreamingJobStatement AST node and creates a Schema model element for it.
            </summary>
            <param name="node">The CreateExternalStreamingJobStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamingJobStatementsInterpretationVisitor.VisitExternalStreamingJobStatement(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamingJobStatement,System.Boolean)">
            <summary>
            Interprets the ExternalStreamingJobStatement AST node and creates a Schema model element for it.
            This method is called when the CreateExternalStreamingJob or the AlterExternalDataSource AST nodes are interpreted.
            For the create case, a new model element is created and its properties are populated.
            </summary>
            <param name="node">The ExternalStreamingJobStatement AST node.</param>
            <param name="isCreate">A flag to determine if this is a create external streaming job scenario.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamStatementsInterpretationVisitor">
            <summary>
            ExternalStreamStatementsInterpretationVisitor class that implements the visitor design pattern
            to interpret the CreateExternalStreamStatement AST node and create a Schema model element for it.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamStatementsInterpretationVisitor.ExternalStreamDescriptor">
            <summary>
            External stream model element descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamStatement)">
            <summary>
            Interprets the CreateExternalStreamStatement AST node and creates a Schema model element for it.
            </summary>
            <param name="node">The CreateExternalStreamStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalStreamStatementsInterpretationVisitor.VisitExternalStreamStatement(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamStatement,System.Boolean)">
            <summary>
            Interprets the ExternalStreamStatement AST node and creates a Schema model element for it.
            This method is called when the CreateExternalStream or the AlterExternalDataSource AST nodes are interpreted.
            For the create case, a new model element is created and its properties are populated.
            </summary>
            <param name="node">The ExternalStreamStatement AST node.</param>
            <param name="isCreate">A flag to determine if this is a create external stream scenario.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor">
            <summary>
            ExternalTableStatementsInterpretationVisitor class that implements the visitor design pattern
            to interpret the CreateExternalTableStatement AST node and create a Schema model element for it.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.ExternalTableDescriptor">
            <summary>
            External table model element descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">Sql schema analyzer object.</param>
            <param name="context">Sql interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Interprets the CreateExternalTableStatement AST node and creates a Schema model element for it.
            </summary>
            <param name="node">The CreateExternalTableStatement AST node.></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.CreateExternalTableOptionsRelationships(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Creates the model relationships to the external table options.
            </summary>
            <param name="node">The create external table statement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.CreateShardingColumnRelationship(System.Type,Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier)">
            <summary>
            Creates a relationship object between the external table and the specified element.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="node">External table node.</param>
            <param name="identifier">The element identifier.</param>
            <param name="relationshipClass">The relationship class.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.CreateRelationship(System.Type,Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Creates a relationship object between the external table and the specified element.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="node">External table node.</param>
            <param name="identifier">The element identifier.</param>
            <param name="relationshipClass">The relationship class.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.CreateRelationship(System.Type,Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement,System.Collections.Generic.IList{System.String},Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Creates a relationship object between the external table and the specified element.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="node">External table node.</param>
            <param name="identifier">A list with the element identifiers.</param>
            <param name="relationshipClass">The relationship class.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableColumnDefinition)">
            <summary>
            Interprets the external table column AST node.
            </summary>
            <param name="node">The external table column definition AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ExternalTableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference)">
            <summary>
            Interprets the external table column data type reference AST node.
            </summary>
            <param name="node">The external table column data type reference AST node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateFunctionStatement and
            AlterFunctionStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.SubroutineToParameterRelationship">
            <summary>
            Return the relationship class from function to parameters
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.SubroutineToDynamicObjectRelationship">
            <summary>
            Return the relationship class from function to parameters
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateFunctionStatement)">
            <summary>
            Clear the function descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateFunctionStatement)">
            <summary>
            Visits the CreateFunctionStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterFunctionStatement)">
            <summary>
            Clear the function descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterFunctionStatement)">
            <summary>
            Visits the AlterFunctionStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ScalarFunctionReturnType)">
            <summary>
            Visit return type for scalar function
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SelectFunctionReturnType)">
            <summary>
            Visit return type for inline table-valued function
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.TableValuedFunctionReturnType)">
            <summary>
            Visit return type for multi-statement table-valued function
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor.VisitFunctionStatementBody(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionStatementBody)">
            <summary>
            Visit FunctionStatementBody, from which both CreateFunctionStatement and AlterFunctionStatement derive
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor90">
            <summary>
            This class handles the interpretation of the CreateFunctionStatement and
            AlterFunctionStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.FunctionStatementInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.KnownStoredProcInterpretationVisitor">
            <summary>
            This class interprets the built-in stored procedures which act as DDL
            
            Handling variables
            
            Even though BOL doesn't state it explicitly, we can use variables as parameters to archive dynamic
            programming. For example, the statement
                 EXEC sp_addtype @typeName, @realType
            will create a UDDT whose type name is the value of @typeName, the actual type is the value of @realType
            
            If a variable is used as a parameter for the top-level statements, it is an error, and we don't anything
            about the entire statement; if the statement is not at the top-level, it's valid, and we only visit the variables
            and othern non-variable parameters to enable refactoring, but we don't send out model building-related messages
            such as IdentifiedElement and IdentifiedRelationship. For example, for the statement
                CREATE PROC dbo.p1
                AS
                    EXEC sp_addtype 'mytype', @realType
            we will visit both dbo.mytype and dbop.p1.@realType, but no IdentifiedElement for dbo.mytype.
            
            To avoid tedious logic that checks whether a statement has variables inside the code for each individual statement,
            we create a special Schema Analyzer for statements that have variables and the analyzer will filter out the
            undesired messages, so the logic interpreting the each statement can avoid special casing for variables.
            So, when interpreting the above statement, the code will identify element for dbo.mytype and identify relationship
            from dbo.mytype to dbo.p1.@realType, but these messages will be filtered out by the the aforemetioned analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.KnownStoredProcInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.KnownStoredProcInterpretationVisitor90.TryCreateElementDescriptorFromParameter(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo,System.Boolean,System.Type,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment@,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor@)">
            <summary>
            create an element descriptor for an element whose name is stored in a parameter, if the parameter is a variable, use the variable name for the element name
            </summary>
            <param name="parameter">parameter from which the necessary info is obtained</param>
            <param name="isChildObject">the element to be created is a child object (such as a column)</param>
            <param name="elementType">the type of the element to be created</param>
            <param name="fragment">the fragment associated with the element</param>
            <param name="descriptor">the created descriptor</param>
            <returns>true: succeed; false: fail</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.MethodSpecifierInterpretationVisitor90">
            <summary>
            This little visitor is responsible only for finding a MethodSpecifier and hooking up the Assembly information to the LHS
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.MethodSpecifierInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.OrderByColumnInterpretationType">
            <summary>
            Specifies how column references in an ORDER BY clause should be interpreted.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.OrderByColumnInterpretationType.None">
            <summary>
            No ORDER BY clause logic is to be applied.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.OrderByColumnInterpretationType.UseSelectOrColumnSourceColumns">
            <summary>
            Columns specified in the SELECT statement are preferred over 
            those exposed by an available column source.
            </summary>
            <remarks>
            Normal use for ORDER BY clause interpretation.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.OrderByColumnInterpretationType.UseSelectColumnsOnly">
            <summary>
            Only columns referenced in the SELECT statement can be used in the ORDER BY.
            </summary>
            <remarks>
            This used when interpreting the ORDER BY clause for BinaryQueryExpression instances
            that represent UNION, INTERSECT, or EXCEPT operators.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.FragmentDescriptorPair.InvalidInstance">
            <summary>
            Instance used to mark a particular fragment as invalid.
            This allows for continued interpretation of a permission statement despite
            the presence of an unsupported part of the AST.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.PermissionValidForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)">
            <summary>
            Determine if the supplied permission is valid against the object type of the supplied securable.
            </summary>
            <param name="objectKind">Kind of object to which permission is applied.</param>
            <param name="permission">Permission applied to securable object.</param>
            <param name="permissionNode">
            AST node for permission.  Used for error reporting when calling <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.ReportInvalidPermissionTypeForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.Permission,Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind)"/>.
            </param>
            <returns>
            True if combination of permission and securable object type is valid; otherwise, false.
            </returns>
            <remarks>
            It is the responsibility of the caller to not pass <see cref="F:Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind.NotSpecified"/> as the value for <see cref="!:objectKind"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityTargetObject)">
            <summary>
            Populate <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.Securable"/> and <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.SecurableKind"/> fields based on securable specified in permission statement.
            If the securable has columns, a reference to the securable's column list will be stored in the <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.SecurableColumns"/> field.
            </summary>
            <param name="node">The securable object that is the target of the permissions statement.</param>
            <remarks>
            If an element descriptor cannot be created from the security target object,
            this method will set the Securable property to an invalid instance.
            This allows further interpretation to distinguish a case of a missing securable
            from one that is not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.ReportInvalidPermissionTypeForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.Permission,Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind)">
            <summary>
            Called by <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.PermissionValidForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)"/> when an invalid combination of permission and object type is discovered.
            </summary>
            <param name="permissionNode">AST node for the permission.</param>
            <param name="objectType">Kind of object to which permission is applied.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.ReportInvalidObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind)">
            <summary>
            Called by <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.PermissionValidForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)"/> when an object type is used that is not supported by the current SQL platform.
            </summary>
            <param name="objectType">Kind of object to which permission is applied.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.CreateNamedPermissionDescriptor(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Create element descriptor for permission statement using the properties of that statement.
            </summary>
            <param name="node">AST node that represents the permission statement.</param>
            <param name="permissionType">Permission being granted, denied, or revoked.</param>
            <param name="objectKind">Class of the securable</param>
            <param name="grantee">Principal to which permission action applies.</param>
            <param name="grantor">Principal from which principal executing permission statement derives its right to grant, deny, or revoke the permission.</param>
            <param name="securable">The object whose security is affected by the permission statement.</param>
            <returns>
            Element descriptor for permission statement.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.IsDatabasePermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission)">
            <summary>
            Determine if the specified permission targets the database.
            </summary>
            <param name="permission">The permission to check.</param>
            <returns>
            True if the permission can be specified for the database securable; otherwise false.
            </returns>
            <remarks>
            When specifying a grant or deny of database or server permissions
            the securable is omitted from the permissions statement.
            In this case the permission specified in the statement
            determines whether the securable is a database or server.
            
            This method represents the union of all possible database permissions 
            across all SQL platforms.  It does not validate that a given permission
            is valid for a particular SQL platform.
            
            For list of database permissions: https://learn.microsoft.com/sql/t-sql/statements/grant-database-permissions-transact-sql
            </remarks>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.IsServerPermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission)"/>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.DetermineSecurableObjectFromPermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)"/>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.IsServerPermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission)">
            <summary>
            Determine if the specified permission targets the server.
            </summary>
            <param name="permission">The permission to check.</param>
            <returns>
            True if the permission can be specified for the server securable; otherwise false.
            </returns>
            <remarks>
            When specifying a grant or deny of database or server permissions
            the securable is omitted from the permissions statement.
            In this case the permission specified in the statement
            determines whether the securable is a database or server.
            
            This method represents the union of all possible server permissions 
            across all SQL platforms.  It does not validate that a given permission
            is valid for a particular SQL platform.
            </remarks>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.IsDatabasePermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission)"/>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor.DetermineSecurableObjectFromPermission(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)"/>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor100.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor100"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor110.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor110"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor120.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor120"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor130.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor130"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor140.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor130"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor150.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor150"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor160.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor160"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor90"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor90.PermissionValidForObjectType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.Permission)">
            <summary>
            Determine if the supplied permission is valid against the object type of the supplied securable.
            </summary>
            <param name="objectKind">Kind of object to which permission is applied.</param>
            <param name="permission">Permission applied to securable object.</param>
            <param name="permissionNode">
            AST node for permission.  Used for error reporting when calling <see cref="!:ReportInvalidPermissionTypeForObjectType"/>.
            </param>
            <returns>
            True if combination of permission and securable object type is valid; otherwise, false.
            </returns>
            <remarks>
            It is the responsibility of the caller to not pass <see cref="F:Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind.NotSpecified"/> as the value for <see cref="!:objectKind"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitorAzure.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor100"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitorAzureDw.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitor130"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitorAzureV12.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.PermissionStatementsInterpretationVisitorAzureV12"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="context">SQL-version-savvy Interpretation context</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateProcedureStatement)">
            <summary>
            Clear the procedure descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateProcedureStatement)">
            <summary>
            Visits the CreateProcedureStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterProcedureStatement)">
            <summary>
            Clear the procedure descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterProcedureStatement)">
            <summary>
            Visits the CreateProcedureStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor.VisitProcedureStatementBody(Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBody)">
            <summary>
            interpret CreateProcedureStatement and AlterProcedureStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ProcedureStatementInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QueryExpressionInterpretationVisitor.ColumnResolvers">
            <summary>
            A query expression can have one or more query specification
            Each query specification has its own column resolver
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QueryExpressionInterpretationVisitor.ParentColumnResolver">
            <summary>
            QueryExpressionInterpretationVisitor can be used to interpret a query expresion that is inside another query specification (parent),
            such as query expression from a WHERE clause of a SELECT statement
            This property holds the column resolver for the parent query specification
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QueryExpressionInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Create a clean interpretation visitor for a query expression
            this can be used for the query expression of a SELECT statement (SelectStatement.QueryExpression)
            this can also be used for a subquery (SET @var = SELECT * FROM t1)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QueryExpressionInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver)">
            <summary>
            Create an interpretation visitor for a query expression existing inside an outer query specification
            this can be used for sub query (the second SELECT of "SELECT * FROM (SELECT * FROM t1) a1")
            this can also be used for nested clauses such WHERE claus (SELECT * FROM t1, t2 WHERE (t2.c1 > 10))
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QuerySpecificationInterpretationVisitor.InsideDmlTrigger">
            <summary>
            Gets whether there is a trigger target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QuerySpecificationInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Visits the FunctionCall
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QuerySpecificationInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UserDefinedTypePropertyAccess)">
            <summary>
            Visits the UDT property access
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QuerySpecificationInterpretationVisitor90.GetClrPartsAndIdentifiersFromCallTarget(Microsoft.SqlServer.TransactSql.ScriptDom.CallTarget,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Collections.Generic.LinkedList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment@)">
            <summary>
            Tries to reverse function call/UDT property access and see, if it all started with function call 
            Returns function call, if it was the inner-most thing and populates identifies and clrParts lists
            Otherwise, returns null (as return value) and inner-most fragment via innerFragment
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.QuerySpecificationLocatorVisitor">
            <summary>
            Attempts to locate first occurrence of a QuerySpecification node in a given AST.
            </summary>
            <seealso cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.InterpretDependenciesInSubExpression(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)"/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.RoleStatementsInterpretationVisitor">
            <summary>
            Interprets create and alter statements for database roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.RoleStatementsInterpretationVisitor.RoleStatement">
            <summary>
            Get or set the create or alter statement being interpreted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.RoleStatementsInterpretationVisitor.RoleDescriptor">
            <summary>
            Get or set the element descriptor for the role.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SchemaStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CREATE / ALTER SCHEMA
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SchemaStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SequenceStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SequenceStatementInterpretationVisitor"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ServerRoleStatementsInterpretationVisitor">
            <summary>
            Interprets create and alter statements for flexible (user-defined) server roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ServerRoleStatementsInterpretationVisitor.RoleStatement">
            <summary>
            Get or set the create or alter statement being interpreted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ServerRoleStatementsInterpretationVisitor.RoleDescriptor">
            <summary>
            Get or set the element descriptor for the role.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor.ApplySensitivityExtendedPropertyOnColumn(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Apply sensitivity extended property on column's corresponding sensitivity property
            starting from version 100
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor.IsValidTypeName(System.UInt32,System.String,System.String)">
            <summary>
            check if a given name is valid for a certain level
            </summary>
            <param name="level">the level the check is performed against</param>
            <param name="name">the name to be checked</param>
            <returns>true if valid; false, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor.GetTypeFromTypeName(System.String,System.Int32)">
            <summary>
            return the type for a given type name
            </summary>
            <param name="name">type name found in sp_addextendedproperty</param>
            <param name="level">the level of the type</param>
            <returns>type associated with the type name if the typename is valid; null, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor100.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor100"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor100.ApplySensitivityExtendedPropertyOnColumn(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Apply sensitivity extended property on column's corresponding sensitivity property
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor110.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor110"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor150.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor150"/> class.
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor150.ApplySensitivityExtendedPropertyOnColumn(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Starting from Sql150 we set sensitivity attributes using ADD SENSITIVITY CLASSIFICATION... statement
            hence there is nothing to do here
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SpAddExtendedPropertyInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor">
            <summary>
            The interpretation helper that processes the TSql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Reroutes the functionCalls
            </summary>
            <param name="node">Node to reroute</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.Analyzer">
            <summary>
            Gets the analyzer to work on
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretationContext">
            <summary>
            Gets the generic InterpretationContext
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.OriginalSchemaAnalyzer">
            <summary>
            Gets the schema analyzer originally passed to the interpreter that invokes this visitor.
            this.Analyzer is not always the original analyzer, since we may set it to Dependency Analyzer,
            when this happens, we store the original analyzer to the this.InterpretationContext.OriginalSchemaAnalyzer
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretationErrors">
            <summary>
            Get all the interpretation errors 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.Comparer">
            <summary>
            Gets the comparisonManager to use
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to use</param>
            <param name="mapping">SchemaMapping to use</param>
            <param name="comparisonManager">ComparisonManager to use</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.PerformVisitationOnCryptoMechanism(Microsoft.SqlServer.TransactSql.ScriptDom.CryptoMechanism)">
            <summary>
            Performs visitation only on crypto mechanisms
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateListWithContainerIdPotentials(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Creates a list of potentials in which all potentials are marked as containerID
            </summary>
            <param name="potentials">potentials to transform</param>
            <returns>A new IEnumerable in which everything is marked as containerID</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitResolvedDescriptor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor)">
            <summary>
            Performs Analyzer Visitation on a ResolvedDescriptor
            </summary>
            <param name="descriptor">Descriptor to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.AddInterpretationErrorForTopLevelStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError)">
            <summary>
            Add one interpretation error if the statement is a top-level statement
            </summary>
            <param name="error">the error to be added</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.AddInterpretationError(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError)">
            <summary>
            Add one interpretation error
            </summary>
            <param name="error">the error to be added</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.AddInterpretationErrors(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError})">
            <summary>
            Add a list of interpretation errors
            </summary>
            <param name="errors">the errors to be added</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretExecuteAsClause(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsClause,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Type)">
            <summary>
            Interpret ExecuteAs clause
            </summary>
            <param name="node"></param>
            <param name="target"></param>
            <param name="relationship"></param>
            <param name="userOrLoginType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretMethodSpecifier(Microsoft.SqlServer.TransactSql.ScriptDom.MethodSpecifier,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Interpret method specifier
            </summary>
            <param name="node"></param>
            <param name="lhs"></param>
            <param name="relationship"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.IsPartitionScheme(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme)">
            <summary>
            check if a FilegroupOrPartitionScheme node is a partition schema
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateDependencyTracker">
            <summary>
            Creates a populated dependency tracker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateStringList(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier})">
            <summary>
            Creates an IList of string based on the identifiers
            </summary>
            <param name="identifiers">Identifiers to create the list from</param>
            <returns>a new List of strings</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateStringList(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Creates an IList of string based on the SON
            </summary>
            <param name="schemaObjectName">SON to create the list from</param>
            <returns>a new List of strings</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.GetBuiltinDataTypeName(Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeReference)">
            <summary>
            Get the type name of a SqlDataType or XmlDataTypeReference
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.GetSchemaOwnedObjectChildElementName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier)">
            <summary>
            Builds the name for a SchemaOwnedObjectChild
            </summary>
            <param name="parent">parent of the child,</param>
            <param name="childName">name of the child</param>
            <returns>A List of strings to be used as the name of the object</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.TryGetProcNumber(Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureReference,System.UInt32@)">
            <summary>
            Try to get the procedure number for a numbered procedure
            </summary>
            <param name="node">ProcedrueReference of the procedure</param>
            <param name="procNumber">holds the proc number if presented</param>
            <returns>true if we have proc number; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateResolvedDescriptorFromElementDescriptor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Creates a RD from an element descriptor for use when visiting a SON
            </summary>
            <param name="fragment">RD Fragment</param>
            <param name="descriptor">Source Descriptor</param>
            <returns>a new RD</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitSchemaObjectName(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Type)">
            <summary>
            Performs visitation for a SchemaObjectName
            </summary>
            <param name="name">SchemaObjectName to visit</param>
            <param name="type">Type of the schema object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitSchemaObjectName(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Performs visitation for a SchemaObjectName
            </summary>
            <param name="name">SchemaObjectName to visit</param>
            <param name="descriptor">Descriptor for the visitation</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitSchemaObjectName(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor)">
            <summary>
            Performs visitation for an ambigous SchemaObjectName
            </summary>
            <param name="name">SchemaObjectName to visit</param>
            <param name="descriptor">Descriptor for the visitation</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitSchemaObjectNameAsContainerId(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Performs visitation for a SchemaObjectName
            </summary>
            <param name="name">SchemaObjectName to visit</param>
            <param name="descriptor">Descriptor for the visitation</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitSchemaObjectName(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Type)">
            <summary>
            Performs visitation for a SchemaObject based on a list of identifiers
            </summary>
            <param name="schemaObjectName">A list of identifiers to represent the schema object</param>
            <param name="type">The type of the schema object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.MakePotentialsContainerId(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Creates a new list of Potentials in which they are all marked as containerID
            </summary>
            <param name="potentials">Potentials to convert</param>
            <returns>A new list filled with potentials that are all containerID</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.FirstParameterShouldBeIgnored(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Checks whether the first parameter of the functionCall should be ignored or not
            </summary>
            <param name="functionId">Function Called</param>
            <returns>True if the first param should be ignored, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretIfNotNull(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Calls accept on the provided fragment if it is not null, thus causing visitation to happen
            </summary>
            <param name="fragment">Fragment to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.MakeIdentifierObjectOwnerAndVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Creates an owner from the a schema object and hooks it up as the owner of the provided descriptor over the provided relationship and visits it
            </summary>
            <param name="ownerFragment">Owner fragment</param>
            <param name="ownedObject">Owned object</param>
            <param name="relationship">Owner relationship on the owned object</param>
            <returns>SQL Element Descriptor of the owner if owner exists; otherwise, null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.MakeSchemaObjectOwner(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Creates an owner from the a schema object and hooks it up as the owner of the provided descriptor over the provided relationship
            </summary>
            <param name="ownerFragment">Owner fragment</param>
            <param name="ownedObject">Owned object</param>
            <param name="relationship">Owner relationship on the owned object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.MakeFragmentObjectOwnerAndVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Creates an owner from the a schema object and hooks it up as the owner of the provided descriptor over the provided relationship
            </summary>
            <param name="ownerFragment">Owner fragment</param>
            <param name="ownedObjectFragment">Owned object fragment</param>
            <param name="ownedObject">Owned object</param>
            <param name="relationship">Owner relationship on the owned object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.ParseSchemaObjectName(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            parse a schema object name from a string
            </summary>
            <param name="scriptText">string holding the schema object name</param>
            <param name="fragment">AST node used to report errors when the schema object name has parsing errors</param>
            <returns>the obtained SchemaObjectName if parsed successfully; null, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.ParseChildObjectName(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            parse a schema object child from a string
            </summary>
            <param name="scriptText">string holding the schema object name</param>
            <param name="fragment">AST node used to report errors when the schema object name has parsing errors</param>
            <returns>the obtained SchemaObjectName if parsed successfully; null, otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.AdjustFragmentOffset(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Int32)">
            <summary>
            Adjust offset of each token found in an existing AST node 
            </summary>
            <param name="fragment">AST node to be adjusted</param>
            <param name="offset">offset to be adjusted</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.GetParamValueOffsetAdjustment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Get the offset of the body of a literal
                If the value is literal, the start offset of the internal string value
                will be different according to its unicode or ascii string.
                If it is Identifier, or something else, then the startoffset will not change.
            </summary>
            <param name="value">AST node to be checked</param>
            <returns>Offset</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitIfNotNull(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Calls accept on the provided fragment if it is not null, thus causing visitation to happen
            </summary>
            <param name="fragment">Fragment to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateElementDescriptor(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Type)">
            <summary>
            Creates a descriptor for the schemaObjectName for the provided type
            If the SON does not specify a schemaName, then the Default schema will be used (otherwise, the specified schema will be used)
            </summary>
            <param name="son">SchemaObjectName to create an ED for</param>
            <param name="elementType">Type for the model element for the descriptor</param>
            <returns>A new element descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateElementDescriptor(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Type)">
            <summary>
            Creates a descriptor for a list of identifiers representing a schemaObjectName for the provided type
            If the identifiers do not specify a schemaName, then the Default schema will be used (otherwise, the specified schema will be used)
            </summary>
            <param name="identifiers">Identifiers to create an ED for</param>
            <param name="elementType">Type for the model element for the descriptor</param>
            <returns>A new element descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreateElementDescriptor(System.Collections.Generic.IList{System.String},System.Type,System.Boolean)">
            <summary>
            Creates a descriptor for a list of strings representing a schemaObjectName for the provided type
            If the identifiers do not specify a schemaName, then the Default schema will be used (otherwise, the specified schema will be used)
            </summary>
            <param name="identifiers">Identifiers to create an ED for</param>
            <param name="elementType">Type for the model element for the descriptor</param>
            <returns>A new element descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreatePotentiallyAmbiguousChild(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor,System.Type,System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creates an ambiguous child from an ambiguous parent
            </summary>
            <param name="parent">Parent element</param>
            <param name="childType">Type for the child</param>
            <param name="childName">Name part of the child</param>
            <param name="childFragment">Fragment of the child</param>
            <returns>A new child resolved descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CreatePotentiallyAmbiguousConstraint(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor,System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creates an ambiguous constraint from an ambiguous parent
            </summary>
            <param name="parent">Parent element</param>
            <param name="constraintName">Name part of the constraint</param>
            <param name="constraintFragment">Fragment of the constraint</param>
            <returns>A new constraint resolved descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDdlWithNewVisitor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Interpret an AST node with the given visitor and enclose it with Begin/End DDL
            </summary>
            <param name="node">Node to accept</param>
            <param name="visitor">Visitor to make accept</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDmlWithNewVisitor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Interpret an AST node with the given visitor and enclose it with Begin/End DML
            </summary>
            <param name="node">Node to accept</param>
            <param name="visitor">Visitor to make accept</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretWithoutBeginEndDdl(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Interpret an AST node with the given visitor and enclose it WITHOUT Begin/End DDL
            </summary>
            <param name="node">Node to accept</param>
            <param name="visitor">Visitor to make accept</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.RemoveLastItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list without the last part
            </summary>
            <typeparam name="TType">Type of the object list</typeparam>
            <param name="source">Source list to copy</param>
            <returns>A new list without the last item</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.IsSystemFunctionCall(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Returns whether the function call is a system function call or not
            </summary>
            <param name="functionCall">FunctionCall to inspect</param>
            <returns>True if this is a call to a system function</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.IsUserDefinedFunctionCall(Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall)">
            <summary>
            Returns whether the function call is a user-defined function call or not
            </summary>
            <param name="functionCall">FunctionCall to inspect</param>
            <returns>True if this is a call to a user-defined function</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.IdentifyRelationshipToResolvedDescriptor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor)">
            <summary>
            Helper method to identify a relationship to whatever is in a Resolved Descriptor
            </summary>
            <param name="fragment">Fragment for visitation</param>
            <param name="leftHandSide">LeftHandSide for relationship</param>
            <param name="relationship">Relationship class</param>
            <param name="rightHandSide">Right hand side descriptor</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDropStatement(Microsoft.SqlServer.TransactSql.ScriptDom.DropObjectsStatement,System.Type)">
            <summary>
            Interprets the drop statements
            </summary>
            <param name="statement">statement to drop</param>
            <param name="elementType">type of element to drop</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDropStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Type)">
            <summary>
            Interprets the son as a DROP statement
            </summary>
            <param name="son">Name of the object</param>
            <param name="elementType">Element Type of the object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDropStatement(Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,System.Type)">
            <summary>
            Interprets the son as a DROP statement
            </summary>
            <param name="id">Name of the object</param>
            <param name="elementType">Element Type of the object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretDropStatement(Microsoft.SqlServer.TransactSql.ScriptDom.DropUnownedObjectStatement,System.Type)">
            <summary>
            Interprets the unowned object DROP statement.
            </summary>
            <param name="id">The drop statement.</param>
            <param name="elementType">Element Type of the object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretAuthorizer(Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Visit authorizer AST and establish relationship from authorized object to its authorizer.
            </summary>
            <remarks>
            This method should be used for database-level authorizers and authorized objects.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretServerAuthorizer(Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Visit authorizer AST and establish relationship from authorized object to its authorizer.
            </summary>
            <remarks>
            This method should be used for server-level authorizers and authorized objects.
            For database-level authorizers/authorized objects, use the <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.InterpretAuthorizer(Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.CheckDatabaseName(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Check if the database is "$(DatabaseName)". If not, report an error
            </summary>
            <remarks>
            For SQL 11.0+, ALTER DATABASE can specify "CURRENT" as the database name.
            If this is specified it obviates the need to verify the database name.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor.VisitPartitionSchemeOrFilegroup(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Visit an AST node which can be either a partition scheme or a filegroup
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor100">
            <summary>
            The Sql100 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor110">
            <summary>
            The Sql110 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor120">
            <summary>
            The Sql120 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130">
            <summary>
            The Sql130 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern for the CreateExternalDataSourceStatement in the AST node.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern for the AlterExternalDataSourceStatement in the AST node.
            </summary>
            <param name="node">The AlterExternalDataSourceStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Implements the visitor design pattern for the CreateExternalFileFormatStatement in the AST node.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Implements the visitor design pattern for the CreateExternalTableStatement in the AST node.
            </summary>
            <param name="node">The CreateExternalTableStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor130.InterpretDropTypeStatement(Microsoft.SqlServer.TransactSql.ScriptDom.DropTypeStatement,System.Type)">
            <summary>
            Interprets the type DROP statement.
            </summary>
            <param name="statement">The drop statement.</param>
            <param name="elementType">Element type of the object.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor140">
            <summary>
            The Sql140 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor150">
            <summary>
            The Sql150 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor150.CreateTableStatementsInterpretationVisitor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Creates a table statement interpretation visitor for 150.
            </summary>
            <param name="adaptorAnalyzer">The schema analyzer to use.</param>
            <returns>The 150 table statement interpreter.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor160">
            <summary>
            The Sql160 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor160.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateXmlIndexStatement)">
            <summary>
            override method to create xml index statement that adds the partition column and scheme to the xml index
            Executes the base class for the CreateXmlIndexStatement from the SqlInterpretationVisitor90.SimpleStatements class
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90">
            <summary>
            The Sql90 interpretation helper that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
            <summary>
            The Sql90 interpretation helper that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.FindCredentialOptionAndHookupToLogin(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.SqlServer.TransactSql.ScriptDom.PrincipalOption)">
            <summary>
            Checks whether the option is the credential option and hooks it up if it is
            </summary>
            <param name="login">Login to hook up to</param>
            <param name="option">Option to verify</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.HookupCredentialToLogin(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier)">
            <summary>
            Hoops up the Credential information to the Login
            </summary>
            <param name="login">LHS</param>
            <param name="credential">RHS Identifier</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DbccStatement)">
            <summary>
            Interprets the DbccStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.RestoreStatement)">
            <summary>
            Interprets the RestoreStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupDatabaseStatement)">
            <summary>
            Interprets the BackupDatabaseStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupTransactionLogStatement)">
            <summary>
            Interprets the BackupTransactionLogStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupMasterKeyStatement)">
            <summary>
            Interprets the BackupDatabaseStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupRestoreFileInfo)">
            <summary>
            Interprets the BackupRestoreFileInfo
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BackupCertificateStatement)">
            <summary>
            Interprets the BackupCertificateStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterColumnStatement)">
            <summary>
            Handles the Alter table x alter column blah
            </summary>
            <param name="node">Altertable alter column statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableDropTableElementStatement)">
            <summary>
            Handles the Alter table x drop column blah
            </summary>
            <param name="node">Altertable alter column statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetVariableStatement)">
            <summary>
            Interprets the SetVariable statement
            </summary>
            <param name="node">node to visit</param>
            <example>SET @v = ...</example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CloseSymmetricKeyStatement)">
            <summary>
            Interprets the ExecuteStatement
            </summary>
            <param name="statement">node to visit</param>
            <example>CLOSE { SYMMETRIC KEY key_name | ALL SYMMETRIC KEYS }</example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BeginConversationTimerStatement)">
             <summary>
             Interprets the BeginConversationTimerStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>BEGIN CONVERSATION TIMER ( conversation_handle )   TIMEOUT = timeout [ ; ]
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.GetConversationGroupStatement)">
             <summary>
             Interprets the GetConversationGroupStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>[ WAITFOR ( ]
               GET CONVERSATION GROUP @conversation_group_id
                  FROM &lt;queue&gt;
            [ ) ] [ , TIMEOUT timeout ]
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.WaitForStatement)">
             <summary>
             Interprets the WaitForStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>WAITFOR 
            {
                DELAY 'time_to_pass' 
              | TIME 'time_to_execute' 
              | ( receive_statement ) [ , TIMEOUT timeout ]
            }
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TruncateTableStatement)">
             <summary>
             Interprets the TruncateTableStatement
             </summary>
             <param name="statement">node to visit</param>
             <example> 
             TRUNCATE TABLE 
                [ { database_name.[ schema_name ]. | schema_name . } ]
                table_name
            [ ; ]
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetUserStatement)">
             <summary>
             Interprets the SetUserStatement
             </summary>
             <param name="statement">node to visit</param>
             <example> 
             SETUSER [ 'username' [ WITH NORESET ] ] 
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetIdentityInsertStatement)">
            <summary>
            SET IDENTITY_INSERT [ database. [ owner. ] ] { table } { ON | OFF }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.EndConversationStatement)">
            <summary>
            Interprets the EndConversationStatement
            </summary>
            <param name="statement">node to visit</param>
            <example>
            base visi
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ReceiveStatement)">
             <summary>
             Interprets the ReceiveStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>
             RECEIVE [ TOP ( n ) ] 
            &lt;column_specifier&gt; [ ,...n ]
            FROM &lt;queue&gt;
            [ INTO table_variable ]
            [ WHERE {  conversation_handle = conversation_handle
                     | conversation_group_id = conversation_group_id } ]
             </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UseStatement)">
            <summary>
            Interprets the UseStatement
            </summary>
            <param name="statement">node to visit</param>
            <example>
            USE db
            </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UpdateStatisticsStatement)">
            <summary>
            Interprets the UpdateStatisticsStatement
            </summary>
            <param name="statement">node to visit</param>
            <example>
            UPDATE STATISTICS ON &lt; table_name &gt; [ . &lt;index_name&gt; ]
            WITH FULLSCAN {, NORECOMPUTE }
            </example>
            <remarks>
            Note that we do not allow the "UPDATE STATISTICS" statement as a top-level object.
            This visitation targets the statement when it gets used within a procedure.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BeginTransactionStatement)">
            <summary>
            Interprets the BeginTransactionStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SaveTransactionStatement)">
            <summary>
            Interprets the SaveTransactionStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.RollbackTransactionStatement)">
            <summary>
            Interprets the RollbackTransactionStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CommitTransactionStatement)">
            <summary>
            Interprets the CommitTransactionStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ReturnStatement)">
            <summary>
            Handling for RETURN (SELECT ... FROM )
            </summary>
            <param name="node">Return node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.OpenSymmetricKeyStatement)">
             <summary>
             Interprets the OpenSymmetricKeyStatement
             </summary>
             <param name="statement">node to visit</param>
             <example>
            OPEN SYMMETRIC KEY Key_name DECRYPTION BY &lt;decryption_mechanism&gt;
            &lt;decryption_mechanism&gt; ::=
                CERTIFICATE certificate_name [ WITH PASSWORD = 'password' ]
                |
                ASYMMETRIC KEY asym_key_name [ WITH PASSWORD = 'password' ]
                |
                SYMMETRIC KEY decrypting_Key_name
                |
                PASSWORD = 'decryption_password'
             </example>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.InterpretTransactionStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TransactionStatement)">
            <summary>
            Interprets the transaction statement
            </summary>
            <param name="statement">Statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableConstraintModificationStatement)">
            <summary>
            ALTER TABLE table_name { CHECK | NOCHECK } CONSTRAINT { ALL | constraint_name [ ,...n ] }
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableTriggerModificationStatement)">
            <summary>
            ALTER TABLE table_name { ENABLE | DISABLE } TRIGGER { ALL | trigger_name [ ,...n ] }
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateDatabaseStatement)">
            <summary>
            CREATE DATABASE: we only visit filegroups and logical file names
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseAddFileGroupStatement)">
            <summary>
            ALTER DATABASE database ADD FILEGROUP filegroup_name 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRemoveFileGroupStatement)">
            <summary>
            ALTER DATABASE database REMOVE FILEGROUP filegroup_name 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyFileGroupStatement)">
            <summary>
            ALTER DATABASE database MODIFY FILEGROUP filegroup_name {filegroup_property | NAME = new_filegroup_name }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRemoveFileStatement)">
            <summary>
            ALTER DATABASE database REMOVE FILE logical_file_name 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyNameStatement)">
            <summary>
            ALTER DATABASE database MODIFY NAME = new_dbname 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyFileStatement)">
            <summary>
            ALTER DATABASE database MODIFY FILE &lt; filespec &gt;
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseCollateStatement)">
            <summary>
            ALTER DATABASE database COLLATE &lt; collation_name &gt; 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRebuildLogStatement)">
            <summary>
            ALTER DATABASE database REBUILD LOG [ ON &lt; filespec &gt; ]
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.InterpretFileDeclaration(Microsoft.SqlServer.TransactSql.ScriptDom.FileDeclaration)">
            <summary>
            VisitFragment of logical filename of FileDeclaration for ALTER statements
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FetchCursorStatement)">
            <summary>
            FETCH 
                   [ [ NEXT | PRIOR | FIRST | LAST | ABSOLUTE { n | @nvar } | RELATIVE { n | @nvar } ] 
                     FROM 
                   ] 
                   { { [ GLOBAL ] cursor_name } | @cursor_variable_name } [ INTO @variable_name [ ,...n ] ] 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ReconfigureStatement)">
            <summary>
            RECONFIGURE [ WITH OVERRIDE ]
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ShutdownStatement)">
            <summary>
            SHUTDOWN [ WITH NOWAIT ] 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ReadTextStatement)">
            <summary>
            READTEXT { table.column text_ptr offset size } [ HOLDLOCK ]
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.WriteTextStatement)">
            <summary>
            WRITETEXT { table.column text_ptr } [ WITH LOG ] { data }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UpdateTextStatement)">
            <summary>
            UPDATETEXT { table_name.dest_column_name dest_text_ptr } { NULL | insert_offset } { NULL | delete_length } [ WITH LOG ]  
            [ inserted_data | { table_name.src_column_name src_text_ptr } ]
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetTextSizeStatement)">
            <summary>
            SET TEXTSIZE { number } 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetErrorLevelStatement)">
            <summary>
            SET ERRLVL { number } 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.PredicateSetStatement)">
            <summary>
            SET xxxx ON | OFF 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetOffsetsStatement)">
            <summary>
            SET OFFSETS SELECT, FROM, ORDER, COMPUTE, TABLE, PROCEDURE, STATEMENT, PARAM, EXECUTE  { ON | OFF }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetStatisticsStatement)">
            <summary>
            SET xxxx ON | OFF 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetCommandStatement)">
            <summary>
            SET FIPS_FLAGGER {ENTRY | FULL | INTERMEDIATE | OFF}
            SET CONTEXT_INFO (undocumented?)
            SET DATEFIRST { number | @number_var }
            SET DATEFORMAT { format | @format_var } 
            SET DEADLOCK_PRIORITY { LOW | NORMAL | @deadlock_var }
            SET LANGUAGE { [ N ] 'language' | @language_var }
            SET LOCK_TIMEOUT timeout_period
            SET QUERY_GOVERNOR_COST_LIMIT value
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetRowCountStatement)">
            <summary>
            SET ROWCOUNT { number | @number_var } 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetTransactionIsolationLevelStatement)">
            <summary>
            SET TRANSACTION ISOLATION LEVEL { READ COMMITTED | READ UNCOMMITTED | REPEATABLE READ | SERIALIZABLE }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CheckpointStatement)">
            <summary>
            CHECKPOINT
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DeclareTableVariableStatement)">
            <summary>
            DECLARE @var AS table_definition
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateRemoteServiceBindingStatement)">
             <summary>
             CREATE REMOTE SERVICE BINDING binding_name 
            [ AUTHORIZATION owner_name ] 
            TO SERVICE 'service_name' 
            WITH  USER = user_name [ , ANONYMOUS = { ON | OFF } ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterRemoteServiceBindingStatement)">
            <summary>
            ALTER REMOTE SERVICE BINDING binding_name WITH [ USER = &lt; user_name &gt; ] [ , ANONYMOUS = { ON | OFF } ] 
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateContractStatement)">
             <summary>
             CREATE CONTRACT contract_name
            [ AUTHORIZATION owner_name ]
               (  {   message_type_name SENT BY { INITIATOR | TARGET | ANY } 
                 | [ DEFAULT ] } [ ,...n] ) 
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateFullTextCatalogStatement)">
             <summary>
             CREATE FULLTEXT CATALOG catalog_name
                 [ON FILEGROUP filegroup ]
                 [IN PATH 'rootpath']
                 [WITH &lt;catalog_option&gt;]
                 [AS DEFAULT]
                 [AUTHORIZATION owner_name ]
            &lt;catalog_option&gt;::=
                 ACCENT_SENSITIVITY = {ON|OFF}
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateMasterKeyStatement)">
            <summary>
            CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'password'
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateMessageTypeStatement)">
             <summary>
             CREATE MESSAGE TYPE message_type_name
                [ AUTHORIZATION owner_name ]
                [ VALIDATION = {  NONE
                                | EMPTY 
                                | WELL_FORMED_XML
                                | VALID_XML WITH SCHEMA COLLECTION schema_collection_name
                               } ]
            [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionFunctionStatement)">
             <summary>
             CREATE PARTITION FUNCTION partition_function_name ( input_parameter_type )
            AS RANGE [ LEFT | RIGHT ] 
            FOR VALUES ( [ boundary_value [ ,...n ] ] ) 
            [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionSchemeStatement)">
             <summary>
             CREATE PARTITION SCHEME partition_scheme_name
            AS PARTITION partition_function_name
            [ ALL ] TO ( { file_group_name | [ PRIMARY ] } [ ,...n ] )
            [ ; ]
             </summary>
             <param name="node">STATEMENT</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateQueueStatement)">
             <summary>
             CREATE QUEUE &lt;object&gt;
               [ WITH
                 [ STATUS = { ON | OFF }  [ , ] ]
                 [ RETENTION = { ON | OFF } [ , ] ] 
                 [ ACTIVATION (
                     [ STATUS = { ON | OFF } , ] 
                       PROCEDURE_NAME = &lt;procedure&gt; ,
                       MAX_QUEUE_READERS = max_readers , 
                       EXECUTE AS { SELF | 'user_name' | OWNER } 
                        ) ]
                ]
                 [ ON { filegroup | [ DEFAULT ] } ]
            [ ; ]
            
            &lt;object&gt; ::=
            {
                [ database_name. [ schema_name ] . | schema_name. ]
                    queue_name
            } 
            
            &lt;procedure&gt; ::=
            {
                [ database_name. [ schema_name ] . | schema_name. ]
                    stored_procedure_name
            }
             </summary>
             <param name="statement">statemenet</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterQueueStatement)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateRouteStatement)">
             <summary>
             CREATE ROUTE route_name
            [ AUTHORIZATION owner_name ]
            WITH  
               [ SERVICE_NAME = 'service_name', ]
               [ BROKER_INSTANCE = 'broker_instance_identifier' , ]
               [ LIFETIME = route_lifetime , ]
               ADDRESS =  'next_hop_address'
               [ , MIRROR_ADDRESS = 'next_hop_mirror_address' ]
            [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateServiceStatement)">
             <summary>
             CREATE SERVICE service_name
               [ AUTHORIZATION owner_name ]
               ON QUEUE [ schema_name. ]queue_name
               [ ( contract_name | [DEFAULT] [ ,...n ] ) ]
            [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterServiceStatement)">
             <summary>
             ALTER SERVICE service_name 
             [ ON QUEUE [ schema_name . ]queue_name ] 
             [ ( &lt; opt_arg &gt; [ , ...n ] ) ]
            
             &lt; opt_arg &gt; ::= ADD CONTRACT contract_name | DROP CONTRACT contract_name
             </summary>
             <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateSynonymStatement)">
             <summary>
             CREATE SYNONYM [ schema_name_1. ] synonym_name FOR &lt; object &gt;
            &lt; object &gt; :: =
            {
                [ server_name.[ database_name ] . [ schema_name_2 ].| database_name . [ schema_name_2 ].| schema_name_2. ] object_name
            }
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeUddtStatement)">
             <summary>
             CREATE TYPE [ schema_name. ] type_name
            { 
                FROM base_type 
                [ ( precision [ , scale ] )  ]
                [ NULL | NOT NULL ] 
              | EXTERNAL NAME assembly_name [ .class_name ] 
            } [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeUdtStatement)">
             <summary>
             CREATE TYPE [ schema_name. ] type_name
            { 
                FROM base_type 
                [ ( precision [ , scale ] )  ]
                [ NULL | NOT NULL ] 
              | EXTERNAL NAME assembly_name [ .class_name ] 
            } [ ; ]
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateLoginStatement)">
             <summary>
            CREATE LOGIN login_name { WITH &lt;option_list1&gt; | FROM &lt;sources&gt; }
            &lt;sources&gt; ::=
                WINDOWS [ WITH &lt;windows_options&gt; [ ,... ] ]
                | CERTIFICATE certname
                | ASYMMETRIC KEY asym_key_name
            &lt;option_list1&gt; ::= 
                PASSWORD = 'password' [ HASHED ] [ MUST_CHANGE ]
                [ , &lt;option_list2&gt; [ ,... ] ]
            &lt;option_list2&gt; ::=  
                SID = sid
                | DEFAULT_DATABASE = database    
                | DEFAULT_LANGUAGE = language
                | CHECK_EXPIRATION = { ON | OFF}
                | CHECK_POLICY = { ON | OFF}
                [ CREDENTIAL = credential_name ]
            &lt;windows_options&gt; ::=      
                DEFAULT_DATABASE = database
                | DEFAULT_LANGUAGE = language
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterXmlSchemaCollectionStatement)">
            <summary>
            ALTER XML SCHEMA COLLECTION [ relational_schema. ]sql_identifier ADD 'Schema Component'
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateXmlIndexStatement)">
             <summary>
             CREATE [ PRIMARY ] XML INDEX index_name 
                ON &lt;object&gt; ( xml_column_name )
                [ USING XML INDEX xml_index_name 
                    [ FOR { VALUE | PATH | PROPERTY } ]
                [ WITH ( &lt;xml_index_option&gt; [ ,...n ] ) ]
            [ ; ]
            
            &lt;object&gt; ::=
            {
                [ database_name. [ schema_name ] . | schema_name. ] 
                    table_name
            }
            
            &lt;xml_index_option&gt; ::=
            { 
                PAD_INDEX  = { ON | OFF }
              | FILLFACTOR = fillfactor
              | SORT_IN_TEMPDB = { ON | OFF }
              | STATISTICS_NORECOMPUTE = { ON | OFF }
              | DROP_EXISTING = { ON | OFF }
              | ALLOW_ROW_LOCKS = { ON | OFF }
              | ALLOW_PAGE_LOCKS = { ON | OFF }
              | MAXDOP = max_degree_of_parallelism
            }
             </summary>
             <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateXmlSchemaCollectionStatement)">
            <summary>
            CREATE XML SCHEMA COLLECTION [ &lt;relational_schema&gt;. ]sql_identifier AS Expression
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.EnableDisableTriggerStatement)">
            <summary>
            ENABLE | DISABLE TRIGGER { [ schema_name . ] trigger_name [ ,...n ] | ALL } ON { object_name | DATABASE | ALL SERVER } [ ; ]
            </summary>
            <param name="statement">statement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsStatement)">
            <summary>
            Interprets the ExecuteAsStatement
            </summary>
            <param name="statement">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterAuthorizationStatement)">
            <summary>
            ALTER AUTHORIZATION ON [ &lt; entity_type &gt; :: ] entity_name TO { SCHEMA OWNER | principal_name }
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableSwitchStatement)">
            <summary>
            SWITCH [ PARTITION source_partition_number_expression ] TO target_table [ PARTITION target_ partition_number_expression ] 
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorAzure">
            <summary>
            The SqlAzure interpretation helper that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorAzureV12">
            <summary>
            The AzureV12 interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorAzureV12.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext160)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">The analyzer to use.</param>
            <param name="context">The 160 interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorAzureV12.CreateTableStatementsInterpretationVisitor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Creates the table statement interpretation visitor for Azure v12.
            </summary>
            <param name="adaptorAnalyzer">The schema analyzer to use.</param>
            <returns>The 160 table statement interpretation visitor.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw">
            <summary>
            The SQL DW interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visits CreateTableStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AddSensitivityClassificationStatement)">
            <summary>
            DW should stay with compatibility level 130 but have to support ADD SENSITIVITY CLASSIFICATION statement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SetTransactionIsolationLevelStatement)">
            <summary>
            Implements explicit visitor on SetTransactionIsolationLevelStatement for Dw.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterPartitionStatement)">
            <summary>
            ALTER TABLE TableName { SPLIT | MERGE } RANGE (boundary_value)
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropWorkloadClassifierStatement)">
            <summary>
            Interprets DropWorkloadClassifierStatement for Dw.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorSqlServerless">
            <summary>
            The SQL Serverless interpretation visitor that processes the tsql fragments to call SqlSchemaAnalyzer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitorSqlServerless.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext160)">
            <summary>
            Constructor.
            </summary>
            <param name="analyzer">The analyzer to use.</param>
            <param name="context">The SQL Serverless Pools interpretation context.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="Analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.InterpretBodyDependencies">
            <summary>
            This property will be override by derived visitors to determine interpret
            StatementList or not.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.Subroutine">
            <summary>
            Gets / Sets the descriptor for the current subroutine
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.SubroutineToParameterRelationship">
            <summary>
            Gets the relateionship class from subroutine to parameters. The derived classes must provide this info.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.SubroutineToDynamicObjectRelationship">
            <summary>
            Gets the relationship class from subroutine to dynamic objects. The derived classes must provide this info.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.SubroutineNames">
            <summary>
            Get the names for the current subroutine
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.InterpretParameters(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureParameter})">
            <summary>
            explicitly interpret the ProcedureParameter to make sure this is done before interpreting body
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.StatementList)">
            <summary>
            Interpret subroutine body
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SubroutineInterpretationVisitor.CleanUpAfterVisitation">
            <summary>
            Cleans up the information relating to the currently handled subrouting
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceAndDmlTargetInterpretationVisitor.CreatePotentiallyAmbiguousColumnSourceFromSchemaObjectAndVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.String,System.Boolean,System.Type)">
            <summary>
            Creates a column source based off a SON that could be ambiguous and performs visitation on it
            </summary>
            <param name="name">SON of the source</param>
            <param name="alias">Alias for the source</param>
            <param name="isVariable">Whether this is a variable object</param>
            <param name="sourceType">Type for the source (could be function)</param>
            <returns>A column source for consumption</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor">
            <summary>
            The class to create a table source from an AST node
            </summary>
            <param name="analyzer"></param>
            <param name="context"></param>
            <param name="columnResolver">The column resolver where this table source resides</param>
            <param name="additionalColumnResolver">The column resolver from which the column sources are also available to this column source</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.OpenJsonTableReference)">
            <summary>
            Explicit Visitor for OpenJsonTableReference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.GlobalFunctionTableReference)">
            <summary>
            Explicit Visitor for Builtin TableValuedFunctions
            SELECT * FROM string_split()
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor160.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.GlobalFunctionTableReference)">
            <summary>
            Explicit Visitor for Builtin TableValuedFunctions
            SELECT * FROM generate_series()
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.QueryDerivedTable)">
            <summary>
            Creates a new DML visitor for the subQuery WITHOUT external references
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.SchemaObjectNameIsTriggerTarget(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Checks whether the SchemaObjectName is pointing to the TriggerTarget as an inserted/deleted reference
            </summary>
            <param name="name">SchemaObjectName to check</param>
            <returns>True if the SON is inserted/deleted inside a trigger</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.InsideDmlTrigger">
            <summary>
            Gets whether there is a trigger target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.AddExplicitlyDefinedColumnsToSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Boolean)">
            <summary>
            Adds columns that are explicitly defined as a list of Identifiers to the source
            </summary>
            <param name="source">Source to add to</param>
            <param name="colums">Columns to add</param>
            <param name="performVisitation">Whether or not we want visitation to happen</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.AddSchemaObjectTableSourceAsTriggerTargetAndVisit(Microsoft.SqlServer.TransactSql.ScriptDom.NamedTableReference,System.Boolean)">
            <summary>
            Adds the SOTS as the triggertarget
            </summary>
            <param name="node">SOTS node</param>
            <param name="isVariable">Volatility status</param>
            <returns>The columnSource that was added</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableSourceInterpretationVisitor90.MakeSchemaObjectTableSourcePartOfColumnSources(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.String,System.Type,System.Boolean)">
            <summary>
            Processes a 'simple' SOTS by putting it in the ColumnSources in the right fashion and performing visitation on the SON (not the alias)
            </summary>
            <param name="node">SOTS</param>
            <param name="alias">Alias for the columnSource</param>
            
            <param name="isVariable">wether this is a variable or not</param>
            <returns>Returns the added columnSource</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateTableStatement
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.FilegroupTextImageTarget">
            <summary>
            This enumeration signals the target for the Visitation of FilegroupOrPartitionScheme
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._tableDescriptor">
            <summary>
            Descriptor for the current table
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._currentColumn">
            <summary>
            Descriptor for the current column
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._tableToColumnsRelationship">
            <summary>
            The relationship class from table to columns, the "table" can any column source
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._filegroupTarget">
            <summary>
            Signals which type of relationship to use when attaching a Filegroup (ON or TEXTIMAGE_ON)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._currentConstraint">
            <summary>
            Holds the current constraint
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._alterTableFragment">
            <summary>
            Holds the alter table fragment
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._columnIdentifier">
            <summary>
            Holds the Identifier for the column
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._tableSchemaObjectName">
            <summary>
            Gets the SchemaObjectName of the table
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor._isAlterStatement">
            <summary>
            Indicates if this is an ALTER statement, we should avoid adding columns to the model from ALTER statements
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Table">
            <summary>
            Gets the descriptor for the table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.TableToColumns">
            <summary>
            Get the relationship class from Table to Columns
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.CurrentColumn">
            <summary>
            Gets the descriptor for the current Column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.CurrentConstraint">
            <summary>
            Gets the current constraint
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.AlterTableFragment">
            <summary>
            Gets the alter table fragment
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.TableSchemaObjectName">
            <summary>
            Gets the SchemaObjectName of the table
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.FilegroupTarget">
            <summary>
            Gets the filegroup target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Clear the table descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Visits the CreateTableStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAddTableElementStatement)">
            <summary>
            Clears the table descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAddTableElementStatement)">
            <summary>
            ALTER TABLE x ADD
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme)">
            <summary>
            Visits FilegroupOrPartitionScheme
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme)">
            <summary>
            Handles the TextImage_On and ON for the table
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition)">
            <summary>
            Performs the explicit visit for the ColumnDefinition
            Clears out the state specific for ColumnDefinitions
            </summary>
            <param name="node">target node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition)">
            <summary>
            Visits the CreateTableStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnWithSortOrder)">
            <summary>
            Visits the ColumnWithSortOrder
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnWithSortOrder)">
            <summary>
            Visits the ColumnWithSortOrder
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UniqueConstraintDefinition)">
            <summary>
            Performs the explicit visit for the UniqueConstraintDefinition
            Clears out the state specific for UniqueConstraints
            </summary>
            <param name="node">target node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.UniqueConstraintDefinition)">
            <summary>
            Visits UniqueConstraintDefinition
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CheckConstraintDefinition)">
            <summary>
            Performs the explicit visit for the CheckConstraintDefinition
            Clears out the state specific for CheckConstraintDefinition
            </summary>
            <param name="node">target node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CheckConstraintDefinition)">
            <summary>
            Visits UniqueConstraintDefinition
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ForeignKeyConstraintDefinition)">
            <summary>
            Performs the explicit visit for the ForeignKeyConstraint
            Clears out the state specific for ForeignKeyConstraint
            </summary>
            <param name="node">target node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ForeignKeyConstraintDefinition)">
            <summary>
            Visits ForeignKeyConstraintDefinition
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DefaultConstraintDefinition)">
            <summary>
            Visits the DefaultConstraintDefinition
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.DefaultConstraintDefinition)">
            <summary>
            Visits the DefaultConstraintDefinition
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.GetRelationshipFromTargetToFilegroup(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.FilegroupTextImageTarget)">
            <summary>
            Get the relationship class from target to filegroup
            </summary>
            <param name="filegroupTarget">the type of the target</param>
            <returns>the relationship for the target</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.GetSchemaNameFromSchemaOwnedObject(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Gets the schemaName from the table element descriptor
            </summary>
            <returns>Null if no schema defined, or the schemaname</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.BuildConstraintName(Microsoft.SqlServer.TransactSql.ScriptDom.Identifier)">
            <summary>
            Builds the constraint name
            </summary>
            <param name="constraintIdentifier">Name of the constraint</param>
            <returns>Correctly builds the name of the constraint taking the schema name into account</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.AddInlineConstraintAnnotationDescriptor">
            <summary>
            Adds the appropriate SqlInlineConstraintAnnotation descriptor to the current constraint if needed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.VisitConstraintIdentifier(Microsoft.SqlServer.TransactSql.ScriptDom.ConstraintDefinition,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Visits the identifier for the constraint if there is an identifier
            </summary>
            <param name="constraint">Constraint AST</param>
            <param name="constraintDescriptor">AlementDescriptor</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.GetConstraintFragmentForIdentifiedElement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method will return the correct statement to be used when identifying the element for a constraint
            </summary>
            <param name="constraintNode">Fragment for the constraint</param>
            <returns>The correct fragment to use when calling IdentifiedElement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.IsGraphColumnReference(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression)">
            <summary>
            Determines if the column reference expression is a graph type.
            </summary>
            <param name="column">The column to check.</param>
            <returns>True if the column expression is not null and is a graph type column reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.GetGraphColumnReferenceName(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression)">
            <summary>
            Gets the pseudo column string name if the column reference is not null and is a pseudo column.
            </summary>
            <param name="column">The column to check.</param>
            <returns>String.Empty if the column is null or not a pseudo column, the appropriate name otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor120.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IndexDefinition)">
            <summary>
            Visits UniqueConstraintDefinition
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor120.AddInlineIndexAnnotationDescriptor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor)">
            <summary>
            Adds the appropriate SqlInlineIndexAnnotation descriptor to the current index if needed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SystemVersioningTableOption)">
            <summary>
            Visits Temporal SystemVersioningTableOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IndexDefinition)">
            <summary>
            Visits IndexDefinition
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionDefinition)">
            <summary>
            Interpret column encryption
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor150.currentEdgeConstraintClauseDescriptor">
            <summary>
            The current edge constraint clause descriptor being visited.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.GraphConnectionConstraintDefinition)">
            <summary>
            Visits the equivalent of the edge constraint SQL DOM node.
            </summary>
            <param name="node">The edge constraint definition.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.GraphConnectionBetweenNodes)">
            <summary>
            Visits the individual constraint clause SQL DOM node.
            </summary>
            <param name="node">The edge constraint clause DOM node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor90">
            <summary>
            This class handles the interpretation of the parts of CREATE / ALTER TABLE statements different from its SQL80 counterpart
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            ctor with SqlSchemaAnalyzer, SqlInterpretationHelper, and ComparisonManager provided
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor90.GetRelationshipFromTargetToFilegroup(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitor.FilegroupTextImageTarget)">
            <summary>
            Get the relationship class from target to filegroup
            </summary>
            <param name="filegroupTarget">the type of the target</param>
            <returns>the relationship for the target</returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw._ctasColumns">
            <summary>
            Holds the list of explicitly defined columns of this ctas.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Visits CreateTableStatement
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TableDistributionOption)">
            <summary>
            Explicit Visits TableDistributionOption
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexOption)">
            <summary>
            Explicit Visits TableIndexOption
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ProcessInlineIndex(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement,Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexOption)">
            <summary>
            Process inline indexes for Dw table
            </summary>
            <param name="node">node to Visit</param>
            <param name="indexOption">index to process</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnWithSortOrder)">
            <summary>
            Explicit visits ColumnWithSortOrder
            </summary>
            <param name="node">node to explicit visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SelectStatement)">
            <summary>
            Explicit visits SelectStatement
            </summary>
            <param name="node">node to explicit visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TableStatementsInterpretationVisitorDw.ProcessPartitionTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement,Microsoft.SqlServer.TransactSql.ScriptDom.TablePartitionOption)">
            <summary>
            Process partition option for Dw table
            </summary>
            <param name="node">Node to visit</param>
            <param name="partitionOption">Partition table option</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateTriggerStatement and
            AlterTriggerStatement
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.TriggerToDynamicColumnSources">
            <summary>
            Relationship Class from the trigger to the dynamic column sources defined in the trigger body
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor._triggerDescriptor">
            <summary>
            Descriptor for the current view
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor._sqlInterpretationVisitor">
            <summary>
            The normal SqlInterpretationVisitor used to interpret trigger body
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.Trigger">
            <summary>
            Gets the descriptor for the current trigger
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.Scope">
            <summary>
            Gets the scope for the current trigger
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTriggerStatement)">
            <summary>
            Clear the trigger descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTriggerStatement)">
            <summary>
            Visits the CreateTableStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTriggerStatement)">
            <summary>
            Clear the trigger descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTriggerStatement)">
            <summary>
            Visits the AlterTableStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.StatementList)">
            <summary>
            Visits trigger body
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor90">
            <summary>
            This class handles the interpretation of the CreateTriggerStatement and
            AlterTriggerStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.SqlInterpretationVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="helper">SQL-version-savvy Interpretation helper</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.TriggerStatementInterpretationVisitor90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsTriggerOption)">
            <summary>
            Visits the TriggerOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor">
            <summary>
            This class handles the interpretation of the CreateViewStatement and
            AlterViewStatement
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor._viewDescriptor">
            <summary>
            Descriptor for the current view
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor._viewColumns">
            <summary>
            Holds the list of the explicitly defined columns of the view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="mapping">SchemaMapping to use</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.View">
            <summary>
            Gets the descriptor for the current view
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateViewStatement)">
            <summary>
            Clear the view descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateViewStatement)">
            <summary>
            Visits the CreateViewStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterViewStatement)">
            <summary>
            Clear the view descriptor
            </summary>
            <param name="node">Node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterViewStatement)">
            <summary>
            Visits the AlterViewStatement
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.VisitViewStatementBody(Microsoft.SqlServer.TransactSql.ScriptDom.ViewStatementBody)">
            <summary>
            visit CreateViewStatement / AlterViewStatement
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitor.VisitJoinNodes(Microsoft.SqlServer.TransactSql.ScriptDom.TableReference)">
            <summary>
            We're visiting every JOIN target (e.g. either table or another JOIN)
            and collecting all the external data source relationships from there
            
            This method recursively calls itself and traverses binary tree in search
            for relationship to be processed.
            </summary>
            <param name="tableReference"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitorDw">
            <summary>
            This class handles the interpretation of the CreateViewStatement and
            AlterViewStatement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitorDw.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext)">
            <summary>
            Constructor
            </summary>
            <param name="analyzer">Analyzer to call back to</param>
            <param name="mapping">SchemaMapping to use</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateViewStatement)">
            <summary>
            Visits CreateViewStatement
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationVisitors.ViewStatementsInterpretationVisitorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ViewDistributionOption)">
            <summary>
            Explicit Visits ViewDistributionOption
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement">
            <summary>
            The base model element for the Sql domain.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISupportSqlDecimalReader">
            <summary>
            This interface defines methods which need to be implemented differently for SqlDataReaderShim/OfflineSqlDataReader
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.ColumnStoreComparisonPostProcessor.Process(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Implements the logic to remove from the result and the changes object columns that may have shown up
            during processing related to memory optimized column store tables.
            </summary>
            <param name="sourceElement">The source model element.</param>
            <param name="targetElement">The target model element.</param>
            <param name="configuration">The configuration used during the comparison.</param>
            <param name="result">The result which needs modification.</param>
            <param name="changes">The changes found during the comparison.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.ExpressionNormalizationVisitor">
            <summary>
            This class is used to normalize the expression according to Sql rules.
            
            NB: When adding new rewrite rules, you should override ExplicitVisit(...), not Visit(...).
            When implementing ExplicitVisit(...) make sure that you normalize any child element - that
            is any class member that has an ExplicitVisit(...) defined for it in the TSqlConcreteFragmentVisitor
            or other base class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.LedgerTableColumnComparisonPostProcessor">
            <summary>
            Class that compares the table column changes that were captured between
            the source and target databases and processes them by adding, removing,
            or altering those changes according to dependency analysis.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.LedgerTableColumnComparisonPostProcessor.Process(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compares and processes the changes captured.
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <param name="configuration"></param>
            <param name="result"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.ModelComparerComparisonHelper.GetClusteredPeerIndex``1(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndex)">
            <summary>
            Returns the clustered index on an object, given any index on the same object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.PartitionSpecificationComparisonPostProcessor.Process(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Remove matched date time values from changes with different format
            dd/mm/yyyy hh:mm:ss yyyymmdd
            </summary>
            <param name="sourceElement">Source table partition specification</param>
            <param name="targetElement">Target table partition specification</param>
            <param name="configuration">Model comparer configuration</param>
            <param name="result">Comparison result</param>
            <param name="changes">Comparison changes</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.SpatialIndexComparisonPostProcessor.RemoveNear``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Remove the specified <paramref name="item"/> from the supplied <paramref name="list"/>.
            </summary>
            <typeparam name="T">
            Type of elements in the list.
            </typeparam>
            <param name="list">
            List to be searched.
            </param>
            <param name="item">
            Item to remove from the list.
            </param>
            <param name="lastIndex">
            Greatest index of item in the list.  
            If item is not found at this index, the list will be searched backwards from this index.
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.SpatialIndexComparisonPostProcessor.FindIndex``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Find the index of <paramref name="item"/> in the supplied <paramref name="list"/>,
            starting from <paramref name="lastIndex"/> and working backwards through the list.
            </summary>
            <typeparam name="T">
            Type of elements in the list.
            </typeparam>
            <param name="list">
            List to be searched.
            </param>
            <param name="item">
            Item to locate in the list.
            </param>
            <param name="lastIndex">
            Start of search through the list.
            </param>
            <returns>
            Index of item in the list; or -1 if the item is not found.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.XmlCompressionComparisonPostProcessor.Process(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compressions applied on table will be applied to the cluster index/constraint only and this has to applied back to the table.
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <param name="configuration"></param>
            <param name="result"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelComparers.XmlCompressionComparisonPostProcessorForSpecifiesIndex.Process(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            clustered index constraints has to merge the xml compression with the table
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <param name="configuration"></param>
            <param name="result"></param>
            <param name="changes"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelElementTypeComparer">
            <summary>
            This class allows you to compare model element types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.CompatibilityModeNotSupported">
            <summary>
              Looks up a localized string similar to Compatibility mode {0} is not valid for the target platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.Element0MissingClusteredIndexRequiredIn1">
            <summary>
              Looks up a localized string similar to The element {0} does not have a clustered index. A clustered index is required for inserting data in {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.Element0NotSupportedIn1">
            <summary>
              Looks up a localized string similar to The element {0} is not supported in {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.Element0Property1NotSupportedIn2">
            <summary>
              Looks up a localized string similar to The element {0} has property {1} set to a value that is not supported in {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.InvalidDml">
            <summary>
              Looks up a localized string similar to {0}: {1} contains a statement that is not supported on {2}. The specific error is: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.InvalidDmlUnnamedElement">
            <summary>
              Looks up a localized string similar to A {0} contains a statement that is not supported on {1}. The specific error is: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.ModelContains0Errors">
            <summary>
              Looks up a localized string similar to Model translation is not allowed because the model contains {0} errors..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ModelTranslationValidationResources.Permission0NotValidForObject1In2">
            <summary>
              Looks up a localized string similar to The permission &apos;{0}&apos; is not valid for the target object &apos;{1}&apos; in {2}..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlConnectionPool">
            <summary>
            This class implements a simple SqlConnection pool for offline mode
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlConnectionPool.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Int32,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Initializes the OfflineSqlConnection pool
            </summary>
            <param name="connectionFactory"></param>
            <param name="numberOfConnections"></param>
            <param name="connectionRetryPolicy"></param>
            <param name="commandRetryPolicy"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlConnectionPool.GetSqlConnectionFromPool">
            <summary>
            Returns a sqlConnection from the pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlConnectionPool.AddSqlConnectionToPool(Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection)">
            <summary>
            Adds the sqlConnection to the pool
            </summary>
            <param name="sqlConnection"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlConnectionPool.Dispose">
            <summary>
            Releases all the sqlconnections in the pool
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlDataReader">
            <summary>
            Implements Offline SQL Datareader
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlDataReader.RecordsAffected">
            <summary>
            Implemented as it's part of IDataReader interface but this value is not used
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OfflineSqlDataReader.Dispose">
            <summary>
            Implemented as it's part of IDisposable interface
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.OrdinalSqlDataReader">
            <summary>
            Wraps a SqlDataReader, doing column name matching via Ordinal comparisons instead of based on the collation of the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.Exceptions.ParameterizationFormatException">
            <summary>
            ParameterizationFormatException is used to surface format exceptions encountered in the TSQL batch to perform 
            auto-parameterization of literals for Always Encrypted.
            Note: The code is copied from sqltoolsservice
            https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/Exceptions/ParameterizationFormatException.cs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.Exceptions.ParameterizationParsingException">
            <summary>
            ParameterizationParsingException is used to surface parse errors encountered in the TSQL batch while creating a parse tree
            Note: The code is copied from sqltoolsservice
            https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/Exceptions/ParameterizationParsingException.cs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.Exceptions.ParameterizationScriptTooLargeException">
            <summary>
            Note: The code is copied from sqltoolsservice
            https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/Exceptions/ParameterizationScriptTooLargeException.cs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.MessageHelper">
            <summary>
            Note: The code is copied from 
            sqltoolsservice(https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/MessageHelper.cs)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.ScalarExpressionTransformer">
            <summary>
            Note: The code is copied from sqltoolsservice
            https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/ScalarExpressionTransformer.cs
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.ScalarExpressionTransformer.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to a byte[]
            Note: this method expects "0x" prefix to be stripped off from the input string
            For example, to convert the string "0xFFFF" to byte[] the input to this method should be "FFFF"
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.SqlParameterizer">
            <summary>
             Note: The code is copied from sqltoolsservice
             https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/SqlParameterizer.cs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Parameterization.TsqlMultiVisitor">
            <summary>
            Entry point for SqlParameterization, this class is responsible for visiting the parse tree and identifying the scalar expressions to be parameterized
            Note: The code is copied from sqltoolsservice
            https://github.com/microsoft/sqltoolsservice/blob/fe4c2ce5b972e4e4988ba7edb1037a57624e2fb8/src/Microsoft.SqlTools.ServiceLayer/AutoParameterizaition/TsqlMultiVisitor.cs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo">
            <summary>
            Class to store information about a parameter of a procedure or function invocation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.#ctor(System.String,System.UInt32,System.Boolean)">
            <summary>
            constructor with parameter name, parameter index, and required property provided
            </summary>
            <param name="parameterName">the name of the parameter</param>
            <param name="parameterIndex">the index of the paramter</param>
            <param name="required">the parameter is required</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.#ctor(System.String,System.UInt32)">
            <summary>
            constructor with parameter name and parameter index provided
            </summary>
            <param name="parameterName">the name of the parameter</param>
            <param name="parameterIndex">the index of the paramter</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.#ctor(System.UInt32)">
            <summary>
            constructor with only parameter index provided
            </summary>
            <param name="parameterIndex">the index of the parameter</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.PopulateParameterValue(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter},Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            populate the parameter value from a set of given paramters
            </summary>
            <param name="parameters">the set of parameters used to populate the current instance</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.PopulateParameterValue(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter)">
            <summary>
            populate the parameter value from a given paramter
            </summary>
            <param name="parameters">the parameter used to populate the current instance</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ParameterValueInfo.ExtractParameterValue(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Extracts actual string out of parameter (which can be either string literal or identifier), returns null if fails
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementNameHelper.GranteeIdentifierIndex">
            <summary>
            Index of grantee identifier in set of identifiers for a permission statement name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementNameHelper.GrantorIdentifierIndex">
            <summary>
            Index of grantor identifier in set of identifiers for a permission statement name.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementNameHelper.CreateIdentifiers(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionAction,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,System.String,System.String,System.String[])">
            <summary>
            Return list of identifiers to be used for a permission statement element
            based items related to the properties of the statement.
            </summary>
            <param name="action">Permission action type</param>
            <param name="permission">Permissions being granted or denied</param>
            <param name="objectKind">CLass of the securable</param>
            <param name="granteeIdentifier">String name of principal to which permission action applies.</param>
            <param name="grantorIdentifier">String name of principal from which principal executing permission statement derives its right to grant, deny, or revoke the permission.</param>
            <param name="securableIdentifiers">Identifiers for object whose security is affected by the permission statement.</param>
            <returns>
            List of identifiers to be used for a permission statement.
            </returns>
            <remarks>
            The set of identifiers for the element name is composed of the following (in this order):
            1. One identifier derived from a combination of enumeration values for permission action (GRANT or DENY), permission, and security object kind.
            2. Single identifier for grantee.
            3. Single identifier for grantor.
            4. Identifiers for securable, if any.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementNameHelper.CreateIdentifiers(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionAction,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission,Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Return list of identifiers to be used for a permission statement element
            based items related to the properties of the statement.
            </summary>
            <param name="action">Permission action type</param>
            <param name="permission">Permissions being granted or denied</param>
            <param name="objectKind">CLass of the securable</param>
            <param name="granteeIdentifier">String name of principal to which permission action applies.</param>
            <param name="grantorIdentifier">String name of principal from which principal executing permission statement derives its right to grant, deny, or revoke the permission.</param>
            <param name="securableIdentifiers">Identifiers for object whose security is affected by the permission statement.</param>
            <returns>
            List of identifiers to be used for a permission statement.
            </returns>
            <remarks>
            The set of identifiers for the element name is composed of the following (in this order):
            1. One identifier derived from a combination of enumeration values for permission action (GRANT or DENY), permission, and security object kind.
            2. Single identifier for grantee.
            3. Single identifier for grantor.
            4. Identifiers for securable, if any.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementNameHelper.GetGrantorIdentifier(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement)">
            <summary>
            Return name of grantor captured in the name of the permission statement.
            </summary>
            <param name="statement">Permission statement element</param>
            <returns>
            Name of grantor for permission statement;
            or null if: 
            1. <paramref name="statement"/> is null
            2. Value of Name property for <paramref name="statement"/> is null
            3. Identifier set for permission statement is missing identifier for grantor.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PermissionStatementTypeComparerFlags">
            <summary>
            Used in conjuction with PermissionStatementTypeComparer class to specify which properties of PermissionStatementType to compare
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PopulatorWorkItem">
            <summary>
            Simple container class for parameters needed by a PopulatorWorkItem to execute itself
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PopulatorWorkItem.#ctor(System.String,System.Int32,System.IO.Stream,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlTypeMapper)">
            <summary>
            Simply creates a PopulatorWorkItem from the input parameters
            </summary>
            <param name="populatorQueryHeader"></param>
            <param name="populatorIndex"></param>
            <param name="stream"></param>
            <param name="request"></param>
            <param name="typeMapper"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ProcedureElementID">
            <summary>
            This class is used by RE to detect that the data we are currently reading
            is for a stored proc that is different from the one we just read.  That
            way we know when to we are done with one proc and moving on to the next.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ApplicationRolePropertyPopulator90">
            <summary>
            NOTE: ISqlAppRole is not in the same inheritance hierarchy as ISql80AppRole
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.CertificatePropertyPopulator90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FileEncryptionSource)">
            <summary>
            avoid visiting children
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.CertificatePropertyPopulator90.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CertificateOption)">
            <summary>
            populate generated new keys
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator100.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Populates sensitivity classification attributes on the column for versions [10, 14]
            </summary>
            <param name="node">EXEC sp_addextendedproperty statement with sensitivity attributes</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator130">
            <summary>
            Defines the column definition model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator130.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator130.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableColumnDefinition)">
            <summary>
            Implements the visitor design pattern to populate the table column properties
            with the values from the ExternalTableColumnDefinition AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly in this method.
            </summary>
            <param name="node">The ExternalTableColumnDefinition node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AddSensitivityClassificationStatement)">
            <summary>
            Implements the visitor design pattern to populate the table column properties
            with the sensitivity attributes from the AddSensitivityClassificationStatement AST node.
            Overrides the ExplicitVisitor method here since DW's compatibility level is 130 and
            ADD SENSITIVITY CLASSIFICATION statement should be supported for SQL 150 and higher, Azure V12 and DW as well
            </summary>
            <param name="node">The AddSensitivityClassificationStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator140">
            <summary>
            Defines the column definition model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator150">
            <summary>
            Defines the column definition model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator160">
            <summary>
            Defines the column definition model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator160.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnDefinitionPropertyPopulator160.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnStoreIndexPropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external columnstore index populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ColumnStoreIndexPropertyPopulatorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexOption)">
            <summary>
            Explict visits TableIndexOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlEdgeConstraintPropertyPopulator">
            <summary>
            Populates all edge properties for the 'SqlEdgeConstraint' class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlEdgeConstraintPropertyPopulator.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The SqlEdgeConstraint element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlEdgeConstraintPropertyPopulator.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Static 'Create' method for creating this object.
            </summary>
            <param name="element">The 'SqlEdgeConstraint' element.</param>
            <returns>An instance of this object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlEdgeConstraintPropertyPopulator.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.GraphConnectionConstraintDefinition)">
            <summary>
            Visits the connection constraint definition.
            </summary>
            <param name="node">The connection constraint definition.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlEdgeConstraintPropertyPopulator.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableConstraintModificationStatement)">
            <summary>
            Visits the connection constraint for an alter table statement.
            </summary>
            <param name="node">The alter table definition.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.EventSessionTargetPropertyPopulatorAzureV12">
            <summary>
            AzureV12 enables the file target but it must have a valid absolute URL with an https protocol
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130">
            <summary>
            Defines the external data source model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern to populate the external data source model properties
            with the values from the CreateExternalDataSourceStatement AST node.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.SetExternalDataSourceType(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source type in the SqlExternalDataSource object.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceLiteralOrIdentifierOption)">
            <summary>
            Implements the visitor design pattern to populate the external data source model optional properties
            with the values from the ExternalDataSourceLiteralOrIdentifierOption AST node.
            </summary>
            <param name="node">The ExternalDataSourceLiteralOrIdentifierOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator130.ValidateResourceManagerProperty(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOption,System.String,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSourceType)">
            <summary>
            Validates conflicting resource manager location and data source location properties for Hadoop external data sources.
            </summary>
            <param name="option">Resource manager location option.</param>
            <param name="externalDataSourceResourceManagerLocation">External data source resource manager location value.</param>
            <param name="externalDataSourceLocation">External data source location value.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator140">
            <summary>
            Defines the external data source model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator140.SetExternalDataSourceType(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source type in the SqlExternalDataSource object.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator140.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern to populate the external data source model properties
            with the values from the CreateExternalDataSourceStatement AST node.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150">
            <summary>
            Defines the external data source model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.SetExternalDataSourceType(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source type in the SqlExternalDataSource object.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.SetExternalDataSourcePushdownOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source pushdown option in the SqlExternalDataSource object.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern to populate the external data source model properties
            with the values from the CreateExternalDataSourceStatement AST node.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceLiteralOrIdentifierOption)">
            <summary>
            Implements the visitor design pattern to populate the external data source model optional properties
            with the values from the ExternalDataSourceLiteralOrIdentifierOption AST node.
            </summary>
            <param name="node">The ExternalDataSourceLiteralOrIdentifierOption node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator160">
            <summary>
            Defines the external data source model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator160.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulator160.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12">
            <summary>
            Defines the external data source model property populator for AzureV12.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.SetExternalDataSourceType(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source type in the SqlExternalDataSource object.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceLiteralOrIdentifierOption)">
            <summary>
            Implements the visitor design pattern to populate the external data source model optional properties
            with the values from the ExternalDataSourceLiteralOrIdentifierOption AST node.
            </summary>
            <param name="node">The ExternalDataSourceLiteralOrIdentifierOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.ValidateDatabaseNameProperty(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOption,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSourceType)">
            <summary>
            Validates that the database option is expected for the external data source type and that its value is not empty when it is required.
            </summary>
            <param name="option">The Resource manager location option.</param>
            <param name="databaseName">The value for the database name.</param>
            <param name="externalDataSourceType">The external data source type.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorAzureV12.ValidateShardMapNameProperty(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOption,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSourceType)">
            <summary>
            Validates that the shard map name option is expected for the external data source type and that its value is not empty when it is required.
            </summary>
            <param name="option">The Resource manager location option.</param>
            <param name="shardMapName">The value for the shard map name.</param>
            <param name="externalDataSourceType">The external data source type.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw">
            <summary>
            Defines the external data source model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern to populate the external data source model properties
            with the values from the CreateExternalDataSourceStatement AST node.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.SetExternalDataSourceType(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Sets the external data source type in the SqlExternalDataSource object, add support of native eds.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node with the values.</param>
            <param name="externalDataSource">The SqlExternalDataSource target object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceLiteralOrIdentifierOption)">
            <summary>
            Implements the visitor design pattern to populate the external data source model optional properties
            with the values from the ExternalDataSourceLiteralOrIdentifierOption AST node.
            </summary>
            <param name="node">The ExternalDataSourceLiteralOrIdentifierOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalDataSourcePropertyPopulatorDw.SetLocationProperty(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSource)">
            <summary>
            Validates location and data source location properties for external data sources.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement node.</param>
            <param name="externalDataSource">External data source value.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130">
            <summary>
            Defines the external file format model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external file format populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Implements the visitor design pattern to populate the external file format model properties
            with the values from the CreateExternalFileFormatStatement AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly and validated in this method. 
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatContainerOption)">
            <summary>
            Implements the visitor design pattern to populate the external file format option properties
            with the values from the ExternalFileFormatContainerOption AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly in this method.
            </summary>
            <param name="node">The ExternalFileFormatContainerOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.VerifyConflictingProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Verifies properties for conflicting combinations.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator130.VerifyRequiredProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Verify required properties are set.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator140">
            <summary>
            Defines the external file format model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external file format populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator150">
            <summary>
            Defines the external file format model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external file format populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator150.VerifyConflictingProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Verifies properties for conflicting combinations.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator160">
            <summary>
            Defines the external file format model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator160.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulator160.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external file format populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw">
            <summary>
            Defines the external file format model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external file format populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Implements the visitor design pattern to populate the external file format model properties
            with the values from the CreateExternalFileFormatStatement AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly and validated in this method. 
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatContainerOption)">
            <summary>
            Implements the visitor design pattern to populate the external file format option properties
            with the values from the ExternalFileFormatContainerOption AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly in this method.
            </summary>
            <param name="node">The ExternalFileFormatContainerOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.VerifyConflictingProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Verifies properties for conflicting combinations.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalFileFormatPropertyPopulatorDw.VerifyRequiredProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Verify required properties are set.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLanguageFilePropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLanguageFilePropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external language file populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLanguagePropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLanguagePropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external language populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLibraryFilePropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLibraryFilePropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external library file populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLibraryPropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalLibraryPropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external library populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamingJobPropertyPopulator150">
            <summary>
            Defines the external streaming job property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamingJobPropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamingJobPropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external data source populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamingJobPropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamingJobStatement)">
            <summary>
            Implements the visitor design pattern to populate the external data source model properties
            with the values from the CreateExternalStreamingJobStatement AST node.
            </summary>
            <param name="node">The CreateExternalStreamStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamPropertyPopulator150">
            <summary>
            Defines the external stream model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamPropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamPropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external stream populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamPropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamStatement)">
            <summary>
            Implements the visitor design pattern to populate the external stream model properties
            with the values from the CreateExternalStreamStatement AST node.
            </summary>
            <param name="node">The CreateExternalStreamStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalStreamPropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamLiteralOrIdentifierOption)">
            <summary>
            Implements the visitor design pattern to populate the external stream model optional properties
            with the values from the ExternalDataSourceLiteralOrIdentifierOption AST node.
            </summary>
            <param name="node">The ExternalDataSourceLiteralOrIdentifierOption node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130">
            <summary>
            Defines the external table model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Implements the visitor design pattern to populate the external table model properties
            with the values from the CreateExternalTableStatement AST node.
            </summary>
            <param name="node">The CreateExternalTableStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRejectTypeOption)">
            <summary>
            Implements the visitor design pattern to populate the external table reject option properties
            with the values from the ExternalTableRejectTypeOption AST node.
            Overrides the ExplicitVisitor method to not visit the node's children,
            as the children will be visited explicitly in this method.
            </summary>
            <param name="option">The ExternalTableRejectTypeOption node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.ValidateConflictingProperties(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement,System.Nullable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTableRejectType},System.Nullable{System.Double})">
            <summary>
            Validates conflicting external table reject type and external table reject sample value properties.
            The external table reject sample value is only supported with the reject type being Percentage.
            </summary>
            <param name="node">Create external table statement node.</param>
            <param name="externalTableRejectType">External table reject type.</param>
            <param name="externalTableRejectSampleValue">External table reject sample value.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator130.ParseExternalTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOption,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable@)">
            <summary>
            Parsing External table option for the current version
            </summary>
            <param name="option">ExternalTableOption</param>
            <param name="externalTable">SqlExternalTable</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator140">
            <summary>
            Defines the external table model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator150">
            <summary>
            Defines the external table model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator150.ParseExternalTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOption,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable@)">
            <summary>
            Parsing External table option for the current version
            </summary>
            <param name="option">ExternalTableOption</param>
            <param name="externalTable">SqlExternalTable</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator160">
            <summary>
            Defines the external table model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator160.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulator160.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorAzureV12">
            <summary>
            Defines the external table model property populator for AzureV12.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorAzureV12.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor of the ExternalTablePropertyPopulatorAzureV12.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorAzureV12.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorAzureV12.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Implements the visitor design pattern to populate the external table model properties
            with the values from the CreateExternalTableStatement AST node.
            </summary>
            <param name="node">The CreateExternalTableStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorAzureV12.ValidateExternalSchemaNameOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable)">
            <summary>
            Validates the values of the schema name and object name options.
            </summary>
            <param name="node">The create external table statement node.</param>
            <param name="externalTable">The external table.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorDw">
            <summary>
            Defines the external table model property populator for Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorDw.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ExternalTablePropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Implements the visitor design pattern to populate the external table model properties
            with the values from the CreateExternalTableStatement AST node.
            </summary>
            <param name="node">The CreateExternalTableStatement node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ForeignKeyConstraintPropertyPopulator90.GetAction(Microsoft.SqlServer.TransactSql.ScriptDom.DeleteUpdateAction)">
            <summary>
            Maps parser action to model action.
            </summary>
            <param name="action">The action to map.</param>
            <returns>The appropriate update/delete action.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.IndexPropertyPopulator90.TryGetBooleanFromParameterForIndexOption(System.String,System.Boolean@)">
            <summary>
            try to get a boolean value from a string, true, yes, on, and 1 for true; false, no, off, and 0 for false
            </summary>
            <param name="parameter"></param>
            <param name="result"></param>
            <returns>true for success; false for failure</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.IndexPropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external columnstore index populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.IndexPropertyPopulatorDw.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexOption)">
            <summary>
            Explict visits TableIndexOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SpatialIndexPropertyPopulator110">
            <summary>
            Interprets CREATE SPATIAL INDEX statements for SQL 11.0
            </summary>
            <remarks>
            Behavior of this class that differs from base 10.0 property populators:
            
            1. Allows GEOMETRY_AUTO_GRID and GEOGRAPHY_AUTO_GRID tessellation schemes.
            2. For the auto grid tessellation schemes, grid densities are set to NONE.
            3. When neither grid tessellation scheme nor GRIDS option is specified, grid densities are set to NONE.
                 Semantically this implicitly means auto grid tessellation scheme is used.
            4. Error raised if GRIDS option is specified for a spatial index with an auto grid tessellation scheme.
            5. Error raised if BOUNDING_BOX is specified for a spatial index with a geography auto grid tessellation scheme.
                 Note that the parser handles the error case of BOUNDING_BOX specified for geography manual grid tessellation scheme.
            6. Population of data compression index option.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SpatialIndexPropertyPopulator110.ClearGridDensities">
            <summary>
            Set the grid density values of the spatial index to NONE.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlDataRetentionPropertyPopulator150">
            <summary>
            Defines the data retention table option model property populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlDataRetentionPropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlDataRetentionPropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates a data retention table option populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlDataRetentionPropertyPopulator150.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.DataRetentionTableOption)">
            <summary>
            Implements the visitor design pattern to populate the data retention table option model properties
            with the values from the DataRetentionTableOption AST node.
            </summary>
            <param name="node">The CreateExternalStreamStatement node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator">
            <summary>
            The visitor that adds annoations to the given holder.  
            </summary>   
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator.SetFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            set the fragment used to populate the property
            </summary>
            <param name="fragment"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator.PreserveCommentsForSysCommentsObject(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            Store the body as a property of the element and keep the header and footer to an annotaiotn
            </summary>
            <param name="node"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator.SetExternalProperty(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Set external properties, we do not call set method on the property, since it
            will add another cache string in the ScriptCache, we directly add 
            ExternalPropertyAnnotation.
            </summary>
            <param name="propertyClass"></param>
            <param name="cacheIdentifier"></param>
            <param name="fragment"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator.PopulateColumnNullability(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition,Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.SqlPropertyPopulator.ValueSetter{System.Boolean})">
            <summary>
            populate nullability for tables, functions, and table types
            by taking into account the fact that columns used primary keys are set to NOT NULL if those columns are not set nullability explicitly
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TableIndexOptionPropertyPopulator.TryGetBooleanFromParameterForTableOption(System.String,System.Boolean@)">
            <summary>
            try to get a boolean value from a string, true, yes, on, and 1 for true; false, no, off, and 0 for false
            </summary>
            <param name="parameter"></param>
            <param name="result"></param>
            <returns>true for success; false for failure</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator140.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator140.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates a 'SqlPropertyPopulator' object.
            </summary>
            <param name="element">The model element.</param>
            <returns>The 'SqlPropertyPopulator' object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator140.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visit for the 'CreateTableStatement' statement. Here additional properties are added
            to the table.
            </summary>
            <param name="node">The statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator150.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator150.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates a new 'SqlPropertyPopulator' of version 150.
            </summary>
            <param name="element">The model element.</param>
            <returns>A 'TablePropertyPopulator150' object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator150.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visit for the 'CreateTableStatement' statement. Here additional properties are added
            to the table.
            </summary>
            <param name="node">The statement.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160">
            <summary>
            Class to populate the table properties from a SQL script.
            Bug: semantic errors must be thrown in Sql160StatementFilterVisitor.cs since the
                 errors thrown from this class and TableStatementsInterpretationVisitor160.cs
                 are never reported to the user because they are never moved to the ErrorManager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates a new 'SqlPropertyPopulator' of version 160.
            </summary>
            <param name="element">The model element.</param>
            <returns>A 'TablePropertyPopulator160' object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visits the create table statement node to set table properties.
            </summary>
            <param name="node">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.VisitLedgerTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Visits the LedgerTableOption of version 160.
            Sets the following table properties:
              * LedgerType.
              * LedgerHistoryTableSchemaName.
              * LedgerHistoryTableName.
              * LedgerViewSchemaName.
              * LedgerViewName.
            Notes:
              * These properties are read in SqlValidationRules as well.
              * This method requires the create table statement node to be able
                to get the history table from the system versioning table option.
            </summary>
            <param name="node">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.GetSystemVersioningTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Gets the system versioning table option from the create table statement.
            </summary>
            <param name="node">Create table statement.</param>
            <returns>System versioning table option if exists; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulator160.GetLedgerTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Gets the ledger table option from the create table statement.
            </summary>
            <param name="node">Create table statement.</param>
            <returns>Ledger table option if exists; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulatorAzureV12.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visit for the 'CreateTableStatement' statement. Here additional properties are added
            to the table.
            </summary>
            <param name="node">The statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external table populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Visits CreateTableStatement
            </summary>
            <param name="node">node to Visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.TableDistributionOption)">
            <summary>
            Explict visits TableDistributionOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TablePropertyPopulatorRouter">
            <summary>
            Routes property population for SqlTableBase elements to the property populator for the appropriate concrete element type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TypeSpecifierPropertyPopulator100.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference)">
            <summary>
            TypeSpecifier's properties are only populated by SqlDataType
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.TypeSpecifierPropertyPopulator90.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference)">
            <summary>
            TypeSpecifier's properties are only populated by SqlDataType
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ViewPropertyPopulatorDw.Create(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Instantiates an external view populator.
            </summary>
            <param name="element">The model element.</param>
            <returns>The property populator instance.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ViewPropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ViewDistributionOption)">
            <summary>
            Explict visits ViewDistributionOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.ViewPropertyPopulatorDw.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.ViewForAppendOption)">
            <summary>
            Explict visits ViewForAppendOption
            </summary>
            <param name="node">node to visit</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.PropertyPopulators.XmlTypeSpecifierPropertyPopulator90.Visit(Microsoft.SqlServer.TransactSql.ScriptDom.XmlDataTypeReference)">
            <summary>
            TypeSpecifier's properties are only populated by SqlDataType
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.RelationshipWarningCategorizer">
            <summary>
            Logic to figure out if we should issue warning or error for particular reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor">
            <summary>
            This class represents a column that has been resolved
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor._potentials">
            <summary>
            Holds the list of all potentials for this column
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor._fragment">
            <summary>
            Fragment for this column
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor._needsNormalization">
            <summary>
            Holds whether or not we could do with some normalizin'
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.NormalizationRequired">
            <summary>
            Handy accessor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Potentials">
            <summary>
            Gets the Potentials for the resolved column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Fragment">
            <summary>
            Gets the Fragment for the Resolved Column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.IsAmbiguous">
            <summary>
            Gets whether this resolved column is ambiguous or not
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.IsWildcard">
            <summary>
            Gets whether this ResolvedColumn denotes a wildcard (SELECT *)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.IsEmpty">
            <summary>
            Gets whether this is an empty descriptor or not
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.ExposedName">
            <summary>
            Gets the name by which this column will be known
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.#ctor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Constructor
            </summary>
            <param name="fragment">Fragment for the resolved column</param>
            <param name="alias">Alias for the object</param>
            <param name="potentials">Potentials for the column</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Initialize">
            <summary>
            Initializes the object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.AddPotential(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor)">
            <summary>
            Adds a potential to the Resolved Column
            </summary>
            <param name="potential">Potential to add</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.AddPotentials(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Adds potentials to the Resolved Column
            </summary>
            <param name="potentials">Potentials to add</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Normalize(Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Normalizes the data in the Column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.GetMatches(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Gets a list of all potentialElementDescriptor that will match the list of Identifiers
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="stringComparer">StringComparer to use</param>
            <returns>A list of all matches</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.CreateEmptyDescriptor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creates an Empty ResolvedDescriptor
            </summary>
            <param name="fragment">Fragment</param>
            <param name="alias">Alias</param>
            <returns>An empty descriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Clone(System.Int32)">
            <summary>
            Creates a clone of this ResolvedDescriptor and re-affinitizes the potentials
            </summary>
            <param name="affinity">new affinity for the potentials</param>
            <returns>A re-affinitized clone</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator`2">
            <summary>
            Composing populator - creates elements and puts them into parent
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator`2.CacheChildElementIfItExists(`0,System.EventArgs)">
            <summary>
            Used for caching an element if its parent was interpreted.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ModelElementPopulator">
            <summary>
            Base Populator, deals with SQL command/reader/etc
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ModelElementPopulator.GetCurrentElementDebugName">
            <summary>
            Gets the name of the element being RE'd if it's named,
            or the type and SQL id if it's anonymous.
            </summary>
            <remarks>
            Intended to be human-readable but not machine-readable, for use in error messages.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SchemaBoundTopLevelElementPopulator`1">
            <summary>
            Populator for schema-bound top-level entities
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator">
            <summary>
            External data source populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.Description">
            <summary>
            Create external data sources description.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.CacheCreatedElement">
            <summary>
            Cache created element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.CreateElementId">
            <summary>
            Get the external data source schema model element id.
            </summary>
            <returns>Returns the external data source schema model element id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external data source element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event argsuments.</param>
            <returns>External data source object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.CreateSqlExternalDataSource(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Creates an SqlExternalDataSource object from the Reverse Engineer Options.
            </summary>
            <returns>The SqlExternalDataSource object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.CreateExternalDataSourceElementsRequired(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Creates an SqlExternalDataSource object with the required properties for all external data sources.
            </summary>
            <returns>The SqlExternalDataSource object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.GetElementName">
            <summary>
            Get the external data source name.
            </summary>
            <returns>Returns the external data source name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.SupportsOption(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Check if the specified reverse engineer option is supported.
            </summary>
            <param name="option">The reverse engineer option.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator.ConvertToExternalDataSourceType(System.Byte)">
            <summary>
            Converts external data source type value to enum.
            </summary>
            <param name="dataSourceType">External data source type value.</param>
            <returns>Enumeration that represents the data source type value.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator">
            <summary>
            External file format populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External file format populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external file format query.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.Description">
            <summary>
            Create external file formats description.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.CacheCreatedElement">
            <summary>
            Cache created element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.CreateElementId">
            <summary>
            Get the external file format schema model element id.
            </summary>
            <returns>Returns the external file format schema model element id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Create an external file format schema model element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event argsuments.</param>
            <returns>External file format object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.GetElementName">
            <summary>
            Get the external file format name.
            </summary>
            <returns>Returns the external file format name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator.SupportsOption(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Check if the specified reverse engineer option is supported.
            </summary>
            <param name="option">The reverse engineer option.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTableColumnPopulator">
            <summary>
            External table column populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTableColumnPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External table column populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table column query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTablePopulator">
            <summary>
            External table properties populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTablePopulator.Description">
            <summary>
            Create external tables description.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalTablePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external table element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>External table object.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalDataSourcePopulator">
            <summary>
            External data source populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalDataSourcePopulator.ConvertToExternalDataSourceType(System.Byte)">
            <summary>
            Converts external data source type value to enum.
            </summary>
            <param name="dataSourceType">External data source type value.</param>
            <returns>Enumeration that represents the data source type value.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalFileFormatPopulator">
            <summary>
            External file format populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalFileFormatPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External file format populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external file format query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalTableColumnPopulator">
            <summary>
            External table column populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalTableColumnPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External table column populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table column query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalTablePopulator">
            <summary>
            External table properties populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140GenericDatabaseScopedConfigurationOptionPopulator.AddGivenColumnValueToOption(System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlGenericDatabaseScopedConfigurationOptions)">
            <summary>
            Set option value for the passed in generic option
            </summary>
            <param name="colName">Whether to read from value column or secondary value column</param>
            <param name="dbGenericOptions">The option to set the value for</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140IndexPopulator.CreateEventArgs(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            This method provides event args for the 'OnPopulateAllChildren' method below.
            </summary>
            <param name="option">The reverse engineering options.</param>
            <returns>An empty event args.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140IndexPopulator.OnPopulateAllChildren(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelElement,System.EventArgs,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            This method is called after all the children have been populated for the index.
            </summary>
            <param name="parent">The index object.</param>
            <param name="args">The event args.</param>
            <param name="option">The reverse engineering options.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140TableColumnPopulator.CreateColumn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a column for this element. This method is called in the base type to create a column element. Here this method
            decides if the column is a graph column and fills in the appropriate information.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="isComputed">True to indicate the column is computed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140TableColumnPopulator.CreateGraphColumn(System.String,System.String,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGraphType)">
            <summary>
            Creates a graph column for the schema and table provided with the provided graph type.
            </summary>
            <param name="schemaName">The schema name the table lives in.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="graphType">The column graph type.</param>
            <returns>The sql column.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140TableColumnPopulator.GetColumnType">
            <summary>
            Gets the column type for the column. Graph column types are marked as 'computed'.
            </summary>
            <returns>The graph column type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ColumnMasterKeyPopulator.SignatureAsSqlBinaryString(System.Byte[])">
            <summary>
            Returns Signature Value as a string with format 0x[0-9A-F]
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator">
            <summary>
            Constructs 'SqlEdgeConstraintClause' objects from the SqlDataReader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sqlReverseEngineer">The reverse engineer impl to use.</param>
            <param name="sqlSchemaModel">The schema model to use.</param>
            <param name="query">The query to populate the 'SqlEdgeConstraintClause' objects.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.Description">
            <summary>
            The description of the clause populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.CreateParentElementId">
            <summary>
            Creates the identifier for the parent element, the 'SqlEdgeConstraint'.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.CacheCreatedElement">
            <summary>
            This element can always be cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Creates the 'SqlEdgeConstraintClause' element from the data reader.
            </summary>
            <param name="option">The reverse engineering options to apply.</param>
            <param name="args">The event args.</param>
            <returns>A populated 'SqlEdgeConstraintClause' object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintClausePopulator.InsertElementIntoParent(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEdgeConstraintClause,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEdgeConstraint,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            This element needs to be inserted into the parent element's collection.
            </summary>
            <param name="element">The current 'SqlEdgeConstraintClause'.</param>
            <param name="parent">The associated parent 'SqlEdgeConstraint'.</param>
            <param name="option">The reverse engineering options to apply.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator">
            <summary>
            Constructs 'SqlEdgeConstraint' objects from the SqlDataReader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEdgeConstraint}[])">
            <summary>
            Constructor.
            </summary>
            <param name="sqlReverseEngineer">The reverse engineering impl to use.</param>
            <param name="sqlSchemaModel">The schema model to use.</param>
            <param name="query">The query to run to construct 'SqlEdgeConstraint' objects.</param>
            <param name="childrenPopulators">The collection of child populators.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.Description">
            <summary>
            The description of the populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            This method creates the 'SqlEdgeConstraint' objects from the data reader.
            </summary>
            <param name="option">The reverse engineering options to apply.</param>
            <param name="args">The event args.</param>
            <returns>A populated 'SqlEdgeConstraint' object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.GetElementName">
            <summary>
            Creates the current element's name.
            </summary>
            <returns>The list of strings representing the object's name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.CreateParentElementId">
            <summary>
            Creates the parent element's id, in this case the table that contains the constraint.
            </summary>
            <returns>The element id for the parent table.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.CreateElementId">
            <summary>
            Creates the element id for this edge constraint.
            </summary>
            <returns>The id for this element.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.CacheCreatedElement">
            <summary>
            This element can always be cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.SupportsOption(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            This element supports all options.
            </summary>
            <param name="option">The options to check.</param>
            <returns>False if the element does not support this option.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator.ConvertToSqlForeignKeyAction(System.Int32)">
            <summary>
            Converts an integer to a foreign key action.
            </summary>
            <param name="actionValue">The integer value for the action (taken from SQL).</param>
            <returns>The sql foreign key action.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalDataSourcePopulator">
            <summary>
            External data source populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalDataSourcePopulator.CreateSqlExternalDataSource(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Creates an SqlExternalDataSource object from the Reverse Engineer Options.
            </summary>
            <returns>The SqlExternalDataSource object.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalFileFormatPopulator">
            <summary>
            External file format populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalFileFormatPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External file format populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external file format query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.Description">
            <summary>
            Create external data sources description.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.CacheCreatedElement">
            <summary>
            Cache created element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.CreateElementId">
            <summary>
            Get the external data source schema model element id.
            </summary>
            <returns>Returns the external data source schema model element id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external data source element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event argsuments.</param>
            <returns>External data source object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator.GetElementName">
            <summary>
            Get the external data source name.
            </summary>
            <returns>Returns the external data source name.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalTableColumnPopulator">
            <summary>
            External table column populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalTableColumnPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External table column populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table column query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalTablePopulator">
            <summary>
            External table properties populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150TableColumnPopulator.CreateColumn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a column for this element. This method is called in the base type to create a column element. Here this method
            decides if the column is classified and fills in the appropriate information.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="isComputed">True to indicate the column is computed.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalDataSourcePopulator">
            <summary>
            External data source populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalFileFormatPopulator">
            <summary>
            External file format populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalFileFormatPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External file format populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external file format query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalTableColumnPopulator">
            <summary>
            External table column populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalTableColumnPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External table column populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table column query.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalTablePopulator">
            <summary>
            External table properties populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160TablePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Creates table element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>Sql table.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ViewPopulator.CreateElementImpl(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Creates element (implementation).
            </summary>
            <param name="option">Reverse engineer option.</param>
            <returns>Sql view.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ViewPopulator.UpdateElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlView)">
             <summary>
             Updates the sql view element.
            
             This method runs when CreateElementImpl() is NOT run according to the
             logic in SysCommentsElementPopulator.CreateElement().
             </summary>
             <param name="element">Sql view element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql90SignaturePopulator.SetEncryptionMechanismProperties(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSignatureEncryptionMechanism,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Configure an EncryptionMechanism, including it's relationship to a key.
            </summary>
            <param name="encryptionMechanism">EncryptionMechanism to modify</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql90SignaturePopulator.SetKeyRelationship``1(Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSignatureEncryptionMechanism,``0},Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Set the relationship between the EncryptionMechanism and the signing object.
            </summary>
            <typeparam name="T">Type of the signing object (e.g. AsymmetricKey or Certificate)</typeparam>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalDataSourcePopulator">
            <summary>
            External data source populator for AzureV12.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalDataSourcePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external data source element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event argsuments.</param>
            <returns>External data source object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalDataSourcePopulator.ConvertToExternalDataSourceType(System.Byte)">
            <summary>
            Converts an external data source type value to a valid SqlExternalDataSourceType enum in SQL AzureV12.
            </summary>
            <param name="dataSourceType">External data source type value.</param>
            <returns>Enumeration that represents the data source type value.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalTablePopulator">
            <summary>
            External table properties populator for Global Query on AzureV12.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator constructor.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalTablePopulator.Description">
            <summary>
            Create external tables description.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalTablePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external table element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>External table object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12TableColumnPopulator.CreateColumn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a column for this element. This method is called in the base type to create a column element. Here this method
            decides if the column is a graph column and fills in the appropriate information.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="isComputed">True to indicate the column is computed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12TableColumnPopulator.CreateGraphColumn(System.String,System.String,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGraphType)">
            <summary>
            Creates a graph column for the schema and table provided with the provided graph type.
            </summary>
            <param name="schemaName">The schema name the table lives in.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="graphType">The column graph type.</param>
            <returns>The sql column.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12UserPopulator.GetUserType(System.String)">
            <summary>
            Gets the user type. Only concerned with the types that can be set via TSQL (i.e. Azure Active Directory user types.)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwColumnStoreIndexPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Method to create element using RE option
            </summary>
            <param name="option"> Type of reverse engineer option</param>
            <param name="args">Type of EventArgs</param>
            <returns>Type of SqlModelElement. Here it is SqlColumnStoreIndex</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwDatabaseOptionsPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            Implementation for SQL DW Database Options Populator.
            Derive from 130, to keep in sync with the target for ReverseEngineering.
            </summary>
            <param name="sqlReverseEngineer"></param>
            <param name="sqlSchemaModel"></param>
            <param name="query"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalDataSourcePopulator">
            <summary>
            DW External data source populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalDataSourcePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External data source populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external data source query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalDataSourcePopulator.ConvertToExternalDataSourceType(System.Byte)">
            <summary>
            Converts external data source type value to enum.
            </summary>
            <param name="dataSourceType">External data source type value.</param>
            <returns>Enumeration that represents the data source type value.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalFileFormatPopulator">
            <summary>
            External file format populator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalFileFormatPopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String)">
            <summary>
            External file format populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model object.</param>
            <param name="query">Catalog view external file format query.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalFileFormatPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Create an external file format schema model element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event argsuments.</param>
            <returns>External file format object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalTablePopulator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ChildModelElementPopulator{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable}[])">
            <summary>
            External table properties populator.
            </summary>
            <param name="sqlReverseEngineer">Sql reverse engineer object.</param>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="query">Catalog view external table query.</param>
            <param name="childrenPopulators">External table child populators.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalTablePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populates an external table element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>External table object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwIndexPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Method to create element using RE option
            </summary>
            <param name="option"> Type of reverse engineer option</param>
            <param name="args">Type of EventArgs</param>
            <returns>Type of SqlModelElement. Here it is SqlIndex</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionRangeValuePopulator.CreateParentElementId">
            <summary>
            Create an element id for the parent object which is partition specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionRangeValuePopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populate a partition value element.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>Populated partition value.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionRangeValuePopulator.InsertElementIntoParent(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPartitionValue,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTablePartitionSpecification,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Insert a partition value into partition specification.
            </summary>
            <param name="element">Partition value.</param>
            <param name="parent">Partition specification.</param>
            <param name="option">Reverse engineer option.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionSpecificationPopulator.CreateElementId">
            <summary>
            Create an element id for partition specification.
            </summary>
            <returns>ElementId with partition specification id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionSpecificationPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Populate a partition specification.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <param name="args">Event arguments.</param>
            <returns>Populated partition specification.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwPartitionSpecificationPopulator.SupportsOption(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Indicate this populator supports reverse engineer option.
            </summary>
            <param name="option">Reverse engineer option.</param>
            <returns>Reverse engineer option supported.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwTableColumnPopulator.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.EventArgs)">
            <summary>
            Method to create column element using RE option
            </summary>
            <param name="option"> Type of reverse engineer option</param>
            <param name="args">Type of EventArgs</param>
            <returns>Type of SqlModelElement. Here it is SqlColumn</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwTableColumnPopulator.CreateColumn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a column for this element. This method is called in the base type to create a column element. Here this method
            decides if the column is classified and fills in the appropriate information.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="isComputed">True to indicate the column is computed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwTableColumnPopulator.InsertElementIntoParent(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Set table partition column
            </summary>
            <param name="element">Column element</param>
            <param name="parent">Table element</param>
            <param name="option">Type of reverse engineer option</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwUserPopulator.GetUserType(System.String)">
            <summary>
            Gets the user type. Only concerned with the types that can be set via TSQL (Azure Active Directory User, Azure Active Directory Group)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwWorkloadClassifierPopulator.GetElementName">
            <summary>
            Get the workload classifier name.
            </summary>
            <returns>Returns the workload classifier name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwWorkloadClassifierPopulator.CreateElementId">
            <summary>
            Get the workload classifier element id.
            </summary>
            <returns>Returns the workload classifier model element id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwWorkloadGroupPopulator.GetElementName">
            <summary>
            Get the workload group name.
            </summary>
            <returns>Returns the workload group name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwWorkloadGroupPopulator.CreateElementId">
            <summary>
            Get the workload group model element id.
            </summary>
            <returns>Returns the workload group model element id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlFunctionParameterPopulator.CacheChildElementIfItExists(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFunction,System.EventArgs)">
            <summary>
            Fix for VSTS 1129898. If the parent is interpreted, ShouldCreateChildElement can be false and so its children are not added to the cache. 
            This results in an error in SysCommentObjectDependencyPopulator.CreateElement(...) since the children are not present in cache even though they exist. 
            This issue was found for an inline table-valued function with an ambiguous reference (hence it is interpreted)  
            that returns a table with a computed column which references another column.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlObjectSymbolPopulator">
            <summary>
            The SqlObjectSymbolPopulator populator is an optimized populator to create model elements when the ReverseEngineerOption.Symbol or ReverseEngineerOption.SymbolAndDependencies option is used.
            
            This populator creates model elements with only the Name populated. Unlike most other populators this populator creates model elements of different types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlObjectSymbolPopulator.CurrentElementModelElementType">
            <summary>
            Actual Element type of model 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlProcedurePopulator.ReadName">
            <remarks>
            NB: Return value of this method does *not* represent the number of a numbered procedure, only its name.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlProcedurePopulator.GetCurrentElementDebugName">
            <summary>
            Most of the time, the various forms of the 'name' of the proc shouldn't contain the number of a numbered proc,
            but for display purposes, that should be included.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlSysCommentObjectDependencyPopulator">
            <summary>
            This populator adds dependencies between SysComment objects and elements they reference. 
            This populator is used to build dependencies instead of using interpretation. The dependencies are derived from the following sources:
               - sql90 sys.sql_dependencies
               - sql100 and Azure sys.sql_express_dependencies
            
            This populator will not populate row,column source locations.If this is needed, the caller should use the ReverseEngineerOption.Full to force
            interpretation of the syscomment body.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SysCommentsElementPopulator`1.TrimQualifiersToMatch(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Int32)">
            <summary>
            Trim qualifiers (e.g. schema, database, server) off a SchemaObjectName until it has
            the same level of qualification as a template SchemaObjectName.
            </summary>
            <remarks>
            This is useful because we don't want a side-effect of name replacement to be that the name
            gains qualifiers it didn't use to have (e.g. becomes [schema].[object] when the original was [object].
            Anything consuming the script down-stream shouldn't be able to tell that we swapped names.
            </remarks>
            <param name="toTrim">object name to trim - this parameter will be modified.</param>
            <param name="template">the object name to use as a guide.  Will not be changed.</param>
            <param name="minParts">minimum number of parts allowed in the name</param>
            <returns>The trimmed name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SysCommentsElementPopulator`1.SchemaObjectNameToString(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Create a string from a SchemaOjectName, quoting identifiers in the manner requested.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.TopLevelElementPopulator.CurrentElementModelElementType">
            <summary>
            Allows Populator to return a different type for each element returned.
            This is needed to correctly determine if a Element matches a Object Filter by Name
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.TopLevelElementPopulator`1">
            <summary>
            Populator for top-level entities
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.TopLevelElementPopulator`1.GetElementNameWithBrackets">
            <summary>
            Gets the element name with brackets in a single string.
            </summary>
            <returns>Element name with brackets in a single string.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.AnonymousElementDebugName">
            <summary>
              Looks up a localized string similar to &lt;{0} with SQLServer object_id {1}&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.AssemblyOnlinePropertyAnnotationsPhase">
            <summary>
              Looks up a localized string similar to Gathering assembly on-line properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAggregateParametersPhase">
            <summary>
              Looks up a localized string similar to Gathering aggregate parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAggregatesPhase">
            <summary>
              Looks up a localized string similar to Gathering aggregates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAllDwTablePartitionSpecificationPhase">
            <summary>
              Looks up a localized string similar to Gathering partition table specification.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateApplicationRolesPhase">
            <summary>
              Looks up a localized string similar to Gathering application roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAssembliesPhase">
            <summary>
              Looks up a localized string similar to Gathering assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAssemblyFilesPhase">
            <summary>
              Looks up a localized string similar to Gathering assembly files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAsymmetricKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering asymmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAuditSpecificationDetailPhase">
            <summary>
              Looks up a localized string similar to Gathering audit specification details.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateAuditSpecificationPhase">
            <summary>
              Looks up a localized string similar to Gathering audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateBrokerPriortiesPhase">
            <summary>
              Looks up a localized string similar to Gathering broker priorities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCertificatesPhase">
            <summary>
              Looks up a localized string similar to Gathering certificates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCheckConstraintsPhase">
            <summary>
              Looks up a localized string similar to Gathering check constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCollationsPhase">
            <summary>
              Looks up a localized string similar to Gathering collations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateColumnEncryptionKeyPhase">
            <summary>
              Looks up a localized string similar to Gather column encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateColumnEncryptionKeyValuePhase">
            <summary>
              Looks up a localized string similar to Gather column encryption key values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateColumnMasterKeyPhase">
            <summary>
              Looks up a localized string similar to Gathering column master keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateColumnPermissionStatementsPhase">
            <summary>
              Looks up a localized string similar to Gathering column permission statements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateColumnStoreIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering column store indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCompressionOptionsPhase">
            <summary>
              Looks up a localized string similar to Gathering compression options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateContractMessageTypesPhase">
            <summary>
              Looks up a localized string similar to Gathering contract message types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateContractsPhase">
            <summary>
              Looks up a localized string similar to Gathering contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCredentialPhase">
            <summary>
              Looks up a localized string similar to Gathering credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateCryptographicProvidersPhase">
            <summary>
              Looks up a localized string similar to Gathering cryptographic providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabaseAuditSpecificationsPhase">
            <summary>
              Looks up a localized string similar to Gathering database audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabaseCredentialPhase">
            <summary>
              Looks up a localized string similar to Gathering database credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabaseEncryptionKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering database encryption keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabaseOptionsPhase">
            <summary>
              Looks up a localized string similar to Gathering database options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabasePermissionsPhase">
            <summary>
              Looks up a localized string similar to Gathering database permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDatabaseTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering database triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDataConstraintColumnBindingsPhase">
            <summary>
              Looks up a localized string similar to Gathering data constraint column bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDataConstraintUddtBindingsPhase">
            <summary>
              Looks up a localized string similar to Gathering data constraint uddt bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDdlTriggerEventsPhase">
            <summary>
              Looks up a localized string similar to Gathering ddl trigger events.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDdlTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering ddl triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDefaultConstraintsPhase">
            <summary>
              Looks up a localized string similar to Gathering default constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateDefaultsPhase">
            <summary>
              Looks up a localized string similar to Gathering defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEdgeConstraintClausePhrase">
            <summary>
              Looks up a localized string similar to Creating edge constraint clauses.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEdgeConstraintPhrase">
            <summary>
              Looks up a localized string similar to Creating edge constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedAndClrDdlTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted and clr ddl triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedDdlTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted ddl triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedFunctionsPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedProceduresPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedSymmetricKeyPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted symmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEncryptedViewsPhase">
            <summary>
              Looks up a localized string similar to Gathering encrypted views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEndpointsPhase">
            <summary>
              Looks up a localized string similar to Gathering endpoints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateErrorMessagesPhase">
            <summary>
              Looks up a localized string similar to Gathering error messages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventNotificationEventGroupsPhase">
            <summary>
              Looks up a localized string similar to Gathering event notification event groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventNotificationEventTypesPhase">
            <summary>
              Looks up a localized string similar to Gathering event notification event types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventNotificationsPhase">
            <summary>
              Looks up a localized string similar to Gathering event notifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventSessionActionPhase">
            <summary>
              Looks up a localized string similar to Gathering event session actions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventSessionDefinitionsPhase">
            <summary>
              Looks up a localized string similar to Gathering event session definitions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventSessionSettingPhase">
            <summary>
              Looks up a localized string similar to Gathering event session settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventSessionsPhase">
            <summary>
              Looks up a localized string similar to Gathering event sessions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateEventSessionTargetPhase">
            <summary>
              Looks up a localized string similar to Gathering event session targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExtendedProceduresPhase">
            <summary>
              Looks up a localized string similar to Gathering procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExtendedPropertiesPhase">
            <summary>
              Looks up a localized string similar to Gathering extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExternalDataSourcesPhase">
            <summary>
              Looks up a localized string similar to Gathering external data sources.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExternalFileFormatsPhase">
            <summary>
              Looks up a localized string similar to Gathering external file formats.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExternalStreamingJobsPhase">
            <summary>
              Looks up a localized string similar to Gathering External Streaming Jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExternalStreamsPhase">
            <summary>
              Looks up a localized string similar to Gathering External Streams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateExternalTablesPhase">
            <summary>
              Looks up a localized string similar to Gathering external tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFilegroupsPhase">
            <summary>
              Looks up a localized string similar to Gathering filegroups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFilesPhase">
            <summary>
              Looks up a localized string similar to Gathering files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateForeignKeyColumnsPhase">
            <summary>
              Looks up a localized string similar to Gathering foreign key columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateForeignKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering foreign keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFullTextCatalogsPhase">
            <summary>
              Looks up a localized string similar to Gathering full-text catalogs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFullTextIndexColumnSpecifiersPhase">
            <summary>
              Looks up a localized string similar to Gathering full-text index column specifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFullTextIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering full-text indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFullTextIndexStopListsPhase">
            <summary>
              Looks up a localized string similar to Gathering full-text index stoplists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFunctionParametersPhase">
            <summary>
              Looks up a localized string similar to Gathering function parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateFunctionsPhase">
            <summary>
              Looks up a localized string similar to Gathering functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateGenericDatabaseScopedConfigurationOptionPhase">
            <summary>
              Looks up a localized string similar to Gathering generic database scoped configuration option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateIndexedColumnSpecificationsPhase">
            <summary>
              Looks up a localized string similar to Gathering indexed column specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateInlineTableValuedFunctionsPhase">
            <summary>
              Looks up a localized string similar to Gathering inline table-valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateLinkedServerLoginsPhase">
            <summary>
              Looks up a localized string similar to Gathering linked server logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateLinkedServersPhase">
            <summary>
              Looks up a localized string similar to Gathering linked servers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateLoginsPhase">
            <summary>
              Looks up a localized string similar to Gathering logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateMasterKeyPhase">
            <summary>
              Looks up a localized string similar to Gathering master key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateMasterKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering master keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateMessageTypesPhase">
            <summary>
              Looks up a localized string similar to Gathering message types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateMultiStatementTableValuedFunctionsPhase">
            <summary>
              Looks up a localized string similar to Gathering multi-statement table-valued functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateObjectSymbolPhrase">
            <summary>
              Looks up a localized string similar to Gathering symbol information for all object types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePartitionFunctionsPhase">
            <summary>
              Looks up a localized string similar to Gathering partition functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePartitionRangeValuesPhase">
            <summary>
              Looks up a localized string similar to Gathering partition range values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePartitionSchemaFilegroupsPhase">
            <summary>
              Looks up a localized string similar to Gathering partition schema filegroups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePartitionSchemesPhase">
            <summary>
              Looks up a localized string similar to Gathering partition schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePrimaryKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering primary keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateProcedureParametersPhase">
            <summary>
              Looks up a localized string similar to Gathering procedure parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateProceduresPhase">
            <summary>
              Looks up a localized string similar to Gathering procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatePromotedPathsPhase">
            <summary>
              Looks up a localized string similar to Gathering Promoted paths.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateQueuesPhase">
            <summary>
              Looks up a localized string similar to Gathering queues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateRemoteServiceBindingsPhase">
            <summary>
              Looks up a localized string similar to Gathering remote service bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateRoleMemberships">
            <summary>
              Looks up a localized string similar to Gathering role memberships.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateRolesPhase">
            <summary>
              Looks up a localized string similar to Gathering roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateRoutesPhase">
            <summary>
              Looks up a localized string similar to Gathering routes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateRulesPhase">
            <summary>
              Looks up a localized string similar to Gathering rules.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSchemasPhase">
            <summary>
              Looks up a localized string similar to Gathering schemas.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSearchPropertyListPhase">
            <summary>
              Looks up a localized string similar to Gathering search property lists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSearchPropertyPhase">
            <summary>
              Looks up a localized string similar to Gathering search properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSecurityPolicyPhase">
            <summary>
              Looks up a localized string similar to Gathering security policies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSecurityPredicatePhase">
            <summary>
              Looks up a localized string similar to Gathering security predicates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSelectiveXmlIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering Selective XML indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSequencePhase">
            <summary>
              Looks up a localized string similar to Gathering sequence types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServerAuditSpecificationsPhase">
            <summary>
              Looks up a localized string similar to Gathering server audit specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServerAuditsPhase">
            <summary>
              Looks up a localized string similar to Gathering server audits.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServerOptionsPhase">
            <summary>
              Looks up a localized string similar to Gathering server options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServerRoleMembershipsPhase">
            <summary>
              Looks up a localized string similar to Gathering server role memberships.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServerRolePhase">
            <summary>
              Looks up a localized string similar to Gathering server roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServiceContractUsagePhase">
            <summary>
              Looks up a localized string similar to Gathering service contract usage.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateServicesPhase">
            <summary>
              Looks up a localized string similar to Gathering services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSignaturesPhase">
            <summary>
              Looks up a localized string similar to Gathering signatures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSpatialIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering spatial indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateStatisticColumnsPhase">
            <summary>
              Looks up a localized string similar to Gathering statistic columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateStatisticsPhase">
            <summary>
              Looks up a localized string similar to Gathering statistics.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSymmetricKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering symmetric keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSynonymsPhase">
            <summary>
              Looks up a localized string similar to Gathering synonyms.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateSysCommentDependenciesPhrase">
            <summary>
              Looks up a localized string similar to Gathering SysComment object Dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableColumnsPhase">
            <summary>
              Looks up a localized string similar to Gathering table columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableOnlinePropertuAnnotationsPhase">
            <summary>
              Looks up a localized string similar to Gathering online property annotations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTablesPhase">
            <summary>
              Looks up a localized string similar to Gathering tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypeColumnsPhase">
            <summary>
              Looks up a localized string similar to Gathering columns for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypeIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering indexes for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypePrimaryKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering primary keys for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypesCheckConstraintsPhase">
            <summary>
              Looks up a localized string similar to Gathering check constraints for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypesDefaultConstraintsPhase">
            <summary>
              Looks up a localized string similar to Gathering default constraints for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypesPhase">
            <summary>
              Looks up a localized string similar to Gathering table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTableTypeUniqueKeysPhase">
            <summary>
              Looks up a localized string similar to Gathering unique keys for table types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTriggersPhase">
            <summary>
              Looks up a localized string similar to Gathering triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateTypeColumnTypesPhase">
            <summary>
              Looks up a localized string similar to Gathering type column types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateUddtsPhase">
            <summary>
              Looks up a localized string similar to Gathering user-defined data types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateUdtsPhase">
            <summary>
              Looks up a localized string similar to Gathering user-defined types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateUniqueConstraintsPhase">
            <summary>
              Looks up a localized string similar to Gathering unique constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateUsersPhase">
            <summary>
              Looks up a localized string similar to Gathering users.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateViewColumnsPhase">
            <summary>
              Looks up a localized string similar to Gathering view columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateViewsPhase">
            <summary>
              Looks up a localized string similar to Gathering views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateWorkloadClassifierPhase">
            <summary>
              Looks up a localized string similar to Gathering Workload Classifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateworkloadGroupsPhase">
            <summary>
              Looks up a localized string similar to Gathering Workload Groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateXmlIndexCompressionOptionsPhase">
            <summary>
              Looks up a localized string similar to Gathering XML index compression options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateXmlIndexesPhase">
            <summary>
              Looks up a localized string similar to Gathering XML indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateXmlNamespacesPhase">
            <summary>
              Looks up a localized string similar to Gathering XML namespaces.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreateXmlSchemaCollectionsPhase">
            <summary>
              Looks up a localized string similar to Gathering XML schema collections.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.CreatServerPermissionsPhase">
            <summary>
              Looks up a localized string similar to Gathering server permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.DuplicateElement">
            <summary>
              Looks up a localized string similar to Duplicate element created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorCollationMismatch">
            <summary>
              Looks up a localized string similar to The server collation {0},{1} does not match the database collation {2},{3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorCollationQueryFail">
            <summary>
              Looks up a localized string similar to Collation query failed with the following error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorConnectionNotInitialized">
            <summary>
              Looks up a localized string similar to Connection to the server has not initialized properly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorDeniedDatabasePermissions">
            <summary>
              Looks up a localized string similar to The reverse engineering operation cannot continue because you have been denied View Definition permission on at least one object in the &apos;{0}&apos; database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorDeniedServerPermissions">
            <summary>
              Looks up a localized string similar to The reverse engineering operation cannot continue because you have been denied View Definition permission on at least one server-level object on the server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorExceptionInPopulator">
            <summary>
              Looks up a localized string similar to An error occurred while attempting to reverse engineer elements of type {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorInterpretingSysCommentsElement">
            <summary>
              Looks up a localized string similar to The script that defines the element could not be interpreted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorInterpretingSysCommentsElementWithName">
            <summary>
              Looks up a localized string similar to The element [{0}].[{1}] could not be interpreted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorMissingAtSymbol">
            <summary>
              Looks up a localized string similar to The &apos;@&apos; symbol is missing for parameter {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorMissingDatabasePermissions">
            <summary>
              Looks up a localized string similar to The reverse engineering operation cannot continue because you do not have View Definition permission on the &apos;{0}&apos; database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorMissingServerPermissions">
            <summary>
              Looks up a localized string similar to The reverse engineering operation cannot continue because you do not have View Any Definition permission on the server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorSqlExceptionInPopulator">
            <summary>
              Looks up a localized string similar to An error was received from SQL Server while attempting to reverse engineer elements of type {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnableToParseCollation">
            <summary>
              Looks up a localized string similar to Unable to parse collation {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnableToParseEventType">
            <summary>
              Looks up a localized string similar to Unable to recognize event {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnableToQueryCollation">
            <summary>
              Looks up a localized string similar to Unable to query collation from server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnknownExternalDataSourceType">
            <summary>
              Looks up a localized string similar to Unsupported external data source type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnknownKeyAlgorithm">
            <summary>
              Looks up a localized string similar to The algorithm {0} with key length {1} is unexpected and is not supported.  The algorithm will be left as Unknown..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ErrorUnrecognizedEventGroup">
            <summary>
              Looks up a localized string similar to Unable to recognize event group type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ExtendedProcedureOptionExceptionMessage">
            <summary>
              Looks up a localized string similar to Extended Procedures cannot be populated when using Dependency or Full ReverseEngineerOption.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.FullTextCatalogOnlinePropertyAnnotationsPhase">
            <summary>
              Looks up a localized string similar to Gathering full text catalog on-line properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumnsError">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported index or statistic on an encrypted column using randomized encryption and an enclave-enabled column encryption key. Such objects are not allowed when used as part of a data package (bacpac file). Drop the object in the source database and retry the operation, or use sqlpackage.exe with the /p:IgnoreIndexesStatisticsOnEnclaveEnabledColumns=True option. For more information see https://go.microsoft.com/fwlink/?linkid=2124580. .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.IgnoreIndexesStatisticsOnEnclaveEnabledColumnsWarnings">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported index or statistic on an encrypted column using randomized encryption and an enclave-enabled column encryption key. The index or the statistic will not be included the resulting data package (bapcac file . For more information see https://go.microsoft.com/fwlink/?linkid=2124580.) .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.InvalidModelParameter">
            <summary>
              Looks up a localized string similar to The model parameter must be an instance of Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.InvalidRequestForQueryGeneration">
            <summary>
              Looks up a localized string similar to Two part model identifier ({0},{1}) is not supported for request: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.InvalidRequestForQueryGenerationWithFourParts">
            <summary>
              Looks up a localized string similar to Model identifier ({0},{1}, {2}) is not supported for request: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.MissingCLRType">
            <summary>
              Looks up a localized string similar to Missing CLR type mapping for {0} datatype..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.MissingScriptBodyDependencyHostElement">
            <summary>
              Looks up a localized string similar to Element ({0}:{1}{2}) has script body dependency but is not present in the model..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.PromotingOptionToFull">
            <summary>
              Looks up a localized string similar to Reverse Engineer must interpret all System Comments Objects because the user does not have select permission on the sys.sql_expression_dependencies system view. This will impact performance. To improve performance, grant select on the sys.sql_expression_dependencies system view..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.QueueOnlinePropertyAnnotationsPhase">
            <summary>
              Looks up a localized string similar to Gathering queue on-line properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ReconnectedToDatabaseMessage">
            <summary>
              Looks up a localized string similar to Successfully reconnected to database &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ScriptDomGeneratorExceptionForAlter">
            <summary>
              Looks up a localized string similar to Alter statement generation is not supported for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ScriptDomGeneratorExceptionForCreate">
            <summary>
              Looks up a localized string similar to Create statement generation is not supported for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.ScriptDomGeneratorExceptionForDrop">
            <summary>
              Looks up a localized string similar to Drop statement generation is not supported for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.StandInCommentForEncryptedScript">
            <summary>
              Looks up a localized string similar to The script body was encrypted and cannot be reproduced here..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.UnableToConnectToMasterError">
            <summary>
              Looks up a localized string similar to Unable to open a connection to the master database. The user doesn&apos;t have login access to the master..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.UnableToReconnectError">
            <summary>
              Looks up a localized string similar to Unable to reconnect to database: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.UnknownParserError">
            <summary>
              Looks up a localized string similar to Unknown parse error encountered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.UnsupportedReverseEngineeringRequest">
            <summary>
              Looks up a localized string similar to &quot;{0} does not support incremental Reverse Engineer. Only IModelNamed elements support this option&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningCorruptExtendedPropertyOnXmlIndex">
            <summary>
              Looks up a localized string similar to An extended property on an XML index on &apos;{0}.{1}&apos; has corrupt metadata, and cannot be associated with the XML index.  The extended property will be omitted from the model.  This can happen when databases are upgraded from SQL Server 2005 to SQL Server 2008.  Recreating the extended property in the database should fix the problem..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningDroppedLedgerColumn">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}].[{2}] is a dropped column in a ledger table. Such objects are not allowed when used as part of a bacpac file or a dacpac file. The column will not be included in the resulting data package. For more information see https://go.microsoft.com/fwlink/?linkid=2182889..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningDroppedLedgerTable">
            <summary>
              Looks up a localized string similar to Element [{0}].[{1}] is a dropped ledger table. Such objects are not allowed when used as part of a bacpac file or a dacpac file. The table will not be included in the resulting data package. For more information see https://go.microsoft.com/fwlink/?linkid=2165965..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningErrorParsingScriptBody">
            <summary>
              Looks up a localized string similar to Errors in script body prevent Reverse Engineer from correctly creating element {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningHiddenGrantorForPermission">
            <summary>
              Looks up a localized string similar to The grantor of a permission could not be determined (probably because the importing user doesn&apos;t have VIEW DEFINITION permission with respect to the grantor).  The imported permission will lack a grantor..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningInvalidLoginPermission">
             <summary>
               Looks up a localized string similar to The SELECT permission has not been granted on &apos;sys.sql_logins&apos; for the &apos;{0}&apos; database. You must be a member of the &apos;loginmanager&apos; role to access this system view. 
            Reverse Engineer will continue the import process, and logins will not be imported..
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningInvalidPermission">
            <summary>
              Looks up a localized string similar to The permission &apos;{0}&apos; was not recognized and was not imported.  If this problem persists, contact customer support..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningInvalidPermissionTarget">
            <summary>
              Looks up a localized string similar to The reverse engineering operation could not find a securable type for {0}:{1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningKeyWithoutProvider">
            <summary>
              Looks up a localized string similar to The key {0} was created from a cryptographic provider, but that provider does not exist in the database.  The key was omitted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningPartialPermissions">
             <summary>
               Looks up a localized string similar to Your permissions to see all objects in the server or database could not be verified.  The original error was:
            {0}
            The reverse engineering operation will attempt to continue anyway, but the resulting model might be incomplete, malformed, or incorrect..
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerResources.WarningUddtColumnWithCollation">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; is of a user-defined type, but has a collation which differs from the default database collation.  Because there is no way to represent that state in a CREATE TABLE statement, the collation of the column was not imported..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker">
            <summary>
            This SchemaAnalyzer tracks all dependencies encountered during analysis
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker._dependencyParent">
            <summary>
            Element that will depend on the found dependencies
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker._dependencyRelationship">
            <summary>
            The relationship for the dependencies
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker._descriptorForLastSchemaObject">
            <summary>
            Holds the descriptor for the last visited SchemaObjectName
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker._checkDependencies">
            <summary>
            Holds whether we should mark visitation as dependencies based on the availability of the parent and the relationship class
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.Initialize(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Initializes the object
            </summary>
            <param name="dependencyParent"></param>
            <param name="dependencyRelationship"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.IgnoreBodyDependencyToWildcard(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Checks whether the dependency relationship should be ignored or not
            </summary>
            <param name="fragment">fragment to check</param>
            <param name="descriptor">descriptor to check</param>
            <returns>True if NO dependency relationship should be created</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.IgnoreBodyDependencyToWildcard(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            Checks whether the dependency relationship should be ignored or not
            </summary>
            <param name="fragment">fragment to check</param>
            <param name="potentials">potentials to check</param>
            <returns>True if NO dependency relationship should be created</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.FragmentIsWildcard(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Checks whether the fragment points to a wildcard
            </summary>
            <param name="fragment">Fragment to check</param>
            <returns>True if the fragment is a wildcard</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.VisitFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorRelevance)">
            <summary>
            Records the element descriptor as a dependency and performs a visitation
            </summary>
            <param name="fragment">Fragment to visit</param>
            <param name="sqlElementDescriptor">visited element descriptor</param>
            <param name="relevance">Visitation relevance</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.DependencyTracker.VisitAmbiguousFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            This method handles additional processing required for a node/schemaidentifier
            </summary>
            <param name="fragment">Node to be processed</param>
            <param name="possibilities">An enumerable of possible hits</param>
            <param name="relevance">Relevance</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaAnalyzers.NonIdentifyingSchemaAnalyzer">
            <summary>
            This SchemaAnalyzer is a composing schema analyzer which does not let through calls to any identified* method
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.MissingCaption">
            <summary>
              Looks up a localized string similar to Missing Caption.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_AggregateFunctions">
            <summary>
              Looks up a localized string similar to Aggregate Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Aggregates">
            <summary>
              Looks up a localized string similar to Aggregates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_AlwaysEncryptedKeys">
            <summary>
              Looks up a localized string similar to Always Encrypted Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ApplicationRoles">
            <summary>
              Looks up a localized string similar to Application Roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Assemblies">
            <summary>
              Looks up a localized string similar to Assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_AssemblyFiles">
            <summary>
              Looks up a localized string similar to Assembly Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_AsymmetricKeys">
            <summary>
              Looks up a localized string similar to Asymmetric Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_BrokerPriorities">
            <summary>
              Looks up a localized string similar to Broker Priorities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_BuiltInServerRole">
            <summary>
              Looks up a localized string similar to Built-in Server Roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_BuiltInType">
            <summary>
              Looks up a localized string similar to Built-in Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Certificates">
            <summary>
              Looks up a localized string similar to Certificates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_CheckConstraints">
            <summary>
              Looks up a localized string similar to Check Constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ColumnEncryptionKeys">
            <summary>
              Looks up a localized string similar to Column Encryption Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ColumnEncryptionKeyValue">
            <summary>
              Looks up a localized string similar to Column Encryption Key Value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ColumnMasterKeys">
            <summary>
              Looks up a localized string similar to Column Master Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Columns">
            <summary>
              Looks up a localized string similar to Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ColumnStoreIndexes">
            <summary>
              Looks up a localized string similar to Column Store Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Constraints">
            <summary>
              Looks up a localized string similar to Constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Contracts">
            <summary>
              Looks up a localized string similar to Contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Credentials">
            <summary>
              Looks up a localized string similar to Credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_CryptographicProviders">
            <summary>
              Looks up a localized string similar to Cryptographic Providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseAsymmetricKeys">
            <summary>
              Looks up a localized string similar to Asymmetric Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseAuditSpecifications">
            <summary>
              Looks up a localized string similar to Database Audit Specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseCertificates">
            <summary>
              Looks up a localized string similar to Certificates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseDiagrams">
            <summary>
              Looks up a localized string similar to Database Diagrams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseEncryptionKeys">
            <summary>
              Looks up a localized string similar to Database Encryption Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseOptions">
            <summary>
              Looks up a localized string similar to Database Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseRoles">
            <summary>
              Looks up a localized string similar to Database Roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Databases">
            <summary>
              Looks up a localized string similar to Databases.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseScopedCredentials">
            <summary>
              Looks up a localized string similar to Database Scoped Credentials.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DatabaseTriggers">
            <summary>
              Looks up a localized string similar to Database Triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DataCompressionOptions">
            <summary>
              Looks up a localized string similar to Data Compression Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DataTierApplications">
            <summary>
              Looks up a localized string similar to Data-tier Applications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DefaultConstraints">
            <summary>
              Looks up a localized string similar to Default Constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Defaults">
            <summary>
              Looks up a localized string similar to Defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DroppedTables">
            <summary>
              Looks up a localized string similar to Dropped Ledger Tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_DroppedViews">
            <summary>
              Looks up a localized string similar to Dropped Ledger Views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Endpoints">
            <summary>
              Looks up a localized string similar to Endpoints.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ErrorMessages">
            <summary>
              Looks up a localized string similar to Error Messages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_EventNotifications">
            <summary>
              Looks up a localized string similar to Event Notifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_EventSessions">
            <summary>
              Looks up a localized string similar to Event Sessions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExtendedProperties">
            <summary>
              Looks up a localized string similar to Extended Properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExtendedStoredProcedures">
            <summary>
              Looks up a localized string similar to Extended Stored Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalDataSources">
            <summary>
              Looks up a localized string similar to External Data Sources.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalFileFormats">
            <summary>
              Looks up a localized string similar to External File Formats.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalLanguages">
            <summary>
              Looks up a localized string similar to External Languages.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalLibraries">
            <summary>
              Looks up a localized string similar to External Libraries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalResources">
            <summary>
              Looks up a localized string similar to External Resources.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalStreamingJobs">
            <summary>
              Looks up a localized string similar to External Streaming Jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalStreams">
            <summary>
              Looks up a localized string similar to External Streams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ExternalTables">
            <summary>
              Looks up a localized string similar to External Tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FilegroupFiles">
            <summary>
              Looks up a localized string similar to Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FileGroups">
            <summary>
              Looks up a localized string similar to Filegroups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FileTables">
            <summary>
              Looks up a localized string similar to FileTables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ForeignKeys">
            <summary>
              Looks up a localized string similar to Foreign Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FullTextCatalogs">
            <summary>
              Looks up a localized string similar to Full-Text Catalogs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FullTextIndexes">
            <summary>
              Looks up a localized string similar to Full-Text Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_FullTextStopLists">
            <summary>
              Looks up a localized string similar to Full Text Stoplists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Functions">
            <summary>
              Looks up a localized string similar to Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Indexes">
            <summary>
              Looks up a localized string similar to Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_InlineFunctions">
            <summary>
              Looks up a localized string similar to Inline Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Keys">
            <summary>
              Looks up a localized string similar to Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_LinkedServerLogins">
            <summary>
              Looks up a localized string similar to Linked Server Logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_LinkedServers">
            <summary>
              Looks up a localized string similar to Linked Servers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_LogFiles">
            <summary>
              Looks up a localized string similar to Log Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Logins">
            <summary>
              Looks up a localized string similar to Logins.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Management">
            <summary>
              Looks up a localized string similar to Management.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_MasterKey">
            <summary>
              Looks up a localized string similar to Master Key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_MasterKeys">
            <summary>
              Looks up a localized string similar to Master Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_MessageTypes">
            <summary>
              Looks up a localized string similar to Message Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_MultiSelectFunctions">
            <summary>
              Looks up a localized string similar to Table-Valued Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Parameters">
            <summary>
              Looks up a localized string similar to Parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_PartitionFunctions">
            <summary>
              Looks up a localized string similar to Partition Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_PartitionSchemes">
            <summary>
              Looks up a localized string similar to Partition Schemes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Permissions">
            <summary>
              Looks up a localized string similar to Permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_PrimaryKeys">
            <summary>
              Looks up a localized string similar to Primary Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Programmability">
            <summary>
              Looks up a localized string similar to Programmability.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Queues">
            <summary>
              Looks up a localized string similar to Queues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_RemoteServiceBindings">
            <summary>
              Looks up a localized string similar to Remote Service Bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ResourcePools">
            <summary>
              Looks up a localized string similar to Resource Pools.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ReturnedColumns">
            <summary>
              Looks up a localized string similar to Returned Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_RoleMemberships">
            <summary>
              Looks up a localized string similar to Role Memberships.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Roles">
            <summary>
              Looks up a localized string similar to Roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Routes">
            <summary>
              Looks up a localized string similar to Routes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Rules">
            <summary>
              Looks up a localized string similar to Rules.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ScalarValuedFunctions">
            <summary>
              Looks up a localized string similar to Scalar-valued Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Schemas">
            <summary>
              Looks up a localized string similar to Schemas.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SearchPropertyList">
            <summary>
              Looks up a localized string similar to Search Property List.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SearchPropertyLists">
            <summary>
              Looks up a localized string similar to Search Property Lists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Security">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SecurityPolicies">
            <summary>
              Looks up a localized string similar to Security Policies.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SecurityPredicates">
            <summary>
              Looks up a localized string similar to Security Predicates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SelectiveXmlIndexes">
            <summary>
              Looks up a localized string similar to Selective XML Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Sequences">
            <summary>
              Looks up a localized string similar to Sequences.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerAudits">
            <summary>
              Looks up a localized string similar to Audits.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerAuditSpecifications">
            <summary>
              Looks up a localized string similar to Server Audit Specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerEventNotifications">
            <summary>
              Looks up a localized string similar to Server Event Notifications.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerFunctions">
            <summary>
              Looks up a localized string similar to Server Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerInstance">
            <summary>
              Looks up a localized string similar to ServerInstance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerObjects">
            <summary>
              Looks up a localized string similar to Server Objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerOptions">
            <summary>
              Looks up a localized string similar to Server Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerRole">
            <summary>
              Looks up a localized string similar to Server Role.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerRoleMembership">
            <summary>
              Looks up a localized string similar to Server Role Membership.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerRoles">
            <summary>
              Looks up a localized string similar to Server Roles.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServerTriggers">
            <summary>
              Looks up a localized string similar to Triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_ServiceBroker">
            <summary>
              Looks up a localized string similar to Service Broker.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Services">
            <summary>
              Looks up a localized string similar to Services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Signatures">
            <summary>
              Looks up a localized string similar to Signatures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SpatialIndexes">
            <summary>
              Looks up a localized string similar to Spatial Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SqlFiles">
            <summary>
              Looks up a localized string similar to SQL Files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SqlType">
            <summary>
              Looks up a localized string similar to SQL Type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SqlTypedPromotedPaths">
            <summary>
              Looks up a localized string similar to T-SQL Typed Promoted Paths.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Statistics">
            <summary>
              Looks up a localized string similar to Statistics.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Storage">
            <summary>
              Looks up a localized string similar to Storage.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_StoredProcedures">
            <summary>
              Looks up a localized string similar to Stored Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SymmetricKeys">
            <summary>
              Looks up a localized string similar to Symmetric Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Synonyms">
            <summary>
              Looks up a localized string similar to Synonyms.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemAggregateFunctions">
            <summary>
              Looks up a localized string similar to Aggregate Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemApproximateNumerics">
            <summary>
              Looks up a localized string similar to Approximate Numerics.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemBinaryStrings">
            <summary>
              Looks up a localized string similar to Binary Strings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemCharacterStrings">
            <summary>
              Looks up a localized string similar to Character Strings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemCLRDataTypes">
            <summary>
              Looks up a localized string similar to CLR Data Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemConfigurationFunctions">
            <summary>
              Looks up a localized string similar to Configuration Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemContracts">
            <summary>
              Looks up a localized string similar to System Contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemCursorFunctions">
            <summary>
              Looks up a localized string similar to Cursor Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemDatabases">
            <summary>
              Looks up a localized string similar to System Databases.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemDataTypes">
            <summary>
              Looks up a localized string similar to System Data Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemDateAndTime">
            <summary>
              Looks up a localized string similar to Date and Time.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemDateAndTimeFunctions">
            <summary>
              Looks up a localized string similar to Date and Time Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemExactNumerics">
            <summary>
              Looks up a localized string similar to Exact Numerics.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemExtendedStoredProcedures">
            <summary>
              Looks up a localized string similar to System Extended Stored Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemFunctions">
            <summary>
              Looks up a localized string similar to System Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemHierarchyIdFunctions">
            <summary>
              Looks up a localized string similar to Hierarchy Id Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemMathematicalFunctions">
            <summary>
              Looks up a localized string similar to Mathematical Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemMessageTypes">
            <summary>
              Looks up a localized string similar to System Message Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemMetadataFunctions">
            <summary>
              Looks up a localized string similar to Metadata Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemOtherDataTypes">
            <summary>
              Looks up a localized string similar to Other Data Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemOtherFunctions">
            <summary>
              Looks up a localized string similar to Other Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemQueues">
            <summary>
              Looks up a localized string similar to System Queues.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemRowsetFunctions">
            <summary>
              Looks up a localized string similar to Rowset Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemSecurityFunctions">
            <summary>
              Looks up a localized string similar to Security Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemServices">
            <summary>
              Looks up a localized string similar to System Services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemSpatialDataTypes">
            <summary>
              Looks up a localized string similar to Spatial Data Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemStoredProcedures">
            <summary>
              Looks up a localized string similar to System Stored Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemStringFunctions">
            <summary>
              Looks up a localized string similar to String Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemSystemStatisticalFunctions">
            <summary>
              Looks up a localized string similar to System Statistical Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemTables">
            <summary>
              Looks up a localized string similar to System Tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemTextAndImageFunctions">
            <summary>
              Looks up a localized string similar to Text and Image Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemUnicodeCharacterStrings">
            <summary>
              Looks up a localized string similar to Unicode Character Strings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_SystemViews">
            <summary>
              Looks up a localized string similar to System Views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Tables">
            <summary>
              Looks up a localized string similar to Tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_TableTypeIndexes">
            <summary>
              Looks up a localized string similar to Table Type Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_TableValuedFunctions">
            <summary>
              Looks up a localized string similar to Table-valued Functions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Triggers">
            <summary>
              Looks up a localized string similar to Triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Types">
            <summary>
              Looks up a localized string similar to Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_UniqueKeys">
            <summary>
              Looks up a localized string similar to Unique Keys.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_UserDefinedDataTypes">
            <summary>
              Looks up a localized string similar to User-Defined Data Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_UserDefinedTableTypes">
            <summary>
              Looks up a localized string similar to User-Defined Table Types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_UserDefinedTypes">
            <summary>
              Looks up a localized string similar to User-Defined Types (CLR).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Users">
            <summary>
              Looks up a localized string similar to Users.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_UserWithPassword">
            <summary>
              Looks up a localized string similar to User with Password.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_Views">
            <summary>
              Looks up a localized string similar to Views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_WorkloadClassifiers">
            <summary>
              Looks up a localized string similar to Workload Classifier.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_WorkloadGroups">
            <summary>
              Looks up a localized string similar to Workload Groups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_WorkloadManagement">
            <summary>
              Looks up a localized string similar to Workload Management.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_XmlIndexes">
            <summary>
              Looks up a localized string similar to XML Indexes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_XmlNamespaces">
            <summary>
              Looks up a localized string similar to XML Namespaces.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_XMLSchemaCollections">
            <summary>
              Looks up a localized string similar to XML Schema Collections.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaHierarchyResources.SchemaHierarchy_XmlTypedPromotedPaths">
            <summary>
              Looks up a localized string similar to XML Typed Promoted Paths.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions">
            <summary>
            Defines extension methods related to SqlSimpleColumn.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model state
            associated with a specific element type.
            </remarks>
            <summary>
            Defines extension methods related to SqlTableTypeSimpleColumn.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model state
            associated with a specific element type.
            </remarks>
            <summary>
            Defines extension methods related to SqlSequence.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model state
            associated with a specific element type.  In the case of SqlSequence, the absence of a modeled
            property still has as default or effective interpretation that can be derived from other defining
            properties.
            </remarks>
            <summary>
            Defines extension methods related to ISqlSpecifiesIndex.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model state
            associated with a specific element type.  While the leaf types of ISqlSpecifiesIndex differ
            significantly, this class supports common patterns and centralizes the implementation details
            associated examining the state for each of the different possible types.
            </remarks>
            <summary>
            Defines extension methods related to SqlTable.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model state
            associated with a specific element type.  In the case of SqlTable, several common operations are
            supported here that examine the properties of a table's children such as columns, constraints, and indexes.
            </remarks>
            <summary>
            Defines extension methods related to SqlTypeSpecifierBase.
            </summary>
            <remarks>
            Extension methods provide a convenient encapsulation for common interpretations of model
            state associated with a specific element type.  In the case of ISqlTypeDescriptor, another 
            ISqlTypeDescriptor can be referenced.  This makes identifying characteristics of an object's
            type more complex that accessing a single property.
            </remarks>
            <summary>
            Defines extension methods related to SqlIndexBase.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.IsKey(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,System.Boolean@,System.Boolean@)">
            <summary>
            Is the column a primary and/or a foreign key
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.IsKey(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableTypeSimpleColumn)">
            <summary>
            Is the column part of a primary key
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveDataType(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence,System.Int32@)">
            <summary>
            Resolves the fundamental type and precision for the given SqlSequence.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveIncrement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence)">
            <summary>
            Resolves effective value of SqlSequence.Increment in the face of SqlDecimal.Null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveMinValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence,System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Resolves effective value of SqlSequence.MinValue in the face of SqlDecimal.Null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveMaxValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence)">
            <summary>
            Resolves effective value of SqlSequence.MaxValue in the face of SqlDecimal.Null
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveMinValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence)">
            <summary>
            Resolves effective value of SqlSequence.MinValue in the face of SqlDecimal.Null
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveMaxValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence,System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Resolves effective value of SqlSequence.MaxValue in the face of SqlDecimal.Null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveStartValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence)">
            <summary>
            Resolves effective value of SqlSequence.StartValue in the face of SqlDecimal.Null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveStartValue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSequence,System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Resolves effective value of SqlSequence.StartValue in the face of SqlDecimal.Null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.IsUnique(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex)">
            <summary>
            Returns true if object is enforces uniqueness (e.g. primary key, unique constraint, or unique index).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.IsUnique(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable@)">
            <summary>
            Returns true if object is enforces uniqueness (e.g. primary key, unique constraint, or unique index).
            A reference to the parent table is provided as an "out" parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.HasFilestream(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Returns true if a table contains a filestream column.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.FindClusteredIndex(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Find the clustered index for a table, if one exists  (there can be only one).
            If not found, null is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetEffectiveDataType(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTypeSpecifierBase)">
            <summary>
            Resolves the fundamental SQL-type for the given SqlTypeSpecifier.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.IsValidForIdentity(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTypeSpecifierBase)">
            <summary>
            Determines if the given ISqlTypeDescriptor can be used for an identity column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetIndexedObject(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndexBase)">
            <summary>
            Get the indexed object for the given SqlIndexBase.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SchemaModelExtentions.GetIndexedObjectRelationship(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlIndexBase)">
            <summary>
            Get the indexed object for the given SqlIndexBase.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100Interpreter">
            <summary>
            Interpretes TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 2008
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ScriptDomGenerator">
            <summary>
            SQL100 (2008) specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql100 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql100 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql100 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql100ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Populates this property bag from the SqlServerOptions argument
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110Interpreter">
            <summary>
            Interpretes TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 2012
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ScriptDomGenerator">
            <summary>
            SQL110 (2012) specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql110 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql110 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql110 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql110ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 2014
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ScriptDomGenerator">
            <summary>
            SQL120 (2014) specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql120 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql120 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql120 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql120ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ModelComparer.CompareExternalTableQuotedIdentifierProperty(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Create a QuotedIdentifier property comparer for external table.
            </summary>
            <param name="source">The source model element for comparison.</param>
            <param name="target">The target model element for comparison.</param>
            <param name="propertyClass">The property to compare.</param>
            <param name="configuration">Model comparison configuration options.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 2016
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalDataSourcePopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql130ExternalFileFormatPopulator})">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ScriptDomGenerator">
            <summary>
            SQL130 specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql130 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql130 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql130 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The CreateExternalDataSourceStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropWorkloadGroupStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The DropWorkloadGroupStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The CreateExternalFileFormatStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql130StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The CreateExternalTableStatement AST node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary> 
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 14
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalDataSourcePopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql140ExternalFileFormatPopulator})">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ScriptDomGenerator">
            <summary>
            SQL140 specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql140 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql140 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql140 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql140ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary> 
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 15
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalDataSourcePopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalFileFormatPopulator})">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlEdgeConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the edge constraint populator generator. This must be registered to be used
            for reverse engineering.
            </summary>
            <param name="instanceManager">The instance manager to use.</param>
            <param name="dataSchemaModel">The data schema model to use.</param>
            <param name="option">The reverse engineering options to use.</param>
            <param name="isFull">True indicates a full reverse engineer.</param>
            <param name="request">The associated request.</param>
            <param name="singleElementBatch">The single batch request.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlEdgeConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150EdgeConstraintPopulator},System.String,System.String)">
            <summary>
            This static does the work to register the populators into the instance manager.
            </summary>
            <param name="instanceManager">The instance manager to use.</param>
            <param name="dataSchemaModel">The data schema model to use.</param>
            <param name="option">The reverse engineering options.</param>
            <param name="isFull">True indicates a full reverse engineer.</param>
            <param name="request">The reverse engineering request.</param>
            <param name="singleElementBatch">The single element batch request.</param>
            <param name="reverseEngineerImpl">The reverse engineering impl to use.</param>
            <param name="constructor">The populator constructor.</param>
            <param name="query">The query to use for reverse engineering.</param>
            <param name="columnQuery">The column query used for reverse engineering.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalStreamPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalStreamPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql150ExternalStreamPopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ReverseEngineerPopulatorGenerator.RegisterSqlExternalLanguagePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql External Language property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ScriptDomGenerator">
            <summary>
            SQL150 specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql150 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql150 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql150 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql150ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary> 
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ResolveActions.PartitionSchemeResolveAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            This override method will check if the element has the PartitionScheme and PartitionFunction with target element has compression
            And adds partitions based on PS to the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ResolveActions.ExpandXmlCompression(Microsoft.Data.Tools.Schema.Sql.SchemaModel.XmlCompressionExpansionAnnotation,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesCompressionOptions,System.Int32)">
            <summary>
            Verifies relationship with the target element and adds partitions to the compression
            </summary>
            <param name="anno">manually added xml compression annotation element</param>
            <param name="target">target element</param>
            <param name="partitionCount">partitions count from partition function</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ResolveActions.PartitionFunctionResolveAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Verifies and adds partitions to the xml compression annotations class
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 16
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalDataSourcePopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.Sql160ExternalFileFormatPopulator})">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ScriptDomGenerator">
            <summary>
            SQL160 specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql160 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql160 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql160 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Explicit visit the create table statement node for validation.
            </summary>
            <param name="node">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160StatementFilterVisitor.EvaluateSystemVersioningTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Evaluates the following conditions are true for SYSTEM_VERSIONING = ON:
             * History table name must be specified.
            </summary>
            <param name="node">System versioning table option.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160StatementFilterVisitor.EvaluateLedgerTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
             <summary>
             Evaluates the following unsupported create table options for ledger tables:
              * Memory optimized.
              * Xml column data type.
              * Sql_variant column data type.
              * Sparse column sets.
            
             The following unsupported create table options are evaluated with Sql
             Validation rules:
              * Column user defined data type (LedgerTableColumnUserDefinedTypeRule.cs)
              * Full text index creation (LedgerTableFullTextIndexValidationRule.cs)
             
             Evaluates the following conditions are true:
              * Ledger view name has been specified (DacFx does not support generating
                SQL object names).
             </summary>
             <param name="node">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160StatementFilterVisitor.GetSystemVersioningTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Gets the system versioning table option from a create table statement.
            </summary>
            <param name="node">Create table statement.</param>
            <returns>System versioning table option if exists; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql160StatementFilterVisitor.GetLedgerTableOption(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Gets the ledger table option from a create table statement.
            </summary>
            <param name="node">Create table statement.</param>
            <returns>Ledger table option if exists, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.RevokeStatement)">
            <summary>
            Allow REVOKE statements only if they specify one or more columns,
            either with a permission ("SELECT (Column1)") or securable object ("ON T1 (Column1)").
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90DeleteActions.UserDefinedDataTypeDeleteAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Reset the nullability of the columns that reference the user-defined data type
            if the column's nullability was not explicitly specified previously.
            </summary>
            <remarks>
            See <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ResolveActions.ColumnToUserDefinedDataTypeResolveAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)"/> for the corresponding resolve action.
            </remarks>
            <param name="element">User-defined data type element.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90Interpreter">
            <summary>
            Interpretes TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ResolveActions.ColumnToUserDefinedDataTypeResolveAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            If the type specifier references a user-defined data type and the owning column's nullability was not explicitly specified,
            update the column's nullability based on the nullability of the user-defined data type if they differ from each other.
            </summary>
            <remarks>
            See <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90DeleteActions.UserDefinedDataTypeDeleteAction(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)"/> for the corresponding delete action.
            </remarks>
            <param name="entry">Relationship entry for type specifier to SQL type.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ResolveActions.EndsWithClr(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Walks the model and sees if the target can be CLR.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ResolveActions.ResetDependentsForClr(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Walks backwards and resets the dependent potentials.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server 2005
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ScriptDomGenerator">
            <summary>
            Sql90 specific script dom generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate Sql90 create statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate Sql90 drop statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate Sql90 alter statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql90ServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor._annotationDescriptors">
            <summary>
            Holds all annotationdescriptors associated with this elementDescriptor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor.AnnotationDescriptors">
            <summary>
            Gets all AnnotationDescriptors associated with this elementDescriptor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor.#ctor(System.Type,System.String[])">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="scope">The identifier scope.</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor.#ctor(System.Type)">
            <summary>
            The constructor for unnamed elements.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="scope">The identifier scope.</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotatedElementDescriptor.AddAnnotationDescriptor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor)">
            <summary>
            Adds an annotationDescriptor
            </summary>
            <param name="descriptor">AnnotationDescriptor to add</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor">
            <summary>
            Describes the annotation for a SqlElementDescriptor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.AnnotationType">
            <summary>
            The type of annotation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.AdditionalTargets">
            <summary>
            Gets the other elementDescriptors to annotate with the same annotation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.AnnotationName">
            <summary>
            Returns annotation name parts
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.ExternalNameParts">
            <summary>
            Returns annotation name external parts
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.HasName">
            <summary>
            Gets whether the annotation has a name or not
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.HasAdditionalTargets">
            <summary>
            Gets whether the annotation should be applied to other targets as well
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.Properties">
            <summary>
            Get the properties, first value of the tuple is property name, second value is the property value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor},System.Tuple{System.String,System.Object}[])">
            <summary>
            Constructor
            </summary>
            <param name="annotationType">Type of the annotation</param>
            <param name="externalNameParts">External name parts for the annotation</param>
            <param name="name">Regular name parts for the annotation</param>
            <param name="additionalTargets">Additional targets for the annotation</param>
            <param name="properties">Pairs of name+value for the annotation properties</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureInterpreter">
            <summary>
            Interpretes TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureScriptDomGenerator">
            <summary>
            SQL Azure specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate SQL Azure CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate SQL Azure DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate SQL Azure ALTER statements
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme)">
            <summary>
            File groups and partitions schemes are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition)">
            <summary>
            Exclude column definitions using ROWGUIDCOL.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IdentityOptions)">
            <summary>
            Exclude identity options that specify NOT FOR REPLICATION.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnStorageOptions)">
            <summary>
            Exclude column definitions that specify filestream.
            </summary>
            <param name="node"></param>
            <remarks>
            Below is example of column definition that is not supported.
            
            <code>
            CREATE TABLE [T1]
            (
                fileStreamColumn varbinary(max) FILESTREAM
            )
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CheckConstraintDefinition)">
            <summary>
            Exclude check constraint definitions that specify NOT FOR REPLICATION.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ForeignKeyConstraintDefinition)">
            <summary>
            Exclude foreign key constraint definitions that specify NOT FOR REPLICATION.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ViewOption)">
            <summary>
            Exclude view definitions that specify ENCRYPTION.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.XmlDataTypeReference)">
            <summary>
            Excluded typed XML, that is, an XML data type reference that specifies 
            an XML schema collection name alone or with the DOCUMENT or CONTENT keywords.
            </summary>
            <param name="node"></param>
            <remarks>
            Below are examples of XML column definitions that are not supported.
            
            <code>
            CREATE TABLE [T1]
            (
                column1 xml([SomeXmlSchemaCollection]),
                column2 xml(CONTENT [SomeXmlSchemaCollection]),
                column3 xml(DOCUMENT [SomeXmlSchemaCollection])
            )
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.EvaluateSpAddMessage(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Custom error messages are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.EvaluateSpAddExtendedProc(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Extended stored procedures are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeUdtStatement)">
            <summary>
            CLR user-defined types are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12DatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
            
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12DatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12DatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12Interpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Server AzureV12
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlAzureV12ExternalDataSourcePopulator})">
            <summary>
            Register external data source property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlCredentialPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register sql credentials.
            </summary>
            <param name="instanceManager">Populator instance manager.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element batch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register the index populator for SQL DB.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlPrimaryKeyConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register the primary key constraint populator for SQL DB.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlUniqueConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register the unique key constraint populator for SQL DB.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ReverseEngineerPopulatorGenerator.RegisterSqlEdgeConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the edge constraint populator generator. This must be registered to be used
            for reverse engineering.
            </summary>
            <param name="instanceManager">The instance manager to use.</param>
            <param name="dataSchemaModel">The data schema model to use.</param>
            <param name="option">The reverse engineering options to use.</param>
            <param name="isFull">True indicates a full reverse engineer.</param>
            <param name="request">The associated request.</param>
            <param name="singleElementBatch">The single batch request.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ScriptDomGenerator">
            <summary>
            SQL Azure V12 specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate SqlAzureV12 CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate SqlAzureV12 DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12ScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate SqlAzureV12 ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12StatementFilterVisitor">
            <summary>
            This class was put together by examination of all of the StatementFilterVisitors
            for every Sql DSP from Sql80 through Sql160. Many visit method implementations were taken
            directly from SqlAzureStatementFilterVisitor with no or minor modification.
            
            Tests that ensure invalid syntax is filtered out and valid syntax is allowed through
            can be found in UTData's SqlAzureV12StatementFilterTests class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12StatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnStorageOptions)">
            <summary>
            Exclude column definitions that specify filestream.
            </summary>
            <param name="node"></param>
            <remarks>
            Below is example of column definition that is not supported.
            
            <code>
            CREATE TABLE [T1]
            (
                fileStreamColumn varbinary(max) FILESTREAM
            )
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12StatementFilterVisitor.EvaluateSpAddMessage(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Custom error messages are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAzureV12StatementFilterVisitor.EvaluateSpAddExtendedProc(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Extended stored procedures are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPartHelper">
            <summary>
            Marshaling helper for SqlClrPart.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart">
            <summary>
            Immutable struct that represents a clr part.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name for the CLR part.</param>
            <param name="isFunctionCall">To indicate that this part is a method invocation or not.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart.Name">
            <summary>
            The name for the CLR part.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart.IsFunctionCall">
            <summary>
            To indicate that this part is a method invocation or not.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints.IsXmlNodesFunctionCall">
            <summary>
            Indicate we are resolving a column reference that invokes the XML nodes() function.
            </summary>
            <remarks>
            The invocation of the XML nodes() function is special cased by SQL Server.
            The effect of this for column resolution is that the invocation of the XML nodes() function
            cannot resolve to a user defined function.  
            
            For example, in the statement below, the reference to T1.C1.nodes() cannot resolve to 
            user defined function T1.C1.nodes.
            
            SELECT XT.XC.value('.', 'nvarchar(10)') [Item]
            FROM T1
            CROSS APPLY T1.C1.nodes('/items') XT(XC)
            
            The same rule applies even if the two-part name C1.nodes was used.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints.IsTableValuedFunctionCall">
            <summary>
            Indicate the function call references a TVF instead of a scalar function
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints.CanBeAggregate">
            <summary>
            Indicate the function call can be an aggregate
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver._selectColumns">
            <summary>
            Holds all columns that make up the SELECT part
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver._defaultSchema">
            <summary>
            Holds the default schema that will be used for disambiguation
            </summary>
            <remarks>By default, when no schemaName is provided, we will use the disambiguation schema name 
            (in the DML visitor) to create the column source and then we will add a </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.MAX_AFFINITY">
            <summary>
            SQL does not allow any nesting deeper than 16, but this should at least be good for some years
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.StringComparer">
            <summary>
            Gets the collation aware string comparer
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.SelectColumns">
            <summary>
            Gets all columns that are returned by the DML/SELECT
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.DefaultSchemaName">
            <summary>
            Gets the name of the default schema (fall back schema name)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.MergeSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            This method correctly merges in the new columnSource
            </summary>
            <param name="source">Source to merge in</param>
            <returns>As this method does some magic to make sure all is merged correctly, it will return the actual object that it merged in</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.BlindlyAddSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            Blindly adds a new source to the list of available sources without any interference
            </summary>
            <param name="source">Source to add</param>
            <remarks>Use MergeSource instead</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.RemoveSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            Removes a source from the stored sources
            </summary>
            <param name="source">Source to remove</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ContainsColumnSource(System.String)">
            <summary>
            Gets whether or not there is already a source with the provided exposedName
            </summary>
            <param name="exposedName">Name to check</param>
            <returns>True if such a source already exists</returns>
            <remarks>
            Consider following situation (there is a table dbo.t1 and s1.t1)
            the current view fails to compute:
            CREATE VIEW V 
            AS
            SELECT unique_column
            FROM dbo.t1, s1.t1
            It fails to compute because both dbo.t1 and s1.t1 have the same 'exposed name', one must use aliasses
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.GetColumnSourceByExposedName(System.String)">
            <summary>
            Gets the columnSource that has the provided exposed name
            </summary>
            <param name="exposedName">Exposed Name to find</param>
            <returns>The columnSource with the matching exposed name or null if not found</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ExpandWildCard(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier})">
            <summary>
            Returns all ResolvedDescriptors that are targetted by the wildcard
            </summary>
            <param name="wildcardNameParts">Nameparts of the wildCard</param>
            <returns>A list of ResolvedDescriptors making up the wildcard</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ExpandWildcardImpl(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.List{System.String})">
            <summary>
            Actual implementation of the wildcardExpansion
            </summary>
            <param name="wildcardNameParts">Wildcard Name parts</param>
            <returns>The descriptors making up the wildcard</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.AddSelectColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor)">
            <summary>
            Adds a SelectScalarExpression
            </summary>
            <param name="descriptor">Descriptor of SelectScalarExpression to add</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver100.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Constructor
            </summary>
            <param name="comparisonManager">ComparisonManager</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90">
            <summary>
            This class merges column resolver behavior for 8.0 and 9.0.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.CreateColumnsForNonWildcardSource(System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.List{System.String},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            Maps the list of IDs to potentials based on the possible source and adds those potentials to the list as columns
            </summary>
            <param name="alias">Alias for the column</param>
            <param name="hints">Resolution hints</param>
            <param name="potentials">List of potentials to add to</param>
            <param name="ids">IDs to resolve to columns</param>
            <param name="possibleSource">Current source to try to map to</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.CalculateColumnsForSourceWithoutKnownColumnsBasedOnIndices(System.String,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,System.Boolean)">
            <summary>
            Adds a potential to the list in accordance with the schema information stored in the possible source
            </summary>
            <param name="alias">alias for the potential</param>
            <param name="potentials">Potentials to add to</param>
            <param name="colIndices">Column indices found to be column indications</param>
            <param name="ids">Column identifiers</param>
            <param name="possibleSource">Source being matched agains</param>
            <param name="useAlternateSchemaName">Whether or not we are supposed to use the alternate schema name (the default schema name)</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.GetPossibleColumnIndicesForNonWildcard80(System.Collections.Generic.List{System.String},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            Performs a matching of the columnIdentifiers to the possibleSource for SQL 80
            </summary>
            <param name="columnIdentifiers">Identifiers to match</param>
            <param name="possibleSource">Source to match against</param>
            <param name="hints">Hints for resolution</param>
            <returns>A list of all indices where the columnIdentifiers can attach to the possibleSource</returns>
            <remarks>Do NOT call this method to get indices for a Wildcard, this method CANNOT HELP YOU
            ALSO: this is the 80 implementation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.MatchColumnIndicesAgainstKnownColumns(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.List{System.String},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},System.String,System.Collections.Generic.HashSet{System.Int32},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            Matches the given ColumnIdentifiers against the known columns of the possibleSource
            </summary>
            <param name="potentials">List to which to add potentials</param>
            <param name="columnIdentifiers">ColumnIdentifiers to match</param>
            <param name="clrPartsAfterFunctionCall">Parts of CLR function call</param>
            <param name="alias">Alias for the resolved column</param>
            <param name="columnIndices">Indices of where a column could be located for the possibleSource</param>
            <param name="possibleSource">Source to map against</param>
            <param name="hints">Resolver hints</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.ExpandWildcardImpl(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.List{System.String})">
            <summary>
            Actual implementation of the wildcardExpansion
            </summary>
            <param name="wildcardNameParts">Wildcard Name parts</param>
            <returns>The descriptors making up the wildcard</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.HandleTriggerTarget(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints,System.String)">
            <summary>
            Handles the linking of columns/wildcards to inserted/deleted trigger target
            </summary>
            <param name="potentials">List to which to add potentials</param>
            <param name="identifiers">Identifiers to resolve</param>
            <param name="clrPartsAfterFunctionCall">Parts of CLR function call</param>
            <param name="alias">Alias for the resolved column</param>
            <param name="hints">Possible hints</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.CombineClrParts(System.Collections.Generic.IList{System.String},System.Int32,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            Combines the the clr parts on identifiers starting from start index, and the clrPartsAfterFunctionCall.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.HandleFunctionCall(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            Retrieves the function from the identifiers
            </summary>
            <param name="potentials">List to which to add potentials</param>
            <param name="identifiers">Identifiers</param>
            <param name="alias">Alias given</param>
            <remarks>This does not append the CLR parts that are part of the FunctionCall fragment</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.WildcardNameMatchesSource(System.Collections.Generic.List{System.String},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            Verifies whether the source 
            </summary>
            <param name="wildcardName">Wildcard name to check</param>
            <param name="source">Source to check against</param>
            <returns>True if the wildcard targets the source</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.MatchNames(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Matches the names from the back to the front
            </summary>
            <param name="left">Left param</param>
            <param name="right">Right param</param>
            <returns>Whether or not the name matches</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Constructor
            </summary>
            <param name="comparisonManager">ComparisonManager</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.ResolveImpl(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            Performs a 90 resolution
            </summary>
            <param name="identifiers">Identifiers to resolve</param>
            <param name="fragment">Fragment associated with the resolved column</param>
            <param name="alias">Alias for the resolvedCol</param>
            <param name="hints">Possible hints</param>
            <returns>
            <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor"/> instance that holds information about the resolved column potentials.
            </returns>
            <remarks>
            The caller needs to invoke <see cref="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ResolvedDescriptor.Normalize(Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)"/> on the returned resolved descriptor.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.GetPossibleColumnIndicesForNonWildcard(System.Collections.Generic.List{System.String},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver.ResolutionHints)">
            <summary>
            returns a list of integers indicating the indices of where a column lives in the list of identifiers
            </summary>
            <param name="columnIdentifiers">Identifiers to match</param>
            <param name="possibleSource">Source to match against</param>
            <param name="hints">Hints for resolution</param>
            <returns>A list of all indices where the columnIdentifiers can attach to the possibleSource</returns>
            <remarks>Do NOT call this method to get indices for a Wildcard, this method CANNOT HELP YOU
            ALSO: this is the 90 implementation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.RemoveSourceIndicesWhereExternalNamePartsDoNotMatch(System.Collections.Generic.List{System.String},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,System.Collections.Generic.List{System.Int32})">
            <summary>
            Removes all indices from sourceIndices where the suggested external name parts (from the source) do not match the actual external name parts (as indicated by the source name index)
            </summary>
            <param name="columnIdentifiers">name parts of the column</param>
            <param name="possibleSource">Source to match against</param>
            <param name="sourceIndices">Source name indicators</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.RemoveSourceIndicesWhereSchemaPartDoesNotMatch(System.Collections.Generic.List{System.String},Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource,System.Collections.Generic.List{System.Int32})">
            <summary>
            Removes the indices where the source name starts from the list of found indices based on whether or not the schema name matches
            </summary>
            <param name="columnIdentifiers">Column identifier parts</param>
            <param name="possibleSource">Source to check against</param>
            <param name="sourceIndices">list of indices to treat</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnResolver90.MergeSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ColumnSource)">
            <summary>
            Merge the provided column source into the column resolver
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDdlTriggerScope">
            <summary>
            Scope for trigger, associated with data definition change event
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwDatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
            
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwDatabaseModelOptions.CopyTo(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Transfers the fields in this property bag to the SqlDatabaseOptions model element
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwDatabaseModelOptions.CopyFrom(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
             Populates this property bag from the SqlDatabaseOptions argument
            </summary>
            <param name="sqlDatabaseOptions"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator">
            <summary>
            The Sql Dw Interpretation Error Generator to add AddError() methods as needed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddViewNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            Not Supported Error for View
            </summary>
            <param name="node">TSql Fragment node</param>
            <param name="viewOption">View Options</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddWorkloadGroupOptionNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddMergeOptionNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddCreateSymmetricKeyOptionsNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.CreateCertificateNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            Not Supported Error for Create Certificate Assembly
            </summary>
            <param name="node">TSql Fragment node</param>
            <param name="createCertificateAssemblyOption ">Create Certificate Assembly option</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddCreateAsymmetricKeyNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            Not Supported Error for Create AsymmetricKey SqlDw platform
            </summary>
            <param name="node">TSql Fragment node</param>
            <param name="createAsymmetricKeyOption">Create Certificate Assembly option</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpretationErrorGenerator.AddCreateCopyIntoCopyOptionNotSupportedError(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.String)">
            <summary>
            Not Supported Error for Invalid CopyOption combination within same Copy Statement SqlDw platform
            </summary>
            <param name="node">TSql Fragment node</param>
            <param name="unsupportedCopyOption">Create SP with COPY INTO with CopyOption</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwInterpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL DW
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.Query_SqlDwOnlineTableProperties">
            <summary>
            This query is derived from Query_Sql90OnlineTableProperties. Using Dw supported view here dm_pdw_nodes_db_partition_stats 
            instead of dm_db_partition_stats.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.LoginNameCache">
            <summary>
            Gets or Sets Login Name value to LoginNameCache. This is used when registering user 
            populators in RegisterSqlUserPopulators for Dw. We need this as its required to consume 
            AzureV12UserPopulator to override the User Populator for Dw.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.InitializeCachedElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel)">
            <summary>
            Overrides the InitializeCachedElement base method by instanitiating LoginNameCache. 
            </summary>
            <param name="dataSchemaModel"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.OnEndPopulation">
            <summary>
            Overrides the OnEndPopulation base method by nullifying LoginNameCache.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerImpl.SetISqlSpecifiesStorage(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.OrdinalSqlDataReader,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Set the relationship between Dw partitioned table and partition specification.
            </summary>
            <param name="dataSchemaModel">Data schema model.</param>
            <param name="reader">Database reader.</param>
            <param name="sqlSpecifiesStorage">Partitioned Table.</param>
            <param name="omitDefault">Omit default.</param>
            <param name="omitPartitionScheme">Omit partition scheme</param>
            <param name="option">Reverse engineer option.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator">
            <summary>
            This class contains DW populators for various objects like Table, View, Procedure, Index, and Constraints.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterDatabaseOptionsPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the database options populators by invoking the base populator with DW specific metadata query.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the table populator by invoking the base populator with DW specific metadata queries.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlColumnStoreIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the column store index populator by invoking the base populator.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDefaultConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the default constraints populator by invoking the base populator.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the index populator by invoking the base populator with DW specific metadata queries.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlViewPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the view populator by invoking the base populator with DW specific metadata queries.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSysCommentObjectDependencyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            This is used to get the dependencies for objects in SqlAzureDW
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlLoginPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the login populator.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlProcedurePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Populates the stored procedure objects by invoking the base populator with DW specific metadata queries.
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlUserPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Populates the user objects by invoking the base populator with necessary required objects like LoginNameCache.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSpecialCaseServerPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest)">
            <summary>
            Allows registration of Server populators out of scope. This is useful for Azure where some server populators need to run on database import scopes.
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="request">Reverse engineer request object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDatabaseWorkloadGroupPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql DW workload Group populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDatabaseWorkloadGroupPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql DW workload Group populator
            </summary>
            <param name="reverseEngineerImpl">Reverse Engineer Impl object</param>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlWorkloadClassifierPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register sql workload Classifier populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlWorkloadClassifierPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql workload Classifier populator
            </summary>
            <param name="reverseEngineerImpl">Reverse Engineer Impl object</param>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.GetLoginNameCache">
            <summary>
            Returns the login name from LoginNameCache object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql External File Format populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExternalFileFormatPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl,System.String,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementPopulatorConstructor{Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.SqlDwExternalFileFormatPopulator})">
            <summary>
            Register external file format property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSchemaPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register sql schema.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element branch object.</param>
            <param name="reverseEngineerImpl">Reverse engineer implementation object.</param>
            <param name="query">Reverse engineer query to execute.</param>
            <param name="populatorConstructor">External data source element populator object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFunctionPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the function populator.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element branch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSymmetricKeyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Symmetric Key populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlAsymmetricKeyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Asymmetric Key populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExternalDataSourcePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql External Data Source populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExternalTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register external table property.
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element banch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterDatabaseSqlPermissionStatementPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Permission Statement populator 
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlUniqueConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the unique constraints populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlPrimaryKeyConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the primary key constraint populator
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSecurityPolicyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the security policy populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSearchPropertyListPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Search Property List Populators (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSearchPropertyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Search Property Populators (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSequencePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Sequence Populators (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDatabaseAuditSpecificationPopulatorPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Database Audit Specification Populators (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlBrokerPriorityPopulatorPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Broker Priority populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSpatialIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the spatial index populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFullTextStopListPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Full Text StopList populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlColumnEncryptionKeyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the column encryption key populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlColumnMasterKeyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the column master key populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFileTablePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql File Table populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSpecifiesCompressionOptionsPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the specifies data compression options populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlUserDefinedTableTypesPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the user defined types populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDatabaseEncryptionKeyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Database Encryption Key populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExtendedProcedurePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Extended Procedure populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlExtendedPropertyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Extended Property populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSignaturePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the signature populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlRemoteServiceBindingPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Remote Service Binding populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlEventNotificationPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Event Notification populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlRoutePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Route populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlServicePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Service populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlContractPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Contract populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlQueuePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the Queue populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlMessageTypePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Message Type populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlRulePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Rule populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDefaultPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Default populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSynonymPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Synonym populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDatabaseDdlTriggerPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Database Ddl Trigger populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlDmlTriggerPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Dml Trigger populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlXmlIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Dml Trigger populator (Not Supported)
            </summary>
            <param name="instanceManager"></param>
            <param name="dataSchemaModel"></param>
            <param name="option"></param>
            <param name="isFull"></param>
            <param name="request"></param>
            <param name="singleElementBatch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlSelectiveXmlIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the xml index populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFullTextIndexPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the full text index populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlStatisticsPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the Statistics populator 
            I have reused the Sql120StatisticPopulator, Sql90StatisticsFilter,
            Sql120Statistics and Sql110StatisticsColumns as the same queries can be
            executed successfully in SqlDw
            </summary>
            <param name="instanceManager">Populator instance manager object.</param>
            <param name="dataSchemaModel">Sql schema model object.</param>
            <param name="option">Reverse engineer option.</param>
            <param name="isFull">Comparison option.</param>
            <param name="request">Reverse engineer request object.</param>
            <param name="singleElementBatch">Single element branch object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlCheckConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the check constraint populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlForeignKeyConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the foreign key constraint populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlAggregatePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Aggregate populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlPartitionSchemePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Partition Scheme populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlPartitionFunctionPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Partition Function populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlUserDefinedTypePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql User Defined Type populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlUserDefinedDataTypePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql User Defined Data Type populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlXmlSchemaCollectionPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the xml schema collection populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlAssemblyPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the assembly populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFullTextCatalogPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Full Text Catalog populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFilePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql File populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlFileGroupPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the file group populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlServerRoleMembershipPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Server Role Membership populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterSqlApplicationRolePopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Sql Application Role populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwReverseEngineerPopulatorGenerator.RegisterObjectPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Register Object populator (Not Supported)
            </summary>
            <param name="instanceManager">Populator instance manager object</param>
            <param name="dataSchemaModel">Sql schema model object</param>
            <param name="option">Reverse engineer option</param>
            <param name="isFull">Comparison option</param>
            <param name="request">Reverse engineer request object</param>
            <param name="singleElementBatch">Single element branch object</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwScriptDomGenerator">
            <summary>
            SQL DW specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate SqlDw CREATE statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate SqlDw DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate SqlDw ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwServerModelOptions">
            <summary>
            This is the data transfer class which moves server options from
            the project to the model builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilter.CreateVisitor">
            <summary>
            Initializes the Dw Statement Filter Visitor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor">
            <summary>
            This class was put together by examination of all of the StatementFilterVisitors
            for every Sql DSP from Sql80 through Sql130. Many visit method implementations were taken
            directly from SqlAzureV12StatementFilterVisitor with no or minor modification.
            Tests that ensure invalid syntax is filtered out and valid syntax is allowed through
            can be found in UTData's SqlDwStatementFilterTests class.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.isProcessingProcedureStatement">
            <summary>
            Indicates that the current context is evaluating a procedure.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.isProcessingFunctionStatement">
            <summary>
            Indicates that the current context is evaluating a function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.isInlineTVF">
            <summary>
            Indicates that the current context is evaluating a inline table valued function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.isProcessingCreateUserStatement">
            <summary>
            Indicates that the current context is evaluating an user.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.#ctor">
            <summary>
            Constructor for SqlDwStatementFilterVisitor. Instantiates an error generator object of type SqlDwInterpretationErrorGenerator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ReturnStatement)">
            <summary>
            Explicit visit for ReturnStatement.
            </summary>
            <param name="node">A node of type ReturnStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.BeginEndBlockStatement)">
            <summary>
            Explicit visit for BeginEndBlockStatement. Visits the child elements of the statement.
            </summary>
            <param name="node">A node of type BeginEndBlockStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IfStatement)">
            <summary>
            Explicit visit for IfStatement. Visits the child elements of the statement.
            </summary>
            <param name="node">A node of type IfStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.WhileStatement)">
            <summary>
            Explicit visit for WhileStatement. Visits the child elements of the statement.
            </summary>
            <param name="node">A node of type WhileStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TryCatchStatement)">
            <summary>
            Explicit visit for TryCatchStatement. Visits the child elements of the statement.
            </summary>
            <param name="node">A node of type TryCatchStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateViewStatement)">
            <summary>
            Validates the CreateViewStatement and invokes base class ExplicitVisit method if the statement is valid. 
            </summary>
            <param name="node">A node to visit of type CreateViewStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.TruncateTargetTableSwitchOption)">
            <summary>
            Truncate Target Option is supported for Data Warehouse
            </summary>
            <param name="node">A node to visit of type WaitAtLowPriorityOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateWorkloadGroupStatement)">
            <summary>
            Workload Group support for DW
            </summary>
             <param name="node">A node to visit of type workloadgroup </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateWorkloadClassifierStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The CreateWorkloadClassifierStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.PredictTableReference)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The PredictTableReference AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.MergeStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The MergeStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitTableSwitchOption)">
            <summary>
            Wait At Low Priority Wait Table Switch Option is not supported for Data Warehouse
            </summary>
            <param name="node">A node to visit of type WaitAtLowPriorityOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterViewStatement)">
            <summary>
             Validates AlterViewStatement and invokes base class ExplicitVisit method if the statement is valid.
             </summary>
             <param name="node">A node to visit of type AlterViewStatementStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropViewStatement)">
            <summary>
            Validates DropViewStatement and invokes base class ExplicitVisit method if the statement is valid.
            </summary>
            <param name="node">A node to visit of type DropViewStatementStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterRoleStatement)">
            <summary>
            Validates AlterRoleStatement
            </summary>
            <param name="node">A node to visit of type AlterRoleStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropRoleStatement)">
            <summary>
            Validates DropRoleStatement 
            </summary>
            <param name="node">A node to visit of type DropRoleStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterWorkloadGroupStatement)">
            <summary>
            Validates AlterworkloadGroupStatement
            </summary>
            <param name="node">A node to visit of type AlterworkloadGroupStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateProcedureStatement)">
            <summary>
            Validates the CreateProcedureStatement and invokes base class ExplicitVisit method if the statement is valid. 
            </summary>
            <param name="node">A node to visit of type CreateProcedureStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterProcedureStatement)">
            <summary>
            Validates the AlterProcedureStatement and invokes base class ExplicitVisit method if the statement is valid.
            </summary>
            <param name="node">A node to visit of type AlterProcedureStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropProcedureStatement)">
            <summary>
            Validates DropProcedureStatement object by invoking their base ExplicitVisit method.
            Invoking CheckNoDatabaseOrServerParts is not required here as the necessary name part validation is already taken care by the Parser.
            </summary>
            <param name="node">A node to visit of type DropProcedureStatement</param>
            <remarks>
            The assignment "StatementValid = true" needs to be set otherwise a valid DropProcedureStatement statement will be thrown unrecognized statement error.
            This assignment has been made for other statements in the base class(Sql80Statementfiltervistor). As DropProcedureStatement statement was not supported  
            in prior versions, we are adding this here to support only for Dw.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CopyStatement)">
            <summary>
            Validates the CopyStatement and invokes base class ExplicitVisit method if the statement is valid.
            </summary>
            <param name="node">A node to visit of type CopyStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateAggregateStatement)">
            <summary>
            Validates the CreateAggregateStatement and invokes base class ExplicitVisit method if the statement is valid. 
            </summary>
            <param name="node">A node to visit of type CreateAggregateStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateFunctionStatement)">
            <summary>
            Validates the CreateFunctionStatement and invokes base class ExplicitVisit method if the statement is valid. 
            </summary>
            <param name="node">A node to visit of type CreateFunctionStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterFunctionStatement)">
            <summary>
            Validates the AlterFunctionStatement and invokes base class ExplicitVisit method if the statement is valid.
            </summary>
            <param name="node">A node to visit of type AlterFunctionStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropFunctionStatement)">
            <summary>
            Validates DropFunctionStatement object by invoking their base ExplicitVisit method.
            Invoking CheckNoDatabaseOrServerParts is not required here as the necessary name part validation is already taken care by the Parser.
            </summary>
            <param name="node">A node to visit of type DropFunctionStatement</param>
            <remarks>
            The assignment "StatementValid = true" needs to be set otherwise a valid DropFunctionStatement statement will be thrown unrecognized statement error.
            This assignment has been made for other statements in the base class(Sql80Statementfiltervistor). As DropFunctionStatement statement was not supported  
            in prior versions, we are adding this here to support only for Dw.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateStatisticsStatement)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropStatisticsStatement)">
            <summary>
            Validates DropStatisticsStatement object by invoking their base ExplicitVisit method.
            Invoking CheckNoDatabaseOrServerParts is not required here as the necessary name part validation is already taken care by the Parser.
            </summary>
            <param name="node">A node to visit of type DropStatisticsStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.SelectStatement)">
            <summary>
            Validates SelectStatement object by invoking their base ExplicitVisit method.
            </summary>
            <param name="node">A node to visit of type SelectStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalFileFormatStatement)">
            <summary>
            Validates the DropExternFileFormatStatement and invokes base class ExplicitVisit method.
            </summary>
            <param name="node">A node of type DropExternalFileFormatStatement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterSchemaStatement)">
            <summary>
            Validates the AlterSchemaStatement and invokes base class ExplicitVisit method if the statement is valid
            </summary>
            <param name="node">A node of type AlterSchemaStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateIndexStatement)">
            <summary>
            Validates the CreateIndexStatement and invokes base class ExplicitVisit method
            </summary>
            <param name="node">A node of type CreateIndexStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IndexStateOption)">
            <summary>
            Validates the IndexStateOption
            </summary>
            <param name="node">A node of type IndexStateOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DataCompressionOption)">
            <summary>
            ExplicitVisit method for DataCompressionOption
            </summary>
            <param name="node">A node of type DataCompressionOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.OnlineIndexOption)">
            <summary>
            ExplicitVisit method for OnlineIndexOption
            </summary>
            <param name="node">A node of type OnlineIndexOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.IndexExpressionOption)">
            <summary>
            ExplicitVisit method for IndexExpressionOption
            </summary>
            <param name="node">A node of type IndexExpressionOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnStoreIndexStatement)">
            <summary>
            Validates the CreateColumnStoreIndexStatement and invokes base class ExplicitVisit method
            </summary>
            <param name="node">A node of type CreateColumnStoreIndexStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement)">
            <summary>
             Validates AlterIndexStatement.
             </summary>
             <param name="node">A node to visit of type AlterIndexStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropIndexStatement)">
            <summary>
             Validates DropIndexStatement.
             </summary>
             <param name="node">A node to visit of type DropIndexStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CompressionDelayIndexOption)">
            <summary>
            ExplicitVisit method for CompressionDelayIndexOption
            </summary>
            <param name="node">A node of type CompressionDelayIndexOption</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalTableStatement)">
            <summary>
            Validates DropExternalTableStatement node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateUserStatement)">
            <summary>
            Validates CreateUserStatement node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.UserLoginOption)">
            <summary>
            Validates UserLoginOption node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.LiteralPrincipalOption)">
            <summary>
            Validates LiteralPrincipalOption node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterUserStatement)">
            <summary>
            Validates AlterUserStatement node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropUserStatement)">
            <summary>
            Validates DropUserStatement node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropLoginStatement)">
            <summary>
            Drop SQL Login is not supported for Data Warehouse.
            </summary>
            <param name="node">A node of type DropLoginStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateSecurityPolicyStatement)">
            <summary>
            Security Policies with block and schema bindings predicates are
            not supported for Data Warehouse.
            </summary>
            <param name="node">A node of type CreateSecurityPolicyStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterSecurityPolicyStatement)">
            <summary>
            Security Policies with block and schema bindings predicates are
            not supported for Data Warehouse.
            </summary>
            <param name="node">A node of type AlterSecurityPolicyStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpAddExtendedProperty(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Extended properties are not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpServerOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            System stored procedure Server Option is not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpAddLinkedServer(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            System stored procedure Linked Server is not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpAddLinkedSrvLogin(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            System stored procedure Linked Server Login is not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpAddMessage(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Custom error messages are not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateSpAddExtendedProc(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Extended stored procedures are not supported.
            </summary>
            <param name="node">A node of type ExecuteStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCredentialStatement)">
            <summary>
            Validates the CreateCredentialStatement, Only Database Scoped Credentials are supported.
            </summary>
            <param name="node">A node of type CreateCredentialStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterCredentialStatement)">
            <summary>
            Alter database scoped credential is not supported.
            </summary>
            <param name="node">A node of type AlterCredentialStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropCredentialStatement)">
            <summary>
            Drop database scoped credential is not supported.
            </summary>
            <param name="node">A node of type DropCredentialStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterMasterKeyStatement)">
            <summary>
            Alter Master Key is not supported.
            </summary>
            <param name="node">A node of type AlterMasterKeyStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropMasterKeyStatement)">
            <summary>
            Drop Master Key is not supported.
            </summary>
            <param name="node">A node of type DropMasterKeyStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionSchemeStatement)">
            <summary>
            Create Partition Scheme is not supported.
            </summary>
            <param name="node">A node of type CreatePartitionSchemeStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterPartitionSchemeStatement)">
            <summary>
            Alter Partition Scheme is not supported.
            </summary>
            <param name="node">A node of type AlterPartitionSchemeStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropPartitionSchemeStatement)">
            <summary>
            Drop Partition Scheme is not supported.
            </summary>
            <param name="node">A node of type DropPartitionSchemeStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionFunctionStatement)">
            <summary>
            Create Partition Function is not supported.
            </summary>
            <param name="node">A node of type CreatePartitionFunctionStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.AlterPartitionFunctionStatement)">
            <summary>
            Alter Partition Function is not supported.
            </summary>
            <param name="node">A node of type AlterPartitionFunctionStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.DropPartitionFunctionStatement)">
            <summary>
            Drop Partition Function is not supported.
            </summary>
            <param name="node">A node of type DropPartitionFunctionStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.EvaluateCreateUserStatement(Microsoft.SqlServer.TransactSql.ScriptDom.CreateUserStatement)">
            <summary>
            This gets called in the base class's ExplicitVisit(CreateUserStatement node) method
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ValidateCreateAlterProcedureStatement(Microsoft.SqlServer.TransactSql.ScriptDom.CreateProcedureStatement,Microsoft.SqlServer.TransactSql.ScriptDom.AlterProcedureStatement)">
            <summary>
            Validates CreateProcedureStatement and AlterProcedureStatement objects by invoking their base ExplicitVisit method.
            CreateProcedureStatement has overrides in Sql80StatementFilterVisitor but AlterProcedureStatement doesn't have any. To have common code for CreateProcedureStatement
            and AlterProcedureStatementwe are using ProcedureStatementBody here and the operations for CreateProcedureStatement is ported here from Sql80StatementFilterVisitor.
            </summary>
            <param name="nodeCreate">A node to visit of type CreateProcedureStatement</param>
            <param name="nodeAlter">A node to visit of type AlterProcedureStatement</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDwStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.CreateCertificateStatement)">
            <summary>
            Implements the visitor design pattern to check if the statement node is valid for interpretation.
            </summary>
            <param name="node">The CreateCertificate AST node.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor">
            <summary>
            Describes a SQL model element without instantiating it in the store.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.IsEmpty">
            <summary>
            Returns if descriptor is empty (doesn't contain any identifiers).  It is possible for
            a descriptor to have a generated name - i.e. based on the context of a statement
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.HasUsableName">
            <summary>
            Helper to signify whether this descriptor has a name that is usable - i.e. the
            name parts represent the name of a SQL object.  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.IgnoreName">
            <summary>
            Gets/sets if name should be ignored for this descriptor.  It is possible for a
            descriptor to have no name AND IgnoreName == false
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.Type,System.String[])">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.Type,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorVolatility,System.String[])">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="volatility">The value for the temporary status of the object</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.String[])">
            <summary>
            Constructor which takes only identifiers
            </summary>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.Type,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorVolatility,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The constructor.
            </summary>
            <param name="elementType">Class of the element (used only for IdentifiedElement)</param>
            <param name="volatility">The value for the temporary status of the object</param>
            <param name="identifiers">The identifiers for the name of the element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Type,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorVolatility)">
            <summary>
            Constructor which does all the work
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.ElementType">
            <summary>
            Gets the type of the element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.GraphType">
            <summary>
            Gets or sets the graph type associated with the element. This property
            is used to indicate that the SqlSimpleColumn model element is not a normal
            column but instead is a graph column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.ElementClass">
            <summary>
            Returns back the elements class that maps to the ElementType.  If the
            ElementType maps to more than one element class the first element class
            is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.Volatility">
            <summary>
            Returns element volatility
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.IsVolatile">
            <summary>
            Returns if this descriptor corresponds to volatile element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.Identifiers">
            <summary>
            The parts of the elements name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.ExternalReferenceParts">
            <summary>
            Returns external parts for elements name
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.AddExternalNameParts(System.String[])">
            <summary>
            Adds one or more external name parts into the element descriptor
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor.AddExternalNameParts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds one or more external name parts into the element descriptor
            </summary>
            <param name="names"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorRelevance">
            <summary>
            Specifies how the fragment being visited is related to the descriptor
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorVolatility">
            <summary>
            This enumeration describes the volatility of the element descriptor
            Each volatility 'level' is distinct, it is not possible to be AND a variable AND a Temporary table etc...
            They are mutually exclusive (there is a distinct difference between a temporary object and a global temporary object)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AlterCertificate">
            <summary>
              Looks up a localized string similar to Alter certificate.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AlterColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Alter Column Encryption Key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AlterTrigger">
            <summary>
              Looks up a localized string similar to Alter trigger.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Assembly">
            <summary>
              Looks up a localized string similar to Assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AssemblyCorrupt">
            <summary>
              Looks up a localized string similar to This assembly is corrupt or not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AssemblyLoadingError">
            <summary>
              Looks up a localized string similar to The reference could not be added to assembly {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.AutoGridTessellationScheme">
            <summary>
              Looks up a localized string similar to Auto grid tessellation scheme.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Bacpac250IsNotSupported">
            <summary>
              Looks up a localized string similar to BACPAC version 2.5 is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacImportFailedException">
            <summary>
              Looks up a localized string similar to Unable to import bacpac. Inner exception may have more details..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacIOError">
            <summary>
              Looks up a localized string similar to Bacpac file stream must be writeable, have proper permissions, and enough free space for the operation to complete. A file IO exception has occurred..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacPackageError">
            <summary>
              Looks up a localized string similar to Bacpac file format corrupt or null.  See inner exception for more details..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacPackagePartExists">
            <summary>
              Looks up a localized string similar to Bacpac package part already exists for binary file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacPackagePartMissing">
            <summary>
              Looks up a localized string similar to Bacpac package part missing for binary file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacUnsupportedColumnType">
            <summary>
              Looks up a localized string similar to Column type &apos;{0}&apos; unsupported from table &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BacpacVersion250IsNotSupported">
            <summary>
              Looks up a localized string similar to The BACPAC file &quot;{0}&quot; is of version 2.5. BACPAC version 2.5 is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchCommandSqlError">
            <summary>
              Looks up a localized string similar to Batch Command during reverse engineer failed with Error Code: {0} Line Number: {1} Error Message: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_CircularReference">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; recursively included..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_CommentNotTerminated">
            <summary>
              Looks up a localized string similar to Missing end comment mark &apos;*/&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_IncorrectSyntax">
            <summary>
              Looks up a localized string similar to Incorrect syntax was encountered while parsing &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_ParserError">
            <summary>
              Looks up a localized string similar to Fatal scripting error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_StringNotTerminated">
            <summary>
              Looks up a localized string similar to Unclosed quotation mark after the character string..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.BatchParser_VariableNotDefined">
            <summary>
              Looks up a localized string similar to Variable {0} is not defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CannotValidateImportRowCount">
            <summary>
              Looks up a localized string similar to Unable to validate the number of rows that were imported to table {0} ({1} rows expected)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ClrType">
            <summary>
              Looks up a localized string similar to CLR Type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CLRType_NotSupported_NetCore">
            <summary>
              Looks up a localized string similar to CLR types are not supported on .NET Core..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ColumnConversionError">
            <summary>
              Looks up a localized string similar to A conversion error occurred while converting a column from sqlType &apos;{0}&apos; to clrType &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ColumnTooLarge">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; value is too large.  &apos;{1}&apos; &gt; &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CommandRetryMessage">
            <summary>
              Looks up a localized string similar to Retry number {0} to server {1}. Delaying {2} ms before retry. Exception: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ConnectionError">
            <summary>
              Looks up a localized string similar to An error occurred while attempting to connect to the server: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ContainedDatabaseUser">
            <summary>
              Looks up a localized string similar to Contained database user.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CorruptedStream">
            <summary>
              Looks up a localized string similar to Stream {0} in the package {1} is corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateAssembly">
            <summary>
              Looks up a localized string similar to Create Assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateCertificate">
            <summary>
              Looks up a localized string similar to Create certificate.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Create Column Encryption Key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateColumnMasterKey">
            <summary>
              Looks up a localized string similar to Create Column Master Key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateExternalLanguage">
            <summary>
              Looks up a localized string similar to Create external language.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateExternalStream">
            <summary>
              Looks up a localized string similar to Create external stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateIndex">
            <summary>
              Looks up a localized string similar to Create index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateSelectiveXmlIndex">
            <summary>
              Looks up a localized string similar to Create Selective XML Index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateSequence">
            <summary>
              Looks up a localized string similar to Create sequence.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateSpatialIndex">
            <summary>
              Looks up a localized string similar to Create Spatial Index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateTable">
            <summary>
              Looks up a localized string similar to Create table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateTrigger">
            <summary>
              Looks up a localized string similar to Create trigger.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.CreateXmlIndex">
            <summary>
              Looks up a localized string similar to Create XML Index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Dacpac250IsNotSupported">
            <summary>
              Looks up a localized string similar to DACPAC version 2.5 is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DacpacVersion250IsNotSupported">
            <summary>
              Looks up a localized string similar to The DACPAC file &quot;{0}&quot; is of version 2.5. DACPAC version 2.5 is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DACSchemaNotAvailable">
            <summary>
              Looks up a localized string similar to Unable to proceed with DAC operations on the target instance because it does not support DACs. Specify another instance, or upgrade to a version that supports DACs..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DbTypeException">
            <summary>
              Looks up a localized string similar to Error the database type &apos;{0}&apos; is not understood by the data reader..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Deployment_MissingTableDefinitionAttribute">
            <summary>
              Looks up a localized string similar to A TableDefinition Attribute must be provided in order to generate DDL for the SQL CLR function {0} in class {1}, because its return type is IEnumerable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DeprecatedFeature_StringLiteralsAsColumnAliases">
            <summary>
              Looks up a localized string similar to String literals as column aliases.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DeprecatedFeature_TableHintWithoutWith">
            <summary>
              Looks up a localized string similar to Table hint without WITH.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DeprecatedFeatureNotSupportedOnAzure">
            <summary>
              Looks up a localized string similar to Deprecated feature &apos;{0}&apos; is not supported on Microsoft Azure SQL Database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DeserializationError">
            <summary>
              Looks up a localized string similar to Unable to deserialize row from JSON provider.  File may be corrupt or in non supported format..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DeserializationUnexpectedXmlContent">
            <summary>
              Looks up a localized string similar to Unexpected XML content..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DropCertificate">
            <summary>
              Looks up a localized string similar to Drop Certificate.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.DropTrigger">
            <summary>
              Looks up a localized string similar to Drop trigger.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ElementMissingOrCorrupted">
            <summary>
              Looks up a localized string similar to The element &apos;{0}&apos; is missing or corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ElementMissingOrCorruptedFrom">
            <summary>
              Looks up a localized string similar to The element &apos;{0}&apos; is missing or corrupted from the package content &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ErrorAddingRefactorLogToPackage">
            <summary>
              Looks up a localized string similar to Could not add refactor log file &apos;{0}&apos; to package..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ErrorUnableToDetermineDatabaseCompatibilityLevel">
            <summary>
              Looks up a localized string similar to Unable to determine the database compatibility level..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ErrorWithDetailInformation">
             <summary>
               Looks up a localized string similar to {0}
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ExportFailedLog">
            <summary>
              Looks up a localized string similar to Table {0} has reported an exception. Last processed row was {1}. Exception: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ExportStatusUpdate">
            <summary>
              Looks up a localized string similar to Table {0} has exported {1} rows..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ExternalLanguage">
            <summary>
              Looks up a localized string similar to External Language.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ExternalStream">
            <summary>
              Looks up a localized string similar to External Stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ExternalStreamingJob">
            <summary>
              Looks up a localized string similar to External Streaming Job.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.FailedToSetDefaultFilegroup">
            <summary>
              Looks up a localized string similar to Failed to set Default Filegroup: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.FailedToSetDefaultFilestreamFilegroup">
            <summary>
              Looks up a localized string similar to Failed to set Default Filestream Filegroup: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.File">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Filegroup">
            <summary>
              Looks up a localized string similar to Filegroup.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.FilegroupReferenceAndPartitioningScheme">
            <summary>
              Looks up a localized string similar to Filegroup reference and partitioning scheme.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.FileTable">
            <summary>
              Looks up a localized string similar to FileTable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.Function">
            <summary>
              Looks up a localized string similar to function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.GlobalTemporaryTable">
            <summary>
              Looks up a localized string similar to Global Temporary Table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.IgnoreOnException">
            <summary>
              Looks up a localized string similar to Retry number {0}. Ignoring Exception: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ImportFormatException">
            <summary>
              Looks up a localized string similar to Bacpac header error: &apos;{0}&apos;.  The header may be corrupt..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ImportIncorrectFormat">
            <summary>
              Looks up a localized string similar to Bacpac header contains invalid or unknown format &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ImportStatusUpdate">
            <summary>
              Looks up a localized string similar to Table {0} has copied {1} rows..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ImportTableHeaderMismatch">
            <summary>
              Looks up a localized string similar to Bacpac Table header does not match. &apos;{0}&apos; does not match &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterfaceNotFound">
            <summary>
              Looks up a localized string similar to No interface type with name {0} was found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_AlterTableAddColumn">
            <summary>
              Looks up a localized string similar to In this context, you must specify columns by using a CREATE TABLE statement instead of by using an ALTER TABLE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotBindSchema">
            <summary>
              Looks up a localized string similar to Cannot schema bind {0} &apos;{1}&apos; because name &apos;{2}&apos; is invalid for schema binding. Names must be in two-part format and an object cannot reference itself..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotCreateTemporalTableWithoutHistoryTableName">
            <summary>
              Looks up a localized string similar to System-versioned temporal table must have history table name explicitly provided..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotCreateTempProcedure">
            <summary>
              Looks up a localized string similar to Temporary procedures are not supported in the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotCreateTempTable">
            <summary>
              Looks up a localized string similar to A temporary table can only be created inside a procedure, or a trigger..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CanNotCtasAsDdl">
            <summary>
              Looks up a localized string similar to CTAS cannot be used as a DDL statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotDetermineSecurableFromPermission">
            <summary>
              Looks up a localized string similar to Cannot determine securable object class from permission {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotSpecifyBoundingBoxForGeography">
            <summary>
              Looks up a localized string similar to Bounding-box coordinates apply only when using a geometry grid tesselation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotSpecifyGridParameterForAutoGridSpatialIndex">
            <summary>
              Looks up a localized string similar to GRIDS option for a spatial index cannot be specified when using an auto grid tessellation scheme (GEOMETRY_AUTO_GRID or GEOGRAPHY_AUTO_GRID). .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CannotSpecifyPartitionNumber">
            <summary>
              Looks up a localized string similar to You cannot specify a partition number because the target is not partitioned..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CanNotUseLocationOption">
            <summary>
              Looks up a localized string similar to LOCATION option cannot be used with a user table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_ClearAndBasicAreNotAllowed">
            <summary>
              Looks up a localized string similar to The &apos;CLEAR&apos; and &apos;BASIC&apos; options are not allowed on the same statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_ColumnIsntAllowedForAssemblySource">
            <summary>
              Looks up a localized string similar to Columns cannot be used to construct an assembly source expression..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_ColumnNotAllowed">
            <summary>
              Looks up a localized string similar to The name &quot;{0}&quot; is not permitted in this context. Valid expressions are constants, constant expressions, and (in some contexts) variables. Column names are not permitted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_ConstraintEnforcementIsIgnored">
            <summary>
              Looks up a localized string similar to WITH CHECK | NOCHECK option for existing data check enforcement is ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CreateColumnEncryptionKeyNotSupported">
            <summary>
              Looks up a localized string similar to The statement CREATE COLUMN ENCRYPTION KEY is not supported because the Always Encrypted feature is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_CreateColumnMasterKeyNotSupported">
            <summary>
              Looks up a localized string similar to The statement CREATE COLUMN MASTER KEY is not supported because the Always Encrypted feature is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_DontCreateAssemblyFileFromAlterAssembly">
            <summary>
              Looks up a localized string similar to Creating assembly files via ALTER ASSEMBLY statement is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_DuplicatedPartitionNumber">
            <summary>
              Looks up a localized string similar to The COMPRESSION option was specified more than once for the target, or for at least one of its partitions if the target is partitioned..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_DynamicQuery">
            <summary>
              Looks up a localized string similar to The column definition from this {0} function cannot be verified, and the operations involved with it might not be understood correctly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_FewerAliasesThanColumns">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has fewer columns than were specified in the column list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_ForReplicationIsNotSupported">
            <summary>
              Looks up a localized string similar to Usage of FOR REPLICATION with CREATE PROCEDURE is not supported. The procedure will be published with FOR REPLICATION, but may result in errors. Use of FOR REPLICATION with CREATE PROCEDURE is discouraged..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_FromPartitionGreaterThanToPartition">
            <summary>
              Looks up a localized string similar to Invalid partition range: {0} TO {1}. The lower bound must not be greater than upper bound..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_HttpForSoapOnly">
            <summary>
              Looks up a localized string similar to &quot;HTTP&quot; endpoints can only be of the &quot;FOR SOAP&quot; type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_IncompleteBoundingBoxCoordinates">
            <summary>
              Looks up a localized string similar to The BOUNDING_BOX parameter of the CREATE SPATIAL INDEX statement is incompletely defined. If the parameter has more than one part, all the parts must be defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidAssemblySource">
            <summary>
              Looks up a localized string similar to The assembly source is not valid. Only binary literals are allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidColumnList">
            <summary>
              Looks up a localized string similar to In the GRANT or REVOKE statement, the column list after the object name is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidColumnListForSecurableType">
            <summary>
              Looks up a localized string similar to Column list cannot be specified for this class of securable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidCoordinate">
            <summary>
              Looks up a localized string similar to The coordinate value ({0}) is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidIdentityValue">
            <summary>
              Looks up a localized string similar to The identity increment or seed is not valid. Only positive, zero, or negative numbers are allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidLanguageNameOrAlias">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid official language name or alias. This statement might lead to a deployment failure..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidLanguageTerm">
            <summary>
              Looks up a localized string similar to You have specified a language for the full-text index that is not valid. You must specify one of the following: a string that corresponds to the language alias; an integer value that corresponds to the locale identifier (LCID) or a hexadecimal value that corresponds to the LCID..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidLoginName">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid name because it contains characters that are not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidMaskingFunctionFormat">
            <summary>
              Looks up a localized string similar to The data masking function provided for column {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidParameterOrOption">
            <summary>
              Looks up a localized string similar to A parameter or option that is not valid was specified for procedure &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidPartitionFunctionDataType">
            <summary>
              Looks up a localized string similar to The specified partition function input parameter type is not allowed. The input parameter type cannot be text, ntext, image, xml, timestamp, varchar(max), nvarchar(max), varbinary(max), an alias data type, or a CLR user-defined data type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidPermissionObjectType">
            <summary>
              Looks up a localized string similar to The object type {0} specified in the permission statement is not supported on the current SQL platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidPermissionTypeAgainstObject">
            <summary>
              Looks up a localized string similar to The permission {0} is not valid for object type {1} in the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidPrimaryKeyConstraint">
            <summary>
              Looks up a localized string similar to PRIMARY KEY is only supported when NONCLUSTERED and NOT ENFORCED are both used..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidPriorityLevel">
            <summary>
              Looks up a localized string similar to The PRIORITY_LEVEL that is specified for conversation priority &apos;{0}&apos; is not valid. The value must be between 1 and 10..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidSearchPropertyId">
            <summary>
              Looks up a localized string similar to The value specified for the PROPERTY_INT_ID of the Search Property is not valid.  You must specify an integer value for the property identifier..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidTimestampReturnType">
            <summary>
              Looks up a localized string similar to The timestamp data type is not valid for return values..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidTopLevelStatement">
            <summary>
              Looks up a localized string similar to The statement cannot be a top-level statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidTypeForCollateClause">
            <summary>
              Looks up a localized string similar to Expression type {0} is invalid for COLLATE clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidUniqueKeyConstraint">
            <summary>
              Looks up a localized string similar to UNIQUE constraint is only supported with NOT ENFORCED is used..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidUserDefaultLanguage">
            <summary>
              Looks up a localized string similar to The value specified for the default language is not valid. You must specify one of the following: NONE; a value that corresponds to the language name or alias; an integer value that corresponds to the locale identifier (LCID)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidUserName">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid name because it contains characters that are not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidUserSid">
            <summary>
              Looks up a localized string similar to The specified SID option is not valid. The value should be a hexadecimal number 32 characters in length (like 0x0123456789ABCDEF0123456789ABCDEF)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidUserType">
            <summary>
              Looks up a localized string similar to The specified TYPE option is not valid. Allowed values are E (for external users) and X (for external groups)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_InvalidWindowsLogin">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid Windows NT name. You must specify the complete name: &lt;domain\username&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_MaskingFunctionIsEmpty">
            <summary>
              Looks up a localized string similar to The data masking function provided for column {0} must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_MissingColumnName">
            <summary>
              Looks up a localized string similar to A column name is required..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_MoreAliasesThanColumns">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has more columns than were specified in the column list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_NameCannotBeNull">
            <summary>
              Looks up a localized string similar to Name cannot be NULL..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_NoGlobalTemporarySymmetricKey">
            <summary>
              Looks up a localized string similar to Global temporary keys are not allowed. You can only use local temporary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_NumberOfColumnsMismatchForCTAS">
            <summary>
              Looks up a localized string similar to The number of values in the SELECT clause must match the number of columns specified in the CREATE TABLE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_OnlyLcidAllowed">
            <summary>
              Looks up a localized string similar to You must use the locale identifier (LCID) in an integer or hexadecimal format to specify the language when you create a full-text index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_OnlyTwoPartNameAllowed">
            <summary>
              Looks up a localized string similar to Only a one-part name or a two-part name is allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_OwnerRequiredForEndpoint">
            <summary>
              Looks up a localized string similar to You must specify the owner of the endpoint with an AUTHORIZATION clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_PartitionNumberMustBeInteger">
            <summary>
              Looks up a localized string similar to You must specify the partition number as a positive integer constant..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_SqlCmdVariableInObjectName">
            <summary>
              Looks up a localized string similar to SqlCmd variable reference is not allowed in object names ({0})..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_SubqueriesNotAllowed">
            <summary>
              Looks up a localized string similar to Subqueries are not allowed in this context. Only scalar expressions are allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TableTypeNotAllowFunctionCall">
            <summary>
              Looks up a localized string similar to User-defined functions, user-defined aggregates, CLR types, and methods on CLR types are not allowed in expressions in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TemporalPeriodColumnMustNotBeNullable">
            <summary>
              Looks up a localized string similar to Temporal period column &apos;{0}&apos; must not be nullable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TooLongIdentifier">
            <summary>
              Looks up a localized string similar to Identifier {0} is too long. Maximum length is 128..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TooManyPartsForCteOrAlias">
            <summary>
              Looks up a localized string similar to Names with two or more parts are not valid when you reference a common table expression (CTE) or an alias..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TriggerIsNotForEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a trigger for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TypeAndSIDMustBeUsedTogether">
            <summary>
              Looks up a localized string similar to The TYPE and SID options must be used together..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_TypeCannotBeUsedWithLoginOption">
            <summary>
              Looks up a localized string similar to The TYPE option cannot be used with FOR/FROM LOGIN, CERTIFICATE, ASYMMETRIC KEY, EXTERNAL PROVIDER, WITHOUT LOGIN or WITH PASSWORD..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UddtFromUddt">
            <summary>
              Looks up a localized string similar to The base type is not a valid base type for the user-defined type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UddtFromXml">
            <summary>
              Looks up a localized string similar to You cannot create user-defined types from an XML datatype..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UndeclaredVariableParameter">
            <summary>
              Looks up a localized string similar to Must declare the variable or parameter &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnknownTableSource">
            <summary>
              Looks up a localized string similar to The table source &apos;{0}&apos; was referenced, but it is not defined in the FROM clause or its definition has one or more errors..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedAlgorithm">
            <summary>
              Looks up a localized string similar to This algorithm is not allowed to create an asymmetric key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedAll">
            <summary>
              Looks up a localized string similar to The ALL clause is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedAlterCryptographicProvider">
            <summary>
              Looks up a localized string similar to Changing the file for a cryptographic provider via an ALTER CRYPTOGRAPHIC PROVIDER statement is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedNoPopulationChangeTrackingOption">
            <summary>
              Looks up a localized string similar to The NO POPULATION change tracking option for spatial indexes is not modeled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedPintable">
            <summary>
              Looks up a localized string similar to The table option PINTABLE has been deprecated and is no longer supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedRevoke">
            <summary>
              Looks up a localized string similar to REVOKE statements are only supported for columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_UnsupportedSpatialTessellationScheme">
            <summary>
              Looks up a localized string similar to The specified grid tessellation scheme is not supported on the current SQL platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_WildCardNotAllowed">
            <summary>
              Looks up a localized string similar to Syntax &apos;*&apos; is not allowed in schema-bound objects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_WrongEventType">
            <summary>
              Looks up a localized string similar to The specified event type or types are not valid on the specified target object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_XMaxLessThanXMin">
            <summary>
              Looks up a localized string similar to The value of parameter &apos;xmax&apos; of CREATE SPATIAL INDEX must be greater than the value of parameter &apos;xmin&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationError_YMaxLessThanYMin">
            <summary>
              Looks up a localized string similar to The value of parameter &apos;ymax&apos; of CREATE SPATIAL INDEX must be greater than the value of parameter &apos;ymin&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InterpretationWarning_OldSensitivitySyntaxForNewTarget">
            <summary>
              Looks up a localized string similar to The script contains old Add Sensitivity syntax which is valid only for 2017 or older and will not take effect on a database project targeting SQL 2019 or higher. Please convert the Sensitivity syntax to new syntax..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidAzureVersion">
            <summary>
              Looks up a localized string similar to Unsupported SQL Server version error: Invalid Azure SQL Database version {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidChecksum">
            <summary>
              Looks up a localized string similar to An invalid Checksum element is found from {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidDateTimeString">
            <summary>
              Looks up a localized string similar to An invalid date time string is found from {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidExportRowCount">
            <summary>
              Looks up a localized string similar to Table {0} has exported {1} rows ({2} rows expected)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidExportRowOrByteCount">
            <summary>
              Looks up a localized string similar to Table {0} has exported {1} rows ({2} rows expected) and {3} bytes of blob column data ({4} bytes expected)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidImportDeserializationLength">
            <summary>
              Looks up a localized string similar to Incomplete read from package importing data to Table {0} ({1} bytes read, {2} bytes expected)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidImportRowCount">
            <summary>
              Looks up a localized string similar to Table {0} has imported {1} rows (estimated {2} rows, expected {3} rows)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidIntegerFromXmlFile">
            <summary>
              Looks up a localized string similar to An invalid integer is found from {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidLengthForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to The number &quot;{0}&quot; is not valid. Length for data type &quot;{1}&quot; should be a number between {2} and {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidLengthStringForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not a valid length..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidPrecisionForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not valid. Precision for data type &quot;{1}&quot; must be an integer between {2} and {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidPrecisionForDataTypeWithScaleErrorMessage">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not valid. Precision for data type &quot;{1}&quot; with scale {2} must be an integer between {3} and {4}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidScaleForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not valid. Scale for data type &quot;{1}&quot; must be an integer between {2} and {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidScaleForDataTypeWithPrecisionErrorMessage">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not valid. Scale for data type &quot;{1}&quot; with precision {2} must be an integer between {3} and {4}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.InvalidSqlVersion">
            <summary>
              Looks up a localized string similar to Unsupported SQL Server version error: Invalid SQL Server version {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.LengthNotSupportedForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to Length is not supported for the data type: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MaxLengthNotSupportedForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to &quot;MAX&quot; is not a supported length for data type: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MismatchingChecksum">
            <summary>
              Looks up a localized string similar to The calculated checksum for {0} in the package {1} is different from the saved checksum..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingCollation">
            <summary>
              Looks up a localized string similar to Cannot find collation from the package..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingCustomDataForAssemblyReference">
            <summary>
              Looks up a localized string similar to Missing or empty FileName or Name metadata for CLR assembly reference..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingOrCorrupted">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is missing or corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingOrCorruptedChecksum">
            <summary>
              Looks up a localized string similar to Checksum for {0} is missing or corrupted in the package {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingOrCorruptedFrom">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is missing or corrupted from the package content &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingOrUnknownFileFormatError">
            <summary>
              Looks up a localized string similar to {0} attribute is missing or has unknown value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MissingStream">
            <summary>
              Looks up a localized string similar to Stream &quot;{0}&quot; does not exist in the package {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ModelBuilderError_CannotFindColumnSourceGrantForColumnRevoke">
            <summary>
              Looks up a localized string similar to Cannot find GRANT permission statement for column source referenced by supporting column REVOKE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ModelBuilderError_CannotFindMainElement">
            <summary>
              Looks up a localized string similar to Cannot find element referenced by the supporting statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ModelCapabilitiesEdit">
            <summary>
              Looks up a localized string similar to ModelCapabilities custom schema data can not be added or removed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.MoreThanOneStatementPerBatchError">
            <summary>
              Looks up a localized string similar to Only one statement is allowed per batch. A batch separator, such as &apos;GO&apos;, might be required between statements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.NoSourceForColumn">
            <summary>
              Looks up a localized string similar to The reference to the column {0} could not be resolved..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.NullOrEmptyStringParameter">
            <summary>
              Looks up a localized string similar to The string parameter is null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ObsoleteCulture">
            <summary>
              Looks up a localized string similar to A deprecated LCID was encountered in the database.  The operation cannot continue.  The LCIDs 0x20C04 (zh-HK_stroke), 0x10411 (ja-JP_unicod), and 0x10412 (ko-KR_unicod) are deprecated in .NET 4.0, and can no longer be used.  Consider using the alternate-sort forms of these cultures instead (zh_HK, ja-JP, and ko-KR, respectively)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.PackageReadError">
            <summary>
              Looks up a localized string similar to Unable to read a file from package.  Package may be corrupt. File = &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ParserError_SqlDWStatisticNotSupportedOption">
            <summary>
              Looks up a localized string similar to PAGECOUNT is not a valid option for CREATE STATISTICS..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ParserError_SqlDWViewNotSupportedOption">
            <summary>
              Looks up a localized string similar to EXPAND is not a recognized table or a view hint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.PrecisionNotSupportedForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to Precision is not supported for the data type: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ReadOnlyScriptCache">
            <summary>
              Looks up a localized string similar to The script cache for this model is read-only. Updates on external property are not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.RegistrationFailedOnInsufficientPermissions">
            <summary>
              Looks up a localized string similar to The current user does not have sufficient permissions on the instance of SQL Server to upgrade the data-tier application. The user must be the database owner of the database associated with the data-tier application..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.RetryOnException">
            <summary>
              Looks up a localized string similar to Retry number {0}. Delaying {1} ms before next retry. Exception: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.RetryOperationLimitExceeded">
            <summary>
              Looks up a localized string similar to A Sql operation has exceeded a defined limit for retry operations or retry timing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ScaleNotSupportedForDataTypeErrorMessage">
            <summary>
              Looks up a localized string similar to Scale is not supported for the data type: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ScriptHandle_SizeExceeded">
            <summary>
              Looks up a localized string similar to This T-SQL script exceeds the maximum allowed size. Adjust this setting in the SQL Server Tools page by selecting Options from the Tools menu..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.ServerScopedTriggers">
            <summary>
              Looks up a localized string similar to Server-scoped Triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.SqlAuthenication_NotSupported">
            <summary>
              Looks up a localized string similar to Authentication property cannot be found in current .Net version..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.SqlAuthenication_UnknownAuthentication">
            <summary>
              Looks up a localized string similar to Unknown SQL Authentication: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.SqlConnectionStringBuilderProperty_InvalidEnumValue">
            <summary>
              Looks up a localized string similar to An attempt was made to set a property named &apos;{0}&apos; on an object of type SqlConnectionStringBuilder to the value &apos;{1}&apos;, but &apos;{1}&apos; is not a valid value for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.SqlConnectionStringBuilderProperty_NotSupported">
            <summary>
              Looks up a localized string similar to An attempt was made to access a property named &apos;{0}&apos; on an object of type SqlConnectionStringBuilder, but this property does not exist in the current version of the SqlConnectionStringBuilder type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.SqlInterpretationError_OnlineSpatialIndex">
            <summary>
              Looks up a localized string similar to Invalid usage of the option online in the CREATE SPATIAL INDEX statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_AlterAssembly">
            <summary>
              Looks up a localized string similar to In this context, only VISIBILITY with option is valid for an ALTER ASSEMBLY statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_AlterTableAddConstraint">
            <summary>
              Looks up a localized string similar to You can only specify one constraint for an ALTER TABLE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_AtMostTwoPartName">
            <summary>
              Looks up a localized string similar to When you create an object of this type in a database project, the object&apos;s name must contain no more than two parts..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_BackslashNotSupportedInUserOrLoginName">
            <summary>
              Looks up a localized string similar to A USER or LOGIN name cannot contain a backslash character in the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_ConstraintAll">
            <summary>
              Looks up a localized string similar to The ALL option cannot be used to modify constraints. You must use individual constraint names instead..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_CreateSchemaElements">
            <summary>
              Looks up a localized string similar to In this CREATE SCHEMA statement, you have specified a table definition, a view definition, a GRANT statement, a REVOKE statement, or a DENY statement. This syntax is not supported in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_CreateSchemaWithoutName">
            <summary>
              Looks up a localized string similar to Statements that contain CREATE SCHEMA AUTHORIZATION but do not specify a name are permitted for backward compatibility only. They are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_CreateStoplist">
            <summary>
              Looks up a localized string similar to A FROM clause is not supported for CREATE FULLTEXT STOPLIST statement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_DeprecatedSyntax">
            <summary>
              Looks up a localized string similar to This statement contains deprecated language syntax. Please consult MSDN documentation for further help..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_KeywordNotSupportedForTargetPlatform">
            <summary>
              Looks up a localized string similar to Keyword or statement option &apos;{0}&apos; is not supported for the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerFilestreamColumnTypeNotSupported">
            <summary>
              Looks up a localized string similar to FILESTREAM column type cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerFileTableNotSupported">
            <summary>
              Looks up a localized string similar to AS FILETABLE cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerGraphNotSupported">
            <summary>
              Looks up a localized string similar to AS NODE cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerMemoryOptimizedNotSupported">
            <summary>
              Looks up a localized string similar to MEMORY_OPTIMIZED = ON cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerSparseColumnSetNotSupported">
            <summary>
              Looks up a localized string similar to Sparse column sets cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerSqlVariantColumnTypeNotSupported">
            <summary>
              Looks up a localized string similar to SQL_VARIANT column type cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerViewInvalidTwoPartName">
            <summary>
              Looks up a localized string similar to Setting LEDGER to ON failed because ledger view &apos;{0}&apos; is not specified in two-part name format..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerViewNotSpecified">
            <summary>
              Looks up a localized string similar to LEDGER = ON must be specified with LEDGER_VIEW..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_LedgerXmlColumnTypeNotSupported">
            <summary>
              Looks up a localized string similar to XML column type cannot be specified with LEDGER = ON..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_NotSupportedForTargetPlatform">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not supported for the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_ServerPermissionsNotAllowed">
            <summary>
              Looks up a localized string similar to Server level permissions are not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_SetRemoteData">
            <summary>
              Looks up a localized string similar to In this context, it is not allowed to specify a SET REMOTE_DATA_ARCHIVE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_StatementNotSupportedForCurrentRelease">
            <summary>
              Looks up a localized string similar to This statement is not yet supported in this CTP..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_StatementNotSupportedForTargetPlatform">
            <summary>
              Looks up a localized string similar to Statement &apos;{0}&apos; is not supported for the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_StoredProcedureNotSupportedForTargetPlatform">
            <summary>
              Looks up a localized string similar to Stored procedure &apos;{0}&apos; is not supported for the targeted platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_SystemVersioningHistoryTableInvalidTwoPartName">
            <summary>
              Looks up a localized string similar to Setting SYSTEM_VERSIONING to ON failed because history table &apos;{0}&apos; is not specified in two-part name format..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_SystemVersioningHistoryTableNotSpecified">
            <summary>
              Looks up a localized string similar to SYSTEM_VERSIONING = ON must be specified with HISTORY_TABLE..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_TopLevelExecuteWithResultSets">
            <summary>
              Looks up a localized string similar to References to objects specified in the WITH RESULT SETS clause for this EXECUTE statement are not modeled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_TriggerAll">
            <summary>
              Looks up a localized string similar to The ALL option cannot be used to modify triggers. You must use individual trigger names instead..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_UnsupportedPermission">
            <summary>
              Looks up a localized string similar to The permission {0} is not supported in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.StatementFilter_UnsupportedSecurityObjectKind">
            <summary>
              Looks up a localized string similar to The security object kind &apos;{0}&apos; is not supported in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.TopLevelDmlStatementError">
            <summary>
              Looks up a localized string similar to DML statements cannot be modeled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnexpectedElementError">
            <summary>
              Looks up a localized string similar to The file contains the XML node type {0}. This type is unsupported or in an unsupported location..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnexpectedError">
            <summary>
              Looks up a localized string similar to An unexpected error occurred. Contact product support for assistance..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnidentifiedBooleanMetadataOption">
            <summary>
              Looks up a localized string similar to The value {0} is not a valid option..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnidentifiedMetadata">
            <summary>
              Looks up a localized string similar to The metadata {0} is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnknownCollation">
            <summary>
              Looks up a localized string similar to Unknown collation is found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnknownPlatform">
            <summary>
              Looks up a localized string similar to Unknown SQL platform: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnrecognizedStatement">
            <summary>
              Looks up a localized string similar to This statement is not recognized in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnsupportedCompatibilityLevel">
            <summary>
              Looks up a localized string similar to The database compatibility level &apos;{0}&apos; is not within the supported range of {1} to {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnsupportedModelVersion">
            <summary>
              Looks up a localized string similar to The model version &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.UnsupportedOperationForBacpac">
            <summary>
              Looks up a localized string similar to The operation {0} is not supported for the {1} package..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.View">
            <summary>
              Looks up a localized string similar to view.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.XmlSchemaCollection">
            <summary>
              Looks up a localized string similar to XML Schema Collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlErrorResource.XsltNotFound">
            <summary>
              Looks up a localized string similar to Unable to obtain xslt for the given package.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventGroupExpander.ExpandEventGroup(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventGroup)">
            <summary>
            The version to take the parameters of the enum type defined in SQL Model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventGroupExpander.ExpandEventGroup(Microsoft.SqlServer.TransactSql.ScriptDom.EventNotificationEventGroup)">
            <summary>
            The version to take the parameters of the enum type defined in ScriptDom
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalPropertyParserWrapper.ParseExternalProperty(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParser,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parse the external property script
            </summary>
            <param name="parser"></param>
            <param name="propertyClass"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager">
            <summary>
            This is the ImportManager which Rosario uses when importing script. 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.KeepScriptOffsetAndLengths">
            <summary>
            If this is true then the SqlScriptElementResults will contain the offset and lengths
            for where the final script came from
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportScript(System.String,System.Func{System.Boolean,System.Int32,System.Int32,System.Boolean})">
            <summary>
            Import a script.  It will batch parse the script.  For each batch, parse the batch.
            And analyze each statement in it, find the destination for each statement. Then it
            will add entry of SqlScriptElementResult into the ImportResult instance.
            
            If it run into BatchParserWrapperExeption, that is a fatal error, it will
            throw OperationCanceledException.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.FragmentInfo,System.Int32,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportResult)">
            <summary>
            Import the statement.  If the statement is IF statement,
            need to look into the nested level IF statement, get all the real statements
            inside it.  If any statement is SchemaObject statement, put it in the right
            SchemaObject entry.  If it is a pre/post deployment statemnet, put it in the
            right script file entry.  If the IF statement only contains one deployment statement
            we will move the whole IF statement to the deployment script.  After moving
            those statements, we will comment out the original statement in IF statement.
            
            If the statement is not IF statement, we will get the destination of the statement
            and add to the correct statement entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.FragmentInfo,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportResult,System.Boolean)">
            <summary>
            This method will find the destination for the statement.
            
            Relationship to owner/parent will be discovered through SqlImportScriptAnalyzer,
            and then preserved inside SqlScriptElementResult
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.HandleIfStatement(Microsoft.SqlServer.TransactSql.ScriptDom.IfStatement,System.String,System.Tuple{System.Int32,System.Int32},System.Int32,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ImportResult)">
            <summary>
            Evaluate all nested statements inside IF...ELSE statement.
            Import the statement into right place.  If the nested statement
            is moved to SchemaObject entry to deployment script, comment the
            statement out inside IF...ELSE statement and add some comments.
            Then move that IFStatement to IgnoredScript file.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.GetStatementsFromIfStatement(Microsoft.SqlServer.TransactSql.ScriptDom.IfStatement)">
            <summary>
            Get all statements from IF and ELSE blocks.
            </summary>
            <param name="ifStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.GetStatementsFromIfStatementBranch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            Get all statements inside IF or ELSE block.  It will have recursive calls, if a 
            BeginEndBlockStatement contains inner IF statement or inner BeginEndBlcokStatement.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.AddScript(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDestination,System.String)">
            <summary>
            Add script to the script map according to the script destination.
            </summary>
            <param name="destination"></param>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.ContainsDeclareStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            Check if there is any Declare variable statement in a batch.
            </summary>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.HandleParseError(System.String,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ParseError},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            Associate the Parser errors with the statements that generated them, and route 
            them to the Error Script
            </summary>
            <param name="script"></param>
            <param name="parseErrors"></param>
            <param name="batch"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.HandleParseErrorsOutsideStatements(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ParseError},System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adding the script which does not fall under the range of statements in ignoreScripts.sql file. 
            </summary>
            <param name="parseErrors">List of all the parse errors in a single batch</param>
            <param name="errorPointer"></param>
            <param name="script">single batch script</param>
            <param name="startOffset">start index of non-statement</param>
            <param name="endOffset">end index of non-statement</param>
            <returns>final pointer to the error array</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.AddErrorScript(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ParseError},System.Int32,System.Int32,System.String)">
            <summary>
            ADD ERROR SCRIPT - Adds Errors and Statements to Error Script
            </summary>
            <param name="parseErrors">List of all errors</param>
            <param name="errorIndex">beginning index of errors to be scripted from the above list</param>
            <param name="errorCount">Total number of errors to be scripted</param>
            <param name="errorScript">Script with the errors</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportManager.IncludeCommentsInStatements(System.String,System.Int32,System.Int32,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch,System.Boolean)">
            <summary>
            Adjust statement startoffset and length to include prepending and appending comments.
            </summary>
            <param name="script"></param>
            <param name="startOffSet"></param>
            <param name="length"></param>
            <param name="batch"></param>
            <param name="errorInScript"></param>
            <returns>A list of startoffset and length of those statements</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportScope">
            <summary>
            Specifies what kinds of objects will be imported
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportScriptAnalyzer">
            <summary>
            SchemaAnalyzer helps to interpreter each statement for ImportManager.
            This analyzer will only apply to one statement at a time.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext">
            <summary>
            Context for interpretation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.EnforceSqlAzureRestrictions">
            <summary>
            Set to true to enforce Sql Azure restrictions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.IsInsideQuerySpecification">
            <summary>
            Indicates if we're inside a query specification
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.IsTableValuedFunctionCall">
            <summary>
            A FunctionCall node in ScriptDom may reference a scalar function or a table-valued 
            function depending on its context
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.TriggerTarget">
            <summary>
            Holds the object the trigger is on
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.DependencyParent">
            <summary>
            Gets or sets the parent from which dependency relationships go out
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.DependencyRelationshipClass">
            <summary>
            Gets or sets the relationship class for dependencies
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.ContainingObjectName">
            <summary>
            Contains the name of the containing element's name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.ReturnTableName">
            <summary>
            Keeps the return table variable name for a multi-statement table value function
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.EnterQuerySpecification">
            <summary>
            Increment the number of (potentially nested) query specification statements we're currently interpretating
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext.ExitQuerySpecification">
            <summary>
            Decrement the number of (potentially nested) query specification statements we're currently interpretating
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetExecuteParameterFragmentAndValue(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter},System.UInt32,Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter@,System.String@)">
            <summary>
            Try to get the fragment and string value from the store procedure literal parameter.
            </summary>
            <param name="parameters">The collection of store proc paramenters.</param>
            <param name="paramNumber">The number of the parameter in the collection.</param>
            <param name="parameterNameFragment">Fragment that represents the paramenter value.</param>
            <param name="parameterValue">String value of the parameter.</param>
            <returns>True if the parementer is string literal, false otherwise (if parameter is an expression, etc).</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.Unquote(System.String)">
            <summary>
            Unquotes a string
            </summary>
            <param name="value">value to unquote</param>
            <returns>The unquoted value if it could be unquoted</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.ConvertParamValueToString(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Extracts actual string out of parameter (which can be either string literal or identifier), returns null if fails
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetPrecisionFromSqlDataType(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference,System.Int32@,System.Boolean@)">
            <summary>
            try get precision info from SqlDataType
            </summary>
            <param name="sqlDataType"></param>
            <param name="precision"></param>
            <returns>true when success; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetScaleFromSqlDataType(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference,System.Int32@,System.Boolean@)">
            <summary>
            try to get scale info from SqlDataType
            </summary>
            <param name="sqlDataType"></param>
            <param name="scale"></param>
            <returns>true when success; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.SetApplicationRolePassWordFromPamaters(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlApplicationRole,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter},Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            populate the value of the pasword for an application role from a list of parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetSqlBuiltInDataTypeName(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeOption)">
            <summary>
            get a string as an identifier for built-in SQL data type
            </summary>
            <param name="dataTypeOption"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetSqlBuiltInDataTypeName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType)">
            <summary>
            get a string as an identifier for built-in SQL data type
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.CreatePotentialsForFullTextIndexKeyIndex(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.String)">
            <summary>
            Create two potential element descriptors for a fulltext index key index
            </summary>
            <param name="onTableIdentifiers">identifiers of the table name on which the fulltext is defined</param>
            <param name="keyIndexName">the name of the kye index</param>
            <returns>two potential element descriptors</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.ConvertParserMemoryUnitToModelUnit(Microsoft.SqlServer.TransactSql.ScriptDom.MemoryUnit)">
            <summary>
            Convert TSQL parser memory unit to model unit
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsDefault(System.String)">
            <summary>
            Check if a string is "DEFAULT" with an ordinal comparison ignoring case
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsNull(System.String)">
            <summary>
            Check if a string is "NULL" with an ordinal comparison ignoring case
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsSystem(System.String)">
            <summary>
            Check if a string is "SYSTEM" with an ordinal comparison ignoring case
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.PopulateTypeDescriptorProperties(Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor)">
            <summary>
            populate Sql90 Type Specifier properties from a SqlDataType
            </summary>
            <param name="node"></param>
            <param name="typeDescriptor"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryParseDecimalNumber(System.String,System.Int32@)">
            <summary>
            Try to parse a decimal string
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryParseDecimalOrHexNumber(System.String,System.Int32@)">
            <summary>
            Try to parse a hex or decimal string
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetSecurityPrincipalType(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind)">
            <summary>
            Determine the appropriate security principal interface type 
            that can be either a permission grantee, permission grantor, or authorizer 
            for the specified kind of security target object.
            </summary>
            <param name="objectKind">
            The securable object kind from which the security principal type can be determined.
            </param>
            <returns>
            Type object that specifies the SqlSecurityPrincipal interface type.
            This type can be used to construct the element descriptor for the principal.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsGlobalTemporaryTable(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Checks if the provided table is a global temporary table.
            </summary>
            <param name="tableName">The table name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsTemporaryProcedure(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Checks if the provided procedure is a temporary procedure.
            </summary>
            <param name="procedureName">The procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsTemporarySchemaObjectName(System.String)">
            <summary>
            Indicates if the provided schema object name is temporary name.
            </summary>
            <param name="name">Name of the schema object.</param>
            <returns>true if temporary, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsGlobalTemporarySchemaObjectName(System.String)">
            <summary>
            Indicates if the provided schema object name is a global temporary name.
            </summary>
            <param name="name">Name of the schema object.</param>
            <returns>true if global temporary, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetValueFromIdentifierOrLiteral(Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrValueExpression,System.Boolean)">
            <summary>
            Get string value from a string literal or an identifier
            </summary>
            <param name="node"></param>
            <returns>the string value extracted from the literal or identifier; null if they are not literal or identifier</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetIntegerFromExpression(Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression,System.Int32@)">
            <summary>
            Extract an integer from an Expression AST node
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsDataBaseNameVariable(System.String)">
            <summary>
            Check if a string is $(DatabaseName)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetVolatilityLevel(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier})">
            <summary>
            Gets the volatility level of an object based on it's name
            </summary>
            <param name="identifiers">Identifiers to investigate</param>
            <returns>The volatility level of the name</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetVolatilityLevel(System.String)">
            <summary>
            Gets the volatility level of an object based on it's name
            </summary>
            <param name="name">name to investigate</param>
            <returns>The volatility level of the name</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetClrPartsAndIdentifiersFromCallTarget(Microsoft.SqlServer.TransactSql.ScriptDom.CallTarget,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression,System.Collections.Generic.List{Microsoft.SqlServer.TransactSql.ScriptDom.Identifier},System.Collections.Generic.LinkedList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment@)">
            <summary>
            Tries to reverse function call/UDT property access and see, if it all started with function call 
            Returns function call, if it was the inner-most thing and populates identifies and clrParts lists
            Otherwise, returns null (as return value) and inner-most fragment via innerFragment
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.CreatePotentiallyAmbiguousResolvedDescriptor(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,System.Type,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Creates a resolved descriptor that accomodates for the schema ambiguity
            </summary>
            <param name="son">SchemaObjectName to consider</param>
            <param name="elementType">ElementType</param>
            <param name="context">Interpretation context</param>
            <param name="comparer">Model collation comparer</param>
            <returns>A new ResolvedDescriptor</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.AddExternalNameParts(Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Adds the external names to the descriptor
            </summary>
            <param name="son">SchemaObjectName to pick the external references from</param>
            <param name="descriptor">Descriptor to populate with the external references</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.GetFirstAnnotation``1(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder)">
            <summary>
            Gets the first annotation of the holder that implements the given annotation type.
            </summary>
            <typeparam name="TAnnotation">Annotation type.</typeparam>
            <param name="holder">Model annotation holder.</param>
            <returns>First annotation of the holder of the given type; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.InterpretDependenciesInSubExpression(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationContext,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Tries to find dependencies in the provided target using a DML visitor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsDatabaseDefaultCollationOption(System.String)">
            <summary>
            Return true if collation is literally "database_default".
            </summary>
            <param name="collation">String collation value</param>
            <returns>
            True if collation string is "database_default" using an ordinal, case-insensitive comparison;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetPreviousTokenIndex(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Given a list of sql fragment tokens, and given a current index, simply get previous index "if valid" with
            the option of ignoring white space
            </summary>
            <param name="tokens">List of tokens usually retrieved from TSqlFragment.ScriptTokenStream</param>
            <param name="currentIndex">The index to use to look for previous index (if this is 5, then previous index is simply 4 unless we are ignoring white space)</param>
            <param name="previousTokenIndex">The value of the previous token index we are looking for</param>
            <param name="ignoreWhiteSpace">Whether to ignore whitespace when looking for previous token index</param>
            <returns>Whether the previous token index is valid</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.TryGetNextTokenIndex(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Given a list of sql fragment tokens, and given a current index, simply get next index "if valid" with
            the option of ignoring white space
            </summary>
            <param name="tokens">List of tokens usually retrieved from TSqlFragment.ScriptTokenStream</param>
            <param name="currentIndex">The index to use to look for next index (if this is 5, then next index is simply 6 unless we are ignoring white space)</param>
            <param name="nextTokenIndex">The value of the next token index we are looking for</param>
            <param name="ignoreWhiteSpace">Whether to ignore whitespace when looking for next token index</param>
            <returns>Whether the next token index is valid</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsLengthValidForColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.String,System.String@)">
            <summary>
            Whether the given string is a valid length for the column.
            </summary>
            <param name="column">The column.</param>
            <param name="lengthStr">The string represents the length property.</param>
            <param name="errorMessage">Reason of why the length string is not valid.</param>
            <returns>A boolean value</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsPrecisionValidForColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.Int32,System.String@)">
            <summary>
            Whether the given number is a valid precision for the column.
            </summary>
            <param name="column">The column.</param>
            <param name="precision">The value to be tested.</param>
            <param name="errorMessage">Reason of why the precision is not valid.</param>
            <returns>A boolean value</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpretationUtils.IsScaleValidForColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.Int32,System.String@)">
            <summary>
            Whether the given number is a valid scale for the column.
            </summary>
            <param name="column">The column.</param>
            <param name="scale">The value to be tested.</param>
            <param name="errorMessage">Reason of why the scale is not valid.</param>
            <returns>A boolean value</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter">
            <summary>
            Interpretes TSql fragments to define the schema that would be generated.  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter.DefaultSchema">
            <summary>
            Specifies default schema to use
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter.Comparer">
            <summary>
            Comparer used to compare identifiers
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter.Interpret(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError}@)">
            <summary>
            Interprets a T-SQL statement
            </summary>
            <param name="statement">Statement to interpret</param>
            <param name="analyzer">Analyzer to use</param>
            <param name="errors">Errors encountered during intepretation</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter.Interpret(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError}@)">
            <summary>
            Inteprets a T-SQL batch
            </summary>
            <param name="batch">Batch to interpret</param>
            <param name="analyzer">Analyzer to use</param>
            <param name="errors">Errors encountered during interpretation</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreter.Interpret(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.InterpretationError}@)">
            <summary>
            Interprets a T-SQL script
            </summary>
            <param name="script">Script to interpret</param>
            <param name="analyzer">Analyzer to use</param>
            <param name="errors">Errors encountered during interpretation</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor">
            <summary>
            A constructor class that has options that defines a sql interpreter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.DefaultSchema">
            <summary>
            Name of the default schema
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.DefaultDatabaseAuthorizer">
            <summary>
            Authorizer to use for database objects, if it was not specified explicitly
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.DefaultServerAuthorizer">
            <summary>
            Authorizer to use for server objects, if it was not specified explicitly
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.PreserveHeaderCommentsForSysCommentsObjects">
            <summary>
            Dictate whether to preserve comments found in the headers for the sys comments objects
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.EnforceSqlAzureRestrictions">
            <summary>
            Set to true to enforce SQL Azure restrictions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.Comparer">
            <summary>
            Comparer to use for name comparisons
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlInterpreterConstructor.ModelBuilderOption">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder">
            <summary>
            Class responsible for building SQL Model
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.QuotedIdentifiers">
            <summary>
            The id used when creating database options
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.MaxScriptSize">
            <summary>
            The maximum size of script in MB that will be accepted.
            Value 0 denotes that there isn't a limit.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.IsOptimizedForInsert">
            <summary>
            Returns if model is currently optimized for insert
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.IsOptimizedForQuery">
            <summary>
            Returns if model is currently optimized for querying
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.DataSchemaModel">
            <summary>
            Returns model being built by this model builder
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.DeleteActions">
            <summary>
            Returns delete actions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.Options">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.OptimizeForInsert">
            <summary>
            Switches model into mode optimized for insertions
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.OptimizeForQuery">
            <summary>
            Switches model into mode optimized for querying
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.AddObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add objects to the model.  The cacheIdentifier uniquely identifies the source.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="script">The script.</param>
            <param name="metadata">The metadata that will be used in processing the script.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.Add(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Adds custom data to the schema manager (like references)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.Clear(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Removes custom data from the schema manager (like references)
            </summary>
            <param name="dataToDelete">The custom schema data which is to be deleted</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.UpdateObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Updates objects in the model.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="script">The script.</param>
            <param name="metadata">The metadata that will be used in processing the script.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.ClearObjects(System.String)">
            <summary>
            Deletes the objects in the model that were added with the specified cacheIdentifier.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.BeginBatchUpdate">
            <summary>
            Requests the ModelBuilder to start batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.EndBatchUpdate">
            <summary>
            Requests the ModelBuilder to stop batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.AddXmlSchemaCollection(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds an XML Schema Collection to the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.RemoveCustomDataCategory(System.String)">
            <summary>
            Removes an entire category of custom data
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.SetCustomData(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptions)">
            <summary>
            Save some critical data into the custom data so it is serialized out
            and we can read without de-serializing the entire model
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.SetDatabaseOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80DatabaseModelOptions)">
            <summary>
            Use this interface to have the model builder set various options
            into the model at either the Instance or Catalog scope.
            </summary>
            <param name="sqlModelOptions">The model options which should be transferred to the model.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.InputExceedsLimit(System.Int32)">
            <summary>
            Returns true if the input exceeds the maximum allowed script size.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.DropElement(System.String)">
            <summary>
            Drops an object and correctly nullifies the relationships
            </summary>
            <param name="filename">the filename of the object that is being dropped</param>
            <remarks>All objects in this filename will be dropped</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilder.GetDatabaseOptions(System.Boolean)">
            <summary>
            Returns the database options
            </summary>
            <param name="createIfNecessary">True to create the options if they don't exist</param>
            <returns>The current options in the database, or null</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor">
            <summary>
            A constructor class that has options that defines a sql model builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.SqlSchemaModel">
            <summary>
            Returns model being updated by the model builder
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.DataSchemaModel">
            <summary>
            The schema model for the model builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.DataSchemaModelController">
            <summary>
            The schema manager controller.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.ModelBuilderOption">
            <summary>
            Defines the completeness of the finished model.
            </summary>
            <remarks>
            Settings less than <see cref="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilderOption.Full"/> are useful to prevent doing
            unnecessary work when building a model for a limited purpose.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.StatementFilterEnabled">
            <summary>
            Gets or sets if statement filter is enabled
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.DefaultDatabaseAuthorizer">
            <summary>
            Authorizer to use for database objects, if it was not specified explicitly
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.DefaultServerAuthorizer">
            <summary>
            Authorizer to use for server objects, if it was not specified explicitly
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.GeneratedFilesIntermediatePath">
            <summary>
            The generation path for intermediate files, such as Sql Clr Ddl scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.PreserveHeaderCommentsForSysCommentsObjects">
            <summary>
            Dictate whether to preserve comments found in the headers for the sys comments objects
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.EnforceSqlAzureRestrictions">
            <summary>
            Set to true to enforce Sql Azure restrictions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.IsAnsiNullsOn">
            <summary>
            Dictate the default behavior for ansi nulls when scripts are processed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderConstructor.IsQuotedIdentifierOn">
            <summary>
            Dictate the default behavior for quoted 
            identifiers when scripts are processed
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderException">
            <summary>
            Exception thrown by SqlModelBuilder
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation">
            <summary>
            base class for all annotations that are resolvable
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation.GetPossibleTargets(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement@,System.Boolean@)">
            <summary>
            This method will return all existing targets found in the SqlSchemaModel that match the description by the Annotation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation.FilterInvalidClrReference(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement@)">
            <summary>
            The name is singular, because it only works if there is one element in the list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation.AffinityValidator(System.Int32@)">
            <summary>
            Validates that the value for Affinity is within range
            </summary>
            <param name="value">Value to verify</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.AssemblyReferencesNotSupportedError">
            <summary>
              Looks up a localized string similar to References to CLR assemblies are not supported in SQL Server 2000 projects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ColumnSourceXDoesNotHaveColumns">
            <summary>
              Looks up a localized string similar to Element {0} does not have any columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.CommaSpaceX">
            <summary>
              Looks up a localized string similar to , {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.Dbo">
            <summary>
              Looks up a localized string similar to dbo.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ElementOfTypeXHasUnresolvedRelationshipOfTypeY">
            <summary>
              Looks up a localized string similar to Element of type {0} has an unresolved relationship of type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ElementXHasMultipleYColsWithListZ">
            <summary>
              Looks up a localized string similar to Element {0} can have at most one {1} column, but contains multiple: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ElementXHasNoColumns">
            <summary>
              Looks up a localized string similar to Element {0} does not contain any columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ElementXHasUnresolvedRelationshipNamedY">
            <summary>
              Looks up a localized string similar to Element {0} has an unresolved &apos;{1}&apos;-relationship..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.FailedToWriteToFile">
            <summary>
              Looks up a localized string similar to Failed to write to file {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.Identity">
            <summary>
              Looks up a localized string similar to IDENTITY.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ArgumentReplaceNotSupported">
            <summary>
              Looks up a localized string similar to The argument @replace is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_BuiltInTypeExpected">
            <summary>
              Looks up a localized string similar to T-SQL built-in type is expected..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_CannotAddLogFileToFilegroup">
            <summary>
              Looks up a localized string similar to Cannot add a log file to a filegroup..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_CannotHaveUsingForPrimaryXmlIndex">
            <summary>
              Looks up a localized string similar to Cannot have a USING XML INDEX clause for primary XML index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ColumnClassifiedMoreThanOnce">
            <summary>
              Looks up a localized string similar to Column &apos;{0}.{1}&apos; classified more than once.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ColumnNotAllowedForThisPermission">
            <summary>
              Looks up a localized string similar to Only SELECT, REFERENCE, and UPDATE can have columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ColumnNotAllowedForThisTarget">
            <summary>
              Looks up a localized string similar to Columns are not allowed for this type of target..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ColumnsAreNotAllowed">
            <summary>
              Looks up a localized string similar to Column list cannot be specified for object-level permissions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_DeprecatedBackupOption">
            <summary>
              Looks up a localized string similar to NO_LOG and TRUNCATE_ONLY options were removed in SQL Server 2008..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_DuplicateArgument">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; was supplied multiple times..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_DuplicateEventType">
            <summary>
              Looks up a localized string similar to {0} has already been specified as an event type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_DuplicateEventTypeInEventGroup">
            <summary>
              Looks up a localized string similar to {0} is one of the event types under {1}. Hence, cannot be specified in more than one place..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_EmptyParameter">
            <summary>
              Looks up a localized string similar to Parameter value is empty..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceDataSourceTypeNotSupported">
            <summary>
              Looks up a localized string similar to The external data source type {0} is not supported on the current platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceInvalidPropertyForExternalDataSourceType">
            <summary>
              Looks up a localized string similar to The {0} property is invalid for external data sources of the {1} type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceMissingDatabaseNameProperty">
            <summary>
              Looks up a localized string similar to The Database Name property is required for external data sources of the RDBMS and Shard Map Manager types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceMissingShardMapNameProperty">
            <summary>
              Looks up a localized string similar to The Shard Map Name property is required for external data sources of the Shard Map Manager type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceRequiredExternalDataSourceLocationPropertyMissing">
            <summary>
              Looks up a localized string similar to The required Location property is missing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceUnsupportedLocationProperty">
            <summary>
              Looks up a localized string similar to The Location property is only supported for external data stored in WASB, WASBS, ABFS, ABFSS or ADL..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalDataSourceUnsupportedResourceManagerLocationProperty">
            <summary>
              Looks up a localized string similar to The Resource Manager Location property is not supported for external data stored in WASB, WASBS, or ASV..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalFileFormatRequiredSerdeMethodPropertyMissing">
            <summary>
              Looks up a localized string similar to The RCFILE format type requires a SerDe Method property value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalFileFormatUnsupportedFormatOptionsProperty">
            <summary>
              Looks up a localized string similar to Format Options are not supported with the RCFILE, ORC or PARQUET file format types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalFileFormatUnsupportedSerdeMethodProperty">
            <summary>
              Looks up a localized string similar to The SerDe Method property is not supported with the DELIMITEDTEXT, ORC or PARQUET file format types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalStreamRequiredExternalStreamLocationPropertyMissing">
            <summary>
              Looks up a localized string similar to The required Location property is missing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalTableRejectedRowLocationValueMissing">
            <summary>
              Looks up a localized string similar to Rejected row location value is empty..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalTableRequiredExternalTableLocationPropertyMissing">
            <summary>
              Looks up a localized string similar to The required Location property is missing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ExternalTableUnsupportedRejectSampleValueProperty">
            <summary>
              Looks up a localized string similar to The Reject Sample Value property is not supported with the Reject Type VALUE.  It is only supported with the Reject Type PERCENTAGE..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidArgument">
            <summary>
              Looks up a localized string similar to Invalid argument ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidDatabaseName">
            <summary>
              Looks up a localized string similar to The database name is not valid. You must use {0} as the database name..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidDataType">
            <summary>
              Looks up a localized string similar to The data type is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidIndexOption">
            <summary>
              Looks up a localized string similar to Unsupported index option specified &apos;{0}&apos; for {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidObjectChildName">
            <summary>
              Looks up a localized string similar to The object child name is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidObjectName">
            <summary>
              Looks up a localized string similar to The object name is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidSchemaObjectName">
            <summary>
              Looks up a localized string similar to The schema object name is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidUserName">
            <summary>
              Looks up a localized string similar to The user name is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_InvalidValue">
            <summary>
              Looks up a localized string similar to The value is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_LogFileCannotHaveFilegroup">
            <summary>
              Looks up a localized string similar to Cannot specify a filegroup for a log file..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_MissingArgument">
            <summary>
              Looks up a localized string similar to Argument ({0}) is missing..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_MissingSchemaOrObjectNameError">
            <summary>
              Looks up a localized string similar to The values for the schema name property and object name property must be provided together..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_MultipleNullabilityConstraintError">
            <summary>
              Looks up a localized string similar to Multiple nullability constraints are not allowed for a column definition..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_MultipleNullabilityConstraintWarning">
            <summary>
              Looks up a localized string similar to Multiple nullability constraints will cause a run-time error..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_NullableColumnForPrimarykey">
            <summary>
              Looks up a localized string similar to Nullable columns cannot be used for primary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_SecurityObjectCannotBeNull">
            <summary>
              Looks up a localized string similar to Security object cannot be NULL..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_ServerAuditInvalidQueueDelayValue">
            <summary>
              Looks up a localized string similar to The specified value for QUEUE_DELAY is not valid. Specify either 0 or 1000 and higher..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_TableColumnNotFound">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; was not found in table &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_TableLevelForeignKeyWithNoColumns">
            <summary>
              Looks up a localized string similar to A table level foreign key cannot be defined with zero columns. You must specify a column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_TableLevelIndexWithNoColumns">
            <summary>
              Looks up a localized string similar to A table level index cannot be defined with zero columns. You must specify a column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_TableNotFound">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnknownEventTypeOrGroup">
            <summary>
              Looks up a localized string similar to Unknown event type or event group: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnknownPermission">
            <summary>
              Looks up a localized string similar to Unknown permission type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnkownEventTypeOrGroup">
            <summary>
              Looks up a localized string similar to Unknown event type or event group: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnsupportedExternalTableProperty">
            <summary>
              Looks up a localized string similar to The {0} option is not supported on the current platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnsupportedViewProperty">
            <summary>
              Looks up a localized string similar to The {0} statement is not supported on the current platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnsupportedWorkloadGroupImportanceProperty">
            <summary>
              Looks up a localized string similar to The {0} Importance Type  is not supported in the current platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UnsupportedWorkloadGroupParamProperty">
            <summary>
              Looks up a localized string similar to The {0} parameter is not supported in the current platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_UsingIsRequiredForSecondaryXmlIndex">
            <summary>
              Looks up a localized string similar to Cannot create secondary XML index without a USING XML INDEX clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_VariableParameterAtTopLevelStatement">
            <summary>
              Looks up a localized string similar to Variables cannot be used as parameters for top-level execute statements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.InterpretationError_XmlIndexTypeIsRequiredForSecondaryXmlIndex">
            <summary>
              Looks up a localized string similar to The type of XML index is required for a secondary XML index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.NoNull">
            <summary>
              Looks up a localized string similar to NONULL.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.Not_Null">
            <summary>
              Looks up a localized string similar to NOT NULL.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.PeriodSpaceX">
            <summary>
              Looks up a localized string similar to . {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.RowGuid">
            <summary>
              Looks up a localized string similar to ROWGUID.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.sp_addtype">
            <summary>
              Looks up a localized string similar to sp_addtype.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.sp_adduser">
            <summary>
              Looks up a localized string similar to sp_adduser.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_AggregateAccumulateMethodNull">
            <summary>
              Looks up a localized string similar to -- Error: The Accumulate method is not defined in the class associated with this aggregate..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_AggregateTerminateMethodNull">
            <summary>
              Looks up a localized string similar to -- Error: The Terminate method is not defined in the class associated with this aggregate..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_AutoGeneratedComment">
             <summary>
               Looks up a localized string similar to --------------------------------------------------------------------------------
            --     This code was generated by a tool.
            --
            --     Changes to this file may cause incorrect behavior and will be lost if
            --     the code is regenerated.
            --------------------------------------------------------------------------------.
             </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_NotDefined">
            <summary>
              Looks up a localized string similar to /* not defined */.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_TriggerEventEmpty">
            <summary>
              Looks up a localized string similar to -- Error: SqlTriggerAttribute.Event is missing from the attribute declaration on the trigger method..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_TriggerTargetEmpty">
            <summary>
              Looks up a localized string similar to -- Error: SqlTriggerAttribute.Target is missing from the attribute declaration on the trigger method..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.SqlClrDdlGeneration_UnsupportedType">
            <summary>
              Looks up a localized string similar to /* Error: Unsupported type. */.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.ThereAreXInstancesOfElementY">
            <summary>
              Looks up a localized string similar to There are {0} instances of element {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.UnresolvedRelationshipNamedX">
            <summary>
              Looks up a localized string similar to There is an unresolved &apos;{0}&apos;-relationship..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.WeCouldNotPinpointRelationshipToOneOfListX">
            <summary>
              Looks up a localized string similar to The related element could not be pinpointed to exactly one element in this list: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResources.XmlSchemaCollectionGeneration_FileError">
            <summary>
              Looks up a localized string similar to -- Error: Could not read file {0}..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer">
            <summary>
            The schema analyzer that build the SQL model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer._primaryKeyColumnsHelper">
            <summary>
            The helper to decide whether a column is used inside any primary key (used to fix bug 428269)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer._dictRelationshipRecycler">
            <summary>
            This dictionary keeps track of the relationships that we create over the lifespan of this object
            in order for us to re-use the relationships
            We want to track the 3 left hand sides in order for us to recycle the one right hand side
            If given a relationship 'rel' from model element 'left' to model element 'right', if we re-encounter this same instance, but with a different 
            script position annotation, then we want to re-use the relationship entry we created for the left hand sides (see three left hand sides)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer._identifiedElements">
            <summary>
            Elements that were identified during the lifetime of this analyzer 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer._suspendModelBuilding">
            <summary>
            If we need to stop building the model due to some reason in the middle of interpreting a statement,
            we can set the field true, and the subsequent messages sent by the interpreter for this statement and its
            supporting statements that cause model update will be ignored.
            The model building will be restored for the following non-supporting statement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.TopLevelDdlElements">
            <summary>
            Gets the TopLevelDdlElements found in this session
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.TopLevelDdlElementsWithOnFileGroupOrPartitionScheme">
            <summary>
            Gets the TopLevelDdlElementsWithOnFileGroupOrPartitionScheme found in this session
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedElements">
            <summary>
            Gets all elements that have been identified during the lifetime of the analyzer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedElement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Handles the discovery (creation) of a new element
            </summary>
            <param name="fragment">Fragment where the element was defined in</param>
            <param name="sqlElementDescriptor">Descriptor for the new element</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Func{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean})">
            <summary>
            Handles the discovery (creation) of a new element without a TSqlFragment associated with it.
            </summary>
            <param name="descriptor">Descriptor for the new element.</param>
            <param name="postProcessingFunction">Function to post process the model element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedTableWithFileGroupOrPartitionScheme(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Handles the updates of OnFileGroupOrPartitionScheme value from unique constraints to the parent table.
            Fixes https://github.com/microsoft/DacFx/issues/202 where partition is defined in the primary key but not on the table.
            This guarantees any data compression options set on other indexes will have the correct relationships to the partitions.
            </summary>
            <param name="tableName">Name of the parent table</param>
            <param name="fragment">Current node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedTopLevelElementsWithOnFileGroupOrPartitionScheme(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            Updates the OnFileGroupOrPartitionScheme value of table to its partitioned indexes 
            </summary>
            <param name="tableElementName">string value of table name</param>
            <param name="node">Index element node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedExistingElements(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Type,System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Func{Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,System.Collections.Generic.List{System.String},System.Tuple{System.Int32,System.String}})">
            <summary>
            Handles the discovery of an existing element with a TSqlFragment associated with it.
            </summary>
            <param name="fragment">Fragment the elements are appear in.</param>
            <param name="elementClass">Class of the elements.</param>
            <param name="elementNames">Element names.</param>
            <param name="errorResolver">Optional error resolver to generate error code and message. In case this parameter is null resolve failure will be ignored</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CheckForSqlCmdVarReference(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Check for SqlCmd variable reference in the object name and add an interpreter problem to the schema model if such reference exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedElementRegularAction(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Handles the discovery (creation) of a new element
            </summary>
            <param name="fragment">Fragment where the element was defined in</param>
            <param name="sqlElementDescriptor">Descriptor for the new element</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CreateModelElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Boolean)">
            <summary>
            Creates a new model element
            </summary>
            <param name="sqlElementDescriptor">Descriptor for the new element</param>
            <param name="isTopLevel">Specifies if the fragment is top level or not</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.ProcessAndAddAnnotationsForModelElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Handles annotations for a newly created model element
            </summary>
            <param name="sqlElementDescriptor">Descriptor for the new element</param>
            <param name="fragment">Fragment where the element was defined in</param>
            <param name="element"> The model element</param>
            <param name="isTopLevel">Specifies if the fragment is top level or not</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})">
            <summary>
            Indicates that the interpreter has found a new and definitive relationship
            </summary>
            <param name="fragment">fragment in which the relationship was found</param>
            <param name="leftHandSide">Left Hand Side of the relationship</param>
            <param name="relationshipClass">Type of relationship</param>
            <param name="rightHandSide">Right Hand Side of the relationship</param>
            <param name="annotations">A list of annotations to be attached to the relationship entry</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CreateEventTypesForEventGroup(Microsoft.SqlServer.TransactSql.ScriptDom.EventGroupContainer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Type)">
            <summary>
            Handles creation of a model element and relationship entries for fragment of type Triggeraction/EventTypeGroupContainer with non-null EventTypeGroup 
            </summary>
            <param name="fragment">fragment in which the relationship was found</param>
            <param name="leftHandSide">Left Hand Side of the relationship</param>
            <param name="relationshipClass">Type of relationship</param>
            <param name="rightHandSide">Right Hand Side of the relationship</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedRelationshipRegularAction(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})">
            <summary>
            Indicates that the interpreter has found a new and difinitive relationship
            </summary>
            <param name="fragment">fragment in which the relationship was found</param>
            <param name="leftHandSide">Left Hand Side of the relationship</param>
            <param name="relationshipClass">Type of relationship</param>
            <param name="rightHandSide">Right Hand Side of the relationship</param>
            <param name="annotations">A list of annotations to be attached to the relationship entry</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CreateRelationshipEntry(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Handles creation of a relationship entry
            </summary>
            <param name="relationship">Relationship obtained from the relationship class</param>
            <param name="lhs">Model element corresponding to Left Hand Side of the relationship</param>
            <param name="relationshipClass">Type of relationship</param>
            <param name="rightHandSide">Right Hand Side of the relationship</param>
            <param name="fragment">fragment in which the relationship was found</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedAmbiguousRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})">
            <summary>
            Indicates that the interpreter has found a new relationship that could point to multiple guys
            </summary>
            <param name="fragment">fragment in which the relationship was found</param>
            <param name="leftHandSide">Left Hand Side of the relationship</param>
            <param name="relationshipClass">Type of relationship</param>
            <param name="ambigousRightHandSide">Potentials for the right hand side</param>
            <param name="annotationDescriptors">A list of annotation descriptors to be attached to the relationship entry</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.IdentifiedSupportingStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Indicates that the interpreter has found a supporting statement
            </summary>
            <param name="fragment"></param>
            <param name="sqlElementDescriptor"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddPrimaryScriptPosition(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Adds positions derived from fragment and filename to specified collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CreatePrimaryScriptPosition(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition"/> object representing the
            position information for this fragment if it exists
            </summary>
            <returns>SourceCodePosition, or null if there is no position information for the fragment</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddSupportingStatementScriptPosition(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition},Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition"/> and adds it to a collection, if a fragment
            has position information
            </summary>
            <param name="positions">the <see cref="T:System.Collections.Generic.ICollection`1"/> to add to</param>
            <param name="fragment">A <see cref="T:Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment"/> that may contain source code position information</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AttachAnnotations(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor},Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Annotates the annotation Holder if needed
            </summary>
            <param name="annotationDescriptors">The list of Annotation Descriptors holding annotation info to be attached to the targets</param>
            <param name="annotationHolder">AnnotationHolder to annotate</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.GetRecycledModelRelationshipEntry(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Tries to find the relationship entry previously used to indicate this relationship and returns it for recycling
            </summary>
            <param name="lhs">LHS for the relationship definition</param>
            <param name="relClass">RelationshipClass for the relationship definition</param>
            <param name="rhs">RHS for the relationship definition</param>
            <returns>A relationshipEntry for reuse or null if it could not be found</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.StoreRelationshipEntryForRecycling(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Stores the information about an IdentifiedRelationship in order to be able to recycle the relationshipEntry created for the relationship
            </summary>
            <param name="lhs">LHS as key</param>
            <param name="relClass">Relationship class from the LHS</param>
            <param name="rhs">RHS in the relationship</param>
            <param name="entry">Entry to recycle</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.StoreRelationshipEntryForRecycling(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry}},Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Stores the information about relationshipclass and RHS of a relationship so that we can later recycle the created relationshipEntry
            </summary>
            <param name="storage">Storage location</param>
            <param name="relClass">RelationshipClass as key</param>
            <param name="rhs">RHS in the relationship</param>
            <param name="entry">Entry to store</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.StoreRelationshipEntryForRecycling(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Stores the link from the RHS of a relationship to the relationship entry we are supposed to recycle
            </summary>
            <param name="storage">Location of where to store the link</param>
            <param name="rhs">RHS as key</param>
            <param name="entry">Entry to recycle</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CompleteQueue(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueue,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Adds everything needed to a queue
            </summary>
            <param name="element">Queue model element</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddInternalGraphPseudoColumnsToTable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            This method modifies the 'SqlTable' table to include the pseudo columns when the table is first identified
            as a model element. Pseudo columns are used by the engine to represent a column without fully specifying its name.
            Node tables have the pseudo column '$node_id' and edge tables have the pseudo columns '$edge_id', '$from_id' and '$to_id'.
            All the pseudo columns have the same type 'nvarchar(1000)'.
            </summary>
            <param name="table">The table to modify.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddSimpleColumnToColumnSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource,System.Collections.Generic.IList{System.String},Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition)">
            <summary>
            Creates a simple column on a column source
            </summary>
            <param name="columnSource">parent element</param>
            <param name="columnName">Full name of the column</param>
            <param name="sourceCodePosition">Position information for the new column</param>
            <returns>The created column</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddComputedColumnToColumnSource(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource,System.Collections.Generic.IList{System.String},Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition)">
            <summary>
            Creates a computed column on a column source
            </summary>
            <param name="columnSource">parent element</param>
            <param name="columnName">Full name of the column</param>
            <param name="sourceCodePosition">Position information for the new column</param>
            <returns>The created column</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.AddTypeSpecifierForBuiltInTypeToColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a type specifier to a column
            </summary>
            <param name="column">Column to which the type specifier is added</param>
            <param name="typeName">TypeName of SqlBuiltInType</param>
            <param name="length">Length (if any)</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.HandleDuplicates(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Checks for dupe elements
            </summary>
            <param name="element">Element to check</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.ResetIncomingReferences(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method resets references to elements with duplicate names, 
            and marks elements referencing such duplicates for re-resolution
            </summary>
            <param name="element">element to check for Dupe-ness</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.ProcessXmlCompressionOptions(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.XmlCompressionOption},Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme)">
            <summary>
            Process and create xml compression options
            </summary>
            <param name="target"></param>
            <param name="nodes"></param>
            <param name="targetToCompressionOption"></param>
            <param name="fgOrPsAst"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.ProcessXmlCompressionOption(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.SqlServer.TransactSql.ScriptDom.XmlCompressionOption,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Create xml compression option with partition numbers
            </summary>
            <param name="target"></param>
            <param name="node"></param>
            <param name="targetToCompressionOption"></param>
            <param name="definedPartitions"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderSchemaAnalyzer.CreateXmlCompressionOption(Microsoft.SqlServer.TransactSql.ScriptDom.XmlCompressionOption,System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Create xml compression option
            </summary>
            <param name="option"></param>
            <param name="partitionNumber"></param>
            <param name="target"></param>
            <param name="targetToCompressionOption"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparer">
            <summary>
            Compares models and model elements.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparer.TryCompareUnlimitedLogFileMaxSize(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean@)">
            <summary>
            Look for the case where we're comparing maxgrowth of two log files in different representations:
            Unlimited log files are represented in SQL Server as 2TB max.
            </summary>
            <param name="areEqual">The result of the comparison if the special case obtains.</param>
            <returns>True if this is an instance of the special case</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparer.IsBuiltWithModelBuilder(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            DEPRECATED NOTICE: this method is not reliable since certain ModelElements (DatabaseOptions) may not have SourceCodePositions.
            You should use ModelComparerConfiguration.IsSourceDatabase/IsTargetDatabase
            TODO adiunni: Remove this method after product has stabilized
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration">
            <summary>
            Sql specific comparison configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.IgnoreComments">
            <summary>
            Ignore any comments inside body script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.IgnoreWhiteSpace">
            <summary>
            Ignore any whitespace inside body script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.IgnoreColumnOrder">
            <summary>
            Ignore differences in column order
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.IgnoreKeywordCasing">
            <summary>
            Ignore any keyword casing during comparison
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.IgnoreSemicolonBetweenStatements">
            <summary>
            Ignore any semicolon between statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.SourceSqlCmdVariables">
            <summary>
            Get Sql cmd variables for source model store
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultLoginForSource">
            <summary>
            Default login in source model for default server principal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultLoginForTarget">
            <summary>
            Default login in target model for default server principal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultLanguageForSource">
            <summary>
            Default language alias of the SQL Server from which the source model is built.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultLanguageForTarget">
            <summary>
            Default language alias of the SQL Server from which the target model is built.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFullTextLcidForSource">
            <summary>
            Default full-text language LCID of the SQL Server from which the source model is built.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFullTextLcidForTarget">
            <summary>
            Default full-text language LCID of the SQL Server from which the target model is built.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultSchemaForSource">
            <summary>
            Default schema in source model used to set default schema if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultSchemaForTarget">
            <summary>
            Default schema in target model used to set default schema if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultUserForSource">
            <summary>
            Default user in source model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultUserForTarget">
            <summary>
            Default user in target model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultHistoryTableForSource">
            <summary>
            Default user in source model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultHistoryTableForTarget">
            <summary>
            Default user in target model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultCurrentTableForSource">
            <summary>
            Default user in source model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultCurrentTableForTarget">
            <summary>
            Default user in target model used to set default authorizer, default user if those relationship is not set
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFilegroupForSource">
            <summary>
            NOTE: ANY VALUE CAN GET FROM MODEL, WE USE INTERNAL PopulateDefaultValueFromModel TO
            POPULATE THOSE VALUES, AND THOSE VALUES SHOULD ONLY USED BY SqlModelComparer, AND SHOULD
            BE INTERNAL.
            Default filegroup in source model used for logical comparison.
            When element in source model does not have filegroup relationship, this
            DefaultSourceFilegroup value will be used.
            We put this as internal on purpose, since it will only used by SqlModelComparer, and
            the value should be populated from source model, should not be set outside.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFilegroupForTarget">
            <summary>
            Default filegroup in target model used for logical comparison.
            When element in target model does not have filegroup relationship, this
            DefaultTargetFilegroup value will be used.
            We put this as internal on purpose, since it will only used by SqlModelComparer, and
            the value should be populated from target model, should not be set outside.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFileStreamFilegroupForSource">
            <summary>
            Default filestream filegroup in source model used for logical comparison.
            When element in source model does not have filegroup relationship, this
            DefaultSourceFilegroup value will be used.
            We put this as internal on purpose, since it will only used by SqlModelComparer, and
            the value should be populated from source model, should not be set outside.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFileStreamFilegroupForTarget">
            <summary>
            Default filestream filegroup in source model used for logical comparison.
            When element in source model does not have filegroup relationship, this
            DefaultSourceFilegroup value will be used.
            We put this as internal on purpose, since it will only used by SqlModelComparer, and
            the value should be populated from source model, should not be set outside.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.SourceCollation">
            <summary>
            Database collation used in source model when column does not specify collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.TargetCollation">
            <summary>
            Target collation used in source model when column does not specify collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFullTextCatalogForSource">
            <summary>
            Default FullTextCatalog used in source model when fulltext index does not point to any FullTextCatalog.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.DefaultFullTextCatalogForTarget">
            <summary>
            Default FullTextCatalog used in target model when fulltext index does not point to any FullTextCatalog.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.ResetDefaultValues">
            <summary>
            Clean up any special default value that are session based and cannot get from model.
            Such as DefaultSchema, DefaultUser.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.TargetSqlCmdVariables">
            <summary>
            Get Sql cmd variables for target model store.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.AddOrUpdateSqlCmdVariable(System.String,System.String,System.Boolean)">
            <summary>
            Add or update a Sql cmd variable
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConfiguration.RemoveSqlCmdVariable(System.String,System.Boolean)">
            <summary>
            Remove a Sql cmd variable
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelComparerConstructor">
            <summary>
            Service constructor for SqlModelComparer
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsBoolAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsBoolAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Used for properties whose true/false values are not True and False
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsEnumAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsEnumAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Used for properties whose return types are nullable enumerations
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsEnumPairAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which enumeration values
            correspond to the property values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableBoolAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableBoolAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Used to map project properties of type bool?.  SqlModelOptionsBoolAttribute maps arbitrary
            string values to true/false. This class extends that functionality to allow mapping
            an arbitrary string value to null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableEnumAttribute">
            <summary>
            This attribute is applied to the SqlAzureV12DatabaseModelOptions
            fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableEnumAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Used for properties whose return types are nullable enumerations
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableIntAttribute">
            <summary>
            This attribute is applied to the Sql80DatabaseModelOptions and
            Sql80ServerModelOptions fields to identify which project properties
            they are tied to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsNullableIntAttribute.#ctor(System.String,System.String[])">
            <summary>
            Used to map project properties of type int?. This class allows mapping
            an arbitrary string value to null for int? type values.  Also, empty or otherwise
            missing string values are considered as mapping to null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.AccessCheckCacheBucketCount">
            <summary>
              Looks up a localized string similar to Access check cache quota.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.AccessCheckCacheQuota">
            <summary>
              Looks up a localized string similar to Access check cache bucket count.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.Affinity64IOMask">
            <summary>
              Looks up a localized string similar to Affinity64 I/O Mask.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.Affinity64Mask">
            <summary>
              Looks up a localized string similar to Affinity64 Mask.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.AffinityIOMask">
            <summary>
              Looks up a localized string similar to Affinity I/O Mask.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.AffinityMask">
            <summary>
              Looks up a localized string similar to Affinity Mask.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.BlockProcessThreshold">
            <summary>
              Looks up a localized string similar to Blocked Process Threshold.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.Collation">
            <summary>
              Looks up a localized string similar to Server Collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.CostThresholdForParallelism">
            <summary>
              Looks up a localized string similar to Cost Threshold for Parallelism.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.CursorThreshold">
            <summary>
              Looks up a localized string similar to Cursor Threshold.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DefaultFillFactor">
            <summary>
              Looks up a localized string similar to Default index fill factor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DefaultFulltextLanguage">
            <summary>
              Looks up a localized string similar to Default Full-Text Language.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DefaultLanguage">
            <summary>
              Looks up a localized string similar to Default Language.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DisableDefaultConstraintChecking">
            <summary>
              Looks up a localized string similar to Disable Default Constraint Checking.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DisallowResultsFromTriggers">
            <summary>
              Looks up a localized string similar to Disallow Results from Triggers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DoAllowRemoteAccess">
            <summary>
              Looks up a localized string similar to Allow remote connections to this server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DoAllowRemoteAdminConnections">
            <summary>
              Looks up a localized string similar to Remote Admin Connections.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DoAllowServerTriggerRecursion">
            <summary>
              Looks up a localized string similar to Server Trigger Recursion.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.DoAllowUpdates">
            <summary>
              Looks up a localized string similar to Allow Updates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.FilestreamAccessLevel">
            <summary>
              Looks up a localized string similar to Filestream Access Level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.FtCrawlMaxBandwidth">
            <summary>
              Looks up a localized string similar to FT Crawl Bandwidth (Max).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.FtCrawlMinBandwidth">
            <summary>
              Looks up a localized string similar to FT Crawl Bandwidth (Min).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.FtNotifyMaxBandwidth">
            <summary>
              Looks up a localized string similar to FT Notify Bandwidth (Max).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.FtNotifyMinBandwidth">
            <summary>
              Looks up a localized string similar to FT Notify Bandwidth (Min).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.ImplicitTransactions">
            <summary>
              Looks up a localized string similar to Implicit Transactions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IndexCreateMemory">
            <summary>
              Looks up a localized string similar to Index creation memory (in KB, 0 = dynamic memory).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.InDoubtXactResolution">
            <summary>
              Looks up a localized string similar to In-doubt Xact Resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAdHocDistributedQueriesEnabled">
            <summary>
              Looks up a localized string similar to Ad Hoc Distributed Query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAgentXPsStarted">
            <summary>
              Looks up a localized string similar to Agent XPs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAnsiNullDefaultOff">
            <summary>
              Looks up a localized string similar to ANSI NULL Default Off.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAnsiNullDefaultOn">
            <summary>
              Looks up a localized string similar to ANSI NULL Default On.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAnsiNullsOn">
            <summary>
              Looks up a localized string similar to ANSI NULLS.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAnsiPaddingOn">
            <summary>
              Looks up a localized string similar to ANSI Padding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAnsiWarningsOn">
            <summary>
              Looks up a localized string similar to ANSI Warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsArithAbortOn">
            <summary>
              Looks up a localized string similar to Arithmetic Abort.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsArithIgnoreOn">
            <summary>
              Looks up a localized string similar to Arithmetic Ignore.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsAweEnabled">
            <summary>
              Looks up a localized string similar to Use AWE to allocate memory.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsBackupCompressionDefaultOn">
            <summary>
              Looks up a localized string similar to Backup Compression Default.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsC2AuditModeOn">
            <summary>
              Looks up a localized string similar to Enable C2 audit tracing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsClrEnabled">
            <summary>
              Looks up a localized string similar to CLR enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsCommonCriteriaComplianceEnabled">
            <summary>
              Looks up a localized string similar to Common Criteria Compliance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsConcatNullYieldsNullOn">
            <summary>
              Looks up a localized string similar to Concat NULL yields NULL.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsCrossDbOwnershipChainingOn">
            <summary>
              Looks up a localized string similar to Cross database ownership chaining.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsCursorCloseOnCommitOn">
            <summary>
              Looks up a localized string similar to Cursor Close on Commit.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsDatabaseMailXPsEnabled">
            <summary>
              Looks up a localized string similar to Database Mail XPs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsDefaultTraceEnabled">
            <summary>
              Looks up a localized string similar to Default Trace.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsEkmProviderEnabled">
            <summary>
              Looks up a localized string similar to EKM Provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsLightweightPoolingOn">
            <summary>
              Looks up a localized string similar to Use Windows fibers (lightweight pooling).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsNestedTriggersEnabled">
            <summary>
              Looks up a localized string similar to Allow triggers to fire others.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsNocountOn">
            <summary>
              Looks up a localized string similar to No Count.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsNumericRoundAbortOn">
            <summary>
              Looks up a localized string similar to Numeric Round Abort.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsOleAutomationProceduresEnabled">
            <summary>
              Looks up a localized string similar to OLE Automation Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsPrecomputeRankEnabled">
            <summary>
              Looks up a localized string similar to Precompute Rank.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsPriorityBoostEnabled">
            <summary>
              Looks up a localized string similar to Boost SQL Server priority.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsQuotedIdentifierOn">
            <summary>
              Looks up a localized string similar to Quoted Identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsRemoteProcTransactionEnabled">
            <summary>
              Looks up a localized string similar to Require distributed transactions for server-to-server communication.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsReplicationXPsEnabled">
            <summary>
              Looks up a localized string similar to IsReplicationXPsEnabled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsScanForStartupProcsEnabled">
            <summary>
              Looks up a localized string similar to Scan for Startup Procs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsSetWorkingSetSizeEnabled">
            <summary>
              Looks up a localized string similar to Set Working Set Size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsShowAdvancedOptionEnabled">
            <summary>
              Looks up a localized string similar to Show Advanced Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsSmoAndDmoXPsEnabled">
            <summary>
              Looks up a localized string similar to SMO and DMO XPs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsSqlMailXPsEnabled">
            <summary>
              Looks up a localized string similar to SQL Mail XPs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsTransformNoiseWordsEnabled">
            <summary>
              Looks up a localized string similar to Transform Noise Words.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsUserInstancesEnabled">
            <summary>
              Looks up a localized string similar to User Instance Enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsWebAssistantProceduresEnabled">
            <summary>
              Looks up a localized string similar to Web Assistant Procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.IsXPCmdsShellEnabled">
            <summary>
              Looks up a localized string similar to xp_cmdshell.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.Locks">
            <summary>
              Looks up a localized string similar to Locks.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MaxDegreeOfParallelism">
            <summary>
              Looks up a localized string similar to Maximum Degree of Parallelism.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MaxFulltextCrawlRange">
            <summary>
              Looks up a localized string similar to Maximum Full-Text Crawl Range.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MaxServerMemory">
            <summary>
              Looks up a localized string similar to Maximum server memory (in MB).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MaxTextReplSize">
            <summary>
              Looks up a localized string similar to Maximum Text Replication Size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MaxWorkerThreads">
            <summary>
              Looks up a localized string similar to Maximum worker threads.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MediaRetention">
            <summary>
              Looks up a localized string similar to Default backup media retention (in days).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MinMemoryPerQuery">
            <summary>
              Looks up a localized string similar to Minimum memory per query (in KB).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.MinServerMemory">
            <summary>
              Looks up a localized string similar to Minimum server memory (in MB).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.NetworkPacketSize">
            <summary>
              Looks up a localized string similar to Network Packet Size.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.OpenObjects">
            <summary>
              Looks up a localized string similar to Open Objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.OptimizeForAdhocWorkloads">
            <summary>
              Looks up a localized string similar to Optimize for ad hoc workloads.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.PHTimeout">
            <summary>
              Looks up a localized string similar to PH Timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.QueryGovernorCostlimit">
            <summary>
              Looks up a localized string similar to Query Governor Cost Limit.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.QueryWait">
            <summary>
              Looks up a localized string similar to Query Wait.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.RecoveryInterval">
            <summary>
              Looks up a localized string similar to Recovery interval (minutes).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.RemoteLoginTimeout">
            <summary>
              Looks up a localized string similar to Remote login timeout (in seconds, 0 = no timeout).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.RemoteQueryTimeout">
            <summary>
              Looks up a localized string similar to Remote query timeout (in seconds, 0 = no timeout).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.TransactionAbort">
            <summary>
              Looks up a localized string similar to Transaction Abort.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.TwoDigitYearCuttoff">
            <summary>
              Looks up a localized string similar to Two Digit Year Cutoff.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.UserConnections">
            <summary>
              Looks up a localized string similar to Maximum number of concurrent connections (0 = unlimited).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelOptionsResources.UserInstanceTimeout">
            <summary>
              Looks up a localized string similar to User Instance Timeout.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver">
            <summary>
            SqlModelResolver will work on schema manager and resolve dangling relationships.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.GetHighestAffinityTargets(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation},System.Int32@,System.Int32@,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement@,System.Int32@,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier@,System.Boolean@,System.Int32@)">
            <summary>
            Gets a dictionary that contains all existing elements pointed to by the annotations on the entry
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.SortAnnotationsReverseAffinty(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelBuilderResolvableAnnotation}@)">
            <summary>
            The reason we sort to a single list, and not process the Sorted list is that most of the cases will
            have only one annotation.  So we've optimized and standardized for that scenario.
            </summary>
            <param name="allAnnotations"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.HandleZeroOrMultipleFoundObjects(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method handles the event in which either zero or more than one element is found that could be hooked up to a ModelRelationship Entry
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.AttachResolveTimeVerifiedDanglingRelationshipAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Adds an annotation to the entry that indicates this relationship can dangle
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.ShouldCreateAutoHistoryIndex(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Checks if there's an index pointing to the table we're about to create.
            If not, we should create one.
            This index is created on the following columns:
              * Generated always row start.
              * Generated always row end.
            </summary>
            <param name="historyTableIdentifier">History table identifier.</param>
            <param name="currentTable">Current table.</param>
            <returns>True if the auto history index should be created; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.CreateAutoHistoryTableStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates a create table statement to auto generate a history table when doing
            an extract from a sql script (sql project scenario).
            
            Ledger tables leverage this logic to be able to auto generate ledger history
            tables in this scenario. The temporal relationship needed here is created at
            TableStatementsInterpretationVisitor130 and cleared after the ledger history
            table has been auto generated at StatefulResolutionTask.Resolve() to prevent
            conflicts with Temporal logic.
            </summary>
            <param name="currentTable">Current table.</param>
            <param name="historyTableIdentifier">History table identifier.</param>
            <returns>Create table statement to auto generate the history table.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.CreateAutoGeneratedHistoryTable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Boolean@)">
            <summary>
            Creates an auto generated history table when doing an extract from a sql
            script (sql project scenario).
            
            Ledger tables leverage this logic to be able to auto generate ledger history
            tables in this scenario. The temporal relationship needed here is created at
            TableStatementsInterpretationVisitor130 and cleared after the ledger history
            table has been auto generated at StatefulResolutionTask.Resolve() to prevent
            conflicts with Temporal logic.
            </summary>
            <param name="element">Table element.</param>
            <param name="historyTableIdentifier">History table identifier.</param>
            <param name="autoGenerated">Auto generated.</param>
            <returns>Auto generated history table.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolver.ResetPotentialRelationshipEntries(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type)">
            <summary>
            Finds all the annotations that can resolve to this element, and make reset them and their relating element, if the type is a match.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolverResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolverResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolverResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlModelResolverResources.String1">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor">
            <summary>
            This class represents an ambigous element descriptor
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._relevance">
            <summary>
            Relevance for the descriptor
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._affinity">
            <summary>
            Affinity for this ElementDescriptor
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._originalAffinity">
            <summary>
            Affinity populated when the element is constructed, _affinity can be changed during interpretation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._clrParts">
            <summary>
            Holds the CLR parts if any
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._isVariable">
            <summary>
            Holds whether this is a variable column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.Relevance">
            <summary>
            Gets the Relevance associated with the potential descriptor
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor._alias">
            <summary>
            The alias (if any) for the elementDescriptor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.Affinity">
            <summary>
            Gets the priority assigned to the potential descriptor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.OriginalAffinity">
            <summary>
            Gets the original affinity 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.IsClr">
            <summary>
            Gets whether or not the descriptor denotes a CLR column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.ClrParts">
            <summary>
            Gets the parts of the name of the descriptor that are CLR properties/functions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.Alias">
            <summary>
            Gets the alias of the potential descriptor (or null if none)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.HasAlias">
            <summary>
            Gets whether or not this potential is aliassed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.ExposedName">
            <summary>
            Gets the name this potential will be known by
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.IsVariable">
            <summary>
            Gets whether this is a variable object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Constructs an empty potential for with an alias (not nullable) and an affinity
            </summary>
            <param name="elementType">Type of the potential</param>
            <param name="alias">alias for the potential</param>
            <param name="affinity">affinity for this potential</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlClrPart},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorRelevance,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="elementType">Type of the descriptor</param>
            <param name="identifiers">Identifiers for the descriptor</param>
            <param name="affinity">Affinity for the potential descriptor</param>
            <param name="alias">Alias for the potential descriptor</param>
            <param name="clrParts">CLR Parts for the potential descriptor</param>
            <param name="relevance">Relevance for the potential descriptor</param>
            <param name="isVariable">Whether this is variable column or not</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor.ToStringInternal">
            <summary>
            Provides a nice debug view over the Potential,
            </summary>
            <returns>A string representation of the element</returns>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer.CancellationOpportunityReached">
            <summary>
            Gives the caller the opportunity to cancel the Populate operation (by setting Cancel = true on the eventargs).
            This event is raised only while Populate is executing, on the same thread on which Populate was called.
            If CancelEventArgs.Cancel is set to true, Populate() will throw OperationCanceledException rather than returning.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer.RetryOnExceptionRequested">
            <summary>
            Gives opportunity to continue Populate() method when SqlException has occurred.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer.IsRetryableOnExceptionRequested">
            <summary>
            Gives opportunity to indicate if an Exception might be retryable when SqlException has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext.IsExpectedConnectionException(System.Exception)">
            <summary>
            Master DB connections are sometimes expected to fail - e.g. lack of login permissions.
            Should handle common exception types for this connection.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor">
            <summary>
            A constructor class that has options that defines a SQL reverse engineer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor._connectionFactory">
            <summary>
            Gets or sets the connection factory which will be used by
            ReverseEngineer objects created by this constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.ValidationEnabled">
            <summary>
            If validation is on or not when creating a new DataSchemaModel
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.ValidateCasingOnIdentifiers">
            <summary>
            Indicates if casing of identifiers is going to be verified
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.ConvertCrossDbRefToWarning">
            <summary>
            Get or set option to convert errors to warnings in module bodies when the reference is cross database
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.EnforceSqlAzureRestrictions">
            <summary>
            Get or set option to enforce Sql Azure restrictions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.IgnorePermissions">
            <summary>
            Gets or sets if ReverseEnginner ignores permissions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.IgnoreExtendedProcedures">
            <summary>
            Gets or sets if ReverseEnginner ignores extended stored procedures
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.IgnoreExtendedProperties">
            <summary>
            Gets or sets if ReverseEnginner ignores extended properties
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.AlwaysPopulateColumnCollation">
            <summary>
            Gets or sets if reverse engineer should always populate column collation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.PopulateComputedColumnTypeSpecifiers">
            <summary>
            Gets or sets if reverse engineer should populate type specifiers for computed columns
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.IncludeOnlinePropertyAnnotations">
            <summary>
            Gets or sets if ReverseEnginner should populate online properties
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.IncludeIsNotTrustedPropertyAnnotations">
            <summary>
            Gets or sets if ReverseEnginner should populate is_not_trusted properties
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.StoreSourceCodePositionAnnotations">
            <summary>
            Gets or sets if the model created by RE should store source code position annotations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.VerifyPermissionOnImport">
            <summary>
            Determines if ReverseEnginer checks for required permissions before executing. 
            If true and the user does not have the required permissions, the operation will fail.
            If false and the user does not have the required permissions, ReverseEngineer will add a warning to the ErrorManager and continue.
            </summary>
            <remarks>        
            If the target database is master then ReverseEngineer requires VIEW ANY DEFINITION and VIEW DEFINITION permissions.
            If the Target database is a non master database, ReverseEngineer requires the DATABASE VIEW DEFINITION permission.
            
            ReverseEngineering with incomplete permissions may create missing, malformed, or incorrect objects in the resulting model.
            This switch exists so that it is possible to build a model with minimal permissions. This is currently required by the Server Explorer.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.ImportSystemClrTypesAsExternal">
            <summary>
            Set or get the option that controls importing system CLR types as external or internal elements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.PopulateHierarchicalChildrenOfComposedChildren">
            <summary>
            Determines if extended properties and Permissions on composed children (columns) should be included when
            populating the parent element's Extended Properties or Permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.PopulateHierarchicalChildrenOfHierarchicalChildren">
            <summary>
            Determines if extended properties or Permissions on hierarchical children should be included when
            populating the parent element's Extended Properties or Permissions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.PopulateSystemStatistics">
            <summary>
            Determines if system generated statistics should be populated
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.PopulateComposedChildrenOnUnencryptedSysCommentObjects">
            <summary>
            Determines if system generated statistics should be populated
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.ResetPotentialRelationshipEntries">
            <summary>
            Determines if R/E calls SqlModelResolver.ResetPotentialRelationshipEntries on each new named element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConstructor.MasterReference">
            <summary>
            Shows the location of the master definitions.  Null signifies that master should not be loaded.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerError">
            <summary>
            Indicates that reverse engineer failed for one or more model elements of a given type.
            These elements will be missing from the imported model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerError.FailedType">
            <summary>
            The type of the model element(s) which could not be imported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerError.Action">
            <summary>
            The action performed as a result of the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerError.ElementName">
            <summary>
            Name of the Element that caused the failure
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException">
            <summary>
            Exception used by Reverse Engineer
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException.#ctor(System.String)">
            <summary>
            Constructor with a message
            </summary>
            <param name="message">Message to describe the exception</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with a message and an inner exception
            </summary>
            <param name="message">Message to describe the exception</param>
            <param name="inner">The exception that caused this exception</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl">
            <summary>
            Allows the population of a sql schema manager given a connection string.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.AlwaysPopulateColumnCollation">
            <summary>
            Returns if column collation should be always populated
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.EnforceSqlAzureRestrictions">
            <summary>
            Set to true to when Sql Azure restrictions are in place
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.IgnorePermissions">
            <summary>
            Returns if ReverseEnginner ignores permissions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.IgnoreExtendedProperties">
            <summary>
            Returns if ReverseEnginner ignores extended properties
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.DataSchemaModel">
            <summary>
            Created SqlSchemaModel to be used for population
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.SequenceHasLastUsedValue">
            <summary>
            Returns true if the sys.sequences has last_used_value column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.HasColumnIsValueDefault">
            <summary>
            Returns true if the sys.database_scoped_configurations has is_value_default column
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.Parser">
            <summary>
            Created parser for parsing any script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ParserForQuotedIdentifiers">
            <summary>
            Parser for scripts with quoted identifier setting on
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ValidationEnabled">
            <summary>
            If validation is on or not when creating a new DataSchemaModel
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ValidateCasingOnIdentifiers">
            <summary>
            Indicates if casing of identifiers is going to be verified
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ConvertCrossDbRefToWarning">
            <summary>
            Indicates if errors are going to be converted to warnings in module bodies when the reference is cross database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ConvertCollation(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation@)">
            <summary>
            Converts a collation string into a ModelCollation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.CreateDataSchemaModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Boolean)">
            <summary>
            Create a SqlSchemaModel using ErrorManager
            </summary>
            <param name="errors"></param>
            <param name="optimizeForQuery">Determines if model indexes should be enabled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.ConfigureSqlSchemaModelConstructor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,System.Boolean)">
            <summary>
            Configure a SqlSchemaModel Constructor
            </summary>
            <param name="sqlSchemaModelConstructor"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.InitializeCachedElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel)">
            <summary>
            Initialize elements cache and add any predefined objects into the cache.
            </summary>
            <param name="dataSchemaModel"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.QueryDatabasePermissions(System.Data.IDbConnection,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean@,System.Boolean@,System.Boolean@,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Check to be sure that we have the permissions we need in order to RE w.r.t the database.
            </summary>
            <param name="hasBaselinePermissions">true if user has VIEW DEFINITION and CONTROL permissions on the database</param>
            <param name="isDeniedObjectPermissions">true if the user is denied VIEW DEFINITION on any object in the database</param>
            <param name="hasViewStatePermission">true if the user has VIEW DATABASE STATE permission</param>
            <remarks>
            If this check fails, attempting to RE could fail in arbitrary ways, so don't allow the RE to proceed.
            It's OK for this check to pass even though we don't necessarily have all the permissions we'd need
            for a full RE, as long as whatever we're missing will cause well-defined failures.
            </remarks>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException">Thrown if we don't have the needed permissions.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.QueryServerPermissions(System.Data.IDbConnection,System.Boolean@,System.Boolean@,System.Boolean@,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Check to be sure that we have the permissions we need in order to RE w.r.t the server.
            </summary>
            <param name="hasBaselinePermissions">true if user has VIEW ANY DEFINITION and CONTROL permissions on the server</param>
            <param name="isDeniedObjectPermissions">true if the user is denied VIEW ANY DEFINITION on any object in the server</param>
            <param name="hasViewStatePermission">true if the user has VIEW SERVER STATE permission</param>
            <remarks>       
            If this check fails, attempting to RE could fail in arbitrary ways, so don't allow the RE to proceed.
            It's OK for this check to pass even though we don't necessarily have all the permissions we'd need
            for a full RE, as long as whatever we're missing will cause well-defined failures.
            </remarks>
            <exception cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerException">Thrown if we don't have the needed permissions.</exception>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.Progress">
            <summary>
            Provides progress during RE
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.CancellationOpportunityReached">
            <summary>
            Gives the caller the opportunity to cancel the Populate operation (by setting Cancel = true on the eventargs).
            This event is raised only while Populate is executing, on the same thread on which Populate was called.
            If CancelEventArgs.Cancel is set to true, Populate() will throw OperationCanceledException rather than returning.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.RetryOnExceptionRequested">
            <summary>
            Gives opportunity to continue Populate() method when SqlException has occurred.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.IsRetryableOnExceptionRequested">
            <summary>
            Gives opportunity to indicate if an Exception might be retryable when SqlException has occurred.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.PopulationStarted">
            <summary>
            Signals the start of model population
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.RaiseProgressEvent(System.String,System.Int32)">
            <summary>
            Raises the progress event
            </summary>
            <param name="currentPhaseText"></param>
            <param name="totalCount"> </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.RaiseCancellationOpportunityEvent">
            <summary>
            Raises the CancelationOpportunityReached event
            </summary>
            <exception cref="T:System.OperationCanceledException">thrown if an event handler sets the Cancel property of the EventArgs to true.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.RaiseIsRetryableOnExceptionRequestedEvent(System.Exception,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.ModelElementPopulator,System.Boolean@)">
            <summary>
            Internal since Populators may need to determine if exceptions are retryable during processing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.PopulateDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.Sql80DatabaseModelOptions,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportScope)">
            <summary>
            Populates the model options object with all the sql database options that
            were retrieved.  The Sql80DatabaseModelOptions object keeps track of which options were
            set vs which options should take on their default value.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerImpl.SetISqlSpecifiesIndex(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.OrdinalSqlDataReader,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption)">
            <summary>
            Sets ISqlSpecifiesIndex properties.
            </summary>
            <remarks>
            The ColumnSpecifications property must be set separately.
            </remarks>
            <param name="sqlSpecifiesIndex"></param>
            <param name="filegroupName"></param>
            <param name="isUnique"></param>
            <param name="isClustered"></param>
            <param name="isPadded"></param>
            <param name="fillFactor"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerProgressEventArgs">
            <summary>
            Contains the data for ReverseEngineer and ReverseEngineerJob progress events.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerProgressEventArgs.CurrentPhase">
            <summary>
            The current index for the phase currently being processed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerProgressEventArgs.NumberOfPhases">
            <summary>
            The maximum number of phases we'll have to 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerProgressEventArgs.Message">
            <summary>
            A displayable message indicating our current phase
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerModelElementHelper,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Type[],System.Type[])">
            <summary>
            Creates a Request for a specified list of types.        
            </summary>
            <param name="helper">Used to build list of child types</param>
            <param name="option">Defines which child types should be included</param>
            <param name="explicitHierarchicalTypes">If not null, defines the explicit set of hierarchical child types regardless of <paramref name="option"/> and <paramref name="topLevelTypes"/></param>
            <param name="topLevelTypes">List of types to include in the request</param>
            <remarks>
            The set of child types is controlled by the option and the list of  <paramref name="explicitHierarchicalTypes"/> .
            
            if the list of <paramref name="explicitHierarchicalTypes"/> is empty then the following rules apply for included types:
            <ul>
                <li>if <paramref name="option"/> is (Signature, Dependency, AllChildren, Full) all composed element types of the <paramref name="topLevelTypes"/> are added to the request</li>
                <li>if <paramref name="option"/> is (Dependency, AllChildren, Full, SymbolAndDependencies) all hierarchical children of the <paramref name="topLevelTypes"/> are added to the request</li>
            </ul>
            
            if the list of <paramref name="explicitHierarchicalTypes"/> is NOT empty then the following rules apply for included types:
            <ul>
                <li>if <paramref name="option"/> is (Signature, Dependency, AllChildren, Full) all composed element types of the <paramref name="topLevelTypes"/> are added to the request</li>
                <li>Only the <paramref name="explicitHierarchicalTypes"/> are added as hierarchical children</li>
            </ul>
            
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer">
            <summary>
            The base class that defines the interpretation events.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.BeginBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            This method handles pre-batchprocessing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.EndBatch(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch)">
            <summary>
            This method handles post-batchprocessing
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.BeginDdlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles pre-DDL statement processing 
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.EndDdlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles post-DDL statement processing
            </summary>
            <param name="fragment">Node that was processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedElement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            This method handles the discovery of a new Symbol
            </summary>
            <param name="fragment">Fragment the symbol belongs to</param>
            <param name="sqlElementDescriptor">The element descriptor</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedTableWithFileGroupOrPartitionScheme(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Handles the updates of OnFileGroupOrPartitionScheme value from unique constraints to the parent table. The opposite of IdentifiedTopLevelElementsWithOnFileGroupOrPartitionScheme.
            </summary>
            <param name="tableName">Name of the parent table</param>
            <param name="fragment">Current node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedTopLevelElementsWithOnFileGroupOrPartitionScheme(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            Handles the updates of OnFileGroupOrPartitionScheme value from a table to its partitioned clustered indexes  
            </summary>
            <param name="tableName">Name of the parent table</param>
            <param name="node">Current node</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedExistingElements(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Type,System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Func{Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,System.Collections.Generic.List{System.String},System.Tuple{System.Int32,System.String}})">
            <summary>
            Handles the discovery of an existing element with a TSqlFragment associated with it.
            </summary>
            <param name="fragment">Fragment the elements are appear in.</param>
            <param name="elementClass">Class of the elements.</param>
            <param name="elementNames">Element names.</param>
            <param name="errorResolver">Optional error resolver to generate error code and message. In case this parameter is null resolve failure will be ignored</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Func{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean})">
            <summary>
            This method allows derived types to specify a post processing function when an element is identified. The method is called
            after the PostElementCreationAction is called for the element.
            </summary>
            <param name="descriptor">The element descriptor.</param>
            <param name="postProcessingFunction">The post processing function, the return value is ignored.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.AddInternalGraphPseudoColumnsToTable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            This method adds internal graph columns to a table element.
            </summary>
            <param name="table">The table element.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})">
            <summary>
            This method handles the discovery of a new Relationship
            </summary>
            <param name="fragment">Fragment the relationship belongs to</param>
            <param name="leftHandSide">Left side of the relationship</param>
            <param name="relationshipClass">The relationship class</param>
            <param name="rightHandSide">Right side of the relationship</param>
            <param name="annotations">Indicate this relationship might be changed to Reinterpret relationship
            according to other information we can get. 
            </param>
            <remarks>Read relationships as: [leftHandSide] [relationship] [rightHandSide]</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedAmbiguousRelationship(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor},System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAnnotationDescriptor})">
            <summary>
            This method handles the discovery of a new Relationship that could point to multiple targets
            </summary>
            <param name="fragment">Fragment the relationship belongs to</param>
            <param name="leftHandSide">Left side of the relationship</param>
            <param name="relationshipClass">The relationship class</param>
            <param name="ambigousRightHandSide">Right side of the relationship; this is the list of potential RHS elements, it's up to the analyzer to pick the right one</param>
            <param name="annotations">Indicate this relationship might be changed to Reinterpret relationship
            according to other information we can get. 
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.BeginDmlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles the pre-DML statement processing
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.EndDmlStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            This method handles the post-DML statement processing
            </summary>
            <param name="fragment">Node that will be processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.VisitFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptorRelevance)">
            <summary>
            This method handles additional processing required for a node/schemaidentifier
            </summary>
            <param name="fragment">Node to be processed</param>
            <param name="sqlElementDescriptor">Descriptor to be processed</param>
            <param name="relevance">Relevance</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.VisitAmbiguousFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPotentialElementDescriptor})">
            <summary>
            This method handles additional processing required for a node/schemaidentifier
            </summary>
            <param name="fragment">Node to be processed</param>
            <param name="possibilities">An enumerable of possible hits</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaAnalyzer.IdentifiedSupportingStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            This method handles the discovery of a new supporting statement
            </summary>
            <param name="node"></param>
            <param name="table"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaCustomSchemaDataWrapper">
            <summary>
            Holds the data associated with a model file which is to
            be added to the schema manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaCustomSchemaDataWrapper.CanWrap(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Can this wrapper wrap this custom schema data?
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaCustomSchemaDataWrapper.CustomSchemaData">
            <summary>
            Returns the custom schema data we wrap
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaCustomSchemaDataWrapper.CanonicalizedFileName">
            <summary>
            The canonicalized file path.  This can be used as the key or one
            of the keys when comparing custom schema datas.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaMap">
            <summary>
            Is a map of useful element and relationship classes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaMap90.InitializeCommonRelationships">
            <summary>
            Initialize the common relationships defined for both SQL80 and SQL90
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.SqlSchemaModelStaticState">
            <summary>
            Holds state that can be statically initialized,
            but not during static initialization of the outer class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.SqlSchemaModelStaticState.PopulateApplicationScope(System.Type)">
            <summary>
            Adds an element type that is application scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.SqlSchemaModelStaticState.PopulateManagementScope(System.Type)">
            <summary>
            Adds an element type that is Management scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.FixupAfterDeserialization">
            <summary>
            Performs additional actions to ensure model consistency after de-serialization from .dbmdl file
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.RemoveInvalidSysSchemaObjects">
            <summary>
            Some Azure V12 databases exported during a certain time period in early 2015 contain an invalid table type
            named [sys].[script_deployment_databases]. This method removes that table type from the deserialized model
            if found.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.FixInlineConstraintAnnotationsForHekatonConstraints">
            <summary>
            RE did not append inline constraint annotations to constraints from hekaton tables.
            This resulted in some invalid behavior in the public model.
            This code checks for hekaton tables and appends the inline constraint annotations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.InitializeModelSchema">
            <summary>
            The SqlSchemaModel's ModelSchema has static state that is extremely useful when navigating a model's
            contents.  Under normal circumstances (IDE) the static state is indirectly initialized and clients 
            can use the state oblivious to how it has been initialized.  In other heads (commandline / API / unit tests) it is possible
            for the static state to be uninitialized prior to it's being used causing unexpected nulls and failures.  When implementing
            a new head that may directly use the ModelSchema prior to instantiating a SqlSchemaModel call this method prior to
            accessing any static state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ValidationEnabled">
            <summary>
            Returns if validation is enabled for this SchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetUniqueNameForType(System.String)">
            <summary>
            Returns a unique, non-deterministic across SqlDataSchemaModel instances name per typeName.
            We use this to bypass potential issues with case insensitive collations.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.LoadBuiltInsFromResource(System.String)">
            <summary>
            Loads built-in elements from resource into this DataSchemaModel.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.LoadFromResource(System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Loads built-in elements from resource into this DataSchemaModel.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsOwnedObjectType(System.Type)">
            <summary>
            Check if an type is SchemaBound object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsOwnedChildObjectType(System.Type)">
            <summary>
            Check if an type is SchemaBound child object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.CreateExternalPropertyAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an ExternalPropertyAnnotation.  This method should be used only by ModelBuilder and ReverseEngineer
            </summary>
            <param name="element"></param>
            <param name="propertyClass"></param>
            <param name="cacheIdentifier"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.OnCustomDataAdded(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            In case of adding a reference, makes elements marked with
            GloballyScoped/AliasedToDbo annotations accessible without database/server name part
            </summary>
            <param name="customData">Custom data being added</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.OnCustomDataRemoved(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Overriden to handle removal of extra names (from elements marked as AliasedToDbo/GloballyScoped)
            if reference is removed
            </summary>
            <param name="customData">Custom data being removed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.SerializeExternalProperty(System.Xml.XmlWriter,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.Object)">
            <summary>
            Serializes external properties supported by SqlSchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.DeserializeExternalProperty(System.Xml.XmlReader,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            De-serializes external properties supported by SqlSchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetElementSources(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the source information for a particular element.
            </summary>
            <param name="element">The element to look for.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetRelationshipEntrySources(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Gets source information for a particular relationship entry.
            </summary>
            <param name="relationshipEntry">The entry to look source information for.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetParser(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Nullable{System.Boolean})">
            <summary>
            Get the parser of the element using settings annotation of that element.
            If the settings are not there, using default database settings.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetParser(System.String,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Get the parser for the particular file.
            If the settings are not there, using default database settings.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.Resolve">
            <summary>
            Resolves all of the elements in the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.Resolve(System.Int32)">
            <summary>
            Resolves the given number of elements
            </summary>
            <param name="elementCount">The number of elements to resolve.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.Resolve(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Resolves the given element.
            </summary>
            <param name="element">The element to resolve.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ResolveFrom(System.String)">
            <summary>
            Resolves elements from the given source.
            </summary>
            <param name="element">The source to resolve.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ElementProcessingOperationsCount">
            <summary>
            Returns number of operations required to resolve the model completely
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.FixupPathsAfterDeserialization(System.String,System.String)">
            <summary>
            Fixes up all the filenameAnnotations so their path is converted from the old to the new.  This
            is used during deserialization of the model.
            </summary>
            <param name="oldPath">The old project full path when it was last serialized</param>
            <param name="newPath">The new project full path.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ApplicationScopedClasses">
            <summary>
            Return set of classes of model elements that can be scoped to a contained database.
            </summary>
            <returns>
            Set of classes of model elements that can be scoped to a contained database.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ApplicationScopedTypes">
            <summary>
            Return set of types of model interfaces that can be scoped to a contained database.
            </summary>
            <returns>
            Set of types of model interfaces that can be scoped to a contained database.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ServerScopedClasses">
            <summary>
            Return set of classes of model elements that can be scoped to a contained database.
            </summary>
            <returns>
            Set of classes of model elements that can be scoped to a contained database.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ServerScopedTypes">
            <summary>
            Return set of types of model types that can be scoped to a server.
            </summary>
            <returns>
            Set of types of model types that can be scoped to a server.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ManagementScopedClasses">
            <summary>
            Return set of classes of model elements that can never be scoped to a contained database.
            </summary>
            <returns>
            Set of classes of model elements that can be never scoped to a contained database.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ManagementScopedTypes">
            <summary>
            Return set of types of model interfaces that can never be scoped to a contained database.
            </summary>
            <returns>
            Set of types of model interfaces that can be never scoped to a contained database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsApplicationScoped(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Determine if supplied model element class is scoped to a contained database.
            </summary>
            <param name="elementClass">
            Model element class to check.
            </param>
            <returns>
            True if the model element class is scoped to a contained database; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsApplicationScoped(System.Type)">
            <summary>
            Determine if supplied model interface is scoped to a contained database.
            </summary>
            <param name="elementType">
            Model interface type to check.
            </param>
            <returns>
            True if the model interface is scoped to a contained database; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsManagementScoped(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Determine if supplied model element class is never scoped to a contained database.
            </summary>
            <param name="elementClass">
            Model element class to check.
            </param>
            <returns>
            True if the model element class is never scoped to a contained database; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.IsManagementScoped(System.Type)">
            <summary>
            Determine if supplied model interface is scoped to a contained database.
            </summary>
            <param name="elementType">
            Model interface type to check.
            </param>
            <returns>
            True if the model interface is scoped to a contained database; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetApplicationScopedElements(System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass})">
            <summary>
            Return model elements that are scoped to a contained database.
            </summary>
            <param name="skippedClasses">
            Types of model elements that should be excluded from the the returned list.
            </param>
            <returns>
            Enumerable of <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement"/> instances scoped to an application.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetApplicationScopedExternalElements(System.String,System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass})">
            <summary>
            Return model elements defined in external reference specified by <paramref name="externalSourceFileName"/> that are scoped to a contained database.
            </summary>
            <param name="externalSourceFileName">
            Path to file for external model reference.
            </param>
            <param name="skippedClasses">
            Types of model elements that should be excluded from the the returned list.
            </param>
            <returns>
            Enumerable of <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement"/> instances scoped to an application.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.GetManagementScopedElements">
            <summary>
            Return model elements that are not scoped to a contained database
            </summary>
            <returns>Enumerable of <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement"/> instances not scoped to an application</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.PopulateApplicationScopedTypes">
            <summary>
            Returns an array of element types that are application scoped
            </summary>
            <remarks>
            By not defining the type array as static, it can be aggressively GC'd
            when no longer referenced since it is the data structures derived from
            this array that are of interest.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.PopulateServerScopedTypes">
            <summary>
            Returns an array of element types that are server scoped
            </summary>
            <remarks>
            By not defining the type array as static, it can be aggressively GC'd
            when no longer referenced since it is the data structures derived from
            this array that are of interest.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.PopulateManagementScopedTypes">
            <summary>
            Returns an set of element types that are management scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.PopulateScopedClasses(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Return initialized set of classes of model elements that implement the specified interfaces.
            </summary>
            <param name="modelSchema">
            <see cref="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel.ModelSchema"/> instance used to map model element CLR interface types to model element classes.
            </param>
            <param name="types">
            An array of model interfaces.
            </param>
            <returns>
            Set of classes of model elements.
            </returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.DACFX_MODEL_STORAGE_TYPE">
            <summary>
            Name of environment variable that would affect the default model storage type
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.EnvironmentVariableModelStorageType">
            <summary>
            Enum to match the possible values for the DACFX_MODEL_STORAGE_TYPE environment variable
            </summary>
            <remarks>
            Make sure the values are always a subset of ModelStorageType given that we 
            currently cast EnvironmentVariableModelStorageType to ModelStorageType.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.InitializeBuiltIn">
            <summary>
            Get or set option to load built-in elements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.ModelStorageType">
            <summary>
            Get or set option to indicate the type of model storage
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.IsMsdb">
            <summary>
            Get or set option to indicate whether the model is used to represent the MSDB
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.ValidationEnabled">
            <summary>
            Get or set option to run validation rules against the model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.ValidateCasingOnIdentifiers">
            <summary>
            Get or set option to run validating that declaration and reference of identifiers have exact casing
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.ConvertCrossDbRefToWarning">
            <summary>
            Get or set option to convert errors to warnings in module bodies when the reference is cross database
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.StoreSourceCodePositionAnnotations">
            <summary>
            Gets or sets option to store source code position annotations in the model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelConstructor.GetDefaultModelStorageType">
            <summary>
            Gets the default memory storage type.
            When an environment variable named DACFX_MODEL_STORAGE_TYPE is defined,
            we attempt to retrieve the default memory storage type from it. 
            Otherwise, storage type is defaulted to File
            </summary>
            <returns>Default Memory Storage Type</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelException">
            <summary>
            Exception used for Schema Model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelException.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelException.#ctor(System.String)">
            <summary>
            Constructor with a message
            </summary>
            <param name="message">Message to describe the exception</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModelException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with a message and an inner exception
            </summary>
            <param name="message">Message to describe the exception</param>
            <param name="inner">The exception that caused this exception</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.FileImportWasCanceled">
            <summary>
              Looks up a localized string similar to File import was canceled: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.IgnoredSymbolIdentified">
            <summary>
              Looks up a localized string similar to You must choose a name for the object that does not conflict with the external symbols configuration files. The conflicting name is {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptFileInformation">
            <summary>
              Looks up a localized string similar to File name {0} (size: {1}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptFinished">
            <summary>
              Looks up a localized string similar to The script was successfully imported into the project..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptMoveToDeploymentScript">
            <summary>
              Looks up a localized string similar to The following statement was imported into the file {0}.sql, which is a pre-deployment or post-deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptMoveToSchemaObject">
            <summary>
              Looks up a localized string similar to The following statement was imported into the database project as a schema object and named {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptNumberOfBatches">
            <summary>
              Looks up a localized string similar to Total number of batches in script: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptNumberOfStatements">
            <summary>
              Looks up a localized string similar to Total number of statements in script: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptProgressLoading">
            <summary>
              Looks up a localized string similar to Loading SQL fragments.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptProgressParsing">
            <summary>
              Looks up a localized string similar to Parsing import script.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptProgressRetrying">
            <summary>
              Looks up a localized string similar to Validating Identified Objects (Retry Processing).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptProgressUpdating">
            <summary>
              Looks up a localized string similar to Validating Identified Objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.ImportScriptStarted">
            <summary>
              Looks up a localized string similar to Started importing file: {0} .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.MultipleScriptProperties">
            <summary>
              Looks up a localized string similar to The ElementClass &apos;{0}&apos; has multiple properties of type SqlScriptProperty, so it is unclear from which of them to get metadata settings (e.g. Quoted_Identifiers).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.PropertiesFileInvalidVersion">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; has an invalid version of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.Syntax_Error">
            <summary>
              Looks up a localized string similar to Syntax Error: .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.UserInteractionSerivesDatabaseOptions">
            <summary>
              Looks up a localized string similar to Database Options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaResources.UserInteractionSerivesServerOptions">
            <summary>
              Looks up a localized string similar to Server Options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator">
            <summary>
            Sql specific script dom generator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.AlterStatementGenerator.DataTypeGenerator">
            <summary>
            Helper generator to generate data types for columns, parameter, return types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption">
            <summary>
            Defines behavior for generating constraints inline within a CREATE TABLE statement.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.None">
            <summary>
            No model elements will be generated inline, even if annotated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.IgnoreColumnAssociation">
            <summary>
            Model elements associated with a column via the SqlInlineConstraintAnnotation
            will be generated at the table level instead of as part of the column definition.
            </summary>
            <remarks>
            This is useful for deployment since we aren't interested in preserving user intent
            with regards to the form of the generated SQL.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Annotated">
            <summary>
            Model elements annotated with SqlInlineConstraintAnnotation will be generated inline.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Primary">
            <summary>
            Model element of type SqlPrimaryKeyConstraint will be generated inline regardless of annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Unique">
            <summary>
            Model element of type SqlUniqueConstraint will be generated inline regardless of annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Foreign">
            <summary>
            Model element of type SqlForeignKeyConstraint will be generated inline regardless of annotation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Check" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.Default" -->
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.MemoryOptimizedObject">
            <summary>
            Should all elements on memory-optimized tables be inlined.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.MemoryOptimizedObjectExceptForeignAndCheck">
            <summary>
            Inline all the elements on memory-optimized tables except foreign key and check constraint.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption.EdgeConstraint">
            <summary>
            Edge constraints.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GetOptionFlagsFromMode(Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode)">
            <summary>
            Converts a given mode to the corresponding option flags.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.IsElementIncludedInParentScript(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Evaluates whether an element is included in the creation script of its parent.
            </summary>
            <param name="element">A possibly null model element.</param>
            <returns>True if element isn't null and the parent's generated AST includes the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.IsInlineConstraintOptionSet(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsOption,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Determines if the constraint should be inlined or not.
            </summary>
            <param name="constraint">The sql constraint.</param>
            <param name="inlineConstraintsFlags">The constraint flags.</param>
            <param name="table">The parent table.</param>
            <returns>True indicates the constraint should be inlined.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.Initialize">
            <summary>
            Register delegates for each ElementClass
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate create statement for passed in model element.
            </summary>
            <param name="modelElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddTableOptionStatements(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Adds option statements inside batches to the script. This statement helper can be overridden
            to add additional/version-specific options.
            </summary>
            <param name="script">Script to which the statements should be added</param>
            <param name="tableElement">Table element for which the statement is being generated</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateExternalTableColumns(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable,Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement)">
            <summary>
            Generates external table column statement for the specified external table model element.
            </summary>
            <param name="externalTable">The external table model element.</param>
            <param name="statement">The CreateExternalTableStatement AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.isTemporal(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Indicates whether this table is a temporal table or not.
            Generated always row columns can only be specified for temporal tables.
            </summary>
            <param name="tableElement">Table element.</param>
            <returns>True if this is a temporal table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddLedger(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Adds the ledger option if this is a ledger table (updatable or append only).
            </summary>
            <param name="script">Script.</param>
            <param name="tableElement">Table.</param>
            <param name="statement">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddLedgerSystemVersioning(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement)">
            <summary>
            Adds system versioning to an updatable ledger table.
            </summary>
            <param name="tableElement">Updatable ledger table.</param>
            <param name="statement">Create table statement.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddLedgerView(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.LedgerTableOption)">
            <summary>
            Adds the ledger view name and the ledger view column names to a ledger table.
            </summary>
            <param name="tableElement">Ledger table.</param>
            <param name="lo">Ledger table option.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.DropLedgerTemporalHistoryTableIndex(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateColumnDefinition(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn,System.Boolean,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlConstraint}@)">
            <summary>
            Helper methods to generate one ColumnDefinition for column include inline constraints.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateExternalTableColumnDefinition(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumn)">
            <summary>
            Generate the external table column definition statement for the specified column model element.
            </summary>
            <param name="column">The SqlColumn model element.</param>
            <returns>The ExternalTableColumnDefinition AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetComputedColumnProperties(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlComputedColumn,Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableColumnDefinition)">
            <summary>
            Set the computed column properties for the external table column definition statement.
            </summary>
            <param name="column">The SqlComputedColumn object.</param>
            <param name="externalTableColumnDefinition">The ExternalTableColumnDefinition AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetSimpleColumnProperties(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableColumnDefinition)">
            <summary>
            Set the simple column properties for the external table column definition statement.
            </summary>
            <param name="column">The SqlSimpleColumn object.</param>
            <param name="externalTableColumnDefinition">The ExternalTableColumnDefinition AST node.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateEdgeConstraintStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates the TSQL script associated with the SqlEdgeConstraint.
            </summary>
            <param name="element">The 'SqlEdgeConstraint' model element.</param>
            <returns>The script for creating the edge constraint.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddAlterTableSetSystemVersioningStep(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName)">
            <summary>
            Creates the Alter table set sys version on statement 
            </summary>
            <param name="script">The script to append a statement to.</param>
            <param name="tableElement">The table model element.</param>
            <param name="tableName">The table object name.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddDataClassification(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Boolean@)">
            <summary>
            Creates the TSQL script associated with the data classification.
            </summary>
            <param name="script">The script to append a statement to.</param>
            <param name="element">The table model element.</param>
            <param name="hasSensitivityClassification">bool value to check if dataclassification statement exists.</param>
            <returns>The script for adding the sensitivity classification.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddIdentityReseed(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Creates the TSQL script associated with the data classification.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.IsInlineConstraint(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.CreateTableInlineConstraintsMode)">
            <summary>
            Helper method to determine whether an element would be created inline. Used by SSDT and public model code.
            </summary>
            <param name="element">The element to test</param>
            <param name="mode">The inline constraint mode</param>
            <returns>true if the element would be created inline</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.CreateEdgeConstraint(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEdgeConstraint)">
            <summary>
            This method converts a 'SqlEdgeConstraint' object into the associated
            'GraphConnectionConstraintDefinition' object. The 'GraphConnectionConstraintDefinition' is the
            DOM representation.
            </summary>
            <param name="constraint">The constraint to convert.</param>
            <returns>The DOM object representing the edge constraint.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.IsNonDefaultValue(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.Object)">
            <returns><code>true</code>when the property is supported on current platform and the value if other than default, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetProcedureBody(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlProcedure,Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBody)">
            <summary>
            Sets the options, parameters and body of a subroutine (e.g. PROC, FUNCTION, etc)
            </summary>
            <param name="procedure">The procedure</param>
            <param name="statement">The statement being generated</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetProcedureBodyStatements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlProcedure,Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBody)">
            <summary>
            Sets the body statements of the procedure.
            </summary>
            <param name="procedure">The procedure</param>
            <param name="statement">The statement being generated</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetProcedureStatementOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlProcedure,Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBody)">
            <summary>
            Sets the various statement options defined by the specified SqlProcedure
            </summary>
            <param name="procElement">SqlProcedure describing the procedure being generated</param>
            <param name="statementBody">The procedure's statement body</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateExternalDataSourceStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate a create external data source statement from a given model element.
            </summary>
            <param name="element">The model element.</param>
            <returns>The generated CreateExternalDataSourceStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateExternalDataSourceLiteralOrIdentifierOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOptionKind,Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrValueExpression)">
            <summary>
            Generates an external data source literal or identifier option.
            </summary>
            <param name="optionKind">The external data source option kind.</param>
            <param name="value">The identifier or value expression.</param>
            <returns>An external data source literal or identifier option.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateExternalFileFormatStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate a create external file format statement from a given model element.
            </summary>
            <param name="element">The model element.</param>
            <returns>The generated CreateExternalFileFormatStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateExternalStreamStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate a create external file format statement from a given model element.
            </summary>
            <param name="element">The model element.</param>
            <returns>The generated CreateExternalFileFormatStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateExternalTableStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate a create external table statement from a given model element.
            </summary>
            <param name="element">The model element.</param>
            <returns>The generated CreateExternalFileFormatStatement AST node.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddShardingColumnToShardedDistributionPolicy(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTable,Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableShardedDistributionPolicy)">
            <summary>
            Adds the identifier of the sharding column to the sharded distribution policy.
            </summary>
            <param name="externalTable">The external table element.</param>
            <param name="shardedDistributionPolicy">The sharded distribution policy object.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.CreateExternalTableDistributionPolicy(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTableDistributionPolicyType)">
            <summary>
            Gets the external table distribution policy from a model relationship entry.
            </summary>
            <param name="externalTableDistributionPolicyType">The model relationship entry for the external distribution policy.</param>
            <returns>The external table distribution policy.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateExternalTableLiteralOrIdentifierOption(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOptionKind,Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrValueExpression)">
            <summary>
            Generates an external table literal or identifier option.
            </summary>
            <param name="optionKind">The external table option kind.</param>
            <param name="value">The identifier or value expression.</param>
            <returns>An external table literal or identifier option.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateExternalTableRejectType(Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRejectType)">
            <summary>
            Generates an external table reject type AST fragment.
            </summary>
            <param name="rejectType">External table reject type.</param>
            <returns>External table reject type AST fragment.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateCreateExternalStreamingJobStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates the TSQL script associated with the SqlExternalStreamingJob.
            </summary>
            <param name="element">The 'SqlExternalStreamingJob' model element.</param>
            <returns>The script for creating the external streaming job.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.SetSqlTriggerStatementAndBody(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTrigger,Microsoft.SqlServer.TransactSql.ScriptDom.TriggerStatementBody)">
            <summary>
            Sets the trigger body and options for a CREATE or ALTER TRIGGER statement.
            </summary>
            <param name="trigger">Trigger model element describing the new/modified trigger</param>
            <param name="statement">Statement describing the new/modified trigger</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.CreateRevokeStatementForExcludedColumns(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry},System.Boolean)">
            <summary>
            Create REVOKE permission statement used to explicitly revoke a column's permission, or GRANT OPTION for permission, inherited from parent.
            </summary>
            <param name="permissionStatement">
            Permission element for permission applied to parent object.
            </param>
            <param name="revokeColumns">
            Enumerable of relationship entries for columns for which permissions, or GRANT OPTION for permissions, are being revoked.
            </param>
            <param name="isGrantOptionRevoke">
            True if GRANT OPTION for a permission is being revoke from column;
            otherwise false if permission itself is being revoked (which includes any GRANT OPTION that may have been inherited).
            </param>
            <returns>REVOKE permission statement that applies to the columns.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.CreateRevokeStatement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement)">
            <summary>
            Create REVOKE permission statement used to "drop" existing GRANT or DENY statement.
            </summary>
            <param name="permissionStatement">
            The permission element whose permission is to be revoked.
            </param>
            <returns>REVOKE permission statement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.GenerateAddSignatureStatment(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Creates a statement that adds a digital signature to a stored procedure, function, trigger or assembly.
            </summary>
            <param name="script">Script to which the ADD SIGNATURE supporting statments should be added</param>
            <param name="element">Element describing the signature to be generated</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.CreateStatementGenerator.AddInlineConstraints(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFileTable)">
            <summary>
            All "inline" constraints for a filetable are actually generated as "ALTER TABLE"
            supporting statements.  This is due to the syntax of the CREATE TABLE ... AS FILETABLE,
            which does not allow the specification of columns or constraints.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.Schema">
            <summary>
            The model schema associated with this generator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.KeepBodyScriptFormat">
            <summary>
            Controls whether script formatting is preserved.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.RestoreSequenceCurrentValue">
            <summary>
            Controls whether sequence objects have their current value restored
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GetTargetDboUserSecurityId">
            <summary>
            Provides security id (SID) of the dbo user in the target database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GetTargetPlatform">
            <summary>
            Provides target platform information
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.InlineConstraintsMode">
            <summary>
            Controls generation of inline constraint when generating CreateTable statement.
            By default all constraints are generated inline.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.ExternalUserMode">
            <summary>
            Controls whether script-generation creates Azure Active Directory users
            with "FROM EXTERNAL PROVIDER" or SID/Type syntax (in the event that both SID and Type are known).
            By default, SID/Type syntax is used.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.SupportingStatementOption">
            <summary>
            Supporting statement options enable callers to request statments with or without supporting 
            statements (e.g. permissions) or JUST supporting statements (if any).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.ReplaceFilegroupReferencesWithPrimary">
            <summary>
            Controls whether or not to change the Custom File Groups References to Primary at the time of Syntax generation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.UseLegacyRoleSyntax">
            <summary>
            Controls whether Denali syntax is generated for adding and removing role memberships when set (false/default);
            otherwise, the legacy syntax (sp_addrolemember, sp_droprolemember) is generated (true).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate create statement
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate drop statement
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate alter statement
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.GenerateScriptDom(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomOperation)">
            <summary>
            SqlScriptDomGenerator implementations can create "Create", "Alter" or "Drop" versions of statements based on incoming model element.
            If the statement is not supported for passed in element, null will be returned.
            </summary>
            <param name="element">Specifies the element.</param>
            <param name="operation">Specifies the ScriptDom Generation Operation.</param>
            <returns> 
            Created script dom for the given element and given operation.  Null will be returned if statement generation is 
            not supported for the operation.
            </returns>
            <exception cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomGeneratorException">
            ScriptDomGeneratorException will be thrown if statement generation is not supported for passed in elements.
            </exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.TryGenerateScriptDom(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomOperation,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript@)">
            <summary>
            SqlScriptDomGenerator implementations can create "Create", "Alter" or "Drop" versions of statements based on incoming model element.
            If the statement is not supported for passed in element, null will be returned.
            </summary>
            <param name="element">Specifies the element.</param>
            <param name="operation">Specifies the ScriptDom Generation Operation.</param>
            <param name="fragment">
            Created script dom for the given element and given operation.  Null will be returned if statement generation is 
            not supported for the operation.
            </param>
            <returns> True if the operation is supported for passed in elements, false if not supported.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.IsSupported(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomOperation)">
            <summary>
            Check to see if the ScriptDom operation is supported for this element type.
            </summary>
            <param name="elementClass">The element type</param>
            <param name="operation">The ScriptDom generation operation</param>
            <returns>True if the operation is supported for generating the ScriptDom for passed in element type</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.MergeFragments(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment[])">
            <summary>
            Merge several TSqlFragment into one TSqlFrament.
            If parameters are statements, it will be wrapped into batch and return TSqlScript.
            If parameters are batches, it will be wrapped into TSqlScript.
            </summary>
            <param name="fragments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.ConvertFragmentToScriptFragment(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Perform necessary conversions to transform a SQL Fragment to a script fragment.
            </summary>
            <param name="fragment">SQL Fragment to be converted (may be TSqlScript, TSqlBatch or TSqlStatement)</param>
            <returns>TSqlScript fragment containing one or more Batches containing one or more Statements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.DropStatementGenerator.Initialize">
            <summary>
            Register delegates for each ElementClass
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.DropStatementGenerator.GenerateStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Generate drop statement for passed in model element.
            </summary>
            <param name="modelElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.DropStatementGenerator.GenerateAlterTableDropStatement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>Generate Alter Table Drop statement for columns and constraints.</summary>
            <param name="modelElement">Model element representing a column or constraint to alter</param>
            <returns>Sql Fragment representing the alter statement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.CreateObjectNameString(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns a string representation of a schema object name, from a specified object name scope.
            </summary>
            <param name="objectName">Source object's name</param>
            <returns>The (escaped and encoded) object name as a string</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.ConvertAstToString(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Returns a string representation of an AST fragment.
            </summary>
            <param name="modelStore">The model store representing the target database from which we obtain the correct Script Generator</param>
            <param name="fragment">The AST fragment to be converted to a string</param>
            <returns>String representation of an AST fragment</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.GenerateStatementForSysCommentsObject(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty,System.Boolean)">
            <summary>
            Generate a statement for a sys comments object. If the script portions for the original header / footer are stored
            along with the element and consistent with the model element, the method generates an AST to represent the original script;
            otherwise, the method returns null.
            </summary>
            <param name="element">The model element hosting the annotation that keeps the original header / footer script</param>
            <param name="scriptProperty">The Script Property that holds the body script</param>
            <param name="generateCreateStatement">To indicate to generate a CREATE statement or ALTER statement</param>
            <returns>TSqlStatement hosting the statement that represents the original script if valid header / footer is stored with the element; null otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.GenerateBatchForSysCommentsObject(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty,System.Boolean)">
            <summary>
            Generate a batch for a sys comments object. If the script portions for the original header / footer are stored
            along with the element and consistent with the model element, the method generates an AST to represent the original script;
            otherwise, the method returns null.
            </summary>
            <param name="element">The model element hosting the annotation that keeps the original header / footer script</param>
            <param name="scriptProperty">The Script Property that holds the body script</param>
            <param name="generateCreateStatement">To indicate to generate a CREATE statement or ALTER statement</param>
            <returns>TSqlBatch hosting the statement that represents the original script if valid header / footer is stored with the element; null otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.GetExtendedPropertyParameters(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExtendedProperty)">
            <summary>
            Returns a list of parameters used for creating an Extended Property.
            </summary>
            <param name="extendedProperty">Extended Parameter to collect parameters from</param>
            <returns>List of parameters as name-value strings</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGenerator.StatementGenerator`1.GetExtendedPropertyParametersFromHostElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Returns a list of parameters used for creating an Extended Property, using the provided host element.
            </summary>
            <param name="hostElement">Extended Property's host element</param>
            <returns>List of parameters as name-value strings</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor">
            <summary>
            A constructor class that has options that defines a sql dom generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.KeepBodyScriptFormat">
            <summary>
            Controls whether script formatting is preserved.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.InlineConstraintsMode">
            <summary>
            Controls how inline constraints are specified when generating CREATE TABLE statement.
            By default all constraints are generated as modeled (ConstraintGenerationMode.ModelFidelity).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.ExternalUserMode">
            <summary>
            Controls whether script-generation creates Azure Active Directory users
            with "FROM EXTERNAL PROVIDER" or SID/Type syntax (in the event that both SID and Type are known).
            By default, SID/Type syntax is used.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.SupportingStatementOption">
            <summary>
            Supporting statement options enable callers to request statments with or without supporting 
            statements (e.g. permissions) or JUST supporting statements (if any).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.UseLegacyRoleSyntax">
            <summary>
            Controls whether Denali syntax is generated for adding and removing role memberships when set (false/default);
            otherwise, the legacy syntax (sp_addrolemember, sp_droprolemember) is generated (true).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.ReplaceFilegroupReferencesWithPrimary">
            <summary>
            Controls whether or not to change the Custom File Groups References to Primary at the time of Syntax generation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.RestoreSequenceCurrentValue">
            <summary>
            Controls whether sequence objects have their current_value property set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.GetTargetDboUserSecurityId">
            <summary>
            Provides security id (SID) of the dbo user in the target database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.GetTargetPlatform">
            <summary>
            Provides target platform information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor.GetTargetSupportsContainment">
            <summary>
            Provides database cointained compatibility.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter">
            <summary>
            This class is used to brief analyze the script and get the destination of the script,
            either SchemaObject, or pre-deployment script, or post-deployment script, or regular scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.GetScriptDestination(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            Get the script destination of the passed in sql statement.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.IsServerType(System.Type)">
            <summary>
            Is this element type a server type?
            </summary>
            <param name="elementType"></param>
            <returns>True if the element is a server type</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.GetStatementFromIFStatement(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            If the statement is an IF statement, we will recursively looking into 
            it and get the real statement, otherwise just return that statement.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.AddExistenceTestWrapper(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,System.String)">
            <summary>
            ADD EXISTENCE TEST WRAPPER
                This routine will wrap an IF NOT EXISTS test around various scripted
                SQL routines to assure that pre- and post- deployment scripts can be
                run multiple times successfully. Note that we only provide support for
                items that we ourselves script
            </summary>
            <param name="statement">The TSqlStatement being wrapped</param>
            <param name="statementScript">The actual test of the SQL</param>
            <returns>A string with the SQL Statement wrapped in an existence test.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.AddIfNotExistsByName(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.Identifier,System.String)">
            <summary>
            ADD IF NOT EXISTS BY NAME
                Add an IF NOT EXISTS clause around the System Object in question. The enclosed SQL
                statement will only be executed if the System Object does not already exist. This 
                routine manages Identifiers rather than schemaObjects
            </summary>
            <param name="statementScript">The original SQL Script being enclosed</param>
            <param name="identifier">The Identifier being tested for existence</param>
            <param name="systemViewName">The system view being tested for the existence of the Identifier</param>
            <returns>a string containing the complete original Statement wrapped with the conditional</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.AddExistenceTestForExtendedProperties(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement)">
            <summary>
            ADD EXISTENCE TEST FOR EXTENDED PROPERTIES
            </summary>
            <param name="statementString"></param>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.BuildExtendedPropertiesParameterString(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,System.String)">
            <summary>
            BUILD EXTENDED PROPERTIES PARAMETER STRING
                Build up the strings necessary to support testing and dropping Extended Properties
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilter.GetPositionalParametersForExtendedProperties(Microsoft.SqlServer.TransactSql.ScriptDom.ExecutableProcedureReference,System.String,System.Int32)">
            <summary>
            GET POSITIONAL PARAMETERS FOR EXTENDED PROPERTIES 
                This return a positional string array of the properties associated with an extended property,
                even if the original parameters were defined by name
            </summary>
            <param name="execProcRef"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilteredResult">
            <summary>
            This class is used to store analysis result of a sql statement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilteredResult.Destination">
            <summary>
            Script destination of this script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptFilteredResult.Script">
            <summary>
            String representation of this script.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="cacheIdentifier">The filename or other cache identifier</param>
            <param name="offset">The start offset.</param>
            <param name="length">The length.</param>
            <param name="element">The element for this source.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Construct the source using a script
            </summary>
            <param name="script"></param>
            <param name="ansiNulls">ANSI_NULLS setting; null means "doesn't matter"</param>
            <param name="quotedIdentifiers">QUOTED_IDENTIFER setting; null means "doesn't matter"</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.#ctor(System.String)">
            <summary>
            Construct the source using a script
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.#ctor(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Construct the source using a ScriptFragment
            </summary>
            <param name="fragment"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.CacheIdentifier">
            <summary>
            The filename or other unique cache identifier indicating where the property originates from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.Offset">
            <summary>
            The offset in characters where the property started in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.Length">
            <summary>
            The length in characters of the property in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.QuotedIdentifiers">
            <summary>
            The QuotedIdentifiers setting for the script.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.AnsiNulls">
            <summary>
            The AnsiNulls setting for the script.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.Script">
            <summary>
            The script that caused the generation of this file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.ScriptDom">
            <summary>
            The script dom representation of the element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptProperty.GetBooleanMetadata(Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache,System.String,System.String)">
            <summary>
            Retrieve a boolean metadata value from a ScriptCache.
            </summary>
            <remarks>Does the translation from a dictionary of strings to a bool?.  If the cache or value isn't present, returns null.</remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessDatabaseModelOptions">
            <summary>
            This is the data transfer class which moves database options from
            the project to the model builder.
            </summary>
            
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessInterpreter">
            <summary>
            Interprets TSql fragments to define the schema that would be generated.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessReverseEngineerImpl">
            <summary>
            The class to perform importing database schema and settings for SQL Serverless
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessReverseEngineerImpl.GetDatabaseModelOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseOptions)">
            <summary>
            Return the model options (corresponding to the re'ed SqlDatabaseOptions)
            for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessReverseEngineerPopulatorGenerator.RegisterSqlEdgeConstraintPopulators(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ReverseEngineerPopulators.PopulatorInstanceManager,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerRequest,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerSingleElementRequest)">
            <summary>
            Registers the edge constraint populator generator. This must be registered to be used
            for reverse engineering.
            </summary>
            <param name="instanceManager">The instance manager to use.</param>
            <param name="dataSchemaModel">The data schema model to use.</param>
            <param name="option">The reverse engineering options to use.</param>
            <param name="isFull">True indicates a full reverse engineer.</param>
            <param name="request">The associated request.</param>
            <param name="singleElementBatch">The single batch request.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessScriptDomGenerator">
            <summary>
            SqlServerless specific Script DOM Generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessScriptDomGenerator.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlScriptDomGeneratorConstructor)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessScriptDomGenerator.GeneratorForCreateStatement">
            <summary>
            Generator used to generate SqlServerless statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessScriptDomGenerator.GeneratorForDropStatement">
            <summary>
            Generator used to generate SqlServerless DROP statements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessScriptDomGenerator.GeneratorForAlterStatement">
            <summary>
            Generator used to generate SqlServerless ALTER statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessStatementFilterVisitor">
            <summary>
            Tests that ensure invalid syntax is filtered out and valid syntax is allowed through
            can be found in UTData's SqlServerlessStatementFilterTests class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessStatementFilterVisitor.ExplicitVisit(Microsoft.SqlServer.TransactSql.ScriptDom.ColumnStorageOptions)">
            <summary>
            Exclude column definitions that specify filestream.
            </summary>
            <param name="node"></param>
            <remarks>
            Below is example of column definition that is not supported.
            
            <code>
            CREATE TABLE [T1]
            (
                fileStreamColumn varbinary(max) FILESTREAM
            )
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessStatementFilterVisitor.EvaluateSpAddMessage(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Custom error messages are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServerlessStatementFilterVisitor.EvaluateSpAddExtendedProc(Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement)">
            <summary>
            Extended stored procedures are not supported.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation">
            <summary>
            Serves information about a model element's source.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.#ctor(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.SourceName">
            <summary>
            The filename or other unique cache identifier indicating where the element originates from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.Offset">
            <summary>
            The offset in characters where the element started in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.Length">
            <summary>
            The length in characters of the element in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.Script">
            <summary>
            The script that caused the generation of this file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.ScriptDom">
            <summary>
            The script dom representation of the corresponding entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSourceInformation.GetScriptDom(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Int32,System.Int32)">
            <summary>
            Helper function that finds the child that matches the given offset and length.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSupportingStatementCategory">
            <summary>
            Supporting statement's category used by ImportManager to categorize those supporting
            statements and sort statements in same category together. Script import code is reusing
            the supporting id to identify the relationship between elements and merge them together
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SupportingStatementOption">
            <summary>
            Option to indicate how to process supporting statements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SysCommentsObjectScriptSplitter">
            <summary>
             The immutable class is used find out the header portion, the body portion, and the footer portion from
             a create statement for proc, function, trigger, or view (whose definition scripts are stored in sys.syscomments table)
             Also used for finding out header, body and footer portion from CREATE TABLE AS SELECT statement.
             
             The footer portion is only applicable for CREATE VIEW, CREATE TABLE AS SELECT which is the part after the SELECT statement
             
             The class doesn't work for CLR-implemented objects
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SysCommentsObjectScriptSplitter.FindFirstHeaderTokenIndex(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.Int32)">
            <summary>
            Find the index for the first token of the current batch
            The current batch starts at the beginning of the current script if the script has only one batch,
            or the line immediately following the last GO (possible comments or space after the GO at the same are exclused)
            </summary>
            <param name="tokens">Token stream for the containing script</param>
            <param name="firstNonSpaceHeaderTokenIndex">Index for the first non-comment non-space token of the statement</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SysCommentsObjectScriptSplitter.FindFirstProceedingSpaceTokenIndex(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.Int32)">
            <summary>
            Find the index for the first space / comment token before a given token
            </summary>
            <param name="tokens">Token stream for the containing script</param>
            <param name="tokenIndex">Index of the token</param>
            <returns>The index for the first space / comment token before a given token 
            or the index of the given token if no space / comment token exists before the given token</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SysCommentsObjectScriptSplitter.FindNextNonSpaceTokenIndex(System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.Int32)">
            <summary>
            Find the index of the non-space and non-comment token that immediately follows the given token
            with ignoring trailing whitespace and newlines
            </summary>
            <param name="tokens">Token stream for the containing script</param>
            <param name="tokenIndex">The index of the token</param>
            <returns>The index of the non-space and non-comment token that immediately follows the given token 
            or the last token index if there is no token after the gvien token</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SysCommentsObjectScriptValidator">
            <summary>
            The class is used to validate the consistency of the information of a sys comments object
            that is represented by its model element and its script
            This class only works for sys comments objects
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TableConstraintComparer">
            <summary>
            Comparer for ordering table constraints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ThreePartNameReferenceAnnotation">
            <summary>
            Class to contain only those annotations that have three part name reference 
            And do not get resolved as SqlModelBuilderResolvableAnnotation
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.VariableParameterFilterSchemaAnalyzer">
            <summary>
            The Schema Analyzer that filters out model-building related message (IdentifiedElement and IdentifiedRelationship) and the messages for visiting variable parameters
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlLockEscalationMethod">
            <summary>
            The types of lock escalation methods
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAuthenticationModes">
            <summary>
            SQL Server 2005 authentication mode
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlCharacterSet">
            <summary>
            Possible character sets for SOAP endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseMirroringRoleType">
            <summary>
            Database mirroring role types for SQL Server 2005
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabasePageVerifyMode">
            <summary>
            Database page verify mode for SQL Server 2005
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEncryptionMode">
            <summary>
            Encryption mode for service broker endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlGenericDatabaseScopedConfigurationValueType">
            <summary>
            Allowable generic database scoped configuration value types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlHttpPorts">
            <summary>
            Listening port types associated with an endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlLoginType">
            <summary>
            Possible values for LOGIN_TYPE option in SOAP endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlParameterizationOption">
            <summary>
            Parameterization options for database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServiceBrokerEncryptionAlgorithm">
            <summary>
            Possible encryption algorithm options for service broker endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlServiceBrokerOption">
            <summary>
            Possible service broker options for database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSoapFormatType">
            <summary>
            Possible webmethod formats for SOAP endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSoapSchemaType">
            <summary>
            Possible schema options for webmethods in SOAP endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAssemblyPermissionSet">
            <summary>
            Possible permission sets for an assembly
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAsymmetricKeyAlgorithm">
            <summary>
            Algorithm for an asymmetric keys
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAuditActionGroupKind">
            <summary>
            SQL Server audit action groups
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlAuditTarget">
            <summary>
            SQL Server audit targets
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlChangeTrackingOption">
            <summary>
            Change tracking options
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnEncryptionType">
            <summary>
            Encryption type used on a column for Always Encrypted
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlCreationDisposition">
            <summary>
            Asymmetric key creation disposition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseAuditAction">
            <summary>
            Database-level auditable action
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseRecoveryMode">
            <summary>
            Database recovery mode
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseDelayedDurabilityMode">
            <summary>
            Database Delayed Durability mode
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDatabaseUserAccess">
            <summary>
            User access mode for the database
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataCompressionLevel">
            <summary>
            Compression level for data
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDegree">
            <summary>
            Grid density level in spatial index
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEndpointState">
            <summary>
            State of the endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventGroup">
            <summary>
            Sql event groups
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventSessionScope">
            <summary>
            Scope of the event session
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventSessionMemoryPartitionMode">
            <summary>
            Memory partion mode for event session
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventSessionRetentionMode">
            <summary>
            Event retention mode for event session
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlEventType">
            <summary>
            Sql Server event types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSourceType">
            <summary>
            External data source type options
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalDataSourcePushdownOption">
            <summary>
            External data source pushdown option
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalFileFormatType">
            <summary>
            External file format type options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTableRejectType">
            <summary>
            External table reject type options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlForeignKeyAction">
            <summary>
            Actions taken when a key to which existing foreign key points is updated or deleted
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlGridTessellation">
            <summary>
            Grid tessellation in spatial index
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlLoginEncryptionOption">
            <summary>
            SQL login encryption options
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlMemoryUnit">
            <summary>
            Memory units for use in SQL models
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlMessageSentByType">
            <summary>
            Specifies message sender type
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlMessageValidationMethod">
            <summary>
            Specifies message validation method
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPartitionRange">
            <summary>
            Specifies to which side of interval, left or right, the boundary value belongs
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPayloadType">
            <summary>
            Payload types for endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermission">
            <summary>
            Sql permissions
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionAction">
            <summary>
            SQL permission action types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPrimaryXmlIndexUsage">
            <summary>
            Types of secondary XML index
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlProtocolType">
            <summary>
            Protocol types for endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableDurability">
            <summary>
            Durability of a table
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableDurability.SchemaAndData">
            <summary>
            Table is durable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableDurability.SchemaOnly">
            <summary>
            Table is non-durable.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableLedgerType">
            <summary>
            Models the ledger type of a table.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableLedgerType.NonLedgerTable">
            <summary>
            Table is a non-ledger table.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableLedgerType.HistoryTable">
            <summary>
            Table is a history table of a ledger table.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableLedgerType.UpdatableLedgerTable">
            <summary>
            Table is an updatable ledger table.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableLedgerType.AppendOnlyLedgerTable">
            <summary>
            Table is an append-only ledger table.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlViewLedgerType">
            <summary>
            Models the ledger type of a view.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlViewLedgerType.NonLedgerView">
            <summary>
            View is not a ledger view.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlViewLedgerType.LedgerView">
            <summary>
            View is a ledger view.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType">
            <summary>
            Column system-versioned generated always type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.None">
            <summary>
            Column is not a generated always type of column.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsRowStart">
            <summary>
            Column has a type of 'generated always as row start'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsRowEnd">
            <summary>
            Column has a type of 'generated always as row end'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsTransactionIdStart">
            <summary>
            Column has a type of 'generated always as transaction_id start'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsTransactionIdEnd">
            <summary>
            Column has a type of 'generated always as transaction_id end'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsSequenceNumberStart">
            <summary>
            Column has a type of 'generated always as sequence_number start'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGeneratedAlwaysType.GeneratedAlwaysAsSequenceNumberEnd">
            <summary>
            Column has a type of 'generated always as sequence_number end'.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit">
            <summary>
            Temporal table retention policy unit type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Undefined">
            <summary>
            Retention undefined - non-temporal table.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Infinite">
            <summary>
            Infinite (not specified) retention.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Day">
            <summary>
            Retention defined in days.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Week">
            <summary>
            Retention defined in weeks.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Month">
            <summary>
            Retention defined in months.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.TemporalHistoryRetentionPeriodUnit.Year">
            <summary>
            Retention defined in years.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTimeUnit">
            <summary>
            Describes the unit for retention period.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlStatisticsSamplingStyle">
            <summary>
            Sampling styles used to create statistics
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSymmetricKeyAlgorithm">
            <summary>
            Algorithms used for symmetric keys
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTriggerOrderRestriction">
            <summary>
            Trigger oder restriction types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTriggerType">
            <summary>
            Trigger types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType">
            <summary>
            Database user Authentication type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType.None">
            <summary>
            User without a login, Application Role, Database Role,  Certificate mapped user or Asymmetric key mapped user
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType.InstanceAuthentication">
            <summary>
            User with login 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType.DatabaseAuthentication">
            <summary>
            User with a password
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType.WindowsAuthentication">
            <summary>
            Windows user with login, Windows user without a login or Windows group
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserAuthenticationType.ExternalAuthenticationProvider">
            <summary>
            User supplied by an external authentication provider (e.g. Azure Active Directory).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserType">
            <summary>
            User type (for use with Azure active directory users).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserType.None">
            <summary>
            No specified Azure active directory user type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserType.ExternalUser">
            <summary>
            An Azure active directory user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUserType.ExternalGroup">
            <summary>
            An Azure active directory group.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType">
            <summary>
            SQL Server built-in data types
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Unknown">
            <summary>
            Nothing was defined.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.BigInt">
            <summary>
            Integer (whole number) data from -2^63 (-9,223,372,036,854,775,808) through 2^63-1 (9,223,372,036,854,775,807).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Int">
            <summary>
            Integer (whole number) data from -2^31 (-2,147,483,648) through 2^31 - 1 (2,147,483,647).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.SmallInt">
            <summary>
            Integer data from -2^15 (-32,768) through 2^15 - 1 (32,767).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.TinyInt">
            <summary>
            Integer data from 0 through 255.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Bit">
            <summary>
            Integer data with either a 1 or 0 value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Decimal">
            <summary>
            Fixed precision and scale numeric data from -10^38 +1 through 10^38 -1.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Numeric">
            <summary>
            Functionally equivalent to decimal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Money">
            <summary>
            Monetary data values from -2^63 (-922,337,203,685,477.5808) through 2^63 - 1 (+922,337,203,685,477.5807), with accuracy to a ten-thousandth of a monetary unit.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.SmallMoney">
            <summary>
            Monetary data values from -214,748.3648 through +214,748.3647, with accuracy to a ten-thousandth of a monetary unit.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Float">
            <summary>
            Floating precision number data with the following valid values: -1.79E + 308 through -2.23E - 308, 0 and 2.23E + 308 through 1.79E + 308.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Real">
            <summary>
            Floating precision number data with the following valid values: -3.40E + 38 through -1.18E - 38, 0 and 1.18E - 38 through 3.40E + 38.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.DateTime">
            <summary>
            Date and time data from January 1, 1753, through December 31, 9999, with an accuracy of three-hundredths of a second, or 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.SmallDateTime">
            <summary>
            Date and time data from January 1, 1900, through June 6, 2079, with an accuracy of one minute.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Char">
            <summary>
            Fixed-length non-Unicode character data with a maximum length of 8,000 characters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.VarChar">
            <summary>
            Variable-length non-Unicode data with a maximum of 8,000 characters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Text">
            <summary>
            Variable-length non-Unicode data with a maximum length of 2^31 - 1 (2,147,483,647) characters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.NChar">
            <summary>
            Fixed-length Unicode data with a maximum length of 4,000 characters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.NVarChar">
            <summary>
            Variable-length Unicode data with a maximum length of 4,000 characters. sysname is a system-supplied user-defined data type that is functionally equivalent to nvarchar(128) and is used to reference database object names.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.NText">
            <summary>
            Variable-length Unicode data with a maximum length of 2^30 - 1 (1,073,741,823) characters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Binary">
            <summary>
            Fixed-length binary data with a maximum length of 8,000 bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.VarBinary">
            <summary>
            Variable-length binary data with a maximum length of 8,000 bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Image">
            <summary>
            Variable-length binary data with a maximum length of 2^31 - 1 (2,147,483,647) bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Cursor">
            <summary>
            A reference to a cursor.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Variant">
            <summary>
            A data type that stores values of various SQL Server-supported data types, except text, ntext, timestamp, and sql_variant.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Table">
            <summary>
            A special data type used to store a result set for later processing.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Timestamp">
            <summary>
            A database-wide unique number that gets updated every time a row gets updated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.UniqueIdentifier">
            <summary>
            Is a 16-byte GUID
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Xml">
            <summary>
            xml data type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Date">
            <summary>
            Date-only
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Time">
            <summary>
            Time only
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.DateTime2">
            <summary>
            Combination of data and time types, better precision than DataTime
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.DateTimeOffset">
            <summary>
            Same as DateTime2 with timezone offset added
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDataType.Rowversion">
            <summary>
            (Alias for Timestamp) A database-wide unique number that gets updated every time a row gets updated.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlXmlDataTypeStyle">
            <summary>
            XML data type style
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.DatabaseContainment">
            <summary>
            Database Containment types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.CatalogCollationType">
            <summary>
            Catalog collation types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AuditFailureAction">
            <summary>
            Action type for audit failure
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlNonTransactedFileStreamAccess">
            <summary>
            FILESTREAM non-transactional access option values
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSecurityPredicateType">
            <summary>
            The type of the security predicate
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSecurityPredicateOperation">
            <summary>
            The operation to which a security predicate applies
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreCaptureMode">
            <summary>
            Query Store SIZE_BASED_CLEANUP_MODE option values
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreCaptureMode.All">
            <summary>
            Query Store captures all queries. This is the default configuration value
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreCaptureMode.Auto">
            <summary>
            Query Store captures relevant queries based on execution count and resource consumption.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreCaptureMode.None">
            <summary>
            Query Store does not capture new queries.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreOperationState">
            <summary>
            Query Store Operation Mode/Desired State option values
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreOperationState.Off">
            <summary>
            Query Store feature is OFF.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreOperationState.ReadOnly">
            <summary>
            Query Store does not record new data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlQueryStoreOperationState.ReadWrite">
            <summary>
            Query store records new data.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlExternalTableDistributionPolicyType">
            <summary>
            The type of an external table distribution policy.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGraphType">
            <summary>
            The graph type of a column.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.AllDwTableDistributionPolicyType">
            <summary>
            The type of a SQL DW table distribution policy.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSensitivityOptionType">
            <summary>
            Sensitivity option type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSensitivityRank">
            <summary>
            Sensitivity rank of a column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifyHashIndex.IsHash">
            <summary>
            Indicates that a HASH index is created. Supported only on memory optimized tables.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifyHashIndex.BucketCount">
            <summary>
            Number of buckets that should be created in the hash index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlMemoryOptimizedTableSource.IsMemoryOptimized">
            <summary>
            Indicates whether the table is memory optimized. 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSchemaObject">
            <summary>
            Models an object which is owned by a schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSchemaObject.Schema">
            <summary>
            The schema of this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlStatisticBound">
            <summary>
            Models an object covered by a statistic.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlStatisticBound.Statistics">
            <summary>
            The statistics over this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlFulltextIndexedObject">
            <summary>
            Models an object covered by a full-text index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlFulltextIndexedObject.FullTextIndex">
            <summary>
            The full-text indexes on this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage">
            <summary>
            Models logical storage settings for an object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage.Filegroup">
            <summary>
            The filegroup on which the object is stored.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage.PartitionScheme">
            <summary>
            The partition scheme used to store the object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage.PartitionColumn">
            <summary>
            The column on which to partition the object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesFileStream">
            <summary>
            Models an object which specifies logical storage.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesFileStream.IsFileStreamNull">
            <summary>
            True if the FILESTREAM_ON option is NULL (valid only for indexes).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesFileStream.FileStreamFilegroup">
            <summary>
            The filegroup to store the object's filestream objects.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesFileStream.FileStreamPartitionScheme">
            <summary>
            The partition scheme to store the object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesCompressionOptions">
            <summary>
            Models data compression settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesCompressionOptions.DataCompressionOptions">
            <summary>
            The data compression options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesCompressionOptions.XmlCompressionOptions">
            <summary>
            The xml compression options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndexBase">
            <summary>
            Models storage and data compression options.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndexBase.IsClustered">
            <summary>
            True if this is a clustered index.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex">
            <summary>
            Models index settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.FillFactor">
            <summary>
            The fill factor of the index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.IsPadded">
            <summary>
            Models the PAD_INDEX option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoIgnoreDuplicateKey">
            <summary>
            Models the IGNORE_DUP_KEY option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoRecomputeStatistics">
            <summary>
            Models the STATISTICS_NORECOMPUTE option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoAllowRowLocks">
            <summary>
            Models the ALLOW_ROW_LOCKS option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoAllowPageLocks">
            <summary>
            Models the ALLOW_PAGE_LOCKS option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoOptimizeForSequentialKey">
            <summary>
            Models the OPTIMIZE_FOR_SEQUENTIAL_KEY option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.DoIncrementalStatistics">
            <summary>
            Models the STATISTICS_INCREMENTAL option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesIndex.ColumnSpecifications">
            <summary>
            The columns being indexed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlExtendedPropertyHost">
            <summary>
            Models an object which can have extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlExtendedPropertyHost.ExtendedProperties">
            <summary>
            The extended properties on this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesTable">
            <summary>
            Models an object which defines a table.  This might be an actual table, or e.g. a table-valued function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesTable.Constraints">
            <summary>
            The constraints on the table.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSecurableObject">
            <summary>
            Models a securable of class OBJECT.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSecurable">
            <summary>
            Models an object to which permissions apply.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSecurable.Permissions">
            <summary>
            The permissions which apply to the secured object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesAnsiNulls">
            <summary>
            Models an object which has its own ANSI NULLS setting (generally because the object has a script).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesAnsiNulls.IsAnsiNullsOn">
            <summary>
            True if ANSI NULLS should be ON for this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesQuotedIdentifier">
            <summary>
            Models an object which has its own QUOTED IDENTIFIER setting (generally because the object has a script).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesQuotedIdentifier.IsQuotedIdentifierOn">
            <summary>
            True if QUOTED IDENTIFIER should be ON for this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSupportsReplication">
            <summary>
            Models an object which supports replication.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSupportsReplication.IsReplicated">
            <summary>
            True if the object is subject to replication.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlAutoGeneratedHistoryTable">
            <summary>
            Models an auto-generated temporal history table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlAutoGeneratedHistoryTable.IsAutoGeneratedHistoryTable">
            <summary>
            True if the object is a temporal history table which has been auto-generated and will not be scripted.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSynonymTarget">
            <summary>
            Models the target of a synonym.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSynonymTarget.Synonyms">
            <summary>
            The synonyms for this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext">
            <summary>
            Models execution context settings for an object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext.IsCaller">
            <summary>
            True if the object is executed as the caller.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext.IsSelf">
            <summary>
            True if the object is executed as its creator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext.IsOwner">
            <summary>
            True if the object is executed as its owner.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext.User">
            <summary>
            The user to execute as.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesExecutionContext.Login">
            <summary>
            The login to execute as.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlClrMethodDefined">
            <summary>
            Models an object defined as a CLR method.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlClrMethodDefined.MethodName">
            <summary>
            The name of the CLR method.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSignable">
            <summary>
            Models a signable object, such as a procedure or trigger.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSignable.Signatures">
            <summary>
            The signatures on this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlLegacyDataConstraintTarget">
            <summary>
            Models a target for a Default or Rule.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlLegacyDataConstraintTarget.RulesDefaults">
            <summary>
            The constraints that apply to this target.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlObjectAuthorizer">
            <summary>
            Models an authorizer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlObjectAuthorizer.AuthorizedObjects">
            <summary>
            The objects authorized by this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlClrClassDefined">
            <summary>
            Models an object defined as a CLR class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlClrClassDefined.ClassName">
            <summary>
            The name of the CLR class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlClrClassDefined.Assembly">
            <summary>
            The defining assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlProtocolSpecifier">
            <summary>
            Models the use of a protocol by an endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlEndpointLanguageSpecifier">
            <summary>
            Models the use of a language by an endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlAuthorizedObject">
            <summary>
            Models an object which is granted a security authorization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlAuthorizedObject.Authorizer">
            <summary>
            The authorizer (owner) for this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor">
            <summary>
            Models the description of a type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor.Scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor.Precision">
            <summary>
            The precision.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlTypeDescriptor.IsMax">
            <summary>
            True if the capacity is the maximum the type can represent (e.g. VARBINARY(MAX)).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlFunctionImplementation">
            <summary>
            Models the implementation of a function (which might be e.g. T-SQL script or CLR code)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlFunctionImplementation.Parent">
            <summary>
            The parent function which contains this implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerObjectAuthorizer">
            <summary>
            Models an authorizer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerObjectAuthorizer.AuthorizedObjects">
            <summary>
            The objects authorized by this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerAuthorizedObject">
            <summary>
            Models an object which is granted a security authorization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerAuthorizedObject.Authorizer">
            <summary>
            The authorizer (owner) for this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerRole">
            <summary>
            Models a server role.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlServerRole.Memberships">
            <summary>
            The members of the role.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource">
            <summary>
            Models a source of column data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource.Columns">
            <summary>
            The columns provided by this source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource.Indexes">
            <summary>
            The indexes on this object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlColumnSource.Triggers">
            <summary>
            The triggers on this object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlScalarModule">
            <summary>
            Models the reference to a scalar function or a user-defined aggregate
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Data.Tools.Schema.Sql.Schema.BatchParserWrapper" -->
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Schema.BatchParserWrapper.ConvertToOffsetSortedInput(System.String,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Helper method used to Convert line/column information in a file to offset
            </summary>
            <param name="content"></param>
            <param name="positions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Schema.BatchParserWrapper.ReadLines(System.IO.StringReader,System.Int32,System.Int32)">
            <summary>
            Read number of lines and get the line offset
            </summary>
            <param name="reader"></param>
            <param name="lineStartOffset"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Schema.BatchParserWrapper.BatchEventNotificationHandler">
            <summary>
            Internal implementation class to implement IBatchEventHandlers
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Schema.BatchParserWrapperException">
            <summary>This exception is used to report that can come from the Batch Parser inside BatchParserWrapper.</summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Schema.ConnectionSettings">
            <summary>
            These options have impect on meta data of table / column / index / proc / function, ...
            We will set it as global setting of connection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Schema.ConnectionSettings.#ctor(System.Boolean)">
            <summary>
            Caller should ConnectionOptions(true); to initialize as default.
            Do not need parameter, but get compiler error.
            </summary>
            <param name="setProjectDefault">default values are all true, except NUMERIC_ROUNDABORT;</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Schema.SchemaConstants">
            <summary>
            A static class to hold the project system's non-localizable constants
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Schema.SqlDatabaseSchemaProviderFamilyResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Schema.SqlDatabaseSchemaProviderFamilyResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Schema.SqlDatabaseSchemaProviderFamilyResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Schema.SqlDatabaseSchemaProviderFamilyResource.UnsupportedCompatibilityLevel">
            <summary>
              Looks up a localized string similar to The database compatibility level &apos;{0}&apos; is not within the supported range of {1} to {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Schema.SqlDatabaseSchemaProviderFamilyResource.UnsupportedSqlServerVersion">
            <summary>
              Looks up a localized string similar to not a supported version of Sql Server.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql100.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql100.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql100 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql100UserInteractionServices">
            <summary>
            UserInteractionServices for Sql100.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql100UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql100UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql100UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql100UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add Sql100 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql110DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql110.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql110.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql110DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql110 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql110UserInteractionServices">
            <summary>
            UserInteractionServices for Sql110.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql110UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.Sql110DatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql110UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql110UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql110UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add Sql110 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql120DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql120.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql120.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql120DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql120 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql120UserInteractionServices">
            <summary>
            UserInteractionServices for Sql120.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql120UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql120UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql120UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql120UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add Sql120 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql130DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql130.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql130.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql130DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql130 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql130UserInteractionServices">
            <summary>
            UserInteractionServices for Sql130.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql130UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql130UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql130UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql130UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add Sql130 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql140DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql140.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql140.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql140DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql140 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql140UserInteractionServices">
            <summary>
            UserInteractionServices for Sql140.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql140UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql140UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql140UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql150DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql150.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql150.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql150DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql150 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql150UserInteractionServices">
            <summary>
            UserInteractionServices for Sql150.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql150UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql150UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql150UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql160DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql160.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql160.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql160DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql160 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql160UserInteractionServices">
            <summary>
            UserInteractionServices for Sql160.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql160UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql160UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql160UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql90DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql 90.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql90.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql90DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql90 related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Sql90UserInteractionServices">
            <summary>
            UserInteractionServices for Sql90.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Sql90UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.Sql90DatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of Sql90UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Sql90UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlAzureDatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql Azure.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlAzureDatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql Azure related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlAzureUserInteractionServices">
            <summary>
            UserInteractionServices for Sql Azure.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlAzureUserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlAzureDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of SqlAzureUserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlAzureUserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlAzureUserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add Sql100 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlAzureUserInteractionServices.GetTableTypeInlineConstraintColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableTypeConstraint)">
            <summary>
            Return the associated column of inline constraint.
            </summary>
            <param name="constraint">
            Constraint.
            </param>
            <returns>
            Associated column or null.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql Azure, V12.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql Azure related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12UserInteractionServices">
            <summary>
            UserInteractionServices for SqlAzureV12.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12UserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of SqlAzureV12UserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlAzureV12UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Add SqlAzureV12 specified interface and UIInfo map to the mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider">
            <summary>
            Base class for different version of SQL DatabaseSchemaProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider.#ctor">
            <summary>
            The passed in types are the possible constructors that will be served by this DSP.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider.FamilyName">
            <summary>
            Returns the name of this family of DatabaseSchemaProviders.
            A family is a collection of providers for the same datasource and data provider, written by the same author.
            The DatabaseSchemaProviders within a family generally differ only in which version of the database they handle.
            The family name is arbitrary, and should be human-readable and -typable, and unique.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.CompatibilityLevelVerification.EnforceCompatibilityLevelRange">
            <summary>
            This value is ignored.  We no longer raise an error when an unsupported compatibility level is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(System.String)">
            <summary>
            Determines the version-specific SqlDatabaseSchemaProvider type which is appropriate to a SQL database without error message.
            </summary>
            <param name="connectionString">A connection string used to connect to the database to query for version information.</param>
            <returns>The type of the appropriate SqlDatabaseSchemaProvider or null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Determines the version-specific SqlDatabaseSchemaProvider type which is appropriate to a SQL database without error message.
            </summary>
            <param name="connectionFactory">A connection factory used to connect to the database to query for version information.</param>
            <returns>The type of the appropriate SqlDatabaseSchemaProvider or null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String@)">
            <summary>
            Determines the version-specific SqlDatabaseSchemaProvider type which is appropriate to a SQL database with error message.
            </summary>
            <param name="connectionFactory"></param>
            <param name="errorMessage"></param>
            <returns>The type of the appropriate SqlDatabaseSchemaProvider or null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.DetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Determines the version-specific SqlDatabaseSchemaProvider type which is appropriate to a SQL database without error message
            </summary>
            <param name="connectionFactory">A connection string used to connect to the database to query for version information.</param>
            <returns>The type of the appropriate SqlDatabaseSchemaProvider or null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.DetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String@)">
            <summary>
            Determines the version-specific SqlDatabaseSchemaProvider type which is appropriate to a SQL database.
            </summary>
            <param name="connectionFactory"></param>
            <param name="errorMessage"></param>
            <returns>The type of the appropriate SqlDatabaseSchemaProvider or null</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.ServerExplorerDataSource">
            <summary>
            The GUID Server Explorer uses to identify the DataSource used for SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.ServerExplorerDataProvider">
            <summary>
            The GUID Server Explorer uses to identify the data provider used for SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.AdoProvider">
            <summary>
            The namespace name of the data provider used for SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProviderFamily.FamilyName">
            <summary>
            The short name of the SQL family of DatabaseSchemaProviders.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlDwDatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql DW.
            It will create DataSchemaModel, ScriptSerivces and UserInteractionServices for Sql Data Warehouse.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDwDatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides SQL Data Warehouse related user interaction services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDwDatabaseSchemaProvider.Platform">
            <summary>
            Returns the platform associated with this Database Schema Provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlDwUserInteractionServices">
            <summary>
            UserInteractionServices for SqlDw.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDwUserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of SqlDwUserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDwUserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlDwUserInteractionServices.DatabaseSchemaProvider">
            <summary>
            The database schema provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlDwUserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Get element name string using element details.
            </summary>
            <param name="element">The model element</param>
            <param name="details">The details of the model element</param>
            <returns>The name of the element</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlElementTypesSkippedFromDisplayableElements">
            <summary>
            The list of Sql types that need to be filtered out for calculating Displayable Element Classes in SqlUserInteractionServices
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo">
            <summary>
            ElementScope information for Sql80 model elements
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.GetInstance">
            <summary>
            Return the Singleton instance of SqlModelElementScopeInfo
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.InitializeElementScopes">
            <summary>
            Initializes element classes that are non DW scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.GetElementClassScope(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Gets the scope of the element class based on the platform
            </summary>
            <param name="elementClass">The model element class</param>
            <returns>Scope of the element class</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.IsElementServerScoped(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Indicates whether an element is server scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.IsElementDatabaseScoped(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Indicates whether an element is database scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlModelElementScopeInfo.GetElementScope(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Get's scope for an element in the case where the class does not statically dictate a single scope
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlServerlessDatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider for Sql Serverless
            It will create DataSchemaModel, ScriptServices and UserInteractionServices for Sql Serverless.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlServerlessDatabaseSchemaProvider.UserInteractionServices">
            <summary>
            Singleton that provides Sql Azure related user interaction services.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlServerlessUserInteractionServices">
            <summary>
            UserInteractionServices for  SqlServerless.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlServerlessUserInteractionServices.GetInstance(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider)">
            <summary>
            Return the Singleton instance of SqlServerlessUserInteractionServices
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlServerlessUserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            The display name for the database schema provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices">
            <summary>
            SqlDatabaseUserInteractionServices implementation.  Which returns 
            Sql specific UI related information, such as icon, element name, extension, etc.
            </summary>
            <summary>
            Helper class used to store UI information for UserInteractionServices.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices._sqlBin2Utf8CollationLanguages">
            <summary>
            collation language for BIN2 UTF8 collations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices._sql150AdditionalCollationVariationsNonJapanese">
            <summary>
            for new Japanese 140 collations, UTF8 collations have different naming convention(no _SC), but other UTF8 collations 
            all have _SC before _UTF8, this is the list to store non Japanese(140 level) UTF8 collation 
            and Japanese(140 level) UTF8 collation variations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices._sql150AdditionalCollationVariationsJapanese">
            <summary>
            for new Japanese 140 collations, UTF8 collations have different naming convention(no _SC), but other UTF8 collations 
            all have _SC before _UTF8, this is the list to store Japanese(140 level) UTF8 collation variations
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices._sqlBin2Utf8CollationVariations">
            <summary>
            from level 150, we added a new BIN2 UTF8 collation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.BatchSeparator">
            <summary>
            The keyword that's used to denote the end of a batch.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.ScriptGenerator">
            <summary>
            Returns a Sql script generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.Initialize">
            <summary>
            Initialize method to setup UIInfo and interface type mappings.
            Also setup UIInfo to ElementClass mappings.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.IsElementServerScoped(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Indicates whether an element is server scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.IsElementDatabaseScoped(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Indicates whether an element is database scoped
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetElementClassScope(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Indicates scope options for an element class
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.DisplayableElementClasses">
            <summary>
            Returns the list of element classes that should be displayed by the user interface components.
            </summary>
            <returns>The list of element classes that should be displayed by the user interface components.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetElementTypeDescription(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get element type description
            </summary>
            <param name="elementType">The element type</param>
            <returns>The description of that element type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetEscapedNameString(System.String)">
            <summary>
            Get escaped name string, by default we will use bracket to escape a name.
            </summary>
            <param name="nameString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetFolderName(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get folder names for different ElementClass.
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetSqlCollations">
            <summary>
            Returns the sql collations.
            </summary>
            <returns>The sql collations.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.IsInlineConstraint(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Determine if constraint is inline.
            </summary>
            <param name="constraint">
            Constraint to check.
            </param>
            <returns>
            True if inline.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetFullyQualifiedName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor)">
            <summary>
            Returns the fully qualified name for an element descriptor
            </summary>
            <param name="descriptor">The descriptor to get the name for</param>
            <returns>The name of the descriptor or [#EMPTY#]</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.TryConstructConnectionStringAndProvider(System.String,System.String,System.String@)">
            <summary>
            Used to get the Sql specific connection string and Sql provider
            This information is used to add the connection to the server explorer
            Returns true if it was able to construct the connection string and get the correct Guid
            Else, returns false
            </summary>
            <returns>True if it was able to construct the connection string and get the correct Guid</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlUserInteractionServices.GetTableTypeInlineConstraintColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableTypeConstraint)">
            <summary>
            Return the associated column of inline constraint.
            </summary>
            <param name="constraint">
            Constraint.
            </param>
            <returns>
            Associated column or null.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.ColumnSerializer.GetValue(System.IO.BinaryReader)">
            <summary>
            Returns the value or throws if value could not be read successfully
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.ColumnSerializer.TryGetValue(System.IO.BinaryReader,System.Object@)">
            <summary>
            This method returns false if EOS is reached. Returns true if the value was read successfully
            and throws if less number of bytes than expected are available.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.ArrayNotLongEnough">
            <summary>
              Looks up a localized string similar to The destination array is not long enough. Check buffer length, offset and count..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.BinaryDataOverflow">
            <summary>
              Looks up a localized string similar to Binary values exceeding Int32.MaxValue bytes in size can not be de-serialized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.ColumnOutOfRange">
            <summary>
              Looks up a localized string similar to Column ordinal out of range..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.DataTypeNotSupported">
            <summary>
              Looks up a localized string similar to SQL data type {0} not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.DestinationNull">
            <summary>
              Looks up a localized string similar to Destination buffer is null..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.EndOfStream">
            <summary>
              Looks up a localized string similar to Unexpected end of stream encountered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.HalfSurrogatePair">
            <summary>
              Looks up a localized string similar to Source byte array contains only one half of a surrogate pair..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.InvalidDataReader">
            <summary>
              Looks up a localized string similar to DataReader passed is null or closed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.InvalidLength">
            <summary>
              Looks up a localized string similar to The length of byte array passed should be even..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.InvalidSchemaTable">
            <summary>
              Looks up a localized string similar to Schema table has no rows..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.InvalidStringData">
            <summary>
              Looks up a localized string similar to String {0} invalid for column {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.MaxColumnLengthMissing">
            <summary>
              Looks up a localized string similar to Invalid data type &apos;{0}&apos; in table &apos;{1}&apos; column &apos;{2}&apos; at ordinal {3}. Change the length of &apos;{4}&apos; to &apos;max&apos; on the column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.MissingSqlVariantProperty">
            <summary>
              Looks up a localized string similar to {0} column after sql_variant column should be SQL_VARIANT_PROPERTY {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.ParseError">
            <summary>
              Looks up a localized string similar to Parsing error..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.SeqAccess">
            <summary>
              Looks up a localized string similar to Sequential access only..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.SqlVariantPropertyColumns">
            <summary>
              Looks up a localized string similar to The sql_variant column should be followed by BaseType,Collation,Scale properties..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.SqlVariantTypeFidelityLoss">
            <summary>
              Looks up a localized string similar to BCP round-trip will cause type fidelity loss for data type {0} in sql_variant column {1} at ordinal {2} in the table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.StreamCanNotSeek">
            <summary>
              Looks up a localized string similar to Stream does not support seeking..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.StreamReadError">
            <summary>
              Looks up a localized string similar to Error while reading the stream..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.StringDataOverflow">
            <summary>
              Looks up a localized string similar to String values exceeding Int32.MaxValue bytes in Unicode representation can not be de-serialized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.StringTypeNotSupported">
            <summary>
              Looks up a localized string similar to Base type {0} not supported for the string..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlClientBCPResources.UnhandledVariantType">
            <summary>
              Looks up a localized string similar to Handling for sql_variant value of base type {0} not implemented..
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlVariantSerializer.IsDateValueOutOfDateTimeRange(System.DateTime)">
            <summary>
            check if the date is within the range of sql data-type datetime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlVariantSerializer.IsTimePrecisionGreaterThanDateTimeSqlType(System.TimeSpan)">
            <summary>
            check if the precision of fractional seconds is within SQL data-type datetime range
            In datetime, values are rounded to increments of .000, .003, or .007 seconds
            http://msdn.microsoft.com/en-us/library/ms187819.aspx
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.SqlVariantSerializer.IsSqlDecimalValueOutOfDecimalRange(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            check if the SqlDecimal value can not be converted to decimal
            </summary>
            <param name="dec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClient.Bcp.TextTypesSerializer.ReverseCharBytesIfNotLittleEndian(System.Byte[])">
            <summary>
            exchanges the adjacent bytes, if the machine is not little-endian.
            Used to change byte[] representation of a char[] to little-endian if the underlying architecture is not little-endian
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.ClassSymbolInfo">
            <summary>
            Represents a class's definition retrieved from symbol information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClr.ClassSymbolInfo.FullName">
            <summary>
            Namespace qualified class name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.SqlClr.ClassSymbolInfo.SourceFiles">
            <summary>
            The set of source files that this class was defined it.  It is possible
            for a partial class to be defined across multiple files
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.SqlClr.ClassSymbolInfo.GetOneMethod(System.String@,Microsoft.Data.Tools.Schema.Sql.SqlClr.MethodSymbolInfo@)">
            <summary>
            Helper method that returns a file.  Usually there is only one file, this method deals with the
            case where there could be more than one file due to partial classes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.FakeAssembly">
            <summary>
            A fake assembly. This dispenses fake types.  
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.FakeModule">
            <summary>
            Fake module for the manifest
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.FakeType">
            <summary>
            A placeholder type. The type is mostly empty, but may provide placeholder objects for items
            specifically requested.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.FakeConstructor">
            <summary>
            Placeholder for a ConstructorInfo. This can be requested for Custom attributes.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.FakeParameterInfo">
            <summary>
            Placeholder parameter info.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.MethodSymbolInfo">
            <summary>
            This class encapsulates symbol information about one method
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlClr.PermissionSet">
            <summary>
            The enumeration integrates with the Permission Set property
            of the SqlCLR project
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlServerError">
            <summary>
            Represents an error produced by SQL Server database schema provider
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.SqlServerRetryError">
            <summary>
            Captures extended information about a specific error and a retry
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.AssemblyVisibilityRule">
            <summary>
            Test ia an assembly is referenced when its VISIBILITY is set to OFF
            http://msdn.microsoft.com/en-us/library/ms186711.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.AssemblyVisibilityRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.AzureV12SurfaceAreaValidationRule">
            <summary>
            The elements and properties in the model should be supported on AzureV12 according to
            the metadata stored in model schema.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.BreakContinueOnlyInWhileRule">
            <summary>
            The BREAK and/or CONTINUE statements may only occur within a WHILE loop.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.BreakContinueOnlyInWhileRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlModelElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ClrObjectAssemblyReferenceRule">
            <summary>
            Check if an object is referencing an assembly that does not exist, corrupted or the signature does not match
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ISqlSpecifiesStorageDataCompressionFilestreamOnClauseRule">
             <summary>
             1.  In-lined constraints do not support the FILESTREAM_ON clause.
             The FILESTREAM_ON clause must be added to the table or the constraint must not be in-lined.
            
             2.  If table have Index or NonInlined Clustered Constraint.
             Parent table CANNOT have any ISpecifiesStorage OR ISpecifiesFileStream
             OR ISqlSpecifiesCompressionOptions properties and relationships set.
            
             3.   ISpecifiesStorage properties and relationships must all be set on the same instance.
             Either all be set on constraints or all be set on Table.
             But could not be set on both.
             </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule">
            <summary>
            Check whether the encrypted column is a primary key/unique column, has a check constraint
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.AnalyzeColumnEncryption(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Analyze the source table for column encryption validation errors
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="ruleSetting"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.AddTableValidationErrors(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Find column encryption validation errors for source table
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.AddPartitionErrors(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSpecifiesStorage,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Find column encryption errors on partitioning columns
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="storage"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.ConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Find column encryption validation errors in the constraints on source table
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.PrimaryKeyConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPrimaryKeyConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Column encryption validations on columns part of primary key constraint
            </summary>
            <param name="primaryKeyConstraint"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.UniqueConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlUniqueConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Column encryption validations on columns part of unique constraint
            </summary>
            <param name="uniqueConstraint"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.CheckConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlCheckConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Column encryption validations on columns part of check constraint
            </summary>
            <param name="checkConstraint"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.ForeignKeyConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlForeignKeyConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Column encryption validations on columns part of foreign key constraint
            </summary>
            <param name="foreignKeyConstraint"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.DefaultConstraintValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlDefaultConstraint,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Column encryption validations on columns with default constraint
            </summary>
            <param name="defaultConstraint"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.ColumnValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validations on encryption properties for columns
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.ColumnDataTypeValidation(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validations for unsupported datatypes
            </summary>
            <param name="column"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.SimpleColumnValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validations on simple columns
            </summary>
            <param name="simpleColumn"></param>
            <param name="hasColumnSet"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.TableValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Boolean,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validates column encryption properties for table
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="hasEncryptedColumns"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.FullTextIndexValidation(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlFulltextIndexedObject,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validates encryption settings on columns part of a fulltext index
            </summary>
            <param name="fullTextIndex"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.TableStaticsticsValidation(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlStatisticBound,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validates encryption settings on columns part of a table statistic
            </summary>
            <param name="tableStatistics"></param>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OperationsOnEncryptedColumnRule.IndexValidations(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleProblem})">
            <summary>
            Validates encryption settings on columns part of a clustered/nonclustered index
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sourceTable"></param>
            <param name="validationErrors"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ColumnUserDefinedTableType">
            <summary>
            Prevent users from defining a column of type User Defined Table Type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.ColumnUserDefinedTableType.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DifferentNameCasingRule">
            <summary>
            The identifiers of the elements in the same identifier group shouldn't be equal if the collation was case insensitive.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DifferentNameCasingRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DuplicatedTargetObjectReferencesInSecurityPolicyRule">
            <summary>
            Only one predicate is allowed for one target object per predicate type per operation in a security policy, regardless of the policy state
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DuplicateNameRule">
            <summary>
            Check if there is more than one MODEL ELEMENT with the same name
            This validation is different from DuplicateVariableParameterName in that it does not check variable names, parameters, and temp tables
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DuplicateVariableParameterNameRule">
            <summary>
            Check if variables, parameter or temp tables inside SqlSubroutine or SqlTrigger have the same name
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwAsymmetricKey_GlobalNameValidationRule">
            <summary>
            Validates Symmetric Key in SqlDw platform
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwAsymmetricKey_GlobalNameValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis. Global temporary keys are not allowed. Asymmetric Key name must not start with "##".
            Symmetric Key also has same restriction.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwCreateCertificateValidation">
            <summary>
            A master key or an encryption key must exist for a database to create a certificate
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwCreateCertificateValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwIdentityColumnValidationRule">
            <summary>
            Validates if Identity Column is used as distribution column which is not allowed in Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwIdentityColumnValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwCCIndex_InvalidDataType">
            <summary>
            Validates if a columnstore index is created with column of NVARCHAR(MAX) or VARCHAR(MAX) data type 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Sql.Validation.DwCCIndex_InvalidDataType.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)" -->
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwCCIndex_NoStringColumnAllowedAsOrderedColumn">
            <summary>
            Validates if a columnstore index is created with column with String data type as ordered column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwCCIndex_NoStringColumnAllowedAsOrderedColumn.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwIndex_NoClusteredRowstoreIndexOnTableWithColumnstoreIndexValidationRule">
            <summary>
            Validates if a rowstore index is created when columnstore index already exists which is not allowed for Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwIndex_NoClusteredRowstoreIndexOnTableWithColumnstoreIndexValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwMaterializedViewValidation">
            <summary>
            Validates materialzed view for Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwMaterializedViewValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwMergeMatchClauseValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwPredictParameterValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwRejectedRowLocationValidation">
            <summary>
            Rejected row location rule for external table.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwRejectedRowLocationValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwSymmetricKey_GlobalNameValidationRule">
            <summary>
            Validates Symmetric Key in SqlDw platform
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwSymmetricKey_GlobalNameValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis. Symmetric Key name must not start with "##".
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwTable_DefaultConstraintOnDistributionColumnValidationRule">
            <summary>
            Validates if Distribution Column has default constraints which are not allowed for Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwTable_DefaultConstraintOnDistributionColumnValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwUDF_DoNotModifyDatabaseStateRule">
            <summary>
            Validates if the User-defined functions are used to perform actions that modify the database state
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwUDF_DoNotModifyDatabaseStateRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.DwView_IndexedValidationRule">
            <summary>
            Validates if View is Indexed which is not allowed for Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwView_IndexedValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwWorkloadClassifiersMaxRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwWorkloadClassifiersTimeRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwWorkloadClassifiersTimeRule.ValidateStartAndEndTimeOptions(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlWorkloadClassifier)">
            <summary>
            Returns true if both START_TIME and END_TIME options exist or if both START_TIME and END_TIME options 
            dont exist. Otherwise, return false.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DwMaxWorkloadGroupsRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.EdgeConstraintMustReferenceNodeTables">
            <summary>
            This validation rule ensures that all edge constraints have node tables for every
            edge constraint clause in the edge constraint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.EdgeConstraintMustReferenceNodeTables.ExecutionTime">
            <summary>
            OnIdle allows for notifications when SSDT is idle.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.EdgeConstraintMustReferenceNodeTables.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Perform actual analysis. Edge constraints must point to node tables.
            </summary>
            <param name="sqlSchemaModel">The schema model to use.</param>
            <param name="sqlElement">The 'SqlEdgeConstraint' element.</param>
            <param name="fragment">The associated TSqlFragment DOM element.</param>
            <param name="ruleSetting">Rule settings.</param>
            <returns>The list of problems.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.EndPointRule">
            <summary>
            Prevent creating more than one endpoint with DATABASE_MIRRORING
            Prevent creating more than one endpoint with SERVICE_BROKER
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.EndPointRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ExternalTableValidationRule">
            <summary>
            An external table validation rule.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.ExternalTableValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            Performs the analysis.
            </summary>
            <param name="sqlSchemaModel">The Sql schema model.</param>
            <param name="sqlElement">The model element to validate.</param>
            <param name="ruleSetting">The rule setting.</param>
            <param name="context">The rule execution context.</param>
            <returns>A list of problems detected by the rule.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.FileStreamRule">
            <summary>
            When creating a table with FILESTREAM_ON, there must be at least one FILESTREAM column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.FileStreamRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ForeignKeyColumnTypeNumberMustMatchRule">
            <summary>
            Verify that the number of referencing and referenced columns in a foreign key match
            Verify that the type of referencing and referenced columns in a foreign key match
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.ForeignKeyColumnTypeNumberMustMatchRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ForeignKeyReferencePKUniqueRule">
            <summary>
            Verify that foreign key is created on a primary or unique key.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.ForeignKeyReferencePKUniqueRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.FullTextIndexColumnForSql90">
            <summary>
            Check if FullTextIndex is created on a supported type column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.FullTextIndexColumnForSql90.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.IdentityColumnValidation">
            <summary>
            Verify that an identity column is of data type int, bigint, smallint, tinyint, decimal, or numeric with a scale of 0, and the column must not be nullable.
            Verify that a table has at most one identity column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.IdentityColumnValidation.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.InsertIntoIdentityColumnRule">
            <summary>
            An explicit value for the identity column in table ... can only be specified when a column list is used
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.InsertIntoIdentityColumnRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlModelElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.InsertIntoIdentityColumnSchemaAnalyzer.#ctor(Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationRule,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.LedgerTableColumnUserDefinedTypeValidationRule">
            <summary>
            Ledger tables are not allowed to have any column user-defined data types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.LedgerTableColumnUserDefinedTypeValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.LedgerTableFullTextIndexValidationRule">
            <summary>
            Ledger tables are not allowed to have any full text indexes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.LedgerTableFullTextIndexValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.LedgerTableFullTextIndexValidationRule.GetFullTextIndexTable(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlFullTextIndex)">
            <summary>
            Gets the table of the full text index.
            It looks it up in the schema model by its name.
            </summary>
            <param name="sqlSchemaModel">Sql schema model.</param>
            <param name="fullTextIndex">Full text index.</param>
            <returns>Table of the full text index if exists, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MasterKeyExistsForCredential">
            <summary>
            A master key must exist for a database scoped credential
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MasterKeyExistsForCredential.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInIndexKeyRule130">
            <summary>
            Index keys (primary, foreign, unique key and index key) cannot have more than 32 columns
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInIndexKeyRule90">
            <summary>
            Index keys (primary, foreign, unique key and index key) cannot have more than 16 columns
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInIndexKeyRule90.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInTable100">
            <summary>
            A table can have at most 1024 non-sparse columns and total 30,000 non-sparse and sparse columns if column set presents
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInTable100.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInTable90">
            <summary>
            A table can have at most 1024 columns
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MaxColumnInTable90.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ReferencesToMemoryOptimizedTablesValidation">
            <summary>
            Restrict references to memory-optimized tables from a few object types
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MismatchedNameRule">
            <summary>
            The reference and the definition of the model identifier should match case-wise.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MismatchedNameRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MultiFullTextIndexOnTableRule">
            <summary>
            Full text indexed object cannot have more than one full text index
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MultiFullTextIndexOnTableRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.MultiSecurityPoliciesOnTargetObjectRule">
            <summary>
            The target object of a security predicate cannot be referenced by more than one enabled security policies
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.MultiSecurityPoliciesOnTargetObjectRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.NoBlockPredicatesTargetingViewsRule">
            <summary>
            Verifies that a security predicate can not target a View if it is a BLOCK predicate
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.NonNullPrimaryKeyRule">
            <summary>
            Primary key cannot be created on a nullable column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.NonNullPrimaryKeyRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OneClusteredIndexRule">
            <summary>
            A table can have at most one clustered index
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OneClusteredIndexRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OneDefaultConstraintPerColumnRule">
            <summary>
            Verify that only one default constraint can be specified for a column
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OneDefaultConstraintPerColumnRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OneMasterKeyRule">
            <summary>
            A database can have at most one master key
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OneMasterKeyRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OnePrimaryKeyRule">
            <summary>
            A table can have at most one primary key
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OnePrimaryKeyRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.OneTemporalPeriodRule">
            <summary>
            A table can have at most one temporal period (two generated always columns of datetime2 type)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.OneTemporalPeriodRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ColumnPermissionSpecification">
            <summary>
            Defines adapter over column-level permissions statements for columns "included" with a GRANT or DENY statement;
            or "excluded" with a supporting REVOKE statement.
            </summary>
            <remarks>
            Instances of this class provide for uniform comparisons against permission statements that specify an SqlColumn 
            either as the securable or as an excluded column.
            </remarks>
            <seealso cref="T:Microsoft.Data.Tools.Schema.Sql.Validation.ConflictingExcludedColumnsCheck"/>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.IncludedColumnPermissionSpecification">
            <summary>
            Defines adapter over column-level permissions statements for columns "included" with a GRANT or DENY statement.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.ExcludedColumnPermissionSpecification">
            <summary>
            Defines adapter over column-level permissions statements for columns "excluded" with a supporting REVOKE statement.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.ConflictingExcludedColumnsCheck.ColumnPermissionEntry.ClearList">
            <summary>
            Removes all items from the permission list, and sets the capacity of the list to zero.
            </summary>
            <remarks>
            Call this method when the permission list is no longer needed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.DuplicateOrConflictingPermissionStatementCheck.PermissionEntry.ClearList(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionAction)">
            <summary>
            Removes all items from the permission list, and sets the capacity of the list to zero.
            </summary>
            <param name="action">Permission action used to determine which of the two lists to clear.</param>
            <remarks>
            Call this method when the permission list is no longer needed.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.PermissionOnObjectSecurableValidation">
            <summary>
            Validates permissions applied to model elements of the OBJECT security target object kind.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.PermissionStatementEqualityComparer">
            <summary>
            Defines equality of <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement"/> instances based on their permission, grantee, and securable.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.PermissionStatementEqualityComparer.Equals(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement)">
            <summary>
            Determine if two instances of <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPermissionStatement"/> are equal.
            </summary>
            <param name="x">First permission statement. Must not be null.</param>
            <param name="y">Second permission statement. Must not be null.</param>
            <returns>
            True if the permission statements are equal; otherwise, false.
            </returns>
            <remarks>
            For this method, two permission statements are considered equal if,
            1. They both specify the same permission
            2. They are defined against the same securable (if one or both securables are null, ther permission statements are not equal)
            3. They both have the same grantee (if one or both grantees are null, the permission statements are not equal)
            4. They both have the same grantor.
            
            If a reference to a securable or grantee is null, we rely on other validation rules to handle this unresolved reference issue.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.PrimaryXMLIndexClusteredRule">
            <summary>
            Table needs to have a clustered primary key with less than 16 columns in it in order to create a primary XML index on it.
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.PrimaryXMLIndexClusteredRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.RuleExecutionTime">
            <summary>
            Enum to dictate the validation rule execution time
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SchemaBindingOnSecurityPoliciesValidationRule">
            <summary>
            Verify the values of schemabinding of a security policy and all of its predicates. If a security policy uses schemabinding, then all of the
            predicates must use schemabinding.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SecurityPredicateTargetObjectValidationRule">
            <summary>
            Verifies that the target object of a security predicate is a View or a Table
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SelectAssignRetrievalRule">
            <summary>
            SELECT statement cannot be used to assign and retrieve data in one query.
            An example of invalid script:
            SELECT @orderID = OrderID, OrderName
            FROM Orders
            WHERE OrderID = 10289
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SelectAssignRetrievalRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlModelElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SqlAmbiguousElementRetriever`1">
            <summary>
            Use this class to get a model elmenet from model store by using partial or complete schema object name.
            A cached element is returned when available
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_ProblemResolution">
            <summary>
              Looks up a localized string similar to You must specify a non-ambiguous reference to an existing object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_ProjectProperties">
            <summary>
              Looks up a localized string similar to Remove the reference using the project settings page of the project&apos;s properties..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_RuleName">
            <summary>
              Looks up a localized string similar to All references must be resolved..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_UnresolvedReferenceMix">
            <summary>
              Looks up a localized string similar to {0}: {1} contains an unresolved reference to an object. Either the object does not exist or the reference is ambiguous because it could refer to one or more unnamed objects or any of the following objects: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_UnresolvedReferenceOnlyNamed">
            <summary>
              Looks up a localized string similar to {0}: {1} contains an unresolved reference to an object. Either the object does not exist or the reference is ambiguous because it could refer to any of the following objects: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_UnresolvedReferenceOnlyUnNamed">
            <summary>
              Looks up a localized string similar to {0}: {1} contains an unresolved reference to an object. Either the object does not exist or the reference is ambiguous because it could refer to multiple unnamed objects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_UnresolvedReferenceTo">
            <summary>
              Looks up a localized string similar to {0}: {1} has an unresolved reference to {2} {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AllReferencesMustBeResolved_UnresolvedReferenceToUnknown">
            <summary>
              Looks up a localized string similar to {0}: {1} has an unresolved reference to unnamed {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AssemblyVisibilityRule_ProblemDescription">
            <summary>
              Looks up a localized string similar to The assembly &apos;{0}&apos; cannot be referenced because its visibility is set to off..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AssemblyVisibilityRule_RuleName">
            <summary>
              Looks up a localized string similar to You cannot reference an assembly whose visibility is set to off..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AzureV12SurfaceAreaValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to The element {0} is not supported on the selected target platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.AzureV12SurfaceAreaValidation_RuleName">
            <summary>
              Looks up a localized string similar to Element not supported on target platform..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.BreakContinueOnlyInWhile_ProblemDescription">
            <summary>
              Looks up a localized string similar to You cannot use BREAK or CONTINUE outside of a WHILE clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.BreakContinueOnlyInWhile_RuleName">
            <summary>
              Looks up a localized string similar to Do not use BREAK or CONTINUE outside of a WHILE clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.CategoryValidation">
            <summary>
              Looks up a localized string similar to Validation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ClrObjectAssemblyReference_InvalidAssembly">
            <summary>
              Looks up a localized string similar to The referenced assembly {0} is corrupt or not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ClrObjectAssemblyReference_ParameterTypeMismatch">
            <summary>
              Looks up a localized string similar to The T-SQL and CLR types for parameter {0} do not match..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ClrObjectAssemblyReference_ProblemDescription">
            <summary>
              Looks up a localized string similar to The method or class {0} that is referenced in assembly {1} was not found or has an incorrect signature..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ClrObjectAssemblyReference_RuleName">
            <summary>
              Looks up a localized string similar to You can reference only existing common language run-time (CLR) objects..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ColumnUserDefinedTableType_RuleDescription">
            <summary>
              Looks up a localized string similar to The column cannot be defined as a user-defined table type. .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ColumnUserDefinedTableType_RuleName">
            <summary>
              Looks up a localized string similar to Do not use a user-defined table type as a column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DifferentNameCasing_ProblemDescription">
            <summary>
              Looks up a localized string similar to Object {0} doesn&apos;t have a unique name when case is ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DifferentNameCasing_RuleName">
            <summary>
              Looks up a localized string similar to Object names that are in the same scope should not differ only by case..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicatedTargetObjectReferencesInSecurityPolicy_ProblemDescription">
            <summary>
              Looks up a localized string similar to &quot;A {0} predicate for the same operation has already been defined on target object &apos;{1}&apos; in the security policy &apos;{2}&apos;.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicatedTargetObjectReferencesInSecurityPolicy_RuleName">
            <summary>
              Looks up a localized string similar to A security policy may not have multiple predicates that have the same target object, predicate type, and operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicateName_ProblemDescription">
            <summary>
              Looks up a localized string similar to The model already has an element that has the same name {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicateName_RuleName">
            <summary>
              Looks up a localized string similar to Objects must have unique names..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicateVariableParameterName_ProblemDescription_TemporaryTable">
            <summary>
              Looks up a localized string similar to A temporary table that is named ‘{0}’ is already defined in this scope..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicateVariableParameterName_ProblemDescription_Variable">
            <summary>
              Looks up a localized string similar to A variable that is named ‘{0}’ is already defined in this scope..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DuplicateVariableParameterName_RuleName">
            <summary>
              Looks up a localized string similar to You cannot have two variables or temporary tables that have the same name..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwAsymmetricKeyValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Global temporary keys are not allowed. Please use local temporary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwAsymmetricKeyValidation_RuleName">
            <summary>
              Looks up a localized string similar to Global temporary keys are not allowed. Please use local temporary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCCIndex_InvalidDataType_RuleName">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; has a data type that cannot participate in a columnstore index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCCIndex_NoStringColumnAllowedAsOrderedColumn_RuleName">
            <summary>
              Looks up a localized string similar to Column with String data type is not allowed as Ordered Column in CCI..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCopyCommandOptions_DuplicateCopyOption">
            <summary>
              Looks up a localized string similar to Duplicate CopyOption {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCopyCommandOptions_OnlyAllowedForCSV_FileType_ProblemDescription">
            <summary>
              Looks up a localized string similar to Unsupported option encountered for the file type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCopyCommandOptions_OnlyAllowedForCSV_FileType_RuleName">
            <summary>
              Looks up a localized string similar to This option {0} is supported only for CSV file type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCreateCertificateValidation_ExpiryDateLessthanStartDate_ProblemDescription">
            <summary>
              Looks up a localized string similar to Expiry Date must be greater than Start Date.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCreateCertificateValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Please create a master key in the database or open the master key in the session before performing this operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwCreateCertificateValidation_RuleName">
            <summary>
              Looks up a localized string similar to Please create a master key in the database or open the master key in the session before performing this operation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwIdentityColumn_CannotBeDistributionColumn_RuleName">
            <summary>
              Looks up a localized string similar to Identity column is not supported as a distribution column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwIndex_NoClusteredRowstoreIndexOnTableWithColumnstoreIndex_RuleName">
            <summary>
              Looks up a localized string similar to A clustered rowstore Index cannot be created on an Azure Synapse table when a clustered columnstore index already exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_AggregateGroupBy">
            <summary>
              Looks up a localized string similar to A materialized view needs to include at least one aggregation function in the SELECT list or a GROUP BY clause with all columns in the SELECT list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_GroupByColumnsNumbers">
            <summary>
              Looks up a localized string similar to Cannot create materialized view {0} because the maximum limit of 32 columns for GROUP BY column list has been exceeded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_MissingCountBig">
            <summary>
              Looks up a localized string similar to COUNT_BIG(*) is required in the SELECT list when creating a materialized view using this tool..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_MissingCountBigWithSum">
            <summary>
              Looks up a localized string similar to COUNT_BIG(a) is required when using this tool to create a materialized view that has SUM(a) in the SELECT list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_MissingForAppend">
            <summary>
              Looks up a localized string similar to FOR_APPEND option is required when using this tool to create a materialized view that has MIN/MAX aggregate in the SELECT list..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_NotSupportedAvg">
            <summary>
              Looks up a localized string similar to Cannot create a materialized view in this tool with AVG(a) in the SELECT list. Replace it with SUM(a), COUNT_BIG(a)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_NotSupportedCount">
            <summary>
              Looks up a localized string similar to Cannot create a materialized view in this tool with COUNT(a). Replace it with COUNT_BIG(a)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidation_ProblemDescription_NotSupportedStdev">
            <summary>
              Looks up a localized string similar to Cannot create a materialized view in this tool with {0}. Replace it with SUM, SUM(square), COUNT and COUNT_BIG..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaterializedViewValidatione_ProblemDescription">
            <summary>
              Looks up a localized string similar to Required column is missing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaxWorkloadClassifier_ProblemDescription">
            <summary>
              Looks up a localized string similar to Number of workload classifiers cannot exceed 100..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaxWorkloadClassifier_RuleName">
            <summary>
              Looks up a localized string similar to Number of workload classifiers cannot exceed 100..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaxWorkloadGroups_ProblemDescription">
            <summary>
              Looks up a localized string similar to Number of workload groups cannot exceed 20..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMaxWorkloadGroups_RuleName">
            <summary>
              Looks up a localized string similar to Number of workload groups cannot exceed 20..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMergeMatchClauseValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to An action of type {0} cannot appear more than once in a {1} clause of a MERGE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwMergeMatchClauseValidation_RuleName">
            <summary>
              Looks up a localized string similar to An action of type {0} cannot appear more than once in a {1} clause of a MERGE statement..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwPredictParameterValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Unsupported RUNTIME parameter value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwPredictParameterValidation_RuleName">
            <summary>
              Looks up a localized string similar to Unsupported RUNTIME parameter value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwRejectedRowLocationValidation_RuleName">
            <summary>
              Looks up a localized string similar to Rejected row location option is only supported for delimited text file format..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwSymmetricKeyValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Global temporary keys are not allowed. You can only use local temporary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwSymmetricKeyValidation_RuleName">
            <summary>
              Looks up a localized string similar to Global temporary keys are not allowed. You can only use local temporary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwTable_DistributionColumnConstraints_RuleName">
            <summary>
              Looks up a localized string similar to An Azure Synapse table must not have a default constraint defined on the distribution column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwUDF_DoNotModifyDatabaseState_ProblemDescription">
            <summary>
              Looks up a localized string similar to You cannot use types or statements that modify the database state..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwUDF_DoNotModifyDatabaseState_RuleName">
            <summary>
              Looks up a localized string similar to User-defined functions cannot be used to perform actions that modify the database state..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwView_Indexed_RuleName">
            <summary>
              Looks up a localized string similar to An Azure Synapse view cannot be indexed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwView_NoExpand_RuleName">
            <summary>
              Looks up a localized string similar to NOEXPAND cannot be applied to an Azure Synapse view..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwWorkloadClassifierStartEndTime_ProblemDescription">
            <summary>
              Looks up a localized string similar to Both StartTime and EndTime are required and cannot have the same value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.DwWorkloadClassifierStartEndTime_RuleName">
            <summary>
              Looks up a localized string similar to Both StartTime and EndTime are required and cannot have the same value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EdgeConstraintMustReferenceNodeTables_RuleName">
            <summary>
              Looks up a localized string similar to Edge must reference nodes rule..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EdgeConstraintsMustReferenceNodeTables">
            <summary>
              Looks up a localized string similar to Edge constraints must reference node tables, please check that all constraints have node tables on both sides..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EdgeConstraintsMustReferenceNodeTables_ProblemDescription">
            <summary>
              Looks up a localized string similar to Edge constraints must reference node tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_ChangeDataCaptureOn">
            <summary>
              Looks up a localized string similar to Column encryption is not supported for table {0} because it has change data capture set to on..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_ColumnEncryptionRowGuidColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it has a ROWGUIDCOL identity property..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_ColumnEncryptionUnsupportedDatatype">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted. Column encryption is not supported on columns with Xml, RowVersion, Image, NText, Text, Sql_Variant, HierarchyId, Geography, Geometry, Timestamp, Sysname, or user-defined data types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_DependentComputedColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because the computed column {1} depends on it..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedCheckConstraint">
            <summary>
              Looks up a localized string similar to Column {0} cannot be both encrypted and in a check constraint other than a null check constraint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedClusteredIndex">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted using randomized encryption because it has a clustered index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedDefaultConstraint">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it has a default constraint..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedFullTextColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be both encrypted and have full text index enabled..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedIdentityColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it is an identity column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedNonClusteredIndex">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted using randomized encryption because it has a nonclustered index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedPartitionColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it is a partitioning column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedPrimaryKey">
            <summary>
              Looks up a localized string similar to Column {0} is a primary key column and is therefore not valid for randomized encryption..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedSparseColumnSet">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it is sparse and table {1} has a column set defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedStatisticsColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted using randomized encryption because it is used in a statistic..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_EncryptedUniqueKey">
            <summary>
              Looks up a localized string similar to Column {0} is a unique column and is therefore not valid for randomized encryption..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_FilestreamColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it is configured to use filestream storage..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_MaskedEncryptedColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it has a masking function..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_PrimaryKeyChangeTrackingColumn">
            <summary>
              Looks up a localized string similar to Column {0} cannot be encrypted because it is a primary key column in table {1} which has change tracking set to on..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EncryptedColumnValidation_ProblemDescription_PrimaryKeyForeignKeyEncryptionMismatch">
            <summary>
              Looks up a localized string similar to The foreign key reference from column {1} to column {0} is not allowed because the columns have different encryption schemes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EndPointRule_ProblemDescription_DATABASE_MIRRORING">
            <summary>
              Looks up a localized string similar to Only one TCP endpoint can be set to DATABASE_MIRRORING..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EndPointRule_ProblemDescription_SERVICE_BROKER">
            <summary>
              Looks up a localized string similar to Only one TCP endpoint can be set to SERVICE_BROKER..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.EndPointRule_RuleName">
            <summary>
              Looks up a localized string similar to Only one TCP endpoint can be set to DATABASE_MIRRORING or SERVICE_BROKER..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ExternalTableValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to The external table &apos;{0}&apos; has an index or a trigger &apos;{1}&apos; defined.  Indexes and triggers are not supported on external tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ExternalTableValidation_RuleName">
            <summary>
              Looks up a localized string similar to External table validation failed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FileStream_ProblemDescription_FILESTREAMON">
            <summary>
              Looks up a localized string similar to FILESTREAM_ON cannot be specified when a table has no FILESTREAM columns. Remove the FILESTREAM_ON clause from the statement, or add a FILESTREAM column to the table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FileStream_ProblemDescription_ROWGUIDCOLUMN">
            <summary>
              Looks up a localized string similar to A table with FILESTREAM column(s) must have a non-NULL unique ROWGUID column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FileStream_RuleName">
            <summary>
              Looks up a localized string similar to You must have a FILESTREAM column to use FILESTREAM_ON in a table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ForeignKeyColumnTypeNumberMustMatch_ProblemDescription_NumberOfColumns">
            <summary>
              Looks up a localized string similar to The number of referencing columns in the foreign key differs from the number of referenced columns for table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ForeignKeyColumnTypeNumberMustMatch_ProblemDescription_TypeMismatch">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; is not the same data type as the referencing column &apos;{1}&apos; in the foreign key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ForeignKeyColumnTypeNumberMustMatch_RuleName">
            <summary>
              Looks up a localized string similar to The number and the type of columns in the foreign key must match the number and the type of columns in the referenced primary key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ForeignKeyReferencePKUnique_ProblemDescription">
            <summary>
              Looks up a localized string similar to The referenced table &apos;{0}&apos; contains no primary or candidate keys that match the referencing column list in the foreign key. If the referenced column is a computed column, it should be persisted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ForeignKeyReferencePKUnique_RuleName">
            <summary>
              Looks up a localized string similar to A foreign key constraint must reference a primary key constraint, a unique key constraint, or a unique index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FullTextIndexColumn_ProblemDescription80">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; cannot be used for full-text search because it is not a character-based column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FullTextIndexColumn_ProblemDescription90">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; cannot be used for full-text search because its type is not character-based, image, or varbinary(max)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.FullTextIndexColumn_RuleName">
            <summary>
              Looks up a localized string similar to Only columns of type char, varchar, nchar, nvarchar, text, ntext, image, xml, or varbinary can be indexed for full-text search..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IdentityColumnValidation_ProblemDescription_InvalidType">
            <summary>
              Looks up a localized string similar to The identity column &apos;{0}&apos; must be of data type int, bigint, smallint, tinyint, decimal, or numeric with a scale of 0, and the column must not be nullable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IdentityColumnValidation_ProblemDescription_MoreThanOneIdentity">
            <summary>
              Looks up a localized string similar to The table &apos;{0}&apos; has more than one identity column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IdentityColumnValidation_RuleName">
            <summary>
              Looks up a localized string similar to Only one identity column can be created for each table, and the column must be of an integer type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IncrementalStatisticsValidation_ProblemDescription_FilterNotSupported">
            <summary>
              Looks up a localized string similar to Incremental statistics are not supported on statistics created with filter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IncrementalStatisticsValidation_ProblemDescription_ViewNotSupported">
            <summary>
              Looks up a localized string similar to Incremental statistics are not supported on statistics created on views.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.IncrementalStatisticsValidation_RuleName">
            <summary>
              Looks up a localized string similar to Incremental statistics are not supported on certain statistics types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.InsertIntoIdentityColumn_ProblemDescription">
            <summary>
              Looks up a localized string similar to An explicit value for the identity column in a table or a table-valued function ({0}) can be specified only when a column list is used..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.InsertIntoIdentityColumn_RuleName">
            <summary>
              Looks up a localized string similar to An identity column can be specified only when an INSERT INTO statement is used to insert values into that column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.InterpreterErrorRouter_RuleName">
            <summary>
              Looks up a localized string similar to Routers interpreter errors..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ISqlSpecifiesStorageDataCompressionFilestreamOnClause_ProblemDescription">
            <summary>
              Looks up a localized string similar to In-lined constraints do not support the FILESTREAM_ON clause. The FILESTREAM_ON clause must be added to the table or the constraint must not be in-lined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ISqlSpecifiesStorageDataCompressionFilestreamOnClause_RuleName">
            <summary>
              Looks up a localized string similar to Constraints do not support the FILESTREAM_ON clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.LedgerTableColumnUserDefinedTypeValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Ledger tables are not allowed to have any user-defined data type columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.LedgerTableColumnUserDefinedTypeValidation_RuleName">
            <summary>
              Looks up a localized string similar to The column {0] cannot have a user-defined type because it belongs to a ledger table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.LedgerTableFullTextIndexValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to Ledger tables are not allowed to have any full text indexes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.LedgerTableFullTextIndexValidation_RuleName">
            <summary>
              Looks up a localized string similar to The full text index {0} cannot be created because it belongs to a ledger table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MasterKeyExistsForCredential_ProblemDescription">
            <summary>
              Looks up a localized string similar to Master Key must be created before a database scoped credential.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MasterKeyExistsForCredential_RuleName">
            <summary>
              Looks up a localized string similar to The Database Scoped credential cannot be used without a master key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MatchingSignatureNotFoundInAssembly">
            <summary>
              Looks up a localized string similar to A method with a matching signature was not found in the loaded assembly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MatchingTypeNotFoundInAssembly">
            <summary>
              Looks up a localized string similar to The referenced type with the required common language runtime (CLR) attribute was not found in the loaded assembly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInIndexKey_ProblemDescription">
            <summary>
              Looks up a localized string similar to More than {0} columns are specified in {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInIndexKey_ProblemDescriptionIn">
            <summary>
              Looks up a localized string similar to More than {0} columns are specified in {1} in {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInIndexKey_RuleName">
            <summary>
              Looks up a localized string similar to Do not specify more than 16 columns in an index key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInTable_ProblemDescription_1024Columns">
            <summary>
              Looks up a localized string similar to A table, view, or table-valued function ({0}) has more than {1} columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInTable_RuleName90">
            <summary>
              Looks up a localized string similar to Do not create more than 1024 columns in a table, view, or table-valued function..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MaxColumnInTable100_ProblemDescription_Columns">
            <summary>
              Looks up a localized string similar to A table that has a defined column set can have up to 30,000 columns with a maximum of 1024 non-sparse and computed columns. Tables that do not have column sets are limited to 1024 columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_HashIndexesOnlyOnMemoryOptimizedObjects">
            <summary>
              Looks up a localized string similar to Hash indexes are permitted only in memory optimized tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_InvalidForeignKeyRelationship">
            <summary>
              Looks up a localized string similar to Foreign key relationships between memory optimized tables and non-memory optimized tables are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_NonMemoryOptimizedTableCannotBeAccessed">
            <summary>
              Looks up a localized string similar to Natively compiled stored procedures cannot access tables that are not memory optimized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_NonNativeTriggersNotAllowedOnMemoryOptimizedTables">
            <summary>
              Looks up a localized string similar to Triggers on memory-optimized tables must use WITH NATIVE_COMPILATION..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_OnlyNotNullableColumnsOnIndexes">
            <summary>
              Looks up a localized string similar to Nullable columns in the index key are not supported with indexes on memory optimized tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_OptionOnlyForHashIndexes">
            <summary>
              Looks up a localized string similar to The option &apos;{0}&apos; can be specified only for hash indexes..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_SyntaxNotSupportedOnHekatonElement">
            <summary>
              Looks up a localized string similar to Invalid syntax for a memory optimized object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_UnsupportedForeignKeyReference">
            <summary>
              Looks up a localized string similar to The referenced table &apos;{0}&apos; contains no primary key that matches the referencing column list in the foreign key. Foreign keys in memory-optimized tables must reference primary keys..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_UnSupportedOption">
            <summary>
              Looks up a localized string similar to The option &apos;{0}&apos; is not supported with memory optimized tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_ValidatePrimaryKeyForSchemaAndDataTables">
            <summary>
              Looks up a localized string similar to The memory optimized table with DURABILITY=SCHEMA_AND_DATA must have a primary key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_ProblemDescription_ValidatePrimaryKeyForSchemaOnlyTables">
            <summary>
              Looks up a localized string similar to The memory optimized table must have at least one index or a primary key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MemoryOptimizedObjectsValidation_RuleName">
            <summary>
              Looks up a localized string similar to Memory-optimized objects must follow certain restrictions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MismatchedName_ProblemDescription">
            <summary>
              Looks up a localized string similar to The object reference {0} differs only by case from the object definition {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MismatchedName_RuleName">
            <summary>
              Looks up a localized string similar to The object definition and the object reference must match exactly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MultiFullTextIndexOnTable_ProblemDescription">
            <summary>
              Looks up a localized string similar to The table or indexed view &apos;{0}&apos; cannot have more than one full-text index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MultiFullTextIndexOnTable_RuleName">
            <summary>
              Looks up a localized string similar to Each table or indexed view can have no more than one full-text index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MultiSecurityPoliciesOnTargetObject_ProblemDescription">
            <summary>
              Looks up a localized string similar to The target object &apos;{0}&apos; is referenced by multiple enabled security policies: &apos;{1}&apos;. A target object can only be referenced by one enabled security policy..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.MultiSecurityPoliciesOnTargetObject_RuleName">
            <summary>
              Looks up a localized string similar to A target object cannot be referenced by multiple enabled security policies..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NoBlockPredicatesTargetingViews_ProblemDescription">
            <summary>
              Looks up a localized string similar to The Security Policy &apos;{0}&apos; has a BLOCK predicate targeting view &apos;{1}&apos;. BLOCK predicates targeting views are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NoBlockPredicatesTargetingViews_RuleName">
            <summary>
              Looks up a localized string similar to A Security Policy cannot contain a BLOCK predicate targeting a view..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NoMatchingErrorCode">
            <summary>
              Looks up a localized string similar to The error code for for error message &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NonNullPrimaryKey_ProblemDescription_NonNullSimpleColumn">
            <summary>
              Looks up a localized string similar to A primary key constraint cannot be defined on the nullable column &apos;{0}&apos; in the table or user-defined table type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NonNullPrimaryKey_ProblemDescription_NotPersistedComputedColumn">
            <summary>
              Looks up a localized string similar to A PRIMARY KEY constraint could not be defined on column &apos;{0}&apos; in table or user-defined table type &apos;{1}&apos;. The computed column has to be persisted and not nullable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.NonNullPrimaryKey_RuleName">
            <summary>
              Looks up a localized string similar to The primary key constraint must be on column that is not null..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneClusteredIndex_AzureProblemDescription">
            <summary>
              Looks up a localized string similar to Table {0} does not have a clustered index.  Clustered indexes are required for inserting data in this version of SQL Server..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneClusteredIndex_ProblemDescription">
            <summary>
              Looks up a localized string similar to The table or view ({0}) has more than one clustered index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneClusteredIndex_RuleName">
            <summary>
              Looks up a localized string similar to Do not create more than one clustered index on a table or view..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneDefaultConstraintPerColumn_ProblemDescription">
            <summary>
              Looks up a localized string similar to Column already has a DEFAULT bound to it..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneDefaultConstraintPerColumn_RuleName">
            <summary>
              Looks up a localized string similar to You cannot have more than one default constraint for a column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneMasterKey_ProblemDescription">
            <summary>
              Looks up a localized string similar to More than one master key is defined for the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneMasterKey_RuleName">
            <summary>
              Looks up a localized string similar to You can define only one master key for the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OnePrimaryKey_ProblemDescription">
            <summary>
              Looks up a localized string similar to A table or table-valued function ({0}) contains more than one primary key..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OnePrimaryKey_RuleName">
            <summary>
              Looks up a localized string similar to Do not create more than one primary key on a table or a table-valued function..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneTemporalPeriod_ProblemDescription">
            <summary>
              Looks up a localized string similar to System-time period definition is invalid or period columns have invalid schemas..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OneTemporalPeriod_RuleName">
            <summary>
              Looks up a localized string similar to Table containing system-time period must have proper period and column schemas defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.OperationsOnEncryptedColumn_RuleName">
            <summary>
              Looks up a localized string similar to Operation is not supported on encrypted column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ORSeparator">
            <summary>
              Looks up a localized string similar to  or .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionOnObjectSecurableValidation_ProblemDescription_InvalidPermissionForObject">
            <summary>
              Looks up a localized string similar to The permission &apos;{0}&apos; is not valid for the target object &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionOnObjectSecurableValidation_RuleName">
            <summary>
              Looks up a localized string similar to Permission statements must specify permission that is valid for the target object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionStatementValidation_ProblemDescription_ConflictingColumnStatements">
            <summary>
              Looks up a localized string similar to Permission statement applied to column conflicts with another other permission statement for the same column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionStatementValidation_ProblemDescription_ConflictingPermissionsOnSecurable">
            <summary>
              Looks up a localized string similar to Permission statements differing only by action are not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionStatementValidation_ProblemDescription_DuplicatePermissionOnSecurable">
            <summary>
              Looks up a localized string similar to There is more than one &apos;{0}&apos; permission statement for &apos;{1}&apos; defined against securable &apos;{2}&apos; for grantee &apos;{3}&apos; with the same grantor..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PermissionStatementValidation_RuleName">
            <summary>
              Looks up a localized string similar to Permission statements cannot be duplicated or conflict with each other..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PrimaryXMLIndexClustered_ProblemDescription">
            <summary>
              Looks up a localized string similar to To create a primary XML index on table {0}, the table must have a clustered primary key that has fewer than {1} columns in it..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.PrimaryXMLIndexClustered_RuleName">
            <summary>
              Looks up a localized string similar to You must create a valid primary key with fewer than {0} columns in it before you create a primary XML index on the table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.ReferencesToMemoryOptimizedTablesValidation_RuleName">
            <summary>
              Looks up a localized string similar to Memory-optimized tables can be referenced by only a few object types..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SchemaBindingOnSecurityPoliciesValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to The Security Policy &apos;{0}&apos; uses schema binding but the &apos;{1}&apos; predicate targeting &apos;{2}&apos; does not use schema binding..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SchemaBindingOnSecurityPoliciesValidation_RuleName">
            <summary>
              Looks up a localized string similar to A security policy that uses schema binding requires that all predicate functions use schema binding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SecurityPredicateTargetObjectValidation_ProblemDescription">
            <summary>
              Looks up a localized string similar to The Security Policy &apos;{0}&apos; contains a predicate targeting &apos;{1}&apos;, which is not a Table or a View.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SecurityPredicateTargetObjectValidation_RuleName">
            <summary>
              Looks up a localized string similar to A security predicate must only target either a Table or a View.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SelectAssignRetrieval_ProblemDescription">
            <summary>
              Looks up a localized string similar to The same SELECT statement is not only assigning a value to a variable but is also retrieving data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SelectAssignRetrieval_RuleName">
            <summary>
              Looks up a localized string similar to A SELECT statement that assigns a value to a variable must not also retrieve data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SequenceValueValidation_ProblemDescription_InvalidDataType">
            <summary>
              Looks up a localized string similar to The user-defined data type of the sequence must use a base type supported by sequences (tinyint, smallint, int, bigint, decimal, or numeric)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SequenceValueValidation_ProblemDescription_ValueOutOfRange">
            <summary>
              Looks up a localized string similar to One or more property values are out of the range of allowed values for the data type of the Sequence..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SequenceValueValidation_RuleName">
            <summary>
              Looks up a localized string similar to Values specified for Sequence properties must be within the range of the data type of the sequence..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.StorageShouldNotSetOnDifferentInstance_ProblemDescription">
            <summary>
              Looks up a localized string similar to {0}: {1} cannot not be set on both the {2}: {3} and the clustered {4}: {5}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.StorageShouldNotSetOnDifferentInstance_RuleName">
            <summary>
              Looks up a localized string similar to File group, partition scheme, file stream and data compression options must be specified on the same object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SubroutineParameterReadOnly_ProblemDescription_NonUDTTReadOnly">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; cannot be declared READONLY, because it is not a table-valued parameter..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SubroutineParameterReadOnly_ProblemDescription_UDTTReadOnly">
            <summary>
              Looks up a localized string similar to The table-valued parameter &apos;{0}&apos; must be declared with the READONLY option..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SubroutineParameterReadOnly_RuleName">
            <summary>
              Looks up a localized string similar to Table type parameters must be defined with the READONLY property..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_ComputedColumns_ProblemDescription">
            <summary>
              Looks up a localized string similar to System-versioned temporal tables with computed columns are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_ComputedColumns_RuleName">
            <summary>
              Looks up a localized string similar to System-versioned current table has computed columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_HistoryTableConstraints_RuleName">
            <summary>
              Looks up a localized string similar to System-versioned history table must not have any constraints defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_MultipleCurrentTables_ProblemDescription">
            <summary>
              Looks up a localized string similar to More than one system-versioned temporal tables are referencing the same history table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_MultipleCurrentTables_RuleName">
            <summary>
              Looks up a localized string similar to Multiple current tables using same history table.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_NoAlwaysEncryptedCols_ProblemDescription">
            <summary>
              Looks up a localized string similar to System-versioned temporal tables with always encrypted columns are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_NoAlwaysEncryptedCols_RuleName">
            <summary>
              Looks up a localized string similar to System-versioned current table has always encrypted columns..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_PrimaryKey_RuleName">
            <summary>
              Looks up a localized string similar to System-versioned temporal table &apos;{0}&apos; must have a primary key defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_SchemaMismatch_ColumnCount_ProblemDescription">
            <summary>
              Looks up a localized string similar to System-versioned current and history tables do not have matching schemas (number of columns does not match)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_SchemaMismatch_ProblemDescription">
            <summary>
              Looks up a localized string similar to System-versioned current and history tables do not have matching schemas. Mismatched column: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.SystemVersionedTemporalTable_SchemaMismatch_RuleName">
            <summary>
              Looks up a localized string similar to Schema mismatch betweeen system-versioned current and history tables..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.TableShouldNotHaveStorage_ProblemDescription">
            <summary>
              Looks up a localized string similar to {0}: {1} cannot be specified on {2}: {3} when there is the clustered {4}: {5} on the table..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.TableShouldNotHaveStorage_RuleName">
            <summary>
              Looks up a localized string similar to If there is a clustered index or non in-lined clustered constraint on the table. File group, partition scheme and data compression options specified on the table will not take effect..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.TableVariablePrefix_ProblemDescription">
            <summary>
              Looks up a localized string similar to You cannot use a table variable as a column prefix in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.TableVariablePrefix_RuleName">
            <summary>
              Looks up a localized string similar to Do not specify a table variable name as a prefix to its column..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.UndeployableElementValidation_RuleName">
            <summary>
              Looks up a localized string similar to Element marked as undeployable..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.UndeployableOrphanedUserErrorMessage">
            <summary>
              Looks up a localized string similar to The element {0} has been orphaned from its login and cannot be deployed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.UsingXMLIndex_DifferentColumnForPrimaryIndex">
            <summary>
              Looks up a localized string similar to The primary XML index &apos;{0}&apos; does not exist on table &apos;{1}&apos; column &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.UsingXMLIndex_ProblemDescription">
            <summary>
              Looks up a localized string similar to The secondary XML index {0} specifies a non-primary XML index {1} inside the USING XML INDEX clause..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.UsingXMLIndex_RuleName">
            <summary>
              Looks up a localized string similar to You must specify a primary XML index inside the USING XML INDEX clause when you create a secondary XML index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.VardecimalOptionRule_ProblemDescription">
            <summary>
              Looks up a localized string similar to You cannot use the vardecimal storage format in &apos;{0}&apos; because you have not enabled that format for the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.VardecimalOptionRule_RuleName">
            <summary>
              Looks up a localized string similar to You can use the vardecimal storage format only if that format has been enabled for the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.WildCardExpansion_ProblemDescription">
            <summary>
              Looks up a localized string similar to The wildcard character in {0} could not be expanded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.WildCardExpansion_RuleName">
            <summary>
              Looks up a localized string similar to The wildcard character could not be expanded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.XMLIndexOnlyXMLTypeColumn_ProblemDescription">
            <summary>
              Looks up a localized string similar to The column {0} in index {1} is not of type XML. The XML index could not be created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.XMLIndexOnlyXMLTypeColumn_ProblemDescription_SparseColumnSet">
            <summary>
              Looks up a localized string similar to The sparse column set &apos;{0}&apos; cannot be indexed by XML index &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationResourceString.XMLIndexOnlyXMLTypeColumn_RuleName">
            <summary>
              Looks up a localized string similar to Do not specify an XML index on a column whose data type is not XML..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationRule">
            <summary>
            Base class for all validation rules. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationRule.Analyze(Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            casting to SQL-specific types
            </summary>
            <param name="modelElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SqlValidationRuleProxy">
            <summary>
            Sql Validation Rule proxy class
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SubroutineParameterReadOnlyRule">
            <summary>
            READONLY can be used on only user defined table type.
            When an user defined table type is used as a parameter it has to be specified as READONLY
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SubroutineParameterReadOnlyRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_ComputedColumns">
            <summary>
            Validate system-versioning temporal specifics
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_ComputedColumns.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_ConstraintsOnHistoryTable">
            <summary>
            Validate if temporal history table has constraints. None are allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_ConstraintsOnHistoryTable.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_MultipleCurrentTables">
            <summary>
            Validate system-versioning temporal specifics
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_MultipleCurrentTables.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_NoAlwaysEncryptedColumns">
            <summary>
            Validate system-versioning temporal specifics
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_NoAlwaysEncryptedColumns.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_PrimaryKey">
            <summary>
            Validate system-versioning temporal specifics
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_PrimaryKey.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_SchemaMismatch">
            <summary>
            Validate system-versioning temporal specifics
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.SystemVersionedTemporalTable_SchemaMismatch.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.TableVariablePrefixRuleBase">
            <summary>
            cannot reference a column in a table variable with table variable prefix.
            For example, you can't do
            SELECT @tableVariable.c1 from @tableVariable
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.TableVariablePrefixRuleBase.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlModelElement"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.TableVariablePrefixVisitor.AddSqlTableType(System.String,Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeReference)">
            <summary>
            Add variableName to _declaredTableVariableParameter if dataType is Sql100TableType
            </summary>
            <param name="variableName"></param>
            <param name="dataType"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.UsingXMLIndexRule">
            <summary>
            USING XML INDEX clause can only have a primary xml index. 
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.UsingXMLIndexRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.VardecimalOptionRule">
            <summary>
            You can use the vardecimal storage format only if that format has been enabled for the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.VardecimalOptionRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.WildCardExpansionRule">
            <summary>
            If a wild card expansion is used in a view, it has to be expandable
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.WildCardExpansionRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Sql.Validation.XMLIndexOnlyXMLTypeColumnRule">
            <summary>
            An XML Index may only be created on an XML data type column
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Sql.Validation.XMLIndexOnlyXMLTypeColumnRule.Analyze(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSchemaModel,Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlModelElement,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleSetting,Microsoft.Data.Tools.Schema.Sql.RuleEngine.SqlRuleExecutionContext)">
            <summary>
            perform actual analysis
            </summary>
            <param name="sqlSchemaModel"></param>
            <param name="sqlElement"></param>
            <param name="fragment"></param>
            <param name="ruleSetting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.DbCommandWrapper">
            <summary>
            Wraps <see cref="T:System.Data.IDbCommand"/> objects that could be a <see cref="T:Microsoft.Data.SqlClient.SqlCommand"/> or
            a <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand"/>, providing common methods across both.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.DbCommandWrapper.GetAsSqlCommand">
            <summary>
            Gets this as a SqlCommand by casting (if we know it is actually a SqlCommand)
            or by getting the underlying command (if it's a ReliableSqlCommand)
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.DbConnectionWrapper">
            <summary>
            Wraps <see cref="T:System.Data.IDbConnection"/> objects that could be a <see cref="T:Microsoft.Data.SqlClient.SqlConnection"/> or
            a <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection"/>, providing common methods across both.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.DbConnectionWrapper.GetAsSqlConnection">
            <summary>
            Gets this as a SqlConnection by casting (if we know it is actually a SqlConnection)
            or by getting the underlying connection (if it's a ReliableSqlConnection)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.DbConnectionWrapper.CloneAndOpenConnection">
            <summary>
            Clones the connection and ensures it's opened. 
            If it's a SqlConnection it will clone it,
            and for ReliableSqlConnection it will clone the underling connection.
            The reason the entire ReliableSqlConnection is not cloned is that it includes
            several callbacks and we don't want to try and handle deciding how to clone these
            yet.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Boolean)">
            <summary>
            Opens the connection and sets the lock/command timeout.  This routine
            will assert if pooling!=false.
            </summary>
            <returns>The opened connection</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(System.Data.IDbConnection)">
            <summary>
            Opens the connection (if it is not already) and sets
            the lock/command timeout.
            </summary>
            <param name="conn">The connection to open</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(System.String,System.Boolean)">
            <summary>
            Opens the connection and sets the lock/command timeout.  This routine
            will assert if pooling!=false.
            </summary>
            <returns>The opened connection</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,System.Boolean)">
            <summary>
            Opens the connection and sets the lock/command timeout and pooling=false.
            </summary>
            <returns>The opened connection</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,System.Action{System.Data.IDbConnection},System.Predicate{System.Exception},System.Boolean)">
            <summary>
            Opens a connection using 'csb' as the connection string.  Provide
            'usingConnection' to execute T-SQL against the open connection and
            'catchException' to handle errors.
            </summary>
            <param name="csb">The connection string builder used when opening the IDbConnection</param>
            <param name="usingConnection">delegate called when the IDbConnection has been successfully opened</param>
            <param name="catchException">delegate called when an exception has occurred.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <param name="useRetry">Should retry logic be used when opening the connection</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.OpenConnection(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Action{System.Data.IDbConnection},System.Predicate{System.Exception},System.Boolean)">
            <summary>
            Opens a connection using the connection factory.  Provide
            'usingConnection' to execute T-SQL against the open connection and
            'catchException' to handle errors.
            </summary>
            <param name="connectionFactory">The connection factory used when opening the IDbConnection</param>
            <param name="usingConnection">delegate called when the IDbConnection has been successfully opened</param>
            <param name="catchException">delegate called when an exception has occurred.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <param name="useRetry">Should retry logic be used when opening the connection</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ConfigureConnectionFactory(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,System.String,System.Boolean)">
             <summary>
             This method provides the provides a connection string configured with the specified database name.
             This is also an opportunity to decrypt the connection string based on the encryption/decryption strategy.
             InvalidConnectionStringException could be thrown since this routine attempts to restore the connection
             string if 'restoreConnectionString' is true.
            
             Will only set DatabaseName/ApplicationName if the value is not null.
             </summary>
            
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.SetLockAndCommandTimeout(System.Data.IDbConnection)">
            <summary>
            Optional 'initializeConnection' routine.  This sets the lock and command timeout for the connection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ExecuteNonQuery(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,System.String,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception},System.Boolean)">
            <summary>
            Opens a IDbConnection, creates a IDbCommand and calls ExecuteNonQuery against the connection.
            </summary>
            <param name="csb">The connection string.</param>
            <param name="commandText">The scalar T-SQL command.</param>
            <param name="initializeCommand">Optional delegate to initialize the IDbCommand before execution.
            Default is SqlConnectionHelper.SetCommandTimeout</param>
            <param name="catchException">delegate called when an exception has occurred.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <param name="useRetry">Should a retry policy be used when calling ExecuteNonQuery</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ExecuteNonQuery(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception},System.Boolean)">
            <summary>
            Opens a IDbConnection, creates a IDbCommand and calls ExecuteNonQuery against the connection.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="commandText">The scalar T-SQL command.</param>
            <param name="initializeCommand">Optional delegate to initialize the IDbCommand before execution.
            Default is SqlConnectionHelper.SetCommandTimeout</param>
            <param name="catchException">delegate called when an exception has occurred.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <param name="useRetry">Should a retry policy be used when calling ExecuteNonQuery</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Creates a IDbCommand and calls ExecuteNonQuery against the connection.
            </summary>
            <param name="conn">The connection.  This must be opened.</param>
            <param name="commandText">The scalar T-SQL command.</param>
            <param name="initializeCommand">Optional delegate to initialize the IDbCommand before execution.
            Default is SqlConnectionHelper.SetCommandTimeout</param>
            <param name="catchException">Optional exception handling.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Creates a IDbCommand and calls ExecuteScalar against the connection.
            </summary>
            <param name="conn">The connection.  This must be opened.</param>
            <param name="commandText">The scalar T-SQL command.</param>
            <param name="initializeCommand">Optional delegate to initialize the IDbCommand before execution.
            Default is SqlConnectionHelper.SetCommandTimeout</param>
            <param name="catchException">Optional exception handling.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
            <returns>The scalar result</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Action{System.Data.IDataReader},System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Creates a IDbCommand and calls ExecuteReader against the connection.
            </summary>
            <param name="conn">The connection to execute the reader on.  This must be opened.</param>
            <param name="commandText">The command text to execute</param>
            <param name="readResult">A delegate used to read from the reader</param>
            <param name="initializeCommand">Optional delegate to initialize the IDbCommand object</param>
            <param name="catchException">Optional exception handling.  Pass back 'true' to handle the
            exception, 'false' to throw. If Null is passed in then all exceptions are thrown.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.SetCommandTimeout(System.Data.IDbCommand)">
            <summary>
            optional 'initializeCommand' routine.  This initializes the IDbCommand
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsSqlDbEngineId(System.Int32)">
            <summary>
            Returns true is server is a SQLDB
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.AzureVersion(System.Int32)">
            <summary>
            Returns Azure Version given the server version
            </summary>
            <param name="serverVersionMajor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsSqlDwEngineId(System.Int32)">
            <summary>
            Compares the engine edition id of a given database with that of SQL data warehouse.
            </summary>
            <param name="engineEditionId"></param>
            <returns>True if the engine edition id is that of SQL data warehouse</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsServerlessEngineId(System.Int32)">
            <summary>
            Compares the engine edition id of a given database with that of Serverless SQL Pools.
            </summary>
            <param name="engineEditionId"></param>
            <returns>True if the engine edition id is that of Serverless SQL Pools</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.StandardExceptionHandler(System.Exception)">
            <summary>
            Handles the exceptions typically thrown when a SQLConnection is being opened
            </summary>
            <returns>True if the exception was handled</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetDefaultDatabaseFilePath(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Returns the default database path.
            </summary>
            <param name="conn">The connection</param>
            <param name="initializeCommand">The delegate used to initialize the command</param>
            <param name="catchException">The exception handler delegate. If Null is passed in then all exceptions are thrown</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetDefaultDatabaseLogPath(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Returns the log path or null
            </summary>
            <param name="conn">The connection</param>
            <param name="initializeCommand">The delegate used to initialize the command</param>
            <param name="catchException">The exception handler delegate. If Null is passed in then all exceptions are thrown</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetDefaultDatabasePath(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Predicate{System.Exception})">
            <summary>
            Returns the database path or null
            </summary>
            <param name="conn">The connection</param>
            <param name="commandText">The command to issue</param>
            <param name="initializeCommand">The delegate used to initialize the command</param>
            <param name="catchException">The exception handler delegate. If Null is passed in then all exceptions are thrown</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsDatabaseReadonly(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Returns true if the database is readonly.  This routine will swallow the exceptions you might expect from SQL using StandardExceptionHandler.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsDatabaseReadonly(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Returns true if the database is readonly.  This routine will swallow the exceptions you might expect from SQL using StandardExceptionHandler.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo">
            <summary>
            SQL Server information. The result of TSQL queries SERVERPROPERTY('EngineEdition'), SERVERPROPERTY('productversion'), SERVERPROPERTY ('productlevel'), SERVERPROPERTY ('edition')
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.EngineEditionId">
            <summary>
            Edition Id
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.IsCloudServer">
            <summary>
            Indicates if edition is SQL Database or Azure Synapse Analytics
            https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver16
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.IsSqlDb">
            <summary>
            Indicates if edition is SQL Database. Maps with the value of SERVERPROPERTY('EngineEdition')
            https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver16
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.IsSqlDw">
            <summary>
            Indicates if edition is Azure Synapse Analytics (DW). Maps with the value of SERVERPROPERTY('EngineEdition')
            https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver16
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.IsSqlMI">
            <summary>
            Indicates if edition is SQL Managed Instance. Maps with the value of SERVERPROPERTY('EngineEdition')
            https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver16
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.IsServerless">
            <summary>
            Indicates if edition is Azure Synapse serverless SQL pool. Maps with the value of SERVERPROPERTY('EngineEdition')
            https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver16
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerMajorVersion">
            <summary>
            SQL Server major version
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerMinorVersion">
            <summary>
            SQL Server minor version
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerReleaseVersion">
            <summary>
            SQL Server release version
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.EngineEdition">
            <summary>
            Engine edition
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerVersion">
            <summary>
            SQL Server version
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerLevel">
            <summary>
            Server Level
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo.ServerEdition">
            <summary>
            Server Edition
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerVersion(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
             <summary>
             Note: Plumbs through a call to ReliableConnectionHelper to ensure that correct defaults for connections
             are set up in DacFx.
            
             Returns the version of the server.  This routine will throw if an exception is encountered.
             </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerVersion(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Returns the version of the server.  This routine will throw if an exception is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerVersion(System.Data.IDbConnection)">
            <summary>
             Returns the version of the server.  This routine will throw if an exception is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerVersionFromConnection(System.Data.IDbConnection)">
            <summary>
            Returns the version of the server.  This routine will throw if an exception is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetAsSqlConnection(System.Data.IDbConnection)">
            <summary>
            Converts to a SqlConnection by casting (if we know it is actually a SqlConnection)
            or by getting the underlying connection (if it's a ReliableSqlConnection)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.CloneAndOpenConnection(System.Data.IDbConnection,System.Action{Microsoft.Data.SqlClient.SqlConnection})">
            <summary>
            Clones a connection and ensures it's opened.
            If it's a SqlConnection it will clone it,
            and for ReliableSqlConnection it will clone the underling connection.
            The reason the entire ReliableSqlConnection is not cloned is that it includes
            several callbacks and we don't want to try and handle deciding how to clone these
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo.DbCompatibilityLevel">
            <summary>
            Database Compatibility Level
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo.DatabaseName">
            <summary>
            Database Name
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo.Create(Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo,System.String,System.Int32)">
            <summary>
            Creates a new instance given server and db info
            </summary>
            <param name="serverInfo"></param>
            <param name="databaseName"></param>
            <param name="dbCompatibilityLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerAndDatabaseVersion(System.String,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
             <summary>
             Note: Plumbs through a call to ReliableConnectionHelper to ensure that correct defaults for connections
             are set up in DacFx.
            
             Get the version of the server and database using
             the connection string provided.  This routine will
             throw if an exception is encountered.
             </summary>
             <param name="connectionString">The connection string used to connect to the database.</param>
             <param name="info">Basic information about the server</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerAndDatabaseVersion(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
            <summary>
            Get the version of the server and database using
            the connection factory provided.  This routine will
            throw if an exception is encountered.
            </summary>
            <param name="connectionFactory">The connection factory used to connect to the database.</param>
            <param name="info">Basic information about the server</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetServerAndDatabaseVersionUsingConnection(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo@)">
            <summary>
            Get the version of the server and database using
            the connection factory provided.  This routine will
            throw if an exception is encountered.
            </summary>
            <param name="connectionFactory">The connection factory used to connect to the database.</param>
            <param name="info">Basic information about the server</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsAuthenticatingDatabaseMaster(System.Data.IDbConnection)">
            <summary>
            Returns true if the authenticating database is master, otherwise false.  An example of
            false is when the user is a contained user connecting to a contained database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsAuthenticatingDatabaseMaster(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Returns true if the authenticating database is master, otherwise false.  An example of
            false is when the user is a contained user connecting to a contained database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsAuthenticatingDatabaseMaster(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Returns true if the authenticating database is master, otherwise false.  An example of
            false is when the user is a contained user connecting to a contained database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.GetCompleteServerName(System.String)">
            <summary>
            Returns the form of the server as a it's name - replaces . and (localhost)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.TrimConnectionFactory(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Processes a user-supplied connection string and provides a trimmed connection string
            that eliminates everything except for DataSource, InitialCatalog, UserId, Password,
            ConnectTimeout, Encrypt, TrustServerCertificate and IntegratedSecurity.
            </summary>
            <exception cref="T:Microsoft.Data.Tools.Schema.Common.Exceptions.InvalidConnectionStringException">When connection string is invalid</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.IsVersionGreaterThan2012RTM(Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo)">
            <summary>
             Sql 2012 PCU1 introduces breaking changes to metadata queries and adds new Selective XML Index support.
             This method allows components to detect if the <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerInfo"/> represents a build of SQL 2012 after RTM.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.TrimConnectionStringBuilder(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,System.Action{System.String})">
            <summary>
            Processes a user-supplied connection string and provides a trimmed connection string
            that eliminates everything except for DataSource, InitialCatalog, UserId, Password,
            ConnectTimeout, Encrypt, TrustServerCertificate, IntegratedSecurity and Pooling.
            </summary>
            <remarks>
            Pooling is always set to false to avoid connections remaining open.
            </remarks>
            <exception cref="T:Microsoft.Data.Tools.Schema.Common.Exceptions.InvalidConnectionStringException">When connection string is invalid</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.TrimConnectionFactory(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Action{System.String})">
            <summary>
            Processes a user-supplied connection string and provides a trimmed connection string
            that eliminates everything except for DataSource, InitialCatalog, UserId, Password,
            ConnectTimeout, Encrypt, TrustServerCertificate, IntegratedSecurity and Pooling.
            </summary>
            <remarks>
            Pooling is always set to false to avoid connections remaining open.
            </remarks>
            <exception cref="T:Microsoft.Data.Tools.Schema.Common.Exceptions.InvalidConnectionStringException">When connection string is invalid</exception>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection">
            <summary>
            Provides a reliable way of opening connections to and executing commands
            taking into account potential network unreliability and a requirement for connection retry.
            </summary>
            <summary>
            Provides a reliable way of opening connections to and executing commands
            taking into account potential network unreliability and a requirement for connection retry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.CommandType">
            <summary>
            Gets or sets a value that specifies how the <see cref="P:System.Data.Common.DbCommand.CommandText"/> property is interpreted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbConnection"/> used by this <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:System.Data.IDataParameterCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.Transaction">
            <summary>
            Gets or sets the transaction within which the Command object of a .NET Framework data provider executes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the System.Data.DataRow when
            used by the System.Data.IDataAdapter.Update(System.Data.DataSet) method of
            a <see cref="T:System.Data.Common.DbDataAdapter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.Cancel">
            <summary>
            Attempts to cancels the execution of an <see cref="T:System.Data.IDbCommand"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter"/> object.
            </summary>
            <returns>An <see cref="T:System.Data.IDbDataParameter"/> object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the Connection object of a .NET Framework
            data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an SQL statement against the Connection object of a .NET Framework
            data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.ExecuteReader">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"/> against the <see cref="P:System.Data.IDbCommand.Connection"/>
            and builds an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"/> against the <see cref="P:System.Data.IDbCommand.Connection"/>
            and builds an <see cref="T:System.Data.IDataReader"/> using one of the <see cref="T:System.Data.CommandBehavior"/> values.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the
            resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand.Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.#ctor(System.String,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy)">
            <summary>
            Initializes a new instance of the ReliableSqlConnection class with a given connection string
            and a policy defining whether to retry a request if the connection fails to be opened or a command
            fails to be successfully executed.
            </summary>
            <param name="connectionString">The connection string used to open the SQL Azure database.</param>
            <param name="connectionRetryPolicy">The retry policy defining whether to retry a request if a connection fails to be established.</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry a request if a command fails to be executed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.#ctor(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy,System.Func{System.String})">
            <summary>
            Initializes a new instance of the ReliableSqlConnection class with a given connection string
            and a policy defining whether to retry a request if the connection fails to be opened or a command
            fails to be successfully executed.
            </summary>
            <param name="connection">The connection used to the SQL Azure database.</param>
            <param name="connectionRetryPolicy">The retry policy defining whether to retry a request if a connection fails to be established.</param>
            <param name="commandRetryPolicy">The retry policy defining whether to retry a request if a command fails to be executed.</param>
            <param name="authProvider">The reference to GetValidAccessToken function to set the accesstoken in sqlconncetion for universal authentication.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
             resetting managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
             resetting managed and unmanaged resources.
            </summary>
            <param name="disposing">A flag indicating that managed resources must be released.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.IsSqlDwConnection(System.Data.IDbConnection)">
            <summary>
            Determines if a connection is being made to a SQL DW database.
            </summary>
            <param name="conn">A connection object.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ConnectionString">
            <summary>
            Gets or sets the connection string for opening a connection to the SQL Azure database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ConnectionRetryPolicy">
            <summary>
            Gets the policy which decides whether to retry a connection request, based on how many
            times the request has been made and the reason for the last failure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.CommandRetryPolicy">
            <summary>
            Gets the policy which decides whether to retry a command, based on how many
            times the request has been made and the reason for the last failure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.DataSource">
            <summary>
            Gets the server name from the underlying connection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ServerVersion">
            <summary>
            Gets the server version from the underlying connection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.GetUnderlyingConnection">
            <summary>
            If the underlying SqlConnection absolutely has to be accessed, for instance
            to pass to external APIs that require this type of connection, then this
            can be used.
            </summary>
            <returns><see cref="T:Microsoft.Data.SqlClient.SqlConnection"/></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified System.Data.IsolationLevel value.
            </summary>
            <param name="level">One of the System.Data.IsolationLevel values.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open Connection object.
            </summary>
            <param name="databaseName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the ConnectionString
            property of the provider-specific Connection object.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating
            the attempt and generating an error.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.CreateCommand">
            <summary>
            Creates and returns an object implementing the IDbCommand interface which is associated
            with the underlying SqlConnection.
            </summary>
            <returns>A <see cref="T:System.Data.IDbCommand"/> object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.CreateSqlCommand">
            <summary>
            Creates and returns an object implementing the IDbCommand interface which is associated
            with the underlying SqlConnection.
            </summary>
            <returns>A <see cref="T:Microsoft.Data.SqlClient.SqlCommand"/> object.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used after a
            connection is opened.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.AddInfoMessageHandler(Microsoft.Data.SqlClient.SqlInfoMessageEventHandler)">
            <summary>
            Adds an info message event listener.
            </summary>
            <param name="handler">An info message event listener.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.RemoveInfoMessageHandler(Microsoft.Data.SqlClient.SqlInfoMessageEventHandler)">
            <summary>
            Removes an info message event listener.
            </summary>
            <param name="handler">An info message event listener.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ClearPool">
            <summary>
            Clears underlying connection pool.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.OpenConnection">
            <summary>
            Opens a database connection with the settings specified by the ConnectionString and ConnectionRetryPolicy properties.
            </summary>
            <returns>An object representing the open connection.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.CreateReliableCommand">
            <summary>
            Creates and returns a ReliableSqlCommand object associated
            with the underlying SqlConnection.
            </summary>
            <returns>A <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableSqlConnection.ReliableSqlCommand"/> object.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryCallbackEventArgs">
            <summary>
            Defines a arguments for event handler which will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryLimitExceededException">
            <summary>
            The special type of exception that provides managed exit from a retry loop. The user code can use this
            exception to notify the retry policy that no further retry attempts are required.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy">
            <summary>
            Implements a policy defining and implementing the retry mechanism for unreliable actions.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.RetryCallbackDelegate">
            <summary>
            Defines a callback delegate which will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryState">The state of current retry attempt.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IgnoreErrorCallbackDelegate">
            <summary>
            Defines a callback delegate which will be invoked whenever an error is ignored on retry.
            </summary>
            <param name="retryState">The state of current retry attempt.</param>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.RetryOccurred">
            <summary>
            An instance of a callback delegate which will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IgnoreErrorOccurred">
            <summary>
            An instance of a callback delegate which will be invoked whenever an error is ignored on retry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.CommandTimeoutInSeconds">
            <summary>
            Gets or sets the timeout in seconds of sql commands
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ErrorDetectionStrategy">
            <summary>
            Gets the error detection strategy of this retry policy
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ShouldIgnoreOnFirstTry">
            <summary>
            We should only ignore errors if they happen after the first retry.
            This flag is used to allow the ignore even on first try, for testing purposes.
            </summary>
            <remarks>
            This flag is currently being used for TESTING PURPOSES ONLY.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteAction(System.Action,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteAction(System.Action{Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteAction``1(System.Func{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="T">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type T.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteActionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively asynchronously executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="T">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type T.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteAction``1(System.Func{Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="R">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExecuteActionAsync``1(System.Func{Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Repetitively asynchronously executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="R">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <param name="token">Cancellation token to cancel action between retries.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.OnRetryOccurred(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryState">The state of current retry attempt.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.OnIgnoreErrorOccurred(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState)">
            <summary>
            Notifies the subscribers whenever an error is ignored on retry.
            </summary>
            <param name="retryState">The state of current retry attempt.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.FixedDelayPolicy.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Constructs a new instance of the TRetryPolicy class with the specified number of retry attempts and time interval between retries.
            </summary>
            <param name="strategy">The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy"/> to use when checking whether an error is retryable</param>
            <param name="maxRetryCount">The max number of retry attempts. Should be 1-indexed.</param>
            <param name="intervalBetweenRetries">The interval between retries.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ProgressiveRetryPolicy.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs a new instance of the TRetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="strategy">The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy"/> to use when checking whether an error is retryable</param>
            <param name="maxRetryCount">The maximum number of retry attempts. Should be 1-indexed.</param>
            <param name="initialInterval">The initial interval which will apply for the first retry.</param>
            <param name="increment">The incremental time value which will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ExponentialDelayRetryPolicy.#ctor(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy,System.Int32,System.Double,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs a new instance of the TRetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="strategy">The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy"/> to use when checking whether an error is retryable</param>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="intervalFactor">Controls the speed at which the delay increases - the retryCount is raised to this power as
            part of the function </param>
            <param name="minInterval">Minimum interval between retries. The basis for all backoff calculations</param>
            <param name="maxInterval">Maximum interval between retries. Backoff will not take longer than this period.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.DataTransferErrorDetectionStrategy">
            <summary>
            Provides the error detection logic for temporary faults that are commonly found during data transfer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy.CanRetry(System.Exception)">
            <summary>
            Determines whether the specified exception represents a temporary failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as temporary, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.IErrorDetectionStrategy.ShouldIgnoreError(System.Exception)">
            <summary>
            Determines whether the specified exception can be ignored.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as non-harmful.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ErrorDetectionStrategyBase">
            <summary>
            Base class with common retry logic. The core behavior for retrying non SqlExceptions is the same
            across retry policies
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.NetworkConnectivityErrorDetectionStrategy">
            <summary>
            Provides the error detection logic for temporary faults that are commonly found in SQL Azure.
            The same errors CAN occur on premise also, but they are not seen as often.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.SqlAzureTemporaryAndIgnorableErrorDetectionStrategy">
            <summary>
            Provides the error detection logic for temporary faults that are commonly found in SQL Azure.
            This strategy is similar to SqlAzureTemporaryErrorDetectionStrategy, but it exposes ways
            to accept a certain exception and treat it as passing.
            For example, if we are retrying, and we get a failure that an object already exists, we might
            want to consider this as passing since the first execution that has timed out (or failed for some other temporary error)
            might have managed to create the object.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.SqlAzureTemporaryAndIgnorableErrorDetectionStrategy.ignorableAzureErrors">
            <summary>
            Azure error that can be ignored
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.SqlAzureTemporaryErrorDetectionStrategy">
            <summary>
            Provides the error detection logic for temporary faults that are commonly found in SQL Azure.
            The same errors CAN occur on premise also, but they are not seen as often.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason">
            <summary>
            Implements an object holding the decoded reason code returned from SQL Azure when encountering throttling conditions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.ThrottlingErrorNumber">
            <summary>
            Returns the error number that corresponds to throttling conditions reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.Unknown">
            <summary>
            Gets an unknown throttling condition in the event the actual throttling condition cannot be determined.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.throttledResources">
            <summary>
            Maintains a collection of key-value pairs where a key is resource type and a value is the type of throttling applied to the given resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.sqlErrorCodeRegEx">
            <summary>
            Provides a compiled regular expression used for extracting the reason code from the error message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.ThrottlingMode">
            <summary>
            Gets the value that reflects the throttling mode in SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.ThrottledResources">
            <summary>
            Gets the list of resources in SQL Azure that were subject to throttling conditions.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.FromException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Determines throttling conditions from the specified SQL exception.
            </summary>
            <param name="ex">The <see cref="T:Microsoft.Data.SqlClient.SqlException"/> object containing information relevant to an error returned by SQL Server when encountering throttling conditions.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure upon encountering throttling conditions.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.FromError(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Determines the throttling conditions from the specified SQL error.
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.SqlClient.SqlError"/> object containing information relevant to a warning or error returned by SQL Server.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.FromReasonCode(System.Int32)">
            <summary>
            Determines the throttling conditions from the specified reason code.
            </summary>
            <param name="reasonCode">The reason code returned by SQL Azure which contains the throttling mode and the exceeded resource types.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnDataSpace">
            <summary>
            Gets a value indicating whether physical data file space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnLogSpace">
            <summary>
            Gets a value indicating whether physical log space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnLogWrite">
            <summary>
            Gets a value indicating whether transaction activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnDataRead">
            <summary>
            Gets a value indicating whether data read activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnCPU">
            <summary>
            Gets a value indicating whether CPU throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnDatabaseSize">
            <summary>
            Gets a value indicating whether database size throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsThrottledOnWorkerThreads">
            <summary>
            Gets a value indicating whether concurrent requests throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.IsUnknown">
            <summary>
            Gets a value indicating whether throttling conditions were not determined with certainty.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingReason.ToString">
            <summary>
             Returns a textual representation the current ThrottlingReason object including the information held with respect to throttled resources.
            </summary>
            <returns>A string that represents the current ThrottlingReason object.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode">
            <summary>
            Defines the possible throttling modes in SQL Azure.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode.NoThrottling">
            <summary>
            Corresponds to "No Throttling" throttling mode whereby all SQL statements can be processed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode.RejectUpdateInsert">
            <summary>
            Corresponds to "Reject Update / Insert" throttling mode whereby SQL statements such as INSERT, UPDATE, CREATE TABLE and CREATE INDEX are rejected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode.RejectAllWrites">
            <summary>
            Corresponds to "Reject All Writes" throttling mode whereby SQL statements such as INSERT, UPDATE, DELETE, CREATE, DROP are rejected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode.RejectAll">
            <summary>
            Corresponds to "Reject All" throttling mode whereby all SQL statements are rejected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingMode.Unknown">
            <summary>
            Corresponds to an unknown throttling mode whereby throttling mode cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingType">
            <summary>
            Defines the possible throttling types in SQL Azure.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingType.None">
            <summary>
            Indicates that no throttling was applied to a given resource.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingType.Soft">
            <summary>
            Corresponds to a Soft throttling type. Soft throttling is applied when machine resources such as, CPU, IO, storage, and worker threads exceed 
            predefined safety thresholds despite the load balancer’s best efforts. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingType.Hard">
            <summary>
            Corresponds to a Hard throttling type. Hard throttling is applied when the machine is out of resources, for example storage space.
            With hard throttling, no new connections are allowed to the databases hosted on the machine until resources are freed up.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottlingType.Unknown">
            <summary>
            Corresponds to an unknown throttling type in the event when the throttling type cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType">
            <summary>
            Defines the types of resources in SQL Azure which may be subject to throttling conditions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.PhysicalDatabaseSpace">
            <summary>
            Corresponds to "Physical Database Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.PhysicalLogSpace">
            <summary>
            Corresponds to "Physical Log File Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.LogWriteIODelay">
            <summary>
            Corresponds to "Transaction Log Write IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.DataReadIODelay">
            <summary>
            Corresponds to "Database Read IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.CPU">
            <summary>
            Corresponds to "CPU" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.DatabaseSize">
            <summary>
            Corresponds to "Database Size" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.WorkerThreads">
            <summary>
            Corresponds to "SQL Worker Thread Pool" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.Internal">
            <summary>
            Corresponds to an internal resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy.ThrottledResourceType.Unknown">
            <summary>
            Corresponds to an unknown resource type in the event when the actual resource cannot be determined with certainty.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaulSchemaRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultCreateDatabaseRetryCount">
            <summary>
            The default number of retry attempts for create database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultSchemaMinInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultBackoffIntervalFactor">
            <summary>
            The default factor to use when determining exponential backoff between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultMaxRetryInterval">
            <summary>
            The default maximum time between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultDataCommandRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultConnectionRetryCount">
            <summary>
            The default number of retry attempts for a connection related error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultDataMinInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultProgressiveRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory">
            <summary>
            Implements a collection of the RetryPolicyInfo elements holding retry policy settings.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.NoRetryPolicy">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.PrimaryKeyViolationRetryPolicy">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.TransientErrorIgnoreStrategy">
            <summary>
            Implements a strategy that ignores any transient errors.
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultSchemaCommandRetryPolicy(System.Boolean,System.Int32)">
            <summary>
            Creates and returns a default Retry Policy for Schema based operations.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateSchemaConnectionRetryPolicy(System.Int32)">
            <summary>
            Creates and returns a default Retry Policy for Schema based connection operations.
            </summary>
            <remarks>The RetryOccured event is wired to raise an RaiseAmbientRetryMessage message for a connection retry. </remarks>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateSchemaCommandRetryPolicy(System.Int32)">
            <summary>
            Creates and returns a default Retry Policy for Schema based command operations.
            </summary>
            <remarks>The RetryOccured event is wired to raise an RaiseAmbientRetryMessage message for a command retry. </remarks>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDatabaseCommandRetryPolicy(System.Int32[])">
            <summary>
            Creates and returns a Retry Policy for database creation operations.
            </summary>
            <param name="ignorableErrorNumbers">Errors to ignore if they occur after first retry</param>
            <remarks>
            The RetryOccured event is wired to raise an RaiseAmbientRetryMessage message for a command retry. 
            The IgnoreErrorOccurred event is wired to raise an RaiseAmbientIgnoreMessage message for ignore. 
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateElementCommandRetryPolicy(System.Int32[])">
            <summary>
            Creates and returns an "ignoreable" command Retry Policy.
            </summary>
            <param name="ignorableErrorNumbers">Errors to ignore if they occur after first retry</param>
            <remarks>
            The RetryOccured event is wired to raise an RaiseAmbientRetryMessage message for a command retry. 
            The IgnoreErrorOccurred event is wired to raise an RaiseAmbientIgnoreMessage message for ignore. 
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreatePrimaryKeyCommandRetryPolicy">
            <summary>
            Creates and returns an "primary key violation" command Retry Policy.
            </summary>
            <param name="ignorableErrorNumbers">Errors to ignore if they occur after first retry</param>
            <remarks>
            The RetryOccured event is wired to raise an RaiseAmbientRetryMessage message for a command retry. 
            The IgnoreErrorOccurred event is wired to raise an RaiseAmbientIgnoreMessage message for ignore. 
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicy"/> class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateNoRetryPolicy">
            <summary>
            Creates a Policy that will never allow retries to occur.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDataScriptUpdateRetryPolicy">
            <summary>
            Creates a Policy that is optimized for data-related script update operations. 
            This is extremely error tolerant and uses a Time based delay policy that backs
            off until some overall length of delay has occurred. It is not as long-running
            as the ConnectionManager data transfer retry policy since that's intended for bulk upload
            of large amounts of data, whereas this is for individual batch scripts executed by the
            batch execution engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateFastDataRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling exceptions with SQL connections
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultSchemaConnectionRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling exceptions with SQL connections.
            No logging or other message handler is attached to the policy
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultDataConnectionRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling exceptions with SQL connections.
            Adds an event handler to log and notify listeners of data connection retries 
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultConnectionRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling exceptions with SQL connections
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultDataSqlCommandRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling retryable conditions with data transfer SQL commands.
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateDefaultDataTransferRetryPolicy">
            <summary>
            Returns the default retry policy dedicated to handling retryable conditions with data transfer SQL commands.
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyFactory.CreateColumnEncryptionTransferRetryPolicy">
            <summary>
            Returns the retry policy to handle data migration for column encryption.
            </summary>
            <returns>The RetryPolicy policy</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyResources.Mode">
            <summary>
              Looks up a localized string similar to Mode : {0} | .
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyResources.ThrottlingTypeInfo">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils._retryableNetworkConnectivityErrors">
            <summary>
            Approved list of transient errors that should be retryable during Network connection stages
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils._retryableAzureErrors">
            <summary>
            Approved list of transient errors that should be retryable on Azure
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils._retryableAzureErrorCodes">
            <summary>
            Approved list of transient errors that should be retryable on Azure
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils._nonRetryableDataTransferErrors">
            <summary>
            Blocklist of non-transient errors that should stop retry during data transfer operations
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.CalcExponentialRetryDelayWithSchemaDefaults(System.Int32)">
            <summary>
            Calculates the length of time to delay a retry based on the number of retries up to this point.
            As the number of retries increases, the timeout increases exponentially based on the intervalFactor.
            Uses default values for the intervalFactor (<see cref="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultBackoffIntervalFactor"/>), minInterval
            (<see cref="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultSchemaMinInterval"/>) and maxInterval (<see cref="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyDefaults.DefaultMaxRetryInterval"/>)
            </summary>
            <param name="currentRetryCount">Total number of retries including the current retry</param>
            <returns>TimeSpan defining the length of time to delay</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.CalcExponentialRetryDelay(System.Int32,System.Double,System.TimeSpan,System.TimeSpan)">
            <summary>
            Calculates the length of time to delay a retry based on the number of retries up to this point.
            As the number of retries increases, the timeout increases exponentially based on the intervalFactor.
            A very large retry count can cause huge delay, so the maxInterval is used to cap delay time at a sensible
            upper bound
            </summary>
            <param name="currentRetryCount">Total number of retries including the current retry</param>
            <param name="intervalFactor">Controls the speed at which the delay increases - the retryCount is raised to this power as
            part of the function </param>
            <param name="minInterval">Minimum interval between retries. The basis for all backoff calculations</param>
            <param name="maxInterval">Maximum interval between retries. Backoff will not take longer than this period.</param>
            <returns>TimeSpan defining the length of time to delay</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.RaiseSchemaAmbientRetryMessage(Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState,System.Int32,System.Guid)">
            <summary>
            Traces the Schema retry information before raising the retry message
            </summary>
            <param name="retryState"></param>
            <param name="errorCode"></param>
            <param name="azureSessionId"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.FindExceptionType``1(System.Exception)">
            <summary>
            Finds a type of exception in the given exception or in the inner exceptions
            </summary>
            <typeparam name="T">Tyep of exception to return</typeparam>
            <param name="exception">exception to search</param>
            <returns>exception of type T if found, otherwise returns null</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode">
            <summary>
            Error codes reported by the DBNETLIB module.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ZeroBytes">
            <summary>
            Zero bytes were returned
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.Timeout">
            <summary>
            Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.Unknown">
            <summary>
            An unknown net lib error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.InsufficientMemory">
            <summary>
            Out of memory
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.AccessDenied">
            <summary>
            User or machine level access denied
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ConnectionBusy">
            <summary>
            Connection was already busy processing another request
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ConnectionBroken">
            <summary>
            The connection was broken without a proper disconnect
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ConnectionLimit">
            <summary>
            The connection has reached a limit
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ServerNotFound">
            <summary>
            Name resolution failed for the given server name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.NetworkNotFound">
            <summary>
            Network transport could not be found
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.InsufficientResources">
            <summary>
            A resource required could not be allocated
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.NetworkBusy">
            <summary>
            Network stack denied the request as too busy
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.NetworkAccessDenied">
            <summary>
            Unable to access the requested network
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.GeneralError">
            <summary>
            Internal error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.IncorrectMode">
            <summary>
            The network mode was set incorrectly
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.NameNotFound">
            <summary>
            The given name was not found
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.InvalidConnection">
            <summary>
            Connection was invalid
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ReadWriteError">
            <summary>
            A read or write error occurred
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.TooManyHandles">
            <summary>
            Unable to allocate an additional handle
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.ServerError">
            <summary>
            The server reported an error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.SSLError">
            <summary>
            SSL failed
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.EncryptionError">
            <summary>
            Encryption failed with an error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryPolicyUtils.ProcessNetLibErrorCode.EncryptionNotSupported">
            <summary>
            Remote endpoint does not support encryption
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState.RetryCount">
            <summary>
            Gets or sets the current retry attempt count.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState.Delay">
            <summary>
            Gets or sets the delay indicating how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState.LastError">
            <summary>
            Gets or sets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.RetryState.IsDelayDisabled">
            <summary>
            Gets or sets a value indicating whether we should ignore delay in order to be able to execute our tests faster
            </summary>
            <remarks>Intended for test use ONLY</remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges">
            <summary>
            Holds the data items used for encrypting columns
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges.#ctor(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn},System.Boolean)">
            <summary>
            Instantiates a new instance of the TableColumnEncryptionChanges class.
            </summary>
            <param name="encryptionChangedColumns">The list of columns that require encryption changes.</param>
            <param name="migrationColumns">The list of columns that require data migration.</param>
            <param name="primaryKeyColumns">The list of columns referenced in a primary key constraint.</param>
            <param name="isEnclaveEligibleOperation">Indicates whether the encryption process is eligible to be performed within a secure enclave.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges.EncryptionChangedColumns">
            <summary>
            The list of columns that require encryption changes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges.MigrationColumns">
            <summary>
            The list of columns that require data migration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges.PrimaryKeyColumns">
            <summary>
            The list of columns referenced in a primary key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.TableColumnEncryptionChanges.IsEnclaveEligibleOperation">
            <summary>
            Indicates whether the encryption process is eligible to be performed within a secure enclave.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.SetAlwaysEncryptedSetting(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.Boolean)">
            <summary>
            Modifies the provided <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory"/> by setting the Always Encrypted specific parameters.
            </summary>
            <param name="connectionFactory">The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory"/> on which to set the Always Encrypted settings.</param>
            <param name="enable">Defines whether to set the Always Encrypted specific parameters.</param>
            <returns>The <see cref="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory"/> reconfigured with the appropriate Always Encrypted settings.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.ParseEncryptionChanges(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.Deployment.Analyzers.PlanMediationContext)">
            <summary>
            Evaluates the encryption changes for the table and returns the distilled information needed to make
            migrations step and scripting decisions.
            </summary>
            <param name="sourceTable">The source table.</param>
            <param name="targetTable">The target table.</param>
            <param name="context">The plan mediation context.</param>
            <returns>The table column encryption change results</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.ExtractEncryptionColumnsFromElementChangeSet(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Sifts through the changed elements from the <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult"/> and collects all the
            <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn"/>s, matching the source and target <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable"/>, that is needing 
            encryption operations performed on them.
            </summary>
            <param name="sourceTable">The source table.</param>
            <param name="targetTable">The target table.</param>
            <param name="modelComparisonResult">The SchemaModel compare result.</param>
            <param name="comparer">Comparer that can compare strings and Store.Identifier using the collation of the SchemaModel.</param>
            <returns>A list of encryption changed columns between the source and target <see cref="T:Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable"/></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.HasEnclaveParametersSet(Microsoft.Data.SqlClient.SqlConnectionAttestationProtocol@)">
            <summary>
            Determines whether the options for EnclaveAttestationProtocol and EnclaveAttestationUrl are valid
            and output the parsed <see cref="T:Microsoft.Data.SqlClient.SqlConnectionAttestationProtocol"/> value.
            </summary>
            <param name="protocol">The parsed <see cref="T:Microsoft.Data.SqlClient.SqlConnectionAttestationProtocol"/>.</param>
            <returns>True if EnclaveAttestationProtocol is None or both EnclaveAttestationProtocol and EnclaveAttestationUrl have been set or False if not.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.HasEnclaveParametersSet">
            <summary>
            Determines whether the options for EnclaveAttestationProtocol and EnclaveAttestationUrl combination is valid
            </summary>
            <returns>True if EnclaveAttestationProtocol in None or both EnclaveAttestationProtocol and EnclaveAttestationUrl have been set or False if not.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.IsColumnEncryptionTable(System.Collections.Generic.KeyValuePair{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition},Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Determines if the changed element matches a column encryption changed table.
            </summary>
            <param name="changedItem">The change being evaluated.</param>
            <param name="sourceTable">The source table</param>
            <param name="targetTable">The target Table</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.IsColumnEncryptionColumn(System.Collections.Generic.KeyValuePair{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition},Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer)">
            <summary>
            Determines if the changed element matches a column encryption changed column.
            </summary>
            <param name="changedItem">The change being evaluated.</param>
            <param name="comparer">Comparer that can compare strings and Store.Identifier using the collation of the model.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.IsEnclaveValidComputation(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable)">
            <summary>
            Checks if the given column changes can be done in the enclave
            </summary>
            <param name="sourceCol">Updated column</param>
            <param name="sourceTable">Source Table</param>
            <param name="targetTable">Target Table</param>
            <returns>If this encryption change can happen in the enclave</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.CheckEnclaveEnabledCEK(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnEncryptionKey)">
            <summary>
            Determines whether the given column encryption key is enclave enabled or not.
            </summary>
            <param name="columnEncryptionKey">The column encryption key.</param>
            <returns>True if this CEK is enclave enabled, otherwise False.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.ClearEnclaveAttestationUrl(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Clears the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.EnclaveAttestationUrl"/> value if it is present.
            </summary>
            <param name="connectionStringBuilder">
            The <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder"/> on which to clear the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.EnclaveAttestationUrl"/>
            </param>
            <remarks>
            We check that the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.EnclaveAttestationUrl"/> is empty prior to clearing it because 
            explicitly setting it to empty will add <code>"Enclave Attestation Url=;"</code> to the connection string, where otherwise the property would be alltogether absent.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAlwaysEncryptedMethodUtils.DisableColumnEncryptionSetting(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Disables the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting"/> on the provided <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder"/> if it is enabled.
            </summary>
            <param name="connectionStringBuilder">
            The <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder"/> on which to disable the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting"/>
            </param>
            <remarks>
            We check that the <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting"/> is disabled prior to setting it to
            <see cref="!:Disabled"/> because explicitly setting it will add the property to the connection string, where otherwise 
            the property would be alltogether absent.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils">
            <summary>
            Utility class to support SQL Authentication configuration for DacFx
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.IsAuthenticationSupported">
            <summary>
            Checks whether "Authentication" is supported in the runtime environment
            The keyword "Authentication" is not supported until .Net4.6. If user uses a version of .Net less than 4.6, DacFx should avoid using "Authentication"
            </summary>
            <returns>true if "Authentication" is present in current .Net version</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.SetAuthentication(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Set Authentication value from source builder to the target builder
            </summary>
            <param name="sourceBuilder">the source connection string builder</param>
            <param name="targetBuilder">the target connection string builder</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.SetAuthentication(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,System.String)">
            <summary>
            Set Authentication using reflection
            </summary>
            <param name="sbConnectionString"></param>
            <param name="authenticationType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.IsAuthenticationSpecified(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Determines whether a connection string builder has a value specified for the Authentication property.
            </summary>
            <param name="connectionStringBuilder">A connection string builder that might have authentication specified.</param>
            <returns>True if the authentication property is supported by the connection string builder and the authentication property is specified. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.GetAuthenticationString(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Get Authentication as string from connectionStringBuilder
            </summary>
            <param name="connectionStringBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.IsCertificateSupported">
            <summary>
            Checks whether "Certificate" is supported in the runtime environment
            Certain builds of System.Data.dll support Certificate.
            </summary>
            <returns>true if "Certificate" is present in current .Net version</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Common.SqlClient.SqlAuthenticationMethodUtils.IsCertificateSpecified(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Determines whether a connection string builder has a value specified for the Certificate property.
            </summary>
            <param name="connectionStringBuilder">A connection string builder that might have Certificate specified.</param>
            <returns>True if the Certificate property is supported by the connection string builder and the Certificate property is specified. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal">
            <summary>
            Specifies the different extract targets when extracting a database.
            This is a replica of Microsoft.SqlServer.Dac.DacExtractTarget created to access it in Microsoft.Data.Tools.Schema namespace
            and avoid circular referencing to Microsoft.SqlServer.Dac project. Keep both in sync.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.DacPac">
            <summary>
            Specifies no .sql files will be output, but a dacpac instead.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.File">
            <summary>
            Specifies a single .sql file will be output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.Flat">
            <summary>
            Specifies .sql files for all database objects will be output to a single directory.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.ObjectType">
            <summary>
            Specifies .sql files will be output into folders grouped by the database object type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.Schema">
            <summary>
            Specifies .sql files will be output into folders grouped by the database schema names.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Common.DacExtractTargetInternal.SchemaObjectType">
            <summary>
            Specifies .sql files will be output into folders grouped by the database schema name and the database object type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider">
            <summary>
            This interface exposes a suite of factory objects and factory methods for instantiating 
            service objects related to schema and script modeling. The purpose of the interface 
            is to abstract concrete implementations such as SQLSchemaProvider or 
            MySqlServicesProvier, etc, from the rest of the application. At the high-level 
            DatabaseSchemaProvider implementations (IDSPs) exposes services that can 
            a) parse a script file into a script model, 
            b) interpret a script model into a schema model, 
            c) generate script model from a schema model and 
            d) generate a script file from a script model. 
            In addition to these high-level abilities, also ultimately exposed from IDatabaseServices 
            provider are more detailed services such as comparison services, UI helpers (for display 
            names, icons, etc.)
            A secondary and related purpose of DatabaseSchemaProvider (and its implementations) is 
            to act as a �key� that application features can use to declare compatibility with various 
            IDSPs. For example, if a feature declares compatibility with DatabaseSchemaProvider 
            then it is designed to work with abstract interfaces such as ITable and IScriptDom. 
            Meanwhile, if a feature declares compatibility with a concrete implementation such as 
            SqlSchemaProvider, then that feature will not be loaded unless the project is of the 
            declared compatible provider type. This allows the feature to safely access functionality 
            specific to the concrete implementation, without first undergoing a dynamic discovery 
            operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.ModelSchema">
            <summary>
            Returns the ModelSchema describing the structure of the schema model for the specific DSP.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.Platform">
            <summary>
            The platform supported by this DSP.  Although the enum is a set of flags
            this property is meant to indicate the SQL version represented 
            by the DSP - i.e. 90, 100, 110, Azure.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.ExtensionManager">
            <summary>
            Reference back to ExtensionManager that loaded this DSP instance
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetServiceConstructor``1">
            <summary>
            Returns a compatible service constructor if one is registered.
            Otherwise falls back on extension manager, eventually throws if it finds multiple
            registrants or if there are no compatible constructors.
            </summary>
            <typeparam name="TServiceConstructor"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetService``1">
            <summary>
            Shortcut to instantiate service using default parameters.
            Calls GetServiceConstructor() and then ConstructService() on the returned object.
            </summary>
            <typeparam name="TService"></typeparam>
            <returns>Created service</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.UserInteractionServices">
            <summary>
            UI services used by project system or other user interfaces.
            The helper contains DatabaseSchemaProvider specific information for the
            project system or other user interfaces, such as file extension, icon, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.SchemaVersionSupportedWithTranslation(System.String)">
            <summary>
            Returns if there is a conversion XSLT for it
            </summary>
            <param name="version">Schema version to check for compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetSchemaUpgradeXslt(System.String)">
            <summary>
            Returns XSLT which converts model xml from specified version to the current one,
            or null if there is no such conversion
            </summary>
            <param name="fromVersion">Schema version to convert from</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.SafeGetCompatibleDatabaseSchemaProviderType(System.String,System.String)">
            <summary>
            Get the appropriate DatabaseSchemaProvider type to handle a connection.
            </summary>
            <param name="familyName">The name of the family of DatabaseSchemaProviders.</param>
            <param name="connectionString">A connection string which will be used to connect to the database to query for version information.</param>
            <returns>
            The version-appropriate DatabaseSchemaProvider type, as determined by the DatabaseSchemaProviderFamily extension with the given family name.
            Return null if there is no such extension, or the extension returns null.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.SafeGetCompatibleDatabaseSchemaProviderType(System.String,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Get the appropriate DatabaseSchemaProvider type to handle a connection.
            </summary>
            <param name="familyName">The name of the family of DatabaseSchemaProviders.</param>
            <param name="connectionFactory">A connection factory which will be used to connect to the database to query for version information.</param>
            <returns>
            The version-appropriate DatabaseSchemaProvider type, as determined by the DatabaseSchemaProviderFamily extension with the given family name.
            Return null if there is no such extension, or the extension returns null.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.SafeGetCompatibleDatabaseSchemaProviderType(System.String,Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String@)">
            <summary>
            Get the appropriate DatabaseSchemaProvider type to handle a connection.
            </summary>
            <param name="familyName">The name of the family of DatabaseSchemaProviders.</param>
            <param name="connectionString">A connection factory which will be used to connect to the database to query for version information.</param>
            <param name="errorMessage">The error message that contains accurate information on the error that occured.</param>
            <returns>The version-appropriate DatabaseSchemaProvider type, as determined by the DatabaseSchemaProviderFamily extension with the given family name.
            Return null if there is no such extension, or the extension returns null.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.FamilyName">
            <summary>
            Returns the name of this family of DatabaseSchemaProviders.
            A family is a collection of providers for the same datasource and data provider, written by the same author.
            The DatabaseSchemaProviders within a family generally differ only in which version of the database they handle.
            The family name is arbitrary, and should be human-readable and -typable, and unique.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetAllModelValidationRules(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns the validation rules for this DatabaseSchemaProvider.
            </summary>
            <param name="errorManager">ErrorManager to log errors</param>
            <returns>Enumerable of all SqlValidationRules</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetAllDeploymentValidationRules(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns the deployment validation rules for this DatabaseSchemaProvider.
            </summary>
            <param name="errorManager">ErrorManager to log errors</param>
            <returns>Enumerable of all SqlDeploymentValidationRule</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetAllModelValidationRules(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns the validation rules for the DatabaseSchemaProvider.
            </summary>
            <param name="dsp">DatabaseSchemaProvider to query validation rules</param>
            <param name="errorManager">ErrorManager to log errors</param>
            <returns>Enumerable of all SqlValidationRules</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetAllDeploymentValidationRules(Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns the deployment validation rules for the DatabaseSchemaProvider.
            </summary>
            <param name="dsp">DatabaseSchemaProvider to query validation rules</param>
            <param name="errorManager">ErrorManager to log errors</param>
            <returns>Enumerable of all SqlDeploymentValidationRule</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DatabaseSchemaProvider.GetDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Gets the database schema provider by platform.
            </summary>
            <param name="platform">platform</param>
            <returns>The specified version of database schema provider</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.DataSchemaError">
            <summary>
            This class is used to encapsulate all the information needed by the DataSchemaErrorTaskService to create a corresponding entry in the Visual Studio Error List.
            A component should add this Error Object to the <see cref="T:Microsoft.Data.Tools.Schema.ErrorManager"/> for such purpose.
            Errors and their children are expected to be thread-safe.  Ideally, this means that
            the objects are just data-transfer-objects initialized during construction.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Document">
            <summary>
            The filename of the error. It corresponds to the File column on the Visual Studio Error List window.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Severity">
            <summary>
            The severity of the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Line">
            <summary>
            Line Number of the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Column">
            <summary>
            Column Number of the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Prefix">
            <summary>
            Prefix of the error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.HelpKeyword">
            <summary>
            If the error has any special help topic, this property may hold the ID to the same.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Exception">
            <summary>
            Exception associated with the error, or null
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.Message">
            <summary>
            Message 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.IsPriorityEditable">
            <summary>
            Should this message honor the "treat warnings as error" flag?
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.BuildErrorCode">
            <summary>
            Represents the error code used in MSBuild output.  This is the prefix and the
            error code
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.DataSchemaError.IsOnDisplay">
            <summary>
            true if this error is being displayed in ErrorList. More of an Accounting Mechanism to be used internally.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.DataSchemaError.ToString">
            <summary>
            String form of this error.
            NB: This is for debugging only.
            </summary>
            <returns>String form of the error.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ElementIconState">
            <summary>
            Enum to specify which icon to get for an IModelElement according to the state.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ElementNameStyle">
            <summary>
            Enum to specify display style on UI for an IModelElement
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ErrorManager">
            <summary>
            This is an important class in the Error Management infrastructure. All the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> are pushed into the system via this class.
            This has events which are listened to, by DataSchemaErrorTaskService and acted upon for managing the display of errors on the Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.#ctor">
            <summary>
            Default Constructor. By default, it attaches itself to DataSchemaErrorTaskService
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.MergeWith(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Copies errors from one error manager to another
            </summary>
            <param name="otherErrorManager"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ErrorManager.DefaultCategory">
            <summary>
            This is our unique name for errors which persist the lifetime of the
            error manager.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ErrorManager.ModelCategory">
            <summary>
            This is our unique name for errors which persist the lifetime of the
            ModelStore (DataSchemaModel).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ErrorManager.TooManyErrorsCategory">
            <summary>
            This is our unique name for the error created when there are too many errors
            in a project.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ErrorManager.ErrorManagerLimiter">
            <summary>
            Sets the error limiter which provides the error limit to this
            manager.  This set when the error manager is registered with
            the ErrorManagerService.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetAllCategories">
            <summary>
            Returns the list of all Categories existing in the ErrorManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetCategories(System.Boolean)">
            <summary>
            Returns a list of categories that relevant based on the specified relevance
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Add(Microsoft.Data.Tools.Schema.DataSchemaError,System.Object)">
            <summary>
            Add the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> to be displayed to Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Add(Microsoft.Data.Tools.Schema.DataSchemaError,System.Object,System.Boolean)">
            <summary>
            Add the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> to be displayed to Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Add(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.DataSchemaError},System.Object)">
            <summary>
            Add the list of <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> to be displayed to Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Add(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.DataSchemaError},System.Object,System.Boolean)">
            <summary>
            Add the list of <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> to be displayed to Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.ManageTooManyErrorsError(Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Adds or removes the too many errors error as necessary
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.CreateTooManyErrorsError">
            <summary>
            Returns the error displayed when there are too many errors in a project.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetAllErrors(System.Object)">
            <summary>
            Get a list of error in a category
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Find(System.String)">
            <summary>
            Returns a snapshot of all errors for a specific document
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.HasErrors(System.Object)">
            <summary>
            Tests whether any items contained by this ErrorManager for the given category are errors.
            </summary>
            <param name="category">If provided it tests for errors in just this category, if
            null or empty then all categories are scanned.</param>
            <returns>true if one or more errors exist.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetErrorCounts(System.Object,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns a breakdown of the error types that contained by this ErrorManager for
            the specific category
            </summary>
            <param name="category">If provided it returns the counts for just this category, if
            null or empty then all categories are scanned.</param>
            <param name="errorCount"></param>
            <param name="warningCount"></param>
            <param name="messageCount"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetTotalErrorsCount">
            <summary>
            Returns a list of errors in all categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Remove(Microsoft.Data.Tools.Schema.DataSchemaError,System.Object)">
            <summary>
            Remove the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> from the ErrorManager and in turn from Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Remove(System.String,System.Object)">
            <summary>
            Removes all errors related to this document from the category.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Remove(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.DataSchemaError},System.Object)">
            <summary>
            Remove the list of <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> from the ErrorManager and in turn from Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.RemoveImpl(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.DataSchemaError},System.Object,Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Remove the list of <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> from the ErrorManager and in turn from Visual Studio Error List window.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Remove(System.Predicate{Microsoft.Data.Tools.Schema.DataSchemaError},System.Object)">
            <summary>
            Removes based on a predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Remove(Microsoft.Data.Tools.Schema.DataSchemaError)">
            <summary>
            Remove an error. It will be no-op if the error does not exist. Use the overloading versions with category if possible for a better performance.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.RemoveErrorFromDisplay(Microsoft.Data.Tools.Schema.DataSchemaError,Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Removes and error from display and decrements our internal counts
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.AddErrorsInSeverityOrder(Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Adds the errors with severity error appearing on top.  
            Does not lock member access, must be called from within a lock
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.UpdateErrorsDocumentName(System.String,System.String,System.Object)">
            <summary>
            Change the name of document in all the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> contained in this ErrorManager
            If old FileName is null, update all the errors.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.Refresh">
            <summary>
            Refresh displaying of all the errors on the Visual Studio Error List. The reason could be 
            that name of the document has changed,
            or the error limit in the tools options window has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.RefreshImpl(Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Refresh displaying of all the errors on the Visual Studio Error List. The reason could be 
            that name of the document has changed,
            or the error limit in the tools options window has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.ClearAllCategories">
            <summary>
            Clears all the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> in ErrorManager belonging to all categories and in turn removes them from being displayed in 
            Visual Studio Error list belonging to this ErrorMAnager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.ClearCategory(System.Object)">
            <summary>
            Clears all the <see cref="T:Microsoft.Data.Tools.Schema.DataSchemaError"/> in ErrorManager belonging to the given category and in turn removes them from being displayed in 
            Visual Studio Error list belonging to this ErrorMAnager.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.RaiseAddRemoveEvents(Microsoft.Data.Tools.Schema.ErrorManager.EventData)">
            <summary>
            Raises the add/remove events to our listeners
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.CreateCategory(System.Object,System.Boolean)">
            <summary>
            Creates the specified category.  If the category already exists the relevance is verified to
            ensure that a category is used consistently
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.GetCategory(System.Object)">
            <summary>
            Returns a set of errors for the specific category or an empty hashset if
            the category has not been defined
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ErrorManager.FixupAfterDeserialization(System.String,System.String)">
            <summary>
            After deserialization we need to alter the full path to the new full path (if they differ)
            and send out events that new errors are available.
            
            This is called on the UI thread so no locking is necessary
            </summary>
            <param name="oldPath">The old project full path when it was last serialized</param>
            <param name="newPath">The new project full path.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.EscapeStyle">
            <summary>
            Enum to specify escape style for displaying model name
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName">
            <summary>
            Represents an assembly we want to load extensions from
            </summary>    
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName.SpecificVersion">
            <summary>
            When set to true, we only match with assemblies with the same version number.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName.IsLazy">
            <summary>
            When set to true, the assembly will not be force loaded on startup.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName.AssemblyExists(System.Reflection.AssemblyName,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName})">
            <summary>
            Finds out if a hashSet of AssemblyLoadNames has a match for the given assembly name
            </summary>
            <param name="name">Assembly to find</param>
            <param name="hashSet">HashSet of assembly names to search</param>
            <returns>True if an assembly exists in the name hashSet</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName.RemoveAssembly(System.Reflection.AssemblyName,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Extensibility.AssemblyLoadName})">
            <summary>
            Removes from a hashSet of AssemblyLoadNames for the given assembly name
            </summary>
            <param name="name">Assembly to remove</param>
            <param name="hashSet">HashSet of assembly names to remove from</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute">
            <summary>
            This attribute is used to specify which database service provider 
            the extended feature will be compatible with.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute.#ctor(System.Type)">
            <summary>
            The type provided in the construtor must either be 
            DatabaseSchemaProvider or a type which inherits DatabaseSchemaProvider 
            </summary>
            <param name="compatibleType"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute.CompatibleDatabaseSchemaProvider">
            <summary>
            Compatible DSP type, if null, that means this extension bind to none of the database
            services providers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database.
            </summary>
            <remarks>
            Each DatabaseSchemaProviderFamily (for example, Microsoft's SQL Server DSPs) is uniquely identified by a short name.
            DatabaseSchemaProviderFamily implementations should be marked with the attribute [DatabaseSchemaProviderCompatibility(null)]
            rather than being compatible with any particular DatabaseSchemaProvider.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.DetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database.
            </summary>
            <param name="connectionFactory">A connection factory used to connect to the database to query for version information.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.DetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String@)">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database along with logging error message if any.
            </summary>
            <param name="connectionFactory">A connection factory used to connect to the database to query for version information.</param>
            <param name="errorMessage">The error message that contains accurate information on the error that occured.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(System.String)">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database.
            </summary>
            <param name="connectionString">A connection string used to connect to the database to query for version information.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory)">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database.
            </summary>
            <param name="connectionFactory">A connection factory used to connect to the database to query for version information or null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.SafeDetermineDatabaseSchemaProvider(Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory,System.String@)">
            <summary>
            Determines the version-specific DatabaseSchemaProvider type which is appropriate to a database and logs error message if any.
            </summary>
            <param name="connectionFactory">A connection factory used to connect to the database to query for version information or null.</param>
            <param name="errorMessage">The error message that contains accurate information on the error that occured.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.FamilyName">
            <summary>
            The short name of the family of DatabaseSchemaProviders.
            DatabaseSchemaProviders within this family should return this same value from their FamilyName properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.ServerExplorerDataSource">
            <summary>
            The GUID Server Explorer uses to identify the DataSource with which the DatabaseSchemaProviders in this family interact.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.ServerExplorerDataProvider">
            <summary>
            The GUID Server Explorer uses to identify the data provider used by the DatabaseSchemaProviders in this family.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DatabaseSchemaProviderFamily.AdoProvider">
            <summary>
            The namespace name of the data provider used by the DatabaseSchemaProviders in this family.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.DataProviderServices">
            <summary>
            Provides services for an ADO.NET data provider.
            </summary>
            <remarks>
            Each DatabaseProviderServices corresponds to a unique data provider, identified by its namespace name.
            DatabaseProviderServices implementations should be marked with the attribute [DatabaseSchemaProviderCompatibility(null)]
            rather than being compatible with any particular DatabaseSchemaProvider.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DataProviderServices.ConnectionStringParser">
            <summary>
            A parser which knows how to strip sensitive information (e.g. passwords) out of connection strings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.DataProviderServices.AdoProvider">
            <summary>
            The namespace name of the data provider to which this DatabaseProviderServices applies.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.DataProviderServicesManager">
            <summary>
            Gathers the registered DataProviderServicesManager extensions, and uses them to retrieve services for providers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.DspFamilyManager">
            <summary>
            Gathers the registered DatabaseSchemaProviderFamily extensions, and uses them to retrieve the appropriate DSP type for a database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityException">
            <summary>
            Thrown when something went wrong when instantiating/loading extensions
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ConnectionStringEncrypter_ErrorEncryptingConnectionString">
            <summary>
              Looks up a localized string similar to An error occurred while trying to encrypt data..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ConnectionStringSecurer_InvalidProvider">
            <summary>
              Looks up a localized string similar to The provider &apos;{0}&apos;  is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.DatabaseSchemaProvider_InvalidServiceConstructor">
            <summary>
              Looks up a localized string similar to The ServiceConstructor object with type {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.DatabaseSchemaProvider_MultipleServiceConstructor">
            <summary>
              Looks up a localized string similar to Multiple services that inherit from {0} were found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.DataProviderServices_NoSuchProvider">
            <summary>
              Looks up a localized string similar to No database platform service implementation is registered for the provider &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.DataProviderServicesManager_MultipleServicesForAProvider">
            <summary>
              Looks up a localized string similar to The database platform service extension {0} could not be loaded because there is already another database platform service extension registered for the provider name &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.DspFamilyManager_MultipleFamiliesForAFamilyName">
            <summary>
              Looks up a localized string similar to The DatabaseSchemaProviderFamily extension {0} could not be loaded because there is already another DatabaseSchemaProviderFamily extension registered for the family name &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionHandle_InvalidExtensionHandle">
            <summary>
              Looks up a localized string similar to The ExtensionHandle object is not valid. You must call ExtensionManager.GetExtensionHandle(ExtensionHandle h) to get the correct instance of the ExtensionHandle object that has the same type and configuration..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionManager_FailedDetectDspType">
            <summary>
              Looks up a localized string similar to Failed to retrieve information from target database to correctly model the database..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionManager_MultipleExtensionsLoaded">
            <summary>
              Looks up a localized string similar to Multiple extensions were found for the interface {0}, but only one extension is allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionManager_NotUseGetSingleExtension">
            <summary>
              Looks up a localized string similar to {0} allows multiple extensions. You must use the ExtensionManager.GetExtensions method to get extensions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_BadAssemblyName">
            <summary>
              Looks up a localized string similar to The type {0} is not strongly named. You must use strong name signing for assemblies that contain implementations of extensions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_CannotAddExtensionsAfterInitialization">
            <summary>
              Looks up a localized string similar to You cannot add extensions directories after extensions have been loaded.  Only the owner of the process should call ExtensionManager.AddExtensionLoadPath(), and only before attempting to use any extensions..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_ConflictingPreviousDspName">
            <summary>
              Looks up a localized string similar to Failed to register name {0} as previous name for database platform service {1} because it was already claimed by database platform service extension {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_CouldNotLoadExtensionFromXml">
            <summary>
              Looks up a localized string similar to Type {0} is not a valid extension type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_CouldNotReadXmlFile">
            <summary>
              Looks up a localized string similar to {0} could not be read because of the following exception: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_CriteriaIsNotDefined">
            <summary>
              Looks up a localized string similar to The criteria for type {0} are not defined..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_DuplicateDsp">
            <summary>
              Looks up a localized string similar to Internal Error. Type {1} could not be loaded because the DataProviderService with type {0} has already been loaded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_ExtensionFolderNotFound">
            <summary>
              Looks up a localized string similar to Could not find Extensions assembly folder of the following exception: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_ExtensionWithoutDspCompatibilityAttribute">
            <summary>
              Looks up a localized string similar to The extension type &apos;{0}&apos; cannot be loaded because it does not have a [DatabaseSchemaProviderCompatibility] attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_InvalidDSP">
            <summary>
              Looks up a localized string similar to Internal Error. The database platform service with type {0} is not valid. You must make sure the service is loaded, or you must provide the full type name of a valid database platform service..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_InvalidProxy">
            <summary>
              Looks up a localized string similar to A proxy of type &apos;{0}&apos; could not be created..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_MultipleDefaults">
            <summary>
              Looks up a localized string similar to More than one default extension  has been defined for {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_TypeFailedToInstantiate">
            <summary>
              Looks up a localized string similar to The extension type {0} could not be instantiated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.ExtensionTypeLoader_TypeFailedToLoad">
            <summary>
              Looks up a localized string similar to Failed to load extension {0} .  Exception message: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensibilityResources.Microsoft_Data_Schema_Extensions">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;urn:Microsoft.Data.Tools.Schema.Extensions&quot; elementFormDefault=&quot;qualified&quot; attributeFormDefault=&quot;unqualified&quot; targetNamespace=&quot;urn:Microsoft.Data.Tools.Schema.Extensions&quot;&gt;
              &lt;xsd:element name=&quot;extensions&quot;&gt;
                &lt;xsd:complexType&gt;
                  &lt;xsd:sequence&gt;
                    &lt;xsd:element name=&quot;extension&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;
                      &lt;xsd:complexType&gt;
                        &lt;xsd:attribute name=&quot;assembly&quot; type=&quot;x [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionAssemblyResolver">
            <summary>
            Resolver class used to register AppDomain.AssmblyResolve event, and load
            assemblies from specified searching paths.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionAssemblyResolver.OnAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            AssemblyResolver used to load assembly from our extensions folder.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionAssemblyResolver.FindAssemblyPath(System.Reflection.AssemblyName)">
            <summary>
            Searching the specified searching path recursively, and find the assembly file 
            path by assmbly name.
            </summary>
            <param name="assemblyName"></param>
            <returns>Null will return if not found.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionAssemblyResolver.IsMatchingAssembly(System.Reflection.AssemblyName,System.String)">
            <summary>
            Check if the assembly found matches the full name of the assembly we try to load.
            </summary>
            <param name="assemblyName"></param>
            <param name="assemblyFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute">
            <summary>
            Attribute used to define extensibility point.  The CriteriaBaseType
            will be the base interface or class of a category of extensions, such as IGenerator.
            The MarkerAttributeType defines that an extension must have certain type
            of attribute decorated on itself to be recognized by the loader.  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute.CriteriaBaseType">
            <summary>
            Extensibility point, normally will be extension interface.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute.MarkerAttributeType">
            <summary>
            The MarkerAttributeType defines that an extension must have certain type
            of attribute decorated on itself.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute.AllowMultipleExtensions">
            <summary>
            Set or get if this extension criteria allows multiple extensions loaded for this
            criteria, or it only allows one single extension.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute.DefaultExtension">
            <summary>
            This extension is defined as default extension for the extensibility or not.
            If defined as default, and no other extensions are loaded for the extensibility
            point, then this extension will be added as default value for the extensibility
            point.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionCriteriaAttribute.ProxyType">
            <summary>
            Get the proxy type used to instantiate extensions for the extensibility
            point this attribute is applied to.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionDeclarationAttribute">
            <summary>
            This attribute allows to declare extensions through code.
            If Default property is set to true, that means this extension
            will be default extension for the extension interface.  If there 
            are other extensions defined for the same extension interface, then
            this default extension will not be loaded.  If all multiple extensions
            loaded for the same extension interface are declared as default extension.
            Then we will pick the one that is most DSP specific.  If all of them are defined
            as default, and all are compatible with same DSP, then none of them will be loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionDeclarationAttribute.ExtensionType">
            <summary>
            The extension type
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionDescriptionAttribute">
            <summary>
            This attribute is used to specify friendly name, publisher, description or 
            other description information on an extension interface or type.
            This attribute can bind to extension interface or extension type class.
            The information specifed in this attribute for extension will be used 
            in Settings page for the extension.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionDescriptionAttribute.Publisher">
            <summary>
            Publisher for this extension interface or extension type.
            This property left as virtual, so derived class can 
            override this property and provide localized string.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionDescriptionAttribute.Description">
            <summary>
            Description for extension interface or extension type.
            This property left as virtual, so derived class can 
            override this property and provide localized string.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle">
            <summary>
            Base class for generic version for ExtensionHandle.
            The handle that contains the extension type, the named configuration for this
            extension type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.#ctor">
            <summary>
            Default constructor used for deserialization.
            </summary>        
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.ExtensionType">
            <summary>
            Returns type represented by the ExtensionHandle
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.ExtensionTypeFriendlyName">
            <summary>
            The friendly name of the extension type.
            It will read from ExtensionDescriptionAttribute that placed
            on the extension.  If no attribute is found, extension type's 
            short name will be used as ExtensionType friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.FriendlyName">
            <summary>
            The friendly name of this ExtensionHandle.  
            The friendly name is composed with ExtensionType's friendly 
            defined in ExtensionDescriptionAttribute, plus the ConfigurationName.
            If there is no configuration for this extension, it will just be 
            the friendly name of this extension.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.Publisher">
            <summary>
            Publisher of this extension.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.Description">
            <summary>
            Description of this extension.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.ExtensionManager">
            <summary>
            Get the reference to ExtensionManager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.Equals(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Compare two ExtensionHandle.  If the ExtensionType and the ConfigurationName
            is the same, we say they are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.GetHashCode">
            <summary>
            Get the HashCode for ExtensionHandle based on ExtensionType and the ConfigurationName.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.GetSchema">
            <summary>
            Get the schema for xml serailization of this extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.ReadXml(System.Xml.XmlReader)">
            <summary>
            This method is used to help deserialize an extension.
            During deserialization, it will read the Assembly name, 
            type name and configuration name from XmlReader.  And 
            try to find the extensions in already loaded extensions that
            matches all these information, if nothing found, the type 
            will be set to null.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize out this extension.  It will write assembly full name,
            type fullname and configuration name to XmlWriter.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle`1">
            <summary>
            The handle that contains the extension type, the named configuration for this
            extension type.
            User can get the ExtensionHandle from ExtensionManager and instantiate the 
            extension type from this handle.
            </summary>
            <typeparam name="TInterfaceType">The extension interface type used to instantiate this extension type.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle`1.Instantiate">
            <summary>
            Instantiate the extension.  If there is an ExtensionProxyAttribute defined on 
            this extensibility point, then the extension will be wrapped in the proxy instance.
            If there is any named configuration for this extension, the named configuration will
            be passed into the extension instance's SetConfiguration method.
            If the extension inherits from IReferencesExtensionManager, the ExtensionManager reference
            will be passed to this extension instance.
            If failed to instantiate the extension, InvalidExtensionException will be thrown.
            If failed to instantiate the extension proxy, InvalidProxyException will be thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionLoadError">
            <summary>
            Error message used to store extension load error.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionLoadError.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionLoadError.Severity">
            <summary>
            Severity of this error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionLoadError.AssociatedExtension">
            <summary>
            The extension causes load error
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager" -->
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.TreatOnPremiseAsAzure">
            <summary>
            Test Setting used to run in "Azure Mode" on local "On Premises" environments
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.#ctor(System.String)">
            <summary>
            Create an ExtensionManager instance according to specified DatabaseSchemaProviderType string
            passed in by project system.
            It will first load the DatabaseSchemaProvider with passed in string.
            If load succeed, it will get all the extensions list from ExtensionTypeLoader
            for this DatabaseSchemaProvider.
            If DatabaseSchemaProvider load fail, exception will throw.
            NOTE: Since DSP is stateless, we will only keep one instance of DSP per DSP type.  So when 
            new different ExtensionManager instances with same DSP type name, it will get same instance
            of that DSP type.
            </summary>
            <param name="databaseSchemaProviderType">
                The string for the DatabaseSchemaProvider.  If the string will be the full name
                name of the DatabaseSchemaProvider, such as Microsoft.Data.Tools.Schema.SqlServericesProvider,
                it will get an existing or create a new instance of that DatabaseSerivcesProvider and store it in the
                ExtensionManager.  If the string is an invalid DSP, or the DSP is not loaded, the constructor
                will throw InvalidDatabaseServiesProviderException.
                If user pass in null as DatabaseSchemaProviderType, we will create an ExtensionManager with
                DSP agnostic.  And it will load all those extensions speficed with DSPCompatibilityCategory.None
                in their DSPCompatibilityAttribute.
            </param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.Errors">
            <summary>
            Returns errors from the loading operation if the creation of this manager triggered the type load.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.DatabaseSchemaProvider">
            <summary>
            Get the DatabaseSerivceProvider instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.GetExtensions``1">
            <summary>
            Get the extension types for provided extension interface type.
            This method will return a list of ExtensionHandle that loaded successfully,
            and their DatabaseSchemaProviderCompatibility attribute is set to
            compatible with this ExtensionManager's DatabaseServciesProvider.
            If the extension interface has an criteria defined does not allow multiple
            extensions, and we found multiple extensions loaded for this interface, then
            MultipleExtensionsFoundException will be thrown.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.GetSingleExtension``1">
            <summary>
            Get a single extension for extension interface.  The extension criteria
            defined for this interface must specify AllowMultipleExtensions == false,
            otherwise ArguementException will be thrown.
            If there is no criteria defined for this extension interface, null will be return.
            If there are multple extensions loaded for this interface type in this ExtensionManager,
            we will try to pick one is most current DSP type specific.  If still multiple ones found,
            MultipleExtensionsFoundException will be thrown.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <returns>If found, returns the ExtensionHandle of this extension type.  Otherwise null be return.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.TryGetSingleExtension``1(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle{``0}@)">
            <summary>
            Try to get single extension for TInterfaceType.  If multiple extensions found
            or no extension found, or TInterfaceType allow multiple extensions, will return
            false and extensionHandle will be null.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="extensionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.ConvertAndReplaceExtensionHandle``1(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Convert a base ExtensionHandle type to a generic ExtensionHandle.
            If the cached one is already generic version, then we just return it.
            If the cached one is base version, we create a generic one from the base version,
            and update the cache with generic version.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="extensionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.IsExtension``1(System.Type)">
            <summary>
            Check if there is a valid extension in current ExtensionManager with
            passed in type and with no configuraiton.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.IsExtension``1(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Is the extensionHandle valid and loaded for current ExtensionManager
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="extensionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.GetExtension``1(System.Type)">
            <summary>
            Find an extension from loaded extensions in current ExtensionManager with the
            type of extensionType and with no configuration.
            The extensionType comparison will ignore any version information.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="extensionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.GetExtension``1(System.String,System.String)">
            <summary>
            Find an extension from loaded extensions in current ExtensionManager
            with assembly name, type fullname and with no configuration.
            The extensionType comparison will ignore any version information.
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.GetExtension``1(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Find the loaded ExtensionHandle instance with same type and configuration as passed in
            extensionHandle.  If we found one, we will return that loaded ExtensionHandle instance.
            If we did not find, we will return null.
            This method can be used after deserialize an ExtensionHandle, we want to valid if the
            ExtensionHandle is still valid and loaded for current ExtensionManager. 
            </summary>
            <typeparam name="TInterfaceType"></typeparam>
            <param name="extensionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.IsCompatibleWithCurrentProvider(System.String,System.String)">
            <summary>
            Method to check if passing provider with it's name or key is compatible with current provider
            in this ExtensionManager. 
            </summary>
            <param name="assemblyName">Assembly name of the provider</param>
            <param name="newProviderTypeName">The type name or key for the new provider.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.LoadType(System.String,System.String)">
            <summary>
            This is a helper method to load those satellite types.
            Using this method, we will search those types defined in dlls which are
            put in either GAC, VS AppBaseDir or SQLDB\Extensions folder.
            And this method will use the same versioning mechnisam we use for loading 
            extensions.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.InstantiateType``2(System.Type)">
            <summary>
            Instantiate a type, if proxy type is provied, it will wrap the instance to the 
            proxy instance.
            </summary>
            <typeparam name="T">The instance type or base type.</typeparam>
            <typeparam name="TProxy"></typeparam>
            <param name="type">The concrete type to instantiate.</param>
            <returns>Instance or proxy instance of this type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.InstantiateType``1(System.Type)">
            <summary>
            Instantiate a type and cast it to its interface type.
            This helper method is used to help to instantiate helper types which
            are not extensions.  For extensions, please use ExtensionHandler.Instantiate()
            to create a new instance of extension.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>        
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.ExtensionManager.AllDatabaseSchemaProviderTypes">
            <summary>
            Get all available DSP types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader">
            <summary>
            ExtensionTypeLoader used to load all types in defined Extensions.xml files.
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.ExtensionAssemblies.AddName(System.Reflection.AssemblyName)">
            <summary>
            Test hook to add additional assemblies to be loaded
            </summary>
            <param name="name"></param>
            <returns>True if added, false if already existed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.CreateAssemblyName(System.String,System.Reflection.AssemblyName)">
            <summary>
            Helper to create a new assembly name based on the partial name and supplied template name
            </summary>
            <param name="partialName"></param>
            <param name="templateName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.AddAssembly(System.Reflection.AssemblyName)">
            <summary>
            Add additional assemblies to be loaded when LoadTypes or ReloadTypesIfNecessary is called.
            </summary>
            <returns>True if assembly was not already in the list</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.ReloadTypesIfNecessary">
            <summary>
            Used force a reload of extension assemblies if those assemblies
            have already been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.LoadTypes">
            <summary>
            Load all the types defined in Extensions.xml files.
            LoadTypes method will be differ from skus, and will use BindingFilter method to decide
            whether to use absense of Microsoft signature to filter out.  And it will use 
            BindingClassification to decide if an extension type will be filtered out or not. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.FindDspSpecificExtension(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle,System.Int32})">
            <summary>
            This method will go through all passed in extensions, sort them by DSP compatibility,
            and return extensions are most DSP specific.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetExtensionsMap(System.Type)">
            <summary>
            Get all extensions for specified DatabaseSchemaProvider and with certain binding level.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetExtensionsBindingToNoneDsp">
            <summary>
            Get all extensions that specify of null as binding attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetExtensionProxy``1">
            <summary>
            Get extension proxy type for a extensibility point.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.AllowMultipleExtensions(System.Type)">
            <summary>
            Check if an extension interface type allows multiple extensions be loaded.
            If there is not criteria defined for this interface, ArgumentException will be thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.IsExtension``1(System.Type)">
            <summary>
            Check if the type is a valid TInterfaceType
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.IsExtension``2(System.Type)">
            <summary>
            Check if the type is a valid TInterfaceType with specified marker attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.InstantiateDatabaseSchemaProvider(System.String)">
            <summary>
            This method will take the passed in DatabaseSchemaProvider type string, get the 
            DatabaseSchemaProvider type.  
            If fail to get the type or fail to instantiate the type, it will throw InvalidDatabaseSchemaProviderException.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetDatabaseSchemaProviderType(System.String,System.String)">
            <summary>
            This method will first look at its already loaded concrete DSP type cache, 
            if the type is already there, return the type.  Otherwise, it might be 
            base DSP type, which we might not already load.  Then we will try to load the
            type, test it and put it in the cache.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.InstantiateExtension``1(System.Type)">
            <summary>
            This method will first check if the extensionType is in the loaded type extension
            type list, if it is, then instantiate it.
            </summary>
            <typeparam name="TInterfaceType">The extension type.</typeparam>
            <param name="extensionType">The type need to be instantiated.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.InstantiateExtension``2(System.Type)">
            <summary>
            Helper method to instantiate and wrap an extension in a proxy.
            </summary>
            <typeparam name="TProxy">
            The type of wrapper object to be instantiated.  This type must be instantiable. 
            </typeparam>
            <returns>A proxy object of type proxyType, cast to a TExtensionType.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.CompareAssemblyNameIgnoreVersion(System.String,System.String)">
            <summary>
            Compare two assembly fullname with ignoring the version information.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.CompareAssemblyNameIgnoreVersion(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Compare two AssemblyName with ignoring version information.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetAssemblyNameHashcodeIgnoreVersion(System.String)">
            <summary>
            Get assembly hashcode from the assemblyFullName without version information.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetAssemblyNameHashcodeIgnoreVersion(System.Reflection.AssemblyName)">
            <summary>
            Get assembly hashcode from assemblyName without version information.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.FindExtensionType(System.String,System.String)">
            <summary>
            Find extension type with passed in assemblyFullName and typeFullName.
            When we do the comparison, version inforamtion will be ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.LoadDeclaredExtensionCriteria(System.Reflection.Assembly)">
            <summary>
            Return boolean indicates if we found new criteria or not.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.MergeBaseDspExtensionsToDerivedDsp(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle,System.Int32}}},System.Type,System.Type,System.Int32)">
            <summary>
            Add extensions from base dsp type to its derived loaded dsp types.
            </summary>
            <param name="extensionsCache"></param>
            <param name="baseDspType"></param>
            <param name="derivedDspType"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetDerivedDsps(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle,System.Int32}}})">
            <summary>
            For each DSP type or DSP base types, get all its derived and loaded DSP types.
            Also assign the priority of this base type to the specify DSP type.
            For example if an extension e1 is marked as compatible with Sql80Dsp.
            Then that extension will have highest priorty in Sql80Dsp.
            If an extension e2 is marked as compatible with IDSP, it will also add to Sql80Dsp list,
            but its priority will be lower than e1.
            </summary>
            <param name="extensionsCache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.TryMakeExtensionType(System.Type,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Check the criteria and compatibility of the type we loaded.
            Filter the type and add them into different list for different 
            criteria and DatabaseSchemaProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetCompatibleDatabaseSchemaProviderType(System.Type)">
            <summary>
            Get compatible DatabaseSchemaProvider types defined as 
            DatabaseSchemaProviderCompatibilityAttribute on the extensionType.
            </summary>
            <param name="extensionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.GetDefaultVSPaths">
            <summary>
            Returns the directory paths where we should search for our extensions
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.NoneDsp">
            <summary>
            This helper class is used for any extensions defined as compatible with DspCompatibility.None.
            Using this marker class type, we can treat none dsp extensions the same way as extensions
            bind to other DSP.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.ExtensionTypeLoader.TypeInfo">
            <summary>
            Helper class used store type information, and use this
            TypeInfo as key in dictionaries.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.IConnectionStringEncrypter">
            <summary>
            Encrypts connection strings so they can be persisted safely.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.IConnectionStringEncrypter.Encrypt(System.String)">
            <summary>
            Encrypt the connection string given.
            </summary>
            <param name="secret"></param>
            <returns></returns>
            <exception cref="!:EncryptionException">Thrown if the connection string cannot be encrypted.</exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.IConnectionStringEncrypter.Decrypt(System.Byte[])">
            <summary>
            Decrypt a connection string if possible.
            </summary>
            <param name="encryptedSecret"></param>
            <returns>The original connection string, or null if decryption isn't possible.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.IConnectionStringParser.MakeSafeToPersist(System.String)">
            <summary>
            Returns a connection string that is safe to persist in documents - any security
            fields have been stripped out.
            </summary>
            <param name="fullConnection">Full connection string with user credentials</param>
            <exception cref="!:InvalidConnectionStringException">Thrown if connection string cannot be parsed.</exception>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.IExtension">
            <summary>
            Base interfaces for all extensions.
            Note: This is a marker interface, we should not put any members on this interface
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.IExtensionInformation">
            <summary>
            Base interface for all extensions that need reference back to their ExtensionHandle.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.IExtensionInformation.SetExtensionHandle(Microsoft.Data.Tools.Schema.Extensibility.ExtensionHandle)">
            <summary>
            Sets the ExtensionHandle that this instance is associated with.  This is called by the ExtensionHandle.Instantiate method.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Extensibility.IExtensionInformation.ExtensionHandle">
            <summary>
            Gets the ExtensionHandle associated with this extension instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.IExtensionProxy`1">
            <summary>
            Generic interface for extension proxies.  On this interface
            we will force to set the extension itself to the proxy.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute">
            <summary>
            This attribute is used to specify additional type name for
            database schema provider (usually, from previous version), thus making it possible
            to find renamed provider using old name. (Old name can come, for example, from .dacpac file)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute.#ctor(System.String)">
            <summary>
            previousName is a full type name of the DatabaseSchemaProvider in one of the previous versions
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.FolderIconStyle">
            <summary>
            Enum to specify icon display style for a folder.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.IErrorManagerLimiter">
            <summary>
            Used to change the way the error manager shows the errors.  The error manager will try
            and float errors to the top and warnings to the bottom.  If this interface is provided then
            suppressions and treat warnings as errors will be honored.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserConstructor">
            <summary>
            A class that can construct a TSqlParser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserConstructor.QuotedIdentifiersOnDefault">
            <summary>
            A boolean true constant to represent the default state of Quoted Identifiers
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserConstructor.QuotedIdentifiersOn">
            <summary>
            Property to set or get the state of Quoted Identifiers
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookup">
            <summary>
            A class that can given a SqlPlatform, construct a TSqlParser for the previous platform.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookup.QuotedIdentifiersOn">
            <summary>
            Property to set or get the state of Quoted Identifiers
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookup.GetPreviousPlatformParser(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.Nullable{Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms}@)">
            <summary>
            Given a SqlPlatform, returns the TSqlParser for the previous platform version.
            </summary>
            <param name="platform">The SqlPlatform to which the TSqlParser for the previous platform should be returned</param>
            <param name="previousPlatform">out variable that has the SqlPlatform of the previous version. null if there are no previous platform defined for the parameter platform.</param>
            <returns>TSqlParser for the previous platform. Returns null if there are no previous platform defined.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookupConstructor">
            <summary>
            A class that can construct a TSqlParserRepository.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookupConstructor.QuotedIdentifiersOnDefault">
            <summary>
            A boolean true constant to represent the default state of Quoted Identifiers
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.TSqlParserLookupConstructor.QuotedIdentifiersOn">
            <summary>
            Property to set or get the state of Quoted Identifiers
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.CodeGenerationSupporter">
            <summary>
            This class is a real internal class to parser, 
            therefore it is not in the spec tree.
            It is used to refactor code generation related code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.GetPredicateStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SetOptions,System.Nullable{System.Boolean})">
            <summary>
            A helper method that returns a PredicateSetStatement for a given SetOption and value.
            </summary>
            <param name="optionToSet">The SET option to set.</param>
            <param name="optionOn">The boolean value to use for the SET option.</param>
            <returns>A PredicateSetStatement that has a SET option with its boolean value.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.LocateStatement``1(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Processes the specifed fragement looking for a valid statement.  This method
            will look through multiple batch statements in order and return the first
            valid statement
            </summary>
            <param name="script"></param>
            <param name="statementValidator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.LocateStatement``1(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch@)">
            <summary>
            Processes the specifed fragement looking for a valid statement.  This method
            will look through multiple batch statements in order and return the first
            valid statement
            </summary>
            <param name="fragment"></param>
            <param name="statementValidator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.LocateStatements``1(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Processes the specifed fragement looking for a valid statement.  This method
            will look through multiple batch statements in order and return the first
            valid statement
            </summary>
            <param name="fragment"></param>
            <param name="statementValidator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.MergeFragmentIntoScript(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript)">
            <summary>
            Helper that merges the specified fragment into the provided script
            </summary>
            <param name="frag"></param>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.RemoveStatements(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Collections.Generic.IList{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement})">
            <summary>
            Helper to remove the specified statement from a TSqlScript or batch
            </summary>
            <param name="fragment"></param>
            <param name="statementToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.VisitStatements(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.Func{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch,System.Boolean})">
            <summary>
            General purpose utility that visits statements in a TSqlFragment.  The visitor delegate
            returns true when the visit has been completed.  Statements are visited end to beginning of the
            script to support removing statements
            </summary>
            <param name="fragment"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.ScriptDomUtils.CreateRenameEntityStatement(Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind,System.String,System.String)">
            <summary>
            Helper method to generate RENAME OBJECT/DATABASE statement
            </summary>
            <param name="securityObject">Value of securityObject can be OBJECT or DATABASE</param>
            <param name="oldName">Old name of the object</param>
            <param name="newName">New name of the object</param>
            <returns>Object of type RenameEntityStatement</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer">
            <summary>
            Compares Sql Scripts and abstract syntax trees.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.#ctor(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">The Sql provider.</param>
            <param name="collation">The comparison manager to use for collation comparisons.  This can be retrieved from a ModelStore.</param>
            <param name="ignoreWhitespace">Optionally ignores whitespace when comparing</param>
            <param name="ignoreComments">Optionally ignores comments when comparing</param>        
            <param name="ignoreSemicolon">Optionally ignores semicolons when comparing</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.#ctor(Microsoft.Data.Tools.Schema.Sql.SqlDatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">The Sql provider.</param>
            <param name="collation">The comparison manager to use for collation comparisons.  This can be retrieved from a ModelStore.</param>
            <param name="ignoreWhitespace">Optionally ignores whitespace when comparing</param>
            <param name="ignoreComments">Optionally ignores comments when comparing</param>        
            <param name="ignoreSemicolon">Optionally ignores semicolons when comparing</param>
            <param name="ignoreKeywordCasing">Optionally ignores keyword casing when comparing</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.Compare(System.String,System.String)">
            <summary>
            Compares two scripts.
            </summary>
            <param name="firstScript">The first complete script to compare.</param>
            <param name="secondScript">The second complete script to compare.</param>
            <returns>True if the scripts are functionally equivalent, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.Compare(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Compares two fragments. If the fragments have no token stream, it will be generated.
            </summary>
            <param name="first">The first fragment to compare.</param>
            <param name="second">The second fragment to compare.</param>
            <returns>True if the fragments are functionally equivalent, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.Compare(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            Compare scripts from two text readers.
            </summary>
            <param name="first">The TextReader from which the first script is read</param>
            <param name="second">The TextReader from which the second script is read</param>
            <returns>True if the scripts are functionally equivalent, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.GetDifferences(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment)">
            <summary>
            Creats a list of differences from two fragments.
            </summary>
            <param name="oldScript">The old fragment.</param>
            <param name="newScript">The new fragment.</param>
            <returns>The list of diffs between the two fragments.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparer.GetDifferences(System.String,System.String)">
            <summary>
            Creats a list of differences from two scripts.
            </summary>
            <param name="oldScript">The old script.</param>
            <param name="newScript">The new script.</param>
            <returns>The list of diffs between the two scripts.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor">
            <summary>
            Service constructor for the SqlScriptDiffer component.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.IgnoreWhiteSpace">
            <summary>
            True if the compare operation should ignore whitespace.  False if whitespace differences should be respected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.IgnoreComments">
            <summary>
            True if the compare operation should ignore comments.  False if comment differences should be respected.  
            Both multiline and single line comments are affected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.IgnoreSemicolon">
            <summary>
            True if the compare operation should ignore semicolons.  False if semicolon differences should be respected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.IgnoreKeywordCasing">
            <summary>
            True if the compare operation should ignore keyword casing.  False if keyward casing differences should be respected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.Collation">
            <summary>
            The model collation to use for comparing identifiers.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparerConstructor.ConstructServiceImplementation">
            <summary>
            Creates the SqlScriptDiffer.
            </summary>
            <returns></returns>       
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparisonResult">
            <summary>
            Describes a sql script comparison result.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptDifferenceOperationType">
            <summary>
            Describes the type of operation that needs to be performed for the script difference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptGeneratorConstructor">
            <summary>
            A constructor class that has options that defines a Sql script generator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptGeneratorConstructor.Options">
            <summary>
            Gets or sets the option to supply to the sql script generator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptSynchronizer.Merge(Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment,System.IO.TextWriter,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptComparisonResult}@)">
            <summary>
            Contains merge offset values
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptSynchronizer.ConvertTokensToText(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken},System.IO.TextWriter)">
            <summary>
            Converts the specified list of tokens to text
            </summary>
            <typeparam name="T">The type of the token objects. Must implement IToken</typeparam>
            <param name="tokens">A list of tokens to convert</param>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to write the output to</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.Sql.SqlScriptSynchronizer.ConvertTokensToText(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken})">
            <summary>
            Converts the specified list of tokens to text and returns that text
            </summary>
            <typeparam name="T">The type of the token objects. Must implement IToken</typeparam>
            <param name="tokens">A list of tokens to convert</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.DiffEngine.DiffElement`2">
            <summary>
            Represents the smallest unit used by the DiffEngine for comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ScriptDom.DiffEngine.DiffGramGenerator`2.CreateDiffGram(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.ScriptDom.DiffEngine.DiffElement{`0,`1}},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.ScriptDom.DiffEngine.DiffElement{`0,`1}})">
            <summary>
            Returns a list of DiffGram.  Each diff gram can be one of 3 operations:
            Equal - The two tokens are equal as defined by the comparer.  Location refers to source location.
            Delete - The original token is not found in the new token list.  Location refers to source location.
            Insert - A target token is not found in the original.  The location is the index of the previous Equal token 
            in the source element list, or Prepend is set to true if the token is inserted at the beginning.
            </summary>
            <param name="sourceElements"></param>
            <param name="targetElements"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ScriptDom.DiffEngine.DiffGramGenerator`2.LcsEntry`2">
            <summary>
            Holds references to diff elements that are the same (in terms of
            longest common subsequence) in both the source and the target.
            This is used to generate the diffgram.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonChangeDefinitionModifier">
            <summary>
            Provides primitives for modifying a ModelComparisonChangeDefinition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonResultModifier">
            <summary>
            Provides primitives for modifying a ModelComparisonResult
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonResultRefactoringMediator">
            <summary>
            Modifies ModelComparisonResult to reconcile the fact that the
            comparison results for identity re-factored elements may be equal
            name-wise since the model that did not have re-factored elements will
            have the IdentityChangeLog applied to it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonResultRefactoringMediator.ApplyReconcileRevert">
            <summary>
            Makes necessary changes to the comparison result based on the
            assumption that identity change log of the project has been
            applied to either the source or target model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonResultRefactoringMediator.Reconcile">
            <summary>
            Finds elements considered equal in the comparison result
            due to the identity change log apply and moves them to their
            appropriate non-equal collection in the comparison result
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ComparisonResultRefactoringMediator.ModifyUpdatesForRefactorings(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ElementKeyValueContext,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition})">
            <summary>
            Goes through the composing and hierarchical children of the given
            elements and determines if they too need to have a doctored
            change definition created.  It also adds properties and 
            relationships to the parent change definition
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ContextOperation">
            <summary>
            Abstract base class for an operation class that uses a schema compare context.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ContextOperation.DebuggerDisplay">
            <summary>
            Debugger display summary.
            </summary>
            <remarks>This is only meant to be invoked by debug/trace.  For this reason, it doesn't marshal to the UI thread.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.GetProperties(System.Xml.XmlNode)">
            <summary>
            Returns a list of properties under the xml node
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.AddProperty(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Utility to add a child to the xml document
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.DeserializeViewSettings(System.Xml.XmlNode,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel)">
            <summary>
            Initialize the current view from the serialized form.
            NB: The serialized form does not contain information that is present in the document model.
            </summary>
            <param name="parent">The parent XML node which contains the serialized form.  Must not be null.</param>
            <param name="errorMessage">Any error message generated during deserialization.</param>
            <returns>true if the deserialization was successful, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.ConvertStringToFilterSetting(System.String)">
            <summary>
            Convert a CSV string of filter enum value names to a filter value.
            </summary>
            <param name="value">The CSV string. May be null or empty.</param>
            <returns>The enum value.  If the input is null, empty or whitespace, then the default filter is returned.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.ConvertFilterToString(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting)">
            <summary>
            Convert a filter enum value to a CSV string.
            </summary>
            <param name="filter">The filter enum value.</param>
            <returns>The CSV string.  Will not be null or empty.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.DataModelSerializer.DeserializeModelProvider(System.Xml.XmlNode)">
            <summary>
            Deserializes a model provider from the xml store
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.GenerateScriptEventArgs.DatabaseScript">
            <summary>
            Path to the file containing the generated user database script. Will be null if no database script was generated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.GenerateScriptEventArgs.MasterScript">
            <summary>
            Path to the file containing the generated master database script. Will be null if no master database script was generated.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.IDependencySource.GetDependents(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Fetch the elements that depend on the given element.
            </summary>
            <param name="element">Element.  If null, this operation returns an empty enumeration.</param>
            <param name="inSource">true if the element is in the source model.</param>
            <returns>Elements that depend on the given element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.IDependencySource.GetDependencies(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Fetch the elements that the given element depends on.
            </summary>
            <param name="element">Element.  If null, this operation returns an empty enumeration.</param>
            <param name="inSource">true if the element is in the source model.</param>
            <returns>Elements that the given element depends on.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.InclusionChangeEventArgs.Entry">
            <summary>
            Entry that the inclusion state was performed upon
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.InclusionChangeEventArgs.NewState">
            <summary>
            New state of the entry after the action
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationEventArgs.Success">
            <summary>
            true if the operation was successful.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationEventArgs.ResultFlags">
            <summary>
            Bit field recording additional information for the operation result.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags">
            <summary>
            Bit field recording additional information for the operation result.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Drift_Target">
            <summary>
            Target schema drift detected
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Drift_Source">
            <summary>
            Source schema drift detected
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.ModelErrors_Source">
            <summary>
            Model errors in source may cause the comparison to be inaccurate
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.ModelErrors_Target">
            <summary>
            Model errors in target may cause the comparison to be inaccurate
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.OrphanedObjectsExist_Source">
            <summary>
            Orphaned objects exist in source. These may be added.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.OrphanedObjectsExist_Target">
            <summary>
            Orphaned objects exist in target. These may be dropped.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.SomeActionsMayPreventUpdate">
            <summary>
            Some actions, if included, may prevent update.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Closed_Source">
            <summary>
            Source project was closed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Closed_Target">
            <summary>
            Target project was closed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Exception_Occurred">
            <summary>
            Exception occurred.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationResultFlags.Cancelled">
            <summary>
            Operation cancelled.
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.StateChanged">
            <summary>
            State of the comparison changed
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ProgressChanged">
            <summary>
            Progress value changed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.FileName">
            <summary>
            Currently loaded SCMP file. Null if no file loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Source">
            <summary>
            Source participant. Null if no source set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Target">
            <summary>
            Target participant. Null if no target set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Options">
            <summary>
            The current options for the schema compare
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ConfiguredModelCollationComparer">
            <summary>
            Gets the configured model collation comparer.  Can return null if source and target models do not exist.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ModelComparerConfiguration">
            <summary>
            The current ModelComparerConfiguration for the current options
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Filter">
            <summary>
            Current filter
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GroupBy">
            <summary>
            Current grouping
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SourceScript">
            <summary>
            Source script of currently selected difference
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.TargetScript">
            <summary>
            Target script of currently selected difference
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.PersistedViewProperties">
            <summary>
            View properties from the SCMP file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CurrentOperationContext">
            <summary>
            Operation context for currently running operation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.WorkingState">
            <summary>
            Current state of the comparison
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.IsWorking">
            <summary>
            Whether a high-level operation (compare, update target, script generation) is happening.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.DatabaseSchemaProvider">
            <summary>
            Retrieve the DSP used for Schema Comparison.  This is evaluated dynamically each time, and may change as the source/target information changes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetProviderFromSchemaCompareParticipantForDatabase(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant)">
            <summary>
            Returns the Database Schema Provider(DSP) associated for a given Schema Compare Participant object.
            </summary>
            <param name="schemaModelProvider"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Differences">
            <summary>
            Current tree of schema diff entries
            </summary>
            <remarks>Must acquire data model lock when accessing this property</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Errors">
            <summary>
            Errors
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ComparisonResult">
            <summary>
            Current comparison result
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.DependencySource">
            <summary>
            Current dependency source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ChangeLog">
            <summary>
            Current identity changes
            </summary>
            <remarks>TODO (tgedge) make this a wrapper class for deployment</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UpdateDisabled">
            <summary>
            Marks whether update is directly disabled
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.RestrictedComparison">
            <summary>
            Whether the comparison has been restricted due to permissions
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GroupingGenerator">
            <summary>
            Current grouping generator.  Can be null if not yet generated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.InclusionState">
            <summary>
            Handler for inclusion state
            </summary>
            <remarks>Locking not required. Reference immutable after construction.</remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel._lockObject">
            <summary>
            Locking object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.#ctor">
            <summary>
            Build a blank data model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetLockObject">
            <summary>
            Fetch the internal locking object
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.AssertLockHeld">
            <summary>
            Assert that the internal lock is held by the current thread
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetDefaultOptions">
            <summary>
            Return the deployment options to the default settings for Schema Compare.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ObjectTypeExcludedFromView(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Test to see if the given model element class should be excluded
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Dirty">
            <summary>
            Whether the comparison is unsaved.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Closing">
            <summary>
            Whether the comparison is closing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.HasResult">
            <summary>
            Whether there is a comparison result.
            TODO (tgedge) rework this when controller integrated with data model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.ValidComparisonResult">
            <summary>
            Whether the comparison result is valid.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeSource">
            <summary>
            Test whether the source participant can be modified.
            </summary>
            <returns>true if the source participant can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeTarget">
            <summary>
            Test whether the target participant can be modified.
            </summary>
            <returns>true if the target participant can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanSwitch">
            <summary>
            Test whether the source and target participant can be switched.
            </summary>
            <returns>true if the source and target participant can be switched.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeSourceAndTarget">
            <summary>
            Test whether both the source and target participant can be modified.
            </summary>
            <returns>true if both the source and target participant can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanExecuteCancel">
            <summary>
            Test whether the cancel operation can be performed.
            </summary>
            <returns>true if the cancel operation can be performed.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanExecuteCompare">
            <summary>
            Test whether the compare operation can be performed.
            </summary>
            <returns>true if the compare operation can be performed.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanExecuteGenerateScript">
            <summary>
            Test whether the generate script operation can be performed.
            </summary>
            <returns>true if the generate script operation can be performed.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanExecuteUpdateTarget">
            <summary>
            Test whether the update target operation can be performed.
            </summary>
            <returns>true if the update target operation can be performed.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeFilter">
            <summary>
            Test whether the filter can be modified.
            </summary>
            <returns>true if the filter can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeGrouping">
            <summary>
            Test whether the grouping can be modified.
            </summary>
            <returns>true if the grouping can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeOptions">
            <summary>
            Test whether the comparison options can be modified.
            </summary>
            <returns>true if the comparison options can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CanChangeInclusion">
            <summary>
            Test whether the inclusion of an element can be modified.
            </summary>
            <returns>true if the inclusion of an element can be modified.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.HasDifferences">
            <summary>
            Returns true if this Schema Compare has some differences, false if there are no differences
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Load(System.String)">
            <summary>
            Initialize the schema comparison from the given SCMP file.
            </summary>
            <param name="fileName">file to load.  If null the comparison is initialized to the defaults.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Save">
            <summary>
            Save the schema comparison as an SCMP to the given file.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Cancel">
            <summary>
            Cancel any running asynchronous operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetSource(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant)">
            <summary>
            Set the source.
            </summary>
            <param name="source">The source.  If null, the source is cleared.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetTarget(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant)">
            <summary>
            Set the target
            </summary>
            <param name="target">The target.  If null, the target is cleared.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Switch">
            <summary>
            Switch source and target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CompareAsync">
            <summary>
            Perform an asynchronous schema comparison
            </summary>
            <remarks>Asynchronous implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Compare">
            <summary>
            Perform a schema comparison
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.Compare(System.Threading.CancellationToken)">
            <summary>
            Perform a schema comparison
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GenerateScriptAsync" -->
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GenerateScripts">
            <summary>
            Generate a deployment script
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GenerateScripts(System.Threading.CancellationToken)">
            <summary>
            Generate a deployment script
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UpdateTargetAsync">
            <summary>
            Update the target
            </summary>
            <remarks>Asynchronous implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UpdateTarget">
            <summary>
            Update the target
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UpdateTarget(System.Threading.CancellationToken)">
            <summary>
            Update the target
            </summary>
            <remarks>Internal implementation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.TryToggleIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState@)">
            <summary>
            Try to toggle the inclusion state for an entry.
            </summary>
            <param name="entry">The entry to include or exclude.  If null, is a NOOP.</param>
            <param name="newState">The new state for the entry.</param>
            <returns>True if the state change was successful, otherwise false.</returns>
            <remarks>A SchemaDiffEntry is used to identify the item being acted upon, since it can be used at both folder or element level</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.TrySetIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Boolean,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState@)">
            <summary>
            Try to set the inclusion state for an entry.
            </summary>
            <param name="entry">The entry to include or exclude.  If null, is a NOOP.</param>
            <param name="included">If true, the entry and all it's children are included, otherwise the entry and all it's children are excluded.</param>
            <param name="newState">The new state for the entry.</param>
            <returns>True if the state change was successful, otherwise false.</returns>
            <remarks>A SchemaDiffEntry is used to identify the item being acted upon, since it can be used at both folder or element level</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.AddBlockingDependencyErrors(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Calculate the blocking dependency errors (recursively) for the given entry and add them to the error list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.AddBlockingDependencyErrors(System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry})">
            <summary>
            Calculate the blocking dependency errors (recursively) for the given entries and add them to the error list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetFilter(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting)">
            <summary>
            Set the filter
            </summary>
            <param name="filter">The new filter setting</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetGroupBy(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareGroupBySetting)">
            <summary>
            Current grouping
            </summary>
            <param name="groupBy">The new group by setting</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetOptions(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Current options
            </summary>
            <param name="options">The new options</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.IsTargetADatabase" -->
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.FindEntry(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId)">
            <summary>
            Find a schema diff entry using an excluded element as key.
            </summary>
            <param name="excludedElement">The excluded element.  Must not be null.</param>
            <returns>The located schema diff entry, or null if no matching entry can be found.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.FindEntry(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Find a schema diff entry using an model element as key.
            </summary>
            <param name="element">The model element.  Must not be null.</param>
            <returns>The located schema diff entry, or null if no matching entry can be found.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UnsafeFindFirstMatch(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Func{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Object,System.Boolean},System.Object)">
            <summary>
            Find first schema diff entry where the given predicate evaluates to true.
            </summary>
            <remarks>Not thread-safe.  It is the responsibility of the caller to lock the data model lock.</remarks>
            <param name="root">The root of the schema diff tree to search.  Must not be null.</param>
            <param name="predicate">The predicate. Must not be null.</param>
            <param name="context">Context data. Passed to predicate.</param>
            <returns>The located schema diff entry, or null if no matching entry can be found.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetInclusionState(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Calculate the inclusion state of a schema diff entry
            </summary>
            <param name="entry">The entry to include or exclude.  Must not be null.</param>
            <returns>The inclusion state</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetDependents(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Get element dependents  
            This can be used for Exclude operations costing
            </summary>
            <param name="entry">SchemaDiffEntry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetDependencies(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Get element dependencies 
            This can be used for Include operations costing
            </summary>
            <param name="entry">SchemaDiffEntry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.RunAsync(System.Action)">
            <summary>
            Run an asynchronous activity
            TODO (tgedge): Implement job model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.OperationCancelled(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationEventArgs)">
            <summary>
            Setup the operation event structure for a cancellation
            </summary>
            <param name="operationEvent">Operation event. Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UpdateResultFlags(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.OperationEventArgs)">
            <summary>
            Set the Flags portion of the operation event
            </summary>
            <param name="operationEvent">Operation event. Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.SetParticipant(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantRole)">
            <summary>
            Set the source or target participant
            </summary>
            <param name="participant">Participant.  Can be null.</param>
            <param name="role">Role the participant is playing</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.CloneCompareEvents(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel)">
            <summary>
            Method to copy event handlers 
            Only for testing - We are adding only compare start event since that is the only one required for testability
            </summary>
            <param name="copyToModel"> target model to copy to</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.RaiseEvent``1(System.EventHandler{``0},``0)">
            <summary>
            Method to raise events if someone is registered.
            </summary>
            <typeparam name="TEventArgs">Subclass of EventArgs</typeparam>
            <param name="eventToRaise">The handler of the event to raise. If null, this method does nothing.</param>
            <param name="args">Event arguments.  Can be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.RaiseStateEvent(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareWorkingState)">
            <summary>
            Propagate the state changed event from the state machine.
            </summary>
            <param name="state">New state</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.RaiseProgressEvent(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.ProgressCode)">
            <summary>
            Propagate progress messages from the backend
            </summary>
            <param name="progressCode">Progress code to report</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetExcludedElements">
            <summary>
            Calculate the excluded elements from the inclusion state
            </summary>
            <returns>Set of excluded elements</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UnsafeWalk(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Func{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Object,System.Boolean},System.Object)">
            <summary>
            Walk a difference tree, applying the predicate to each entry
            </summary>
            <remarks>Not thread-safe.  It is the responsibility of the caller to lock the data model lock.</remarks>
            <param name="root">The root of the difference tree.  Can be null.</param>
            <param name="predicate">The predicate.  Must not be null.  Predicate returns true to continue walking child nodes, false otherwise.</param>
            <param name="context">Context to be passed to predicate.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.UnsafeGetDiffWalk(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Func{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Object,System.Boolean},System.Object,System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry})">
            <summary>
            Walk a difference tree, applying the predicate to each entry and returning the list of differences
            </summary>
            <remarks>Not thread-safe.  It is the responsibility of the caller to lock the data model lock.</remarks>
            <param name="root">The root of the difference tree.  Can be null.</param>
            <param name="predicate">The predicate.  Must not be null.  Predicate returns true to continue walking child nodes, false otherwise.</param>
            <param name="context">Context to be passed to predicate.</param>
            <param name="schemaDiffCollection">The hashset of differences.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.IsIncludedElement(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Object)">
            <summary>
            Predicate for checking if the element has an included state
            </summary>
            <param name="entry">SchemaDiffEntry to check</param>
            <param name="context">context</param>
            <returns>if the element is included</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.GetIncludedSourceElements">
            <summary>
            Gets the list of source elements that are included in schema diff
            </summary>
            <returns>The collection of model elements included in the source differences</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareDataModel.MarkTopLevelElementsForExclusion">
            <summary>
            Marks some top level elements for initial exclusion.
            Top level elements will be excluded if the element is from a composite model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting.None">
            <summary>
            Convenience value representing no filter applied - all objects are shown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting.Equals_Objects">
            <summary>
            If set, equal objects are NOT shown.
            </summary>  
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting.Not_Supported_Deploy">
            <summary>
            If set, objects that are not supported for deployment are NOT shown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareFilterSetting.All">
            <summary>
            Convenience value representing all filters applied - both equal and not supported for deployment objects are NOT shown.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.SchemaCompareGroupBySetting">
            <summary>
            Placeholder replacement for existing strategy-based grouping
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentPlanDependencySource">
            <summary>
            Dependency source implementation which reads dependency information from a deployment plan.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentPlanDependencySource.Plan">
            <summary>
            The underlying deployment plan.  Can be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentPlanDependencySource.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            Generate a dependency source from a deployment plan.
            </summary>
            <param name="plan">The deployment plan.  Can be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentPlanDependencySource.GetDependents(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Fetch the elements that depend on the given element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentPlanDependencySource.GetDependencies(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Fetch the elements that the given element depends on.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.GeneratePlan(System.Boolean)">
            <summary>
            Generate a deployment plan
            </summary>
            <remarks>This method assumes that the identity change log has already been applied</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.GeneratePlan(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Generate a deployment plan and verify it
            </summary>
            <remarks>This method assumes that the identity change log has already been applied</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.RemovePrePostDeploymentScripts(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentPlan)">
            <summary>
            Modify the deployment plan to remove any pre- and post-deployment script steps.
            </summary>
            <param name="plan">Deployment plan</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.RemoveDeploymentScriptStepsUntilAfter``1(Microsoft.Data.Tools.Schema.Sql.Deployment.DeploymentStep)">
            <summary>
            Remove any DeploymentScriptStep steps in the plan after the given step until the given marker step type is seen
            </summary>
            <typeparam name="T">Marker step type.  Subtype of DeploymentStep.</typeparam>
            <param name="step">Step within the deployment plan.</param>
            <returns>The marker step, or null if the list ended.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.ApplyPlan">
            <summary>
            Apply the generated plan to the database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.GenerateUniqueScriptFileNames(System.String,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.String@,System.String@)">
            <summary>
            Generate unique filenames for the database script and if SQL Azure is the target, the master script
            </summary>
            <param name="databaseName">The target database name</param>
            <param name="targetPlatform">The target database platform</param>
            <param name="fileName">Filename for database script</param>
            <param name="azureFileName">Filename for SQL Azure master database script</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DeploymentWrapper.ThrowIfDisposed">
            <summary>
            Throw an object disposed exception if this object has been disposed
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ElementKeyValueContext">
            <summary>
            Handles the concerns of choosing an element for various contexts when considering swap of source/target models
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ElementKeyValueContext.RefactorLogElement">
            <summary>
            The element that originally had the refactoring done to it
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ElementKeyValueContext.ChangeDefinitionKey">
            <summary>
            The element to use for the key to a change definition in the comparison result *Modified collections
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ElementKeyValueContext.ChangeDefinitionTarget">
            <summary>
            The element to use for the target element of a change definition in the comparison result *Modified collections
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.GeneratedSqlDeploymentEndpoint">
            <summary>
            Endpoint wrapping a participant.
            Endpoints are used by the SqlDeployment engine to describe deployment source and target.
            The current implementations assume either a DACPAC or database source/target and don't support drift detection, so we need our own.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions">
            <summary>
            Extension methods for IModelElements.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetSqlSchemaChildObject(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Find the parent element which is the direct child of a schema object.
            </summary>
            <param name="element">The element.</param>
            <returns>The element which is the direct child of a schema object, or null if none such object can be found, or the element is null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetDisplayName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Fetch the display name for a model element.
            </summary>
            <param name="element">The element.  Must not be null.</param>
            <param name="style">The display style.</param>
            <returns>The display name.  Can be null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetUIServices(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Fetch the UserInteractionServices service for a model element.
            </summary>
            <param name="element">The element.  Must not be null.</param>
            <returns>The UserInteractionServices service.  Will not be null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetSchemaName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Fetch the display name for the schema of a model element.
            </summary>
            <param name="modelElement">Model element, can be null.</param>
            <returns>The schema display name, or null if none.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetActualName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Fetch the element identifier, using any inline annotation identifier present if the element does not have an specific identifier.
            </summary>
            <param name="element">Model element, can be null.</param>
            <returns>The model identifier for this element, or null if none.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.IsComposing(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Test whether the given element is composing
            </summary>
            <param name="element">Model element, can be null.</param>
            <returns>true if the element is composing, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.IsSysSysNameObject(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Test whether the given element is the [sys].[sysname] user-defined data type
            </summary>
            <param name="element">Model element, can be null.</param>
            <returns>true if the element is the [sys].[sysname] user-defined data type</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.IModelElementExtensions.GetResolvableAnnotationName(Microsoft.Data.Tools.Schema.Sql.SchemaModel.ISqlSchemaObject)">
            <summary>
            Fetch the model builder resolvable annotation name from the schema relationship
            </summary>
            <param name="sqlSchemaObject">Schema object. Must not be null.</param>
            <returns>The annotation name, or null if none.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Name">
            <summary>
            User-Visible Simple Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Description">
            <summary>
            User-Visible Description
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.FullName">
            <summary>
            User-Visible Full Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.DatabaseName">
            <summary>
            Database name associated with this participant
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.SchemaModel">
            <summary>
            The currently loaded schema model.  Can be null if no model is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Role">
            <summary>
            Role that this provider is performing
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value).  Will not return null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Refactorings">
            <summary>
            Refactoring records.  Will not return null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Platform">
            <summary>
            SQL platform
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CanContainServerScopedElements">
            <summary>
            True if this participant can populate server scope elements.
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.IsMaster">
            <summary>
            True if this participant represents the "master" database
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.PreservesVariableBindings">
            <summary>
            True if this participant preserves variable bindings
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CanApplyRefactorings">
            <summary>
            True if this participant can apply refactoring operations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CanGenerateScript">
            <summary>
            True if this participant can generate an update script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CanUpdateTarget">
            <summary>
            True if this participant can be updated as a target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CanAddUndeployableObjects">
            <summary>
            True if adding undeployable objects are supported for updates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.PopulateServerScopedObjects">
            <summary>
            Determines if Server scoped elements should should be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.PopulateRefactorings">
            <summary>
            Determines if refactoring information should should be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.PopulationConfigChanged">
            <summary>
            Has the population configuration be changed since the last population event.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Validated">
            <summary>
            Has the participant been successfully validated (since the last invalidating event).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Validate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Verifies that the participant is valid.
            </summary>
            <param name="errorManager">Error manager to log errors and warnings to</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>true if the participant is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Populate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Populate the model.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>true if the population was successful, otherwise false</returns>
            <remarks>Potentially long-running operation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.IsStale">
            <summary>
            Is the currently populated model stale (out of sync with the source?)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.RefineConfiguration(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Refine the given configuration.
            </summary>
            <param name="config">Configuration to be modified.  Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.GetTargetComparer(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext)">
            <summary>
            Fetch a participant comparer that can compare this target to another participant
            </summary>
            <param name="context">The context.</param>
            <returns>The participant comparer</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.GetTargetUpdater(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext)">
            <summary>
            Fetch a participant updater that can update this target from another participant
            </summary>
            <param name="context">The context.</param>
            <returns>The participant updater</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.Reset">
            <summary>
            Reset the participant back to it's initial non-validated, non-populated state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.SerializeToXML(System.Xml.XmlNode)">
            <summary>
            Serialize to XML format
            </summary>
            <param name="parent">The parent node that the XML should be attached to</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.CreateSourceDeploymentEndpoint(System.Boolean)">
            <summary>
            Constructs the appropriate deployment endpoint for deployment plan generation
            </summary>
            <param name="canTargetApplyRefactorings">Can the target apply any refactor operations? Determines if the source
            endpoint should load refactorlog information</param>
            <returns>SqlDeploymentEndpoint</returns>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.PopulationCompleted">
            <summary>
            Population completion event
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant.ParticipantTypeName">
            <summary>
            Participant Type Name
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipantExtensions.RefineConfigurationCommon(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant,Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Common code to refine configuration.
            </summary>
            <remarks>
            This is here as a implementation artifact of integrating the existing SchemaCompareModelProvider code base into the new participants.
            This is common code between participants implemented using the SchemaCompareParticipant base class and those implemented as an adaptor
            using the ISchemaCompareParticipant interface.
            </remarks>
            <param name="participant">Participant. Must not be null.</param>
            <param name="config">Config to refine. Must not be null.</param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext._disposed">
            <summary>
            True if this object has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.DataModel">
            <summary>
            The schema comparison data model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.ErrorCategory">
            <summary>
            Error category that errors should be populated under
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.UserDatabaseScript">
            <summary>
            Current operation's last generated user database script (if any)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.MasterDatabaseScript">
            <summary>
            Current operation's last generated master database script (if any)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.BatchDeploymentErrors">
            <summary>
            Current operation's last generated list of deployment errors
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.ResultFlags">
            <summary>
            Current operation's result flags
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.CancellationSource">
            <summary>
            Current operation's cancellation source
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.Cancel">
            <summary>
            Request cancellation of any operation associated with this context
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext.ToString">
            <summary>
            Summary output of the context.  Used for debugging only.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController">
            <summary>
            TODO (tgedge) Merge this with SchemaCompareDataModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.RefineConfiguration">
            <summary>
            Refine the configuration by asking the source and target to change if needed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.RefineSQLCMDVariables">
            <summary>
            Ensure that no null/empty/whitespace values are used in the variable bindings.
            Variable bindings are always substituted (if available), but the values used are always
            the dummy values (e.g. $(fruit)) unless a database is target or source.
            This is because we only want to consider values in the case where
            an update target would actually "remove" the variable (i.e. databases).  In all other
            cases, the variable itself should stay as is.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.VerifyAllSourceSQLCMDVariablesHaveValues">
            <summary>
            Verify the SQLCMD variables.  Variables cannot have null, empty or whitespace values.
            The variable bindings from the source may not have valid values.
            All we are really doing here is checking that the defined variables all have values.
            We re-use the validation method that deployment uses, which only checks the source values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.ValidateSourceAndTarget">
            <summary>
            Validate the source and target. Also determines whether a restricted comparison will be performed due to permission differences.
            </summary>
            <returns>true if both the source and target are valid, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.ValidateRestrictedComparison">
            <summary>
            Determines whether a restricted comparison will be performed due to permission differences.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.VerifyParticipantsStillValid">
            <summary>
            Verify that the participants are still valid
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareController.VerifyParticipantsNotDrifted">
            <summary>
            Verify that the participants have not drifted
            </summary>
            <remarks>
            The current implementation of drift detection for databases will not detect changes in non-time stamped objects (e.g. database options).
            So if the only changes in the DB are non-time stamped objects, then this method will return a false negative.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.SourceFile">
            <summary>
            The associated file
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.DatabaseSchemaProvider">
            <summary>
            The database schema provider.
            </summary>
            <remarks>Only valid after a successful validate.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value)
            </summary>
            <remarks>Only valid after a successful populate.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.Refactorings">
            <summary>
            Refactorings
            </summary>
            <remarks>Only valid after a successful populate.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.Model">
            <summary>
            Schema model
            </summary>
            <remarks>Only valid after a successful populate.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.UnsupportedObjectTypes">
            <summary>
            Object types not supported by the file type
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.Validate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Verifies that the participant is valid.
            </summary>
            <param name="errorManager">Error manager to log errors and warnings to</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>true if the participant is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacLoader.Populate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Populates the SchemaModel from the Database file.
            </summary>
            <param name="errorManager"> An object for returning any errors encountered during the model population</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>true if the population was successful, otherwise false</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacV2Loader.UnsupportedObjectTypes">
            <summary>
            Object types not supported by the file type
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareDacpacV3Loader.LoadReferencesInSQLSchemaFile(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader,System.String,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            TODO: To be re-factored after GDR so that we have a common place to call this from Deployment.cs.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId">
            <summary>
            Identity information for an element.
            
            Serialized form (no parent):
            <![CDATA[
            <SelectedItem Type="Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable, Microsoft.Data.Tools.Schema.Sql, Version=10.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                <Name>dbo</Name>
                <Name>table1</Name>
            </SelectedItem>
            ]]>
            
            Serialized form (with parent):
            <![CDATA[
            <SelectedItem Type="Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlPrimaryKeyConstraint, Microsoft.Data.Tools.Schema.Sql, Version=10.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
               <Name>
               </Name>
               <ParentItem Type="Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTable, Microsoft.Data.Tools.Schema.Sql, Version=10.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                  <Name>dbo</Name>
                  <Name>table1</Name>
               </ParentItem>
            </SelectedItem>
            ]]>
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.TypeName">
            <summary>
            XML node name of node holding type information (Type and ParentType fields)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.NameString">
            <summary>
            XML node name of node holding name part information (Name and ParentName fields)
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.ParentItemElementName">
            <summary>
            XML node name of node holding the parent
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.SelectedItemName">
            <summary>
            XML node name of element holding a single element identity (potentially under an element set).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.Type">
            <summary>
            Type of the model element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.NameParts">
            <summary>
            Name parts of the model element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.ParentType">
            <summary>
            Type of the parent model element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.ParentNameParts">
            <summary>
            Name parts of Parent model element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.Create``1(System.String[])">
            <summary>
            Create an element identifier with type and name.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="nameParts">Name of element.</param>
            <returns>Created element identifier</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.Create``2(System.String[])">
            <summary>
            Create an unnamed element identifier with type, parent type and parent name
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <typeparam name="P">Parent type of element.</typeparam>
            <param name="parentNameParts">Parent name of element.</param>
            <returns>Created element identifier</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.GetActualNameParts(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Fetch the name of the element (as name parts) using any inline annotation if it's unnamed.
            </summary>
            <param name="element">The element, can be null.</param>
            <returns>The element name (as name parts)</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.SerializeToXML(System.Xml.XmlNode)">
            <summary>
            Serialize this element identifier under the given XML node.
            </summary>
            <param name="parent">XML node that will be the parent. Must not be null.</param>
            <returns>The created node</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId.DeserializeFromXML(System.Xml.XmlNode)">
            <summary>
            Create a new element identifier from the serialized information under the given XML node.
            </summary>
            <param name="xmlNode">The XML node. Must not be null.</param>
            <returns>A new element identifier, or null if the element identifier could not be de-serialized.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory">
            <summary>
            Error categories for Schema Compare errors.
            Errors in the doc data or editor pane error managers will only be in these categories.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory.DataPopulation">
            <summary>
            Generated during data population
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory.UpdateTarget">
            <summary>
            Generated when the target database is being updated
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory.DependencyValidation">
            <summary>
            Generated during Dependency validation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory.ScriptGeneration">
            <summary>
            Generated during script generation
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareErrorCategory.ModelValidation">
            <summary>
            Generated during generate script and update target
            </summary>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.PopulationCompleted">
            <summary>
            Population completion event
            </summary>        
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Name">
            <summary>
            User-Visible Simple Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.FullName">
            <summary>
            User-Visible Full Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Description">
            <summary>
            User-Visible Description
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.DatabaseName">
            <summary>
            Database name associated with this provider
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.SchemaModel">
            <summary>
            The currently loaded schema model.  Can be null if no model is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.VariableBindings">
            <summary>
            SQLCMD Variable bindings (name->value).  Will not return null.
            </summary>
            <remarks>Value is usable only after a successful population.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Refactorings">
            <summary>
            Re-factor records.  Will not return null.
            </summary>
            <remarks>Value is usable only after a successful population.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Platform">
            <summary>
            SQL platform
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CanContainServerScopedElements">
            <summary>
            True if this participant can populate server scope elements.
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.IsMaster">
            <summary>
            True if this participant represents the "master" database
            </summary>
            <remarks>Value is usable only after a successful validation.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.PreservesVariableBindings">
            <summary>
            True if this participant preserves variable bindings
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CanApplyRefactorings">
            <summary>
            True if this participant can apply refactoring operations
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CanGenerateScript">
            <summary>
            True if this participant can generate an update script
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CanUpdateTarget">
            <summary>
            True if this participant can be updated as a target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CanAddUndeployableObjects">
            <summary>
            True if adding undeployable objects are supported for updates.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.PopulateServerScopedObjects">
            <summary>
            Determines if Server scoped elements should should be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.PopulateRefactorings">
            <summary>
            Determines if re-factorings should be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Role">
            <summary>
            Role that this provider is performing
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Validated">
            <summary>
            Has the participant been successfully validated (since the last invalidating event).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.PopulationConfigChanged">
            <summary>
            Has the population configuration be changed since the last population?
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Validate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Verifies that the participant is valid.
            </summary>
            <param name="errorManager">Error manager to log errors and warnings to</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>true if the participant is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.OnValidate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Verifies that the participant is valid.
            </summary>
            <param name="errorManager">Error manager to log errors and warnings to</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>true if the participant is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Populate(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Populate the model.
            </summary>
            <param name="errorManager">An object for returning any errors encountered during the model population</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>true if the population was successful, otherwise false</returns>
            <remarks>Potentially long-running operation.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.IsStale">
            <summary>
            Is the currently populated model stale (out of sync with the source?)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.RefineConfiguration(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Refine the given configuration.
            </summary>
            <param name="config">Configuration to be modified.  Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.Reset">
            <summary>
            Reset the participant back to it's initial non-validated, non-populated state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.GetTargetComparer(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext)">
            <summary>
            Fetch a participant comparer that can compare this target to another participant
            </summary>
            <param name="context">The context.</param>
            <returns>The participant comparer</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.GetTargetUpdater(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareContext)">
            <summary>
            Fetch a participant updater that can update this target from another participant
            </summary>
            <param name="context">The context.</param>
            <returns>The participant updater</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.RemoveServerScopedObjects(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel)">
            <summary>
            Remove objects in server scope from model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipant.CreateSourceDeploymentEndpoint(System.Boolean)">
            <summary>
            Constructs the appropriate deployment endpoint for deployment plan generation
            </summary>
            <returns>SqlDeploymentEndpoint</returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac._lastBuildInfo">
            <summary>
            File information for the DACPAC.  Will be null if the DACPAC hasn't been loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac._fileInfo">
            <summary>
            The DACPAC file path.  Will not be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac.LoadVariableBindings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Load the variables using the names loaded from dacpac. If the values are passed, we should still use those 
            </summary>
            <param name="fileVariables">The variable name with empty values loaded from dacpac</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac.FileExists(Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Test that the DACPAC file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac.DebuggerDisplay">
            <summary>
            Debugger display summary.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDacpac.ParticipantTypeName">
            <summary>
            Participant Type Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.ParticipantTypeName">
            <summary>
            Participant Type Name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.ServerName">
            <summary>
            Server name.  Only valid after a successful validation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.DatabaseSchemaProvider">
            <summary>
            Database schema provider.  Only valid after a successful validation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.EngineEdition">
            <summary>
            Engine edition.  Only valid after a successful validation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.OriginalConnectionFactory">
            <summary>
            Connection factory as given by the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.ConnectionFactory">
            <summary>
            Modified connection factory
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.CatalogStamp">
            <summary>
            Last updated stamp.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.IncrementalPopulation(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Incremental population
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.FullPopulation(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Full model population
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.HasServerPermissions(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken,System.Boolean@)">
            <summary>
            Returns true if the user has access to server scoped elements. 
            </summary>
            <remarks>
            A special case is made for the master database. This function always returns true for master databases
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.HasDatabasePermissions(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Returns true if the user can get database objects
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.ValidateHasServerPermissions(Microsoft.Data.Tools.Schema.ErrorManager,System.Threading.CancellationToken)">
            <summary>
            Returns true if the user can get server objects
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.CreateReverseEngineer(System.Threading.CancellationToken)">
            <summary>
            Create the RE instance
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.UpdateNames">
            <summary>
            Update display names from the database
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.UpdateDatabaseName(System.String)">
            <summary>
            Set the database name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForDatabase.DebuggerDisplay">
            <summary>
            Debugger display summary.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareParticipantForScripts.ParticipantTypeName">
            <summary>
            Participant Type Name
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareUtils.SafeDisposeIfNecessary``1(``0@)">
            <summary>
            Invoke Dispose on the reference target if required.
            </summary>
            <remarks>
            This method swallows all exceptions. It is for use in:
                (1) Dispose() method implementations, or
                (2) catch/finally blocks.
            Throwing in (1) can cause the CLR to abort, and (2) forces
            the caller to add a try-catch block inside a catch-finally
            block, which is not considered good style.
            </remarks>
            <typeparam name="T">Type of target, any class</typeparam>
            <param name="target">Target (reference parameter)</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareUtils.GetDSPType(Microsoft.Data.Tools.Schema.Common.SqlClient.ReliableConnectionHelper.ServerAndDatabaseInfo)">
            <summary>
            Determine the DSP type from the server information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.SchemaCompareDataModel">
            <summary>
            The managing data model. Will not be null.
            </summary>
            <remarks>Locking not required as this is immutable after construction.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.AssertLockHeld">
            <summary>
            Assert that the data model lock is held.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.GetLockObject">
            <summary>
            Fetch the data model lock.
            </summary>
            <returns>Locking object for the data model.  Will not return null.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.EntryType">
            <summary>
            Entry type. Immutable after construction.
            </summary>
            <remarks>Locking not required as this is immutable after construction.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.UpdateType">
            <summary>
            Update type.
            </summary>
            <remarks>Modified during expansion by SchemaCompareGroupingGenerator and SchemaDiffGenerator</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.Parent">
            <summary>
            Parent diff entry.
            </summary>
            <remarks>Only modified by AddChild(...)</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.IsValid">
            <summary>
            Test if this entry is valid.
            </summary>
            <remarks>An entry is valid if the enclosing root entry is valid. Non-rooted entries are considered invalid.</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.EntryName">
            <summary>
            Entry name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.SourceValue">
            <summary>
            Source value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.TargetValue">
            <summary>
            Target value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.SiblingOrderChanged">
            <summary>
            Whether a sibling has OrderChanged=true.
            </summary>
            <remarks>Only set in SchemaDiffGenerator.PostProcessDiffEntries(...)</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.ContainsOrderChanged">
            <summary>
            Whether a child has OrderChanged=true.
            </summary>
            <remarks>Only set in SchemaDiffGenerator.PostProcessDiffEntries(...)</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.OrderChanged">
            <summary>
            Whether this entry order has been changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.Ordinal">
            <summary>
            Ordinal order of this entry. Will be int.MaxValue if no order specified.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.Refactored">
            <summary>
            Whether this entry has been refactored.
            </summary>
            <remarks>Only set in SchemaDiffGenerator.GenerateTopLevelElement(...) and SchemaDiffGenerator.GenerateElementEntry(...)</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.ChildRefactored">
            <summary>
            Whether a child has Refactored=true.
            </summary>
            <remarks>Only set in SchemaDiffGenerator.GenerateTopLevelElement(...) and SchemaDiffGenerator.GenerateElementEntry(...)</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.IsCompositeReference">
            <summary>
            Whether this entry refers to an object that comes from a composite model
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.IsHierarchicalChildrenChanged">
            <summary>
            Whether this entry has a change in hierarchical children
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.InclusionState">
            <summary>
            Inclusion state of this entry
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.AllDescendants">
            <summary>
            All Child nodes of this node, and those children's descendants.  Returned in depth-first order.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry.HasDifferences" -->
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForElement.ContainsModifiedDeployableChild">
            <summary>
            Returns true if this node contains at least one child that is modified and deployable
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForProperty">
            <summary>
            Represents an entry for a property item in the comparision results.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForProperty.GetScripts(Microsoft.Data.Tools.Schema.Sql.Compare.Schema.SchemaCompareScriptContext)">
            <summary>
            Gets the source and/or target scripts for a property entry.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator._relationshipsToPromote">
            <summary>
            Collection of relationships which are to be promoted to their parent.
            Normally, every entity relationship is shown in the result, however some
            relationships don't warrant their own sub-folder in the display result.
            These relationships are promoted to their parent.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator.CalculateRelationshipsToPromote">
            <summary>
            Calculate the relationships to promote to the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator.IsCompositeReference(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Determines if a model element is a reference from a composite model.
            </summary>
            <param name="element">Model element</param>
            <param name="isSource">Whether the model element is from the source or target</param>
            <returns>True if the model element originates from a composite model, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator.Promote(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Promote children if necessary.
            </summary>
            <remarks>
            This method either returns the entry, or a enumeration of children.  In the latter case, the node is to be replaced by the new list of children.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator.FindHierarchicalRelationship(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Find the relationship class of the given hierarchical child element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffGenerator.AdjustUpdateType(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaUpdateType@,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaUpdateType,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            calculate schema update type based on the parent, child, and current update types
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.ExcludedSourceElementsName">
            <summary>
            XML node name of element holding set of excluded source elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.ExcludedTargetElementsName">
            <summary>
            XML node name of element holding set of excluded target elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SelectedItemName">
            <summary>
            XML node name of element holding a single excluded element (under the excluded element set).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.DataModel">
            <summary>
            Underlying data model
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper._excludedSourceElements">
            <summary>
            Set of excluded source elements.  Will not be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper._excludedTargetElements">
            <summary>
            Set of excluded target elements.  Will not be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper._cachedState">
            <summary>
            Cached state of difference entries.  This is to avoid recalculating the state
            of an entry multiple times while traversing the dependency tree.  It also
            provides cycle avoidance.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper._blockingDependents">
            <summary>
            Cached state of blocking dependents.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.ClearCache">
            <summary>
            Removes all cached SchemaDiffEntry references, forcing recalculation from stored SchemaCompareElementIds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetBlockingDependents(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Get the list of entries that are blocking exclusion of the current entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetInclusionState(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Get the inclusion state for an entry
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetInclusionStateFromChildrenAndDependencies(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Get the inclusion state for an entry based on child and dependency information only.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.CalculateAndCacheInclusionState(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Calculate the inclusion state for an entry and cache the result.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.CalculateInclusionState(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Calculate the inclusion state of an entry
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetInclusionStateFromChildren(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Determine inclusion state from child inclusion state
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.EntryIsIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Test whether a schema diff entry is included
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetDependents(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForElement)">
            <summary>
            Fetch all entries that depend on the given entry being included
            Why we need this : if you are excluding an entry you need to know what depeneds on it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.GetDependencies(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForElement)">
            <summary>
            Fetch all entries that are dependencies for the entry being included
            Why we need this : if you are including an entry you need to know what else needs to be included for it to work
            Usagege
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.TryToggleIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState@)">
            <summary>
            Toggle the inclusion state for the given entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.TrySetIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Boolean,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState@)">
            <summary>
            Set the inclusion state for the given entry and all it's children.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SetIncludedState(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Boolean)">
            <summary>
            Set the inclusion state for the given entry and all it's children
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SetIncludedForElementEntry(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForElement,System.Boolean)">
            <summary>
            Set the inclusion state for the given entry representing an element difference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SetIncludedForElement(System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Set the inclusion state for an element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.IsExcluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntryForElement)">
            <summary>
            Test whether the given entry representing an element difference is excluded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.IsExcluded(System.Collections.Generic.ISet{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Test whether the given element is excluded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.IsProperty(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Test if the entry represents an property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.IsElement(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Test if the given entry represents an element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SerializeToXML(System.Xml.XmlNode)">
            <summary>
            Serialize the excluded element data under the given XML node.
            </summary>
            <param name="parent">XML node that will be the parent. Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.SerializeToXML(System.Xml.XmlNode,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId})">
            <summary>
            Serialize an excluded element set under the given XML node.
            </summary>
            <param name="parent">XML node that will be the parent. Must not be null.</param>
            <param name="elements">The element set. Must not be null, can be empty.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.DeserializeFromXML(System.Xml.XmlNode)">
            <summary>
            De-serialize the excluded element data from the serialized information under the given XML node.
            </summary>
            <param name="parent">XML node that will be the parent. Must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.DeserializeFromXML(System.Xml.XmlNode,System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaCompareElementId})">
            <summary>
            De-serialize an excluded element set from the serialized information under the given XML node.
            </summary>
            <param name="parent">XML node that will be the parent.</param>
            <param name="elements">The element set to populate. Must not be null, can be empty.</param>
            <remarks>Not thread-safe</remarks>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.ExcludedSourceElements">
            <summary>
            Thread-safe get/set of the excluded source elements
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionHelper.ExcludedTargetElements">
            <summary>
            Thread-safe get/set of the excluded target elements
            </summary>
            <remarks>Testing use only.</remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.None">
            <summary>
            Object and all it's children cannot be included or excluded 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.Included">
            <summary>
            Object and all it's children are included
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.PartiallyIncluded">
            <summary>
            Object is included and one or more of it's children are excluded
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.Excluded">
            <summary>
            Object and all of it's children are excluded
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.IncludedByDependency">
            <summary>
            Object is included by dependency only and all children are excluded.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffInclusionState.IncludedByDependencyNoChildren">
            <summary>
            Object is included by dependency only.  (Object has no children).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaUpdateType">
            <summary>
            The order of the following items should match that of the GroupByAction order.
            We want the natural ordering of this type to be:
            1) Delete
            2) Change
            3) Add
            4) NoAction
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SqlSchemaModelConstants">
            <summary>
            this class should be code-generated and should be moved to DataUtilities or SqlData
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.ErrorManagerExtensions.MergeErrors(Microsoft.Data.Tools.Schema.ErrorManager,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean)">
            <summary>
            Merge all the errors in all categories into the error manager, removing duplicates and optionally downgrading errors to warnings.
            </summary>
            <param name="errors">Error manager to merge into. Must not be null.</param>
            <param name="errorsToMerge">Error manager to merge from. Must not be null.</param>
            <param name="downgradeErrorsToWarnings">Whether to downgrade errors to warnings.  Default false.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareDacPackageUtils">
            <summary>
            Utilities to simplify Schema Compare interaction with Dacpackages
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareDacPackageUtils.InternalContainsData(System.String,System.Boolean)">
            <summary>
            returns true if the package contains backup data (bacpack) or system data
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine">
            <summary>
            This class opens a single new schema comparison and allows you to manipulate
            the source, target, filter, group by, and options, and call the compare, generate script,
            and update target commands.
            
            You can also interrogate whether a given command is enabled, save the schema comparison document
            and look at the internal state of Schema Compare through the Model and ViewModel properties.
            However, you should treat these objects and all the objects contained within them as read-only.
            
            Typical usage:
            <code>
            using (SchemaCompareTestEngine engine = new SchemaCompareTestEngine(TestContext))
            {
                // Open a blank schema comparison
                engine.Initialize(); 
                // Set source and target (required)
                engine.SetSource(source);
                engine.SetTarget(target);
                // Set options (optional - will use default)
                SqlDeploymentOptions options = engine.Options;
                options.BlockOnPossibleDataLoss = false;
                ...
                engine.Options = options;
                // Perform comparison
                engine.Compare();
                // Look at results
                Assert.IsFalse(engine.ErrorManager.HasErrors());
            }
            </code>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Model">
            <summary>
            Current model.  Read-only.
            NB: Do not modify any value within this object!
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.ErrorManager">
            <summary>
            Current error manager instance.  Read only.
            (this should actually be on the model/view model)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.StateChanges">
            <summary>
            State changes that were logged during the last action, in the order shown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Log">
            <summary>
            Output information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Filter">
            <summary>
            Get/set the filter
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.GetOptionsCopy">
            <summary>
            Gets a copy of the current SqlDeploymentOptions
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetOptions(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Sets the options to use for Schema Compare
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.UpdateOptions(System.Action{Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions})">
            <summary>
            Copies the current options, allows the caller to update them, then
            sets these as the options for the Schema compare engine
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.GroupBy">
            <summary>
            Get/set the group by strategy
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.FileName">
            <summary>
            Get the file name being used by the document
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.DefaultTimeout">
            <summary>
            Maximum timeout in milliseconds for actions (compare, script generation, etc.)
            Set to -1 to wait indefinitely.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.LogCommandState">
            <summary>
            Log command state information to the debug log.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.LogOptions">
            <summary>
            Log option setting information to the debug log.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.LogStateChanges">
            <summary>
            Log state change information to the debug log.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Initialize">
            <summary>
            Initializes a schema comparison.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Save">
            <summary>
            Save the schema compare document.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetSource(System.String)">
            <summary>
            Set the source.
            </summary>
            <param name="connectionString">The connection string for the source database.  If null, the source is cleared.</param>
            <remarks>Backwards compatibility overload for old test engine.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetSource(System.IO.FileInfo)">
            <summary>
            Set the source.
            </summary>
            <param name="dacpacFile">The dacpac file path for the source dacpac.  If null, the source is cleared.</param>
            <remarks>Backwards compatibility overload for old test engine.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetSource(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant)">
            <summary>
            Set the source.
            </summary>
            <param name="participant">The source participant.  If null, the source is cleared.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetTarget(System.String)">
            <summary>
            Set the target.
            </summary>
            <param name="connectionString">The connection string for the target database.  If null, the target is cleared.</param>
            <remarks>Backwards compatibility overload for old test engine.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetTarget(System.IO.FileInfo)">
            <summary>
            Set the target.
            </summary>
            <param name="dacpacFile">The dacpac file path for the target dacpac.  If null, the target is cleared.</param>
            <remarks>Backwards compatibility overload for old test engine.</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.SetTarget(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.ISchemaCompareParticipant)">
            <summary>
            Set the target.
            </summary>
            <param name="participant">The target participant.  If null, the target is cleared.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.TrySetIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.Boolean)">
            <summary>
            Try to set the inclusion state for an entry.
            </summary>
            <param name="entry">The entry to include or exclude.  If null, is a NOOP.</param>
            <param name="included">If true, the entry and all it's children are included, otherwise the entry and all it's children are excluded.</param>
            <returns>Event change result, or null if no result was generated.</returns>
            <remarks>A SchemaDiffEntry is used to identify the item being acted upon, since it can be used at both folder or element level</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.TryToggleIncluded(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Try to toggle the inclusion state for an entry.
            </summary>
            <param name="entry">The entry to include or exclude.  If null, is a NOOP.</param>
            <returns>Event change result, or null if no result was generated.</returns>
            <remarks>A SchemaDiffEntry is used to identify the item being acted upon, since it can be used at both folder or element level</remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Cancel">
            <summary>
            Perform a cancel operation
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Compare">
            <summary>
            Perform a schema comparison and wait for the results to become available.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.CompareAsync">
            <summary>
            Internal asynchronous implementation of Compare
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.GenerateScript">
            <summary>
            Generate the script and wait for the script to be shown.
            </summary>
            <returns>Script documents created</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.GenerateScriptAsync">
            <summary>
            Internal asynchronous implementation of Generate Script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.UpdateTarget">
            <summary>
            Update the target and wait for the update to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.UpdateTargetAsync">
            <summary>
            Internal asynchronous implementation of Update Target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.Switch">
            <summary>
            Switch source and target.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.LogStateChange(System.Object,Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.DataModel.StateEventArgs)">
            <summary>
            Record a progress message
            </summary>
            <param name="sender">The sender (ignored)</param>
            <param name="args">The event arguments, containing the message</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.ExecuteOperation``1(System.String,System.Action,System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Boolean)">
            <summary>
            Wrapper for executing a synchronous or asynchronous operation that logs interesting information
            </summary>
            <typeparam name="TEventArgs">Operation completion event handler type</typeparam>
            <param name="commandName">Name of the command (for logging).</param>
            <param name="action">Function to invoke the operation.</param>
            <param name="attach">Function to attach the completion handler (need this as can't pass event as ref)</param>
            <param name="detach">Function to detach the completion handler (need this as can't pass event as ref)</param>
            <param name="async">true if the operation is asynchronous</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaCompareEngine.LogState">
            <summary>
            Log interesting state to the debug log
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.Filter">
            <summary>
            Current filter setting
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.TopLevelOnly">
            <summary>
            True if only top-level elements are to be shown
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.OutputInclusionState">
            <summary>
            True if the inclusion state is to be shown
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.OutputOrdering">
            <summary>
            True if the ordering information is to be shown
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.OutputRefactoring">
            <summary>
            True if the re-factoring information is to be shown
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.IgnorePropertyFileNameValue">
            <summary>
            True if the File Name property value is ignored and 
            replaced with defalut value "FILE_NAME".
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.Serialize(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Convenience method for serialization to a string
            </summary>
            <param name="entry">Entry to serialize.  If null, the empty string is returned.</param>
            <returns>The serialized form of the entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.Utilities.SchemaDiffEntrySerializerBase.Serialize(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry,System.String)">
            <summary>
            Convenience method for serialization to a file
            </summary>
            <param name="entry">Entry to serialize.  If null, a blank file is written.</param>
            <param name="path">Path name of the file.  Must not be null.</param>
            <returns>The serialized form of the entry.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel">
            <summary>
            Methods in this file handle DataSchemaModel serialization and deserialization
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation,Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.String,Microsoft.Data.Tools.Schema.ErrorManager,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="collation">The collation for the schema manager.</param>
            <param name="scriptCache">The cache to use for scripts.</param>
            <param name="errorManager">The error manager to which errors will be reported.</param>
            <param name="modelFileName">The name of the file with which to back the store.</param>
            <param name="storeSchema">The schema of this model.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.BeginBatchUpdate">
            <summary>
            Requests the DataSchemaModel to start batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.EndBatchUpdate">
            <summary>
            Requests the DataSchemaModel to stop batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.RegisterForController">
            <summary>
            This method is used to get the controller for a schema manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.RegisterReadOnlyController">
            <summary>
            This method creates a read-only controller that can be used to prevent all attempts to acquire write access to a DataSchemaModel.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ValidateWriteAccess">
            <summary>
            This method is called by model store methods that alter contents of the store other than annotations.
            The derived classes can control the access by overriding this method and throwing if the write is undesirable.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.OnModelElementChanged(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Called by the store operations to indicate what happened.
            </summary>
            <param name="element">The changed element.</param>
            <param name="type">The type of change.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ResetCache(Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache)">
            <summary>
            Temporary hook for model translation to set the script cache
            when copying a model
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetElementSources(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the element sources for a particular element.
            </summary>
            <param name="element">The element to look for.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetRelationshipEntrySources(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Gets the relationship entry sources for a particular element.
            </summary>
            <param name="relationshipEntry">The relationship entry to look for.</param>
            <returns>The relationship entry sources for a particular element.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.DatabaseSchemaProvider">
            <summary>
            The database schema provider for this schema manager.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ScriptCache">
            <summary>
            The script cache for the files.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ErrorManager">
            <summary>
            ErrorManager (to write to)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Resolve">
            <summary>
            Resolves all of the elements in the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Resolve(System.Int32)">
            <summary>
            Resolves the given number of elements, and returns the number of elements left in the model that could be resolved.
            </summary>
            <param name="elementCount">The number of elements to resolve.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Resolve(System.Threading.CancellationToken)">
            <summary>
             Resolves elements from the given source.
            </summary>
            <param name="token">Cancellation token to cancel resolve.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Resolve(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Resolves the given element.
            </summary>
            <param name="element">The element to resolve.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ResolveFrom(System.String)">
            <summary>
            Resolves elements from the given source.
            </summary>
            <param name="element">The source to resolve.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ElementProcessingOperationsCount">
            <summary>
            @TODO comment
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Controller">
            <summary>
            Get the controller which polices access to this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.AnnotationsIncludedInSerialization">
            <summary>
            Gets a list of annotation types which should be included when a model is serialized.
            </summary>
            <returns>A list of annotation types which should be included when a model is serialized.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.AddCustomData(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Attaches a piece of custom data to this DataSchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.RemoveCustomData(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Removes custom data from this DataSchemaModel, if it was attached to it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetCustomData">
            <summary>
            Returns all custom data attached to this schema manager
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetCustomData(System.String)">
            <summary>
            Returns all custom data from specified category attached to this schema manager
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetCustomData(System.String,System.String)">
            <summary>
            Returns all custom data from specified category attached to this schema manager
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.OnCustomDataAdded(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Called when a piece of custom data is added to the model.
            </summary>
            <param name="customData">The custom data which was added.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.InitializeReferenceConstructor(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor)">
            <summary>
            Called to set the properties of the constructor object according to the information in the header data.
            </summary>
            <param name="headerData">The template for the constructor data.</param>
            <param name="constructor">The constructor to be modified to produce a model like the one specified in the header data.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.OnCustomDataRemoved(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Called when custom data has been removed from the model.
            </summary>
            <param name="customData">The custom data which was removed.</param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel._errorManager">
            <summary>
            The error manager we were sited with
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter)">
            <summary>
            Serializes DataSchemaModel.
            </summary>
            <param name="output">Where to serialize.</param>
            <returns>the version number used for the serialized model</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes DataSchemaModel.
            </summary>
            <param name="output">Where to serialize.</param>
            <param name="annotationTypesToInclude">List of annotation types to include.</param>
            <returns>the version number used for the serialized model</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Serializes DataSchemaModel.
            </summary>
            <param name="output">Where to serialize.</param>
            <param name="annotationTypesToInclude">List of annotation types to include.</param>
            <param name="includePositions">Whether or not to include source position information in the serialized model.</param>
            <returns>the version number used for the serialized model</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Type},System.Boolean,System.UInt32)">
            <summary>
            Serializes DataSchemaModel.
            </summary>
            <param name="output">Where to serialize.</param>
            <param name="annotationTypesToInclude">List of annotation types to include.</param>
            <param name="includePositions">Whether or not to include source position information in the serialized model.</param>
            <param name="minimalSchemVersion">minimal version for serialized model</param>
            <returns>the version number used for the serialized model</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeaderFromPackage(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage,System.Boolean)">
            <summary>
            Reads header and custom data from the serialized DataSchemaModel
            </summary>
            <param name="package">Package to read from</param>
            <param name="readCustomData">Specifies if CustomSchemaData should be read (default is true)</param>
            <returns>Data schema provider name, schema version, collation and custom data found in file</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeaderFromXml(System.IO.TextReader,System.Boolean)">
            <summary>
            Reads header and (if second parameter is set to true) custom data from the serialized DataSchemaModel
            </summary>
            <param name="input">Serialized DataSchemaModel to read from</param>
            <param name="readCustomData">Specifies if CustomSchemaData should be read (default is true)</param>
            <returns>Dsp name, schema version, collation and custom data found in file</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.DeserializePackage(Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage,Microsoft.Data.Tools.Schema.ErrorManager,System.Action{Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader,Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor})">
            <summary>
            Reads a DataSchemaModel from a given file
            </summary>
            <param name="modelFileName">File to read from</param>
            <param name="errors">Error manager to use for created model, and where to report errors</param>
            <param name="constructorParametersSetter">Optional delegate to set additional (provider-specific) parameters on DataSchemaModelConstructor</param>
            <returns>DataSchemaModel read from provided input</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.SupportedSerializationVersion(System.String)">
            <summary>
            Checks if a version string is a supported by model deserializer
            </summary>
            <param name="version">true of the version is supported; false, otherwise</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.DeserializeXml(System.IO.TextReader,Microsoft.Data.Tools.Schema.ErrorManager,System.String,System.Action{Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader,Microsoft.Data.Tools.Schema.DatabaseSchemaProvider,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor})">
            <summary>
            Reads a DataSchemaModel from a given input
            </summary>
            <param name="input">From where to read the model</param>
            <param name="errors">Error manager to use for created model, and where to report errors</param>
            <param name="source">Source name to be included into error messages. Can be null.</param>
            <param name="constructorParametersSetter">Optional delegate to set additional (provider-specific) 
            parameters on DataSchemaModelConstructor, when creating a model</param>
            <returns>DataSchemaModel read from provided input</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.FixupAfterXmlDeserialization">
            <summary>
            Can be used to check/fix model after it was read from file
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.LoadExternals(System.IO.TextReader,System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Imports model from serialized DataSchemaModel as externals
            </summary>
            <param name="input">Serialized DataSchemaModel to read from</param>
            <param name="fileName">Source associated with input parameter</param>
            <param name="logicalSourceName">Logical name of the model, used in reference resolution</param>
            <param name="externalPartsSubstitution">External parts to be used for each loaded element</param>
            <param name="suppressErrorsForMissingDependencies">Controls error suppression for missing dependencies</param>
            <returns>Loaded model composing roots</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.IsElementFromCompositeReference(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Determines if a model element comes from a composite reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.IsElementFromExternalReference(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Determines if a model element comes from an external reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.TryGetExternalParts(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets the external parts if they're available.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.IsElementFromExternalReference(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.String)">
            <summary>
            Determines if a model element comes from an external reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetExternalSourceFileName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns the file name for an external reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetExternalSourceLogicalName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns the external source name for an external reference
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel.GetExternalSourceAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Gets ExternalSourceAnnotation associated with an element
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptSourcedModelElement">
            <summary>
            Base Element class for all model elements that will have script source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptSourcedModelElement.PrimarySource">
            <summary>
            Gets the location of the primary source which defines this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptSourcedModelElement.SecondarySources">
            <summary>
            Gets the locations of additional sources which define this element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptSourcedModelElement.GetRelationshipEntrySources(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Returns the list of relationship entry sources for a relationship entry.
            </summary>
            <param name="relationshipEntry">The relationship entry.</param>
            <returns>The list of relationship entry sources for a relationship entry.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor">
            <summary>
            This class has the options that change schema managers behavior.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor.Collation">
            <summary>
            The collation the model will use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor.ErrorManager">
            <summary>
            The error manager associated with the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelConstructor.ModelFileName">
            <summary>
            The name of the file which will back the model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelController">
            <summary>
            This class is used to enable write access to the schema manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelController.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Action{Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs})">
            <summary>
            The internal constructor meant to disable clients directly instantiating this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelController.AcquireWriteAccess">
            <summary>
            This method needs to be called before the operations that require write access.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelController.ReleaseWriteAccess">
            <summary>
            This method needs to be called when write access is no longer required.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelReadOnlyController">
            <summary>
            A controller used for disabling all attempts to acquire write access to a DataSchemaModel.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelControllerException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs">
            <summary>
            EventArgs describing a change to a DataSchemaModel.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Constructor.
            </summary>
            <param name="model">The model which has changed.</param>
            <param name="type">The type of change.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Constructor.
            </summary>
            <param name="model">The model which has changed.</param>
            <param name="type">The type of change.</param>
            <param name="element">The element which has changed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType}})">
            <summary>
            COnstructor.
            </summary>
            <param name="model">The model which has changed.</param>
            <param name="changes">A list of changes.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs.ElementProcessingOperationsCount">
            <summary>
            @TODO comment
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelEventArgs.Model">
            <summary>
            This is the model which raised the event
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelException">
            <summary>
            The exception thrown when <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/> encounters an error.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader">
            <summary>
            This class holds information about all header (non-model) data of serialized DataSchemaModel
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader.DatabaseSchemaProviderName">
            <summary>
            Name of the DSP the model belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader.SchemaVersion">
            <summary>
            Version of the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader.Collation">
            <summary>
            Collation used by the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModelHeader.CustomData">
            <summary>
            Custom data included with the model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder">
            <summary>
            Used to hydrate schema model with scripts. All DSP implementations must implement a ModelBuilder derivation.
            </summary>
            <remarks>
            Note: in this build ModelBuilder is not inherited from ModelComposer. However, in the design of "Data Dude Rosario" the model
            builder is a ModelComposer that is responsible for translating scripts into a model instance. A future build of "Data Dude Rosario"
            will reflect this change.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.AddObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used to add objects to the schema manager.  The cacheIdentifier uniquely identifies the source.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="script">The script.</param>
            <param name="metadata">The metadata that will be used in processing the script.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.Add(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Used to Adds custom data to the schema manageer, for example references
            </summary>
            <param name="customSchemaData">The custom data </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.UpdateObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used to update the objects that was previously added with the cacheIdentifier.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="script">The script.</param>
            <param name="metadata">The metadata that will be used in processing the script.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.ClearObjects(System.String)">
            <summary>
            Deletes the objects in the model that were added with the specified cacheIdentifier.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.Clear(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Removes custom data from the schema manager.
            </summary>
            <param name="customSchemaData">The custom schema data which is to be deleted </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.BeginBatchUpdate">
            <summary>
            Requests the ModelBuilder to start batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.EndBatchUpdate">
            <summary>
            Requests the ModelBuilder to stop batch update mode processing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.OptimizeForInsert">
            <summary>
            Optimize the ModelBuilder for faster inserts, but slower look-ups.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.OptimizeForQuery">
            <summary>
            Optimize the ModelBuilder for faster look-ups, but slower inserts.  This is the default setting.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.AddOrUpdateObjects(Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle)">
            <summary>
            Helper method to add/update model based on state of the scripts in the script cache
            </summary>
            <param name="script">Encapsulates the script to be added or used to update.  Will be disposed
            of once processed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.AddOrUpdate(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Helper method to add/update the model with the specified customSchemaData.
            </summary>
            <param name="customSchemaData"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.DeleteObjects(System.String)">
            <summary>
            Deletes the object(s) that were added via the script associated with the 
            cache identifier
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilder.Delete(System.String)">
            <summary>
            Deletes the objects in the schema manager that were added with the customSchemaData.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilderOption">
            <summary>
            Defines the state the model should be in when the ModelBuilder has completed its work.
            </summary>
            <remarks>
            Settings other than 'Full' can be useful to avoid doing unnecessary work when building a model for a limited purpose.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilderOption.Full">
            <summary>
            The model should be as complete as possible. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilderOption.Deployable">
            <summary>
            It will be possible to deploy the model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelBuilderOption.Scriptable">
            <summary>
            It will be possible to write the contents of the model out as script files.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation">
            <summary>
            A collation for use by a schema model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.Lcid">
            <summary>
            The culture ID for the collation's base culture.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.CaseSensitive">
            <summary>
            True if the collation is case-sensitive.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.DefaultCollationCaseSensitive">
            <summary>
            The default case-sensitive collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.DefaultCollationCaseInsensitive">
            <summary>
            The default case-insensitive collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.SupportedCollationStringToLcid">
            <summary>
            Gets a mapping from collation display names to LCIDs for all supported cultures.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.SupportedLcidToCollationStringsMap">
            <summary>
            Gets a mapping from LCID to a list of collation display names for all supported cultures.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="lcid">The locale ID</param>
            <param name="caseSensitive">Whether or not the collation should be case-sensitive.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.GetCollationString(System.Int32,System.Boolean)">
            <summary>
            Get the display name for the collation with the given culture and case-sensitivity.
            </summary>
            <param name="lcid">desired locale ID</param>
            <param name="caseSensitive">desired case sensitivity</param>
            <returns>Name of the collation having the requested properties.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation.GetCollationLcidCaseSensitive(System.String,System.Int32@,System.Boolean@)">
            <summary>
            Get the locale ID and case-sensitivity for the collation with a given name.
            </summary>
            <param name="modelCollationValue">collation name</param>
            <param name="lcid">locale ID</param>
            <param name="caseSensitive">case-sensitivity</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer">
            <summary>
            Comparer that can compare strings and Store.Identifier using the collation
            of the model in the constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation)">
            <summary>
            Construct the comparer with passed in store collation
            </summary>
            <param name="store">The store whose collation will be used during comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.CreateBinaryCollationComparer">
            <summary>
            Creates a comparer that performs a binary string comparison.  This is useful if
            strings are coming from a trusted source that is collation aware (for example a server)
            and you do not know the collation but need to compare strings.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Equals(System.String,System.String)">
            <summary>
            Compare if two objects are equal.
            </summary>
            <param name="x">Source object.</param>
            <param name="y">Target object.</param>
            <returns>True if equal, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Equals(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Test if two identifiers are equal using collation of this comparer.
            </summary>
            <param name="x">List of name parts in the first identifier.</param>
            <param name="y">List of name parts in the second identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Equals(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Test if two identifiers are equal using collation of this comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Compare(System.String,System.String)">
            <summary>
            Compare two objects using collation of this comparer.
            </summary>
            <param name="x">Source object.</param>
            <param name="y">Target object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Compare(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Compare two identifiers using collation of this comparer.
            </summary>
            <param name="x">List of name parts in the first identifier.</param>
            <param name="y">List of name parts in the second identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelCollationComparer.Compare(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Compare two identifiers using collation of this comparer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer">
            <summary>
            Differ engine used to compare two model.  
            This differ is DSP agnostic, can be used to compare any two same type
            DataSchemaModel, or IModelElement.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema)">
            <summary>
            Constructor
            </summary>
            <param name="schema">The schema which defines the models to be compared.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.Cancel">
            <summary>
            Cancel an ongoing Compare operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore)">
            <summary>
            Compare two model without filter.
            By default it will compare all the StoreElement types registered for the model.
            And when comparing each element, by default it will compare any hierarchical 
            children and composed children with type are explictly or implicitly included.
            </summary>
            <param name="source">Source model</param>
            <param name="target">Target model</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Compare two model with passed in SchemaModelCompareFilter
            </summary>
            <param name="source">Source model</param>
            <param name="target">Target model</param>
            <param name="configuration">Configuration defined for this comparison.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareStore(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Compare two models.
            If will according to the IncludedTypes in passed in filter, figure
            out implicitly and explicitly included types.  Then compare elements
            in each type.
            Compare two model, we will compare all internal elements, if the element is external, we will
            check if the element has internal object as child or grandchild, is so, we will include that 
            external element in order to get to its hierarchical internal children.  But properties, composed
            children and relationships from this external object will not be compared.
            </summary>
            <param name="source">Source model</param>
            <param name="target">Target model</param>
            <param name="configuration">Configuration defined for this comparison</param>
            <returns>Comparison result, contains elements changed, added, dropped and are equal.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.OnCompareModelStarted(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Called when compariosn starts.
            </summary>
            <param name="source">Source model that was compared.</param>
            <param name="target">Target model that was compared.</param>
            <param name="configuration">Configuration for this comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.OnCompareModelFinished(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult)">
            <summary>
            Called when comparison is complete.
            </summary>
            <param name="source">Source model that was compared.</param>
            <param name="target">Target model that was compared.</param>
            <param name="configuration">Configuration for this comparison.</param>
            <param name="result">Results of the comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareAllElementsForOneType(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,System.Boolean)">
            <summary>
            Compare all elements belongs to the passed in type.
            It will compare all named and unnamed elements with this
            type first.  When comparing each element in this type, it will
            recursively compare its composed and hierarchical children.
            During comparing children, if the type is not implicitly included,
            children with that type will not be compared.
            For example, if in the filter, we have type for table, since schema
            is hierarchical parent of table, it will be included implicitly for
            comparison.  When we comparing schema, since view, function are not
            in implicitly included list, we will not compare view and function
            under that schema.
            After comparison is done, if the type is not explicitly included, the
            comparison result will not be added to the StoreComparisonResult.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="type"></param>
            <param name="filter"></param>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Compare two IModelElements.
            When comparing two elements, properties, relationships, composed children 
            and hierarchical children will be compared.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <returns>Compare result that contains changes between these two elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Compare two IModelElement with compare option defined in filter.
            Since we are comparing two elements, any type list defined in filter
            will be ignored.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="filter">Filter defined for this comparison</param>
            <returns>Compare result that contains changes between these two elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareElements(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration)">
            <summary>
            Compare two IModelElements.
            When comparing two elements, properties, relationships, composed children 
            and hierarchical children will be compared.
            When compare two model elements only, we will always include all kind children under it, including 
            external children.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="filter">Filter defined for this comparison</param>
            <returns>Compare result that contains changes between these two elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareElementsWithSameType(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition@)">
            <summary>
            Compare two elements with same type, if requires to compare name,
            then we will compare the name, otherwise, ignore comparing name,
            just compare the contents, including properties, composed children,
            relationships, hierarchical children, etc.
            If two elements had been compared before during this session, 
            we will just get the result from StoreComparisonResult and will not recompare them.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="filter">Filter defined for this comparison</param>
            <param name="result">Overall comparison result</param>
            <param name="ignoreComparingName">Compare names between two elements, or just compare contents</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareElementsWithoutCompareName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compare two elements content, including properties, composed children
            hierarchical children and relationships.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="configuration">Configuration defined for this comparison</param>
            <param name="explicitlyIncluded">
                The element is explicitly included in this comparison.  An element is 
                explicitly included if its type is explicitly included, or its parent's 
                type is explicitly included.
            </param>
            <param name="result">Overall comparison result</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.OnCompareElementFinished(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Called when a pair of elements with the same name has been compared.
            </summary>
            <param name="sourceElement">The element in the source model.</param>
            <param name="targetElement">The element with the same name in the target model.</param>
            <param name="configuration">The configuration for the comparison.</param>
            <param name="result">The result of the entire comparison so far.</param>
            <param name="changes">A list of differences between the elements.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareProperties(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compare properties of two elements
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareComposedChildren(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compare composed childrens of two elements
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="configuration">configuration defined for this comparison</param>
            <param name="parentExplicitlyIncluded">
                The parent element is explicitly included in this comparison.  An element is 
                explicitly included if its type is explicitly included, or its parent's 
                type is explicitly included.
            </param>
            <param name="result">Overall comparison result</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareHierarchicalChildren(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compare hierarchical children for two elements
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="configuration">configuration defined for this comparison</param>
            <param name="parentExplicitlyIncluded">
                The parent element is explicitly included in this comparison.  An element is 
                explicitly included if its type is explicitly included, or its parent's 
                type is explicitly included.
            </param>
            <param name="result">Overall comparison result</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareRelationships(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Compare relationships for two elements
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
            <param name="configuration">Configuration defined for this comparison</param>
            <param name="result">Overall comparison result</param>
            <param name="changes">And ChangeDefinition generated for comparing these two elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareRelationship(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Called to request comparison of a pair of relationships.
            The relationships given will have analogous RelatingElements, and be of the same RelationshipClass.
            Resulting differences should be added to the ChangeDefinition given.
            </summary>
            <param name="sourceRelationship">The relationship in the source model.</param>
            <param name="targetRelationship">The relationship in the target model.</param>
            <param name="configuration">The configuration settings for the comparison.</param>
            <param name="changes">
            The findings of the comparison so far.
            This method should append to this list of changes without disturbing the changes already present.
            </param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.AddComparedElementToComparisionResult(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            After finishing compare an element, add it to ComparisonResult.
            </summary>
            <param name="sourceElement">Element from source store</param>
            <param name="result"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparer.CompareMatchSameNameElements(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration,System.Collections.Generic.List{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            If we have a list of elements from source and a list of elements from target 
            all have same name, or all are unnamed.  We need to find match pairs from
            two sets.  After we done with matching, the remaining elements in source will
            put to add list, remaining elements in target will put to drop list.
            But if remaining elements in both source and target is one, we will put this pair
            to compare list.
            </summary>
            <param name="sourceElements"></param>
            <param name="targetElements"></param>
            <param name="filter"></param>
            <param name="elementsToCompare"></param>
            <param name="elementsToAdd"></param>
            <param name="elementsToDrop"></param>
            <param name="elementsEqual"></param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration">
            <summary>
            A configuration object defined for model comparison.
            It will contain a ModelComparisonFilter.  Different DSP will have its own derived
            version of configuration object and have DSP specific configuration properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter)">
            <summary>
            Construct the configuration with comparison filter.
            </summary>
            <param name="filter">Comparison filter used to filter model elemtn types, properties and relationships</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter,System.Boolean)">
            <summary>
            Construct the Configuration with comparison filter, 
            and a Boolean indicate that if we only compare elements in source, if there are
            elements in target, not in source, we will ignore those elements.
            Also a Boolean indicate which collation we will use during comparison.
            </summary>
            <param name="filter">Comparison filter used to filter model elemtn types, properties and relationships</param>
            <param name="useSourceCollation">Use collation of source model if true, else use target collation.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.IsTargetDatabase">
            <summary>
            True to indicate whether the target is a database. If both the source and target
            are databases, only this IsTargetDatabase property will be set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.IsSourceDatabase">
            <summary>
            True to indicate whether the source is a database. If both the source and target
            are databases, this IsSourceDatabase property will not be set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.Filter">
            <summary>
            Filter defined for this comparison configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.IncludeCompositeReferenceObjects">
            <summary>
            True to include external objects from the same database in comparison.
            Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.UseSourceCollation">
            <summary>
            Specify which collation we will use during identifier comparison.
            Use source collation if it is true, otherwise use target collation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.AddPropertyValueSubstitution(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.Object,System.Boolean)">
            <summary>
            Substition certian property value with different value for this comparison session.
            </summary>
            <param name="element">The model element on which the property is. </param>
            <param name="propertyClass">Which property to substitute.</param>
            <param name="value">New value of the property</param>
            <param name="isSource">The element is in source model or target model.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparerConfiguration.TryGetPropertyValueSubstitution(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.Boolean,System.Object@)">
            <summary>
            Try get the substituted value for a property on a model element.
            </summary>
            <param name="element">The model element on which the property is. </param>
            <param name="propertyClass">Which property to substitute.</param>
            <param name="isSource">The element is in source model or target model.</param>
            <param name="value">New value of the property</param>
            <returns>True if the property has substitued value, else false.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition">
            <summary>
            Contains change details for an IModelElement.
            Including changed properties, added/dropped/ordinal changed relationship entries,
            added/dropped/changed/ordinal changed composing children and 
            added/dropped/changed/ordinal changed hierarchical children.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Constructor
            </summary>
            <param name="targetElement">The element which has changed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="targetElement">The element which has changed</param>
            <param name="isSameName">True if the element's anme has not changed, false if it has.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Copy constructor
            </summary>
            <param name="originalChangeDefinition"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.TargetElement">
            <summary>
            Target element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsEqual">
            <summary>
            If source element and target element are equal.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.CheckEquality">
            <summary>
            Virtual method to check if two elements are equal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsDefinitionChanged">
            <summary>
            The element definition is changed when the name is not same,
            property is changed, relationship is changed, composing children to add
            composing children to drop or composing children's definiton is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsComposingChildrenDefinitionChanged">
            <summary>
            Shows if the composing childrens definition is changed, hierarchical children of the composing children don't 
            contribute to this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsSameName">
            <summary>
            If two StoreElement have same name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsComposingChildrenChanged">
            <summary>
            Any composing children changed, added, dropped, and ordinal changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsHierarchicalChildrenChanged">
            <summary>
            Any hierarchical children changed, added, dropped, and ordinal changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsRelationshipEntriesChanged">
            <summary>
            Any relationship entries added, dropped or ordinal changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.IsPropertiesChanged">
            <summary>
            Any properties changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HavingDangleRelationships">
            <summary>
            Does source element or target element contains danngling relationship entries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.PropertiesModified">
            <summary>
            Properties are different
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.PropertiesEqual">
            <summary>
            Properties are equal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenModified">
            <summary>
            Composing children that are different
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenEqual">
            <summary>
            Composing children that are equal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenEquivalent">
            <summary>
            Composing children that are equivalent
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenToAdd">
            <summary>
            Composing children exist in source, not in target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenToDrop">
            <summary>
            Composing children exist in target, not in source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenOrderChanged">
            <summary>
            Composing children that have ordinal changes
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenModified">
            <summary>
            Hierarchical children that are different
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenEqual">
            <summary>
            Hierarchical children that are the same
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenEquivalent">
            <summary>
            Hierarchical children that are the equivalent
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenToAdd">
            <summary>
            Hierarchical children exist in source, not in target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenToDrop">
            <summary>
            Hierarchical children exist in target, not in source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenOrderChanged">
            <summary>
            Hierarchical children ordinal changed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesEqual">
            <summary>
            Relationship entries are equal between source and target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesToDrop">
            <summary>
            Relationship entires are in source, not in target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesToAdd">
            <summary>
            Relationship entries are in target, not in source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesOrderChanged">
            <summary>
            Relationship entries order changed
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.DangleRelationshipsFromSource">
            <summary>
            Dangling relationship entries for element in source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.DangleRelationshipsFromTarget">
            <summary>
            Dangling relationship entries for element in target
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition.Normalize">
            <summary>
            This method will go through each modfied composing/hierarchical children,
            if their change definition is modified and shows equal now, it will remove
            the child from modified list and put it in equal list.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonException">
            <summary>
            Exception for invalid state while comparing two models
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonException.#ctor(System.String)">
            <summary>
            Constructor takes error message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor takes error message and inner exception
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for serialization
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter">
            <summary>
            A filter can be defined for comparison.
            </summary>
            <remarks>
            In the filter, a list of types to include can be defined.
            A list of properties can be defined to be excluded during comparison.
            Also a list of relationships can be defined to be excluded during comparison.
            Collation the comparison used can choose to use source collation or target collation.
            We can also use elements in source model as base, in that case, anything in target,
            but not in source, will not be treated as drop.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema)">
            <summary>
            Construct a comparison filter, by default all the types will be included
            in comparison.
            </summary>
            <param name="schema">Model schema</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass})">
            <summary>
            Construct a comparison filter, by default compare all the element types
            in the model, and also filter out any excluded property and relationship
            during comparison.
            </summary>
            <param name="schema">Model schema to use</param>
            <param name="excludedPropertyClasses">Collection of properties excluded during comparison.</param>
            <param name="excludedRelationshipClasses">Collection of relationships excluded during comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Construct a comparison filter with a list of IModelElement types included in
            comparison.  
            </summary>
            <param name="schema">Model schema</param>
            <param name="elementTypesIncluded">Element types to be included in comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{System.Type},System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass})">
            <summary>
            Construct the fitler with a list of element types to be included in comparison,
            also filter out some properties and relationships during comparison.
            </summary>
            <param name="schema">Model schema to use</param>
            <param name="elementTypesIncluded">Collection of types to be explicitly included during comparison</param>
            <param name="excludedPropertyClasses">Collection of properties excluded during comparison.</param>
            <param name="excludedRelationshipClasses">Collection of relationships excluded during comparison.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass},System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass})">
            <summary>
            Construct the fitler with a list of element classes to be excluded in comparison,
            also filter out some properties and relationships during comparison.
            </summary>
            <param name="schema">Model schema to use</param>
            <param name="elementClassesExcluded">Collection of element classes to be explicitly exlucded during comparison</param>
            <param name="excludedPropertyClasses">Collection of properties excluded during comparison.</param>
            <param name="excludedRelationshipClasses">Collection of relationships excluded during comparison.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.ElementTypesIncluded">
            <summary>
            Collection of ElementClass that are included in comparison
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.ExcludedPropertyClasses">
            <summary>
            List of PropertyClass that are excluded from comparison.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.ExcludedRelationshipClasses">
            <summary>
            List of RelationshipClass that are excluded from comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.IsElementTypeExplicitlyIncluded(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Check to see if the type is explicitly included for the comparison
            </summary>
            <param name="elementClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.IsElementTypeImplicitlyIncluded(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Check to see if the type is implicitly included for the comparison
            </summary>
            <param name="elementClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.IsRelationshipClassExcluded(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Check to see if the RelationshipClass is excluded from comparison.
            </summary>
            <param name="relationshipClass">The RelationshipClass.</param>
            <returns>True if the RelationshipClass is excluded.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonFilter.IsPropertyClassExcluded(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Check to see if the PropertyClass is excluded from comparison.
            </summary>
            <param name="propertyClass">The PropertyClass.</param>
            <returns>True if the PropertyClass is excluded.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult">
            <summary>
            SchemaModel compare result.
            Contains same elements list, elements needed to add to target list,
            elements needed to drop in target list, and changed elements list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult)">
            <summary>
            Copy constructor
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.IsEqual">
            <summary>
            If compared elements are equal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsEqual">
            <summary>
            List of elements that have no changes
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementGroupsEqual">
            <summary>
            List of element groups that are equal
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsToAdd">
            <summary>
            List of elements exists in source, does not exist in target
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsToDrop">
            <summary>
            List of elements exists in target, does not exist in source
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsChanged">
            <summary>
            List of elements are changed.
            The result will keyed by elements in source, and it will have
            what are the changes together with that changed element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsPropertyChanged">
            <summary>
            List of elements changed because of properties are changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsRelationshipEntryChanged">
            <summary>
            List of elements changed because of relationship entries are added or dropped
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsComposingChildrenChanged">
            <summary>
            List of elements changed because of composed children are changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ElementsHierarchicalChildrenChanged">
            <summary>
            List of elements changed because of hierarchical dhildren are changed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToChangedElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition)">
            <summary>
            Add an IModelElement to changed list, as well as add the target element, 
            also what are associated changes.  Such as, changed properties, changed
            relationship entry, or related elements are changed.
            If the changed source element is already added before, the new changes will
            replace the old one.
            </summary>
            <param name="source">Element from source model</param>
            <param name="changes">Change definitions for this element, contains if its properties changed, children or relationships changed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToChangedElementList(System.Collections.Generic.IDictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonChangeDefinition})">
            <summary>
            Add changed elements and associated with their changes in changed elements dictionary.
            </summary>
            <param name="changedElements">Changed elements and their related change definition</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromChangedElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Remove element from changed element list
            </summary>
            <param name="sourceElement">The source element to be removed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromChangedElementList(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Remove elements from changed element list
            </summary>
            <param name="sourceElement">The source elements to be removed</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToAddElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Add an IModelElement to add elements list, this element exists in source
            but does not exist in target.
            </summary>
            <param name="element">Element in source not in target</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToAddElementList(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Add a list of IModelElement to add elements list.  These elements exist in source,
            but do not exist in target
            </summary>
            <param name="elements">Elements in source not in target</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromAddElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Remove element from add elements list
            </summary>
            <param name="element">Element that will be removed from add element list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromAddElementList(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Remove elements from add elements list
            </summary>
            <param name="element">Elements that will be removed from add element list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToDropElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Add an IModelElement to drop elements list.  This element does not exist in source,
            but exists in target.
            </summary>
            <param name="element">Element in target not in source</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToDropElementList(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Add a list of IModelElement to drop elements list.  These elements do not exist in source,
            but exist in target.
            </summary>
            <param name="elements">Elements in target not in source</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromDropElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Remove element from drop elements list.
            </summary>
            <param name="element">Element to be removed from drop elements list</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromDropElementList(System.Collections.Generic.ICollection{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Remove elements from drop elements list.
            </summary>
            <param name="elements">Elements to be removed from drop elements list</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Add element that is equal from source to target.
            </summary>
            <param name="sourceElement">Element from source model</param>
            <param name="targetElement">Element from target model</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementList(System.Collections.Generic.IDictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Add elements that are equal from source to target.
            </summary>
            <param name="equalElements">Equal elements pairs from source model and target model.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementList(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Remove element from equal elements list.
            </summary>
            <param name="sourceElement">Element to be removed from equal elements list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementList(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Remove elements from equal elements list.  The passed in elements are elements in source model.
            </summary>
            <param name="sourceElements">Elements to be removed from equal elements list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementGroupList(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Add element group that is equal from source to target.
            </summary>
            <param name="sourceElementGroup">Element group from source model</param>
            <param name="targetElementGroup">Element group from target model</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementGroupList(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            Remove elements from equal elements list.  The passed in elements are elements in source model.
            </summary>
            <param name="sourceElements">Elements to be removed from equal elements list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.GetResultType(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Get the final StoreComparisonResultType for this element, check if the element
            is in equal list, changed list, to add list or to drop list.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.Normalize">
            <summary>
            This method will go through all changed elements, re-evaluate the results, to see if there is 
            any difference in the change definition, if the result got modified and nothing is changed, we
            promote this element to equal list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.ExcludeResults(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.Collections.Generic.IList{System.Type})">
            <summary>
            Filter compare result with excluded types.  If an element is in change list,
            after filter the excluded types from its ModelComparisonChangeDefinition, the element becomes
            equal, it will be moved equal list.
            If an element in equal, to add or to drop list that is one of excluded type, that
            element will be removed from the list.
            </summary>
            <param name="schema"></param>
            <param name="excludingTypes"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResult.MakeIndependentOfHierarchySnapshot">
            <summary>
            Ensure that this result doesn't refer to InMemory objects (e.g. RelationshipEntries) from the hierarchy snapshot,
            but rather to the CE-backed versions.  This is important so that the result can continue
            to be used after the model's state changes, which will invalidate the cached InMemory objects.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelComparisonResultType">
            <summary>
            Enum represents the compare result for an element
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs">
            <summary>
            The event arguments for model elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs.Changes">
            <summary>
            List of all the changes.  There will be one entry for every element that participates in the event; either add, update or delete.
            The order of elements in the list is arbitrary.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type of the event.</param> 
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Constructor
            </summary>
            <param name="element">Element involved in the event</param>
            <param name="type">The type of the event.</param> 
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs.#ctor(System.Collections.Generic.IList{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType}})">
            <summary>
            Constructor
            </summary>
            <param name="changes">List of all the changes.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType">
            <summary>
            The event arguments for model elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType.InitialStoreChange">
            <summary>
            Happens as the first event coming out from the store, likely many elements will be added.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType.ElementAdded">
            <summary>
            An element was added.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType.ElementUpdated">
            <summary>
            An element was updated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType.ElementDeleted">
            <summary>
            An element was deleted.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData">
            <summary>
            Holds arbitrary categorized data collection which can be attached to DataSchemaModel
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.#ctor(System.String,System.String)">
            <summary>
            This version of the constructor takes a logical name
            </summary>
            <param name="category"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData)">
            <summary>
            Copy constructor.
            </summary>
            <param name="data">The existing CustomSchemaData from which to make a copy</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.Category">
            <summary>
            Category of this data
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.DataType">
            <summary>
            Type of data (sub-category)
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.SetMetadata(System.String,System.String)">
            <summary>
            Adds or re-sets named metadata value to collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.RemoveMetadata(System.String)">
            <summary>
            Removes metadata value from collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.GetMetadata(System.String)">
            <summary>
            Returns metadata value by name from collection (or null, if it is not there)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.MetadataNames">
            <summary>
            Names of the values currently in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData.MatchesTypeAndCategory(System.String,System.String)">
            <summary>
            Returns true if this CustomSchemaData's type and category match those given.
            </summary>
            <param name="category">The category to compare with</param>
            <param name="type">The type to compare with</param>
            <returns>True if caterogy and type match.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation">
            <summary>
            The model annotations are used to store feature specific information on store elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.Name">
            <summary>
            The name of this annotation, may be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.GetElements">
            <summary>
            Returns the elements this annotation is attached.
            </summary>
            <returns>The elements this annotation is attached.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.GetRelationshipEntries">
            <summary>
            Returns the relationship entries this annotation is attached.
            </summary>
            <returns>The relationship entries this annotation is attached.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.IsAttachedToStore">
            <summary>
            Returns, if this annotation is attached to model store
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.AnnotationClass">
            <summary>
            The metadata class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.Delete">
            <summary>
            Deletes this instance from the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation.IsDeleted">
            <summary>
            Returns true if the object is deleted.
            </summary>
            <returns>True if the object is deleted.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder">
            <summary>
            The class that has annotations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.AddAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Adds an annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.RemoveAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Removes an annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations">
            <summary>
            Returns all attached annotations.
            </summary>
            <returns>All attached annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all attached annotations that are named with the given identifier.
            </summary>
            <returns>All attached annotations that are named with the given identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations``1">
            <summary>
            Returns all attached annotations that implement the given type.
            </summary>
            <returns>All attached annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(System.Type)">
            <summary>
            Returns all attached annotations that implement the given type.
            </summary>
            <returns>All attached annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all attached annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All attached annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type)">
            <summary>
            Returns all attached annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All attached annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement">
            <summary>
            The elements in the model derive from this interface.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.Name">
            <summary>
            The name of the IModelElement, may be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetRelationships">
            <summary>
            Returns the relationships of this element.
            </summary>
            <returns>The relationships of this element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetReferencingRelationshipEntries">
            <summary>
            Returns all the relationship entries, that this element is on the right hand side.
            For example; when a Sql view references a Sql table, this method on the table will return the relationship entry that goes from the view to the table.
            </summary>
            <returns>The list of matching relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetReferencedRelationshipEntries">
            <summary>
            Returns all the relationship entries, that this element is on the left hand side.
            For example; when a Sql table references a Sql column, this method on the table will return the relationship entry that goes from the table to the column.
            </summary>
            <returns>The list of matching relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetReferencedDanglingRelationshipEntries">
            <summary>
            Returns all the dangling relationship entries, that this element is on the left hand side.
            This is similar to the GetReferencedRelationshipEntries method but only dangling relationship entries are returned.
            </summary>
            <returns>The list of matching dangling relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetReferencingElements">
            <summary>
            Returns all the elements, that are in a relationship with this element, where this element is on the right hand side.
            For example; when a Sql view references a Sql table, this method on the table will return the view.
            </summary>
            <returns>The list of matching referencing elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetReferencedElements">
            <summary>
            Returns all the elements, that are in a relationship with this element, where this element is on the left hand side.
            For example; when a Sql table references a Sql column, this method on the table will return the column.
            </summary>
            <returns>The list of matching related elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetOwnerInfo">
            <summary>
            Returns information about element owner. Never returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetComposingChildren">
            <summary>
            Returns composing children for this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetHierarchicalChildren">
            <summary>
            Returns hierarchical children for this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.Delete(System.Boolean)">
            <summary>
            Deletes this instance from the model. Will delete the hierarchical children as well if the deleteHierarchicalChildren is true.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.IsDeleted">
            <summary>
            Returns true if the object is deleted.
            </summary>
            <returns>True if the object is deleted.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.IsExternal">
            <summary>
            Returns true if the object is external.
            </summary>
            <returns>True if the object is external.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.IsBuiltIn">
            <summary>
            True if the element is built-in.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.ResolutionStatus">
            <summary>
            The model element resolution status.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.ValidationStatus">
            <summary>
            The model element validation status.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetRelationship(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <param name="relationshipClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.GetRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.ElementClass">
            <summary>
            The metadata class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelElement.SourceCodePositions">
            <summary>
            Gets the list of sources which define this element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelEntity">
            <summary>
            This interface represents an entity linked to the model store.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelEntity.Model">
            <summary>
            The model reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship">
            <summary>
            If this interface is used, multiple relationships can be added.
            This is the base type interface, which should be used by features that do not know about explicit model interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.AddElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Adds an relationship entry (based on element) to the end of the relationship.
            </summary>
            <param name="element">The element to be added.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.AddRelationshipEntry">
            <summary>
            Adds an (empty) relationship entry to the end of the relationship.
            </summary>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.InsertElement(System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Inserts an relationship entry (based on element) at the specified index.
            </summary>
            <param name="atIndex">The index to insert.</param>
            <param name="element">The element to be inserted.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.InsertRelationshipEntry(System.Int32)">
            <summary>
            Inserts an empty relationship entry at the specified index
            </summary>
            <param name="atIndex">The index to insert.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.IndexOf(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the relationship entry based on specified element. 
            The search starts at a specified position. Returns -1 if no match was found.
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="startIndex">The starting index.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship.GetRelationshipEntry(System.Int32)">
            <summary>
            Returns relationship entry at the specified index.
            </summary>
            <param name="atIndex">The index.</param>
            <returns>The found relationship entry.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2">
            <summary>
            If this interface is used, multiple relationships can be added.
            This is the type-safe interface, which should be used by features that know about explicit model interfaces.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.AddElement(`1)">
            <summary>
            Adds an relationship entry (based on element) to the end of the relationship.
            </summary>
            <param name="element">The element to be added.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.AddRelationshipEntry">
            <summary>
            Adds an (empty) relationship entry to the end of the relationship.
            </summary>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.InsertElement(System.Int32,`1)">
            <summary>
            Inserts an relationship entry (based on element) at the specified index.
            </summary>
            <param name="atIndex">The index to insert.</param>
            <param name="element">The element to be inserted.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.InsertRelationshipEntry(System.Int32)">
            <summary>
            Inserts an empty relationship entry at the specified index
            </summary>
            <param name="atIndex">The index to insert.</param>
            <returns>The added relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.IndexOf(`1,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the relationship entry based on specified element. 
            The search starts at a specified position. Returns -1 if no match was found.
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="startIndex">The starting index.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelMultiRelationship`2.GetRelationshipEntry(System.Int32)">
            <summary>
            Returns relationship entry at the specified index.
            </summary>
            <param name="atIndex">The index.</param>
            <returns>The found relationship entry.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelNamed">
            <summary>
            The elements in the model that are named should derive from this interface.
            This interface is only relevant at runtime, the Name property on IModelElement can not be null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelPropertyContainer">
            <summary>
            Represents an entity, which can contain properties
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelPropertyContainer.GetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Gets the asked property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelPropertyContainer.SetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,``0)">
            <summary>
            Sets the asked property.
            </summary>
            <typeparam name="TProperty">The type of property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <param name="propertyValue">The new value.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship">
            <summary>
            The base interface that is used to get both sides of a relationship.
            It should be used by features that do not know about explicit model interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship.FromElement">
            <summary>
            Returns the relating element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship.GetReferencedElements">
            <summary>
            Returns the related elements.
            </summary>
            <returns>The related elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship.GetReferencedRelationshipEntries">
            <summary>
            Returns the related relationship entries.
            </summary>
            <returns>The related relationship entries.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship.RelationshipClass">
            <summary>
            The metadata class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship`2">
            <summary>
            This is the base interface that is used to get both sides of a relationship.
            This is the type-safe interface, which should be used by features that know about explicit model interfaces.
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship`2.FromElement">
            <summary>
            Returns the relating element.
            </summary>
            <returns>The relating element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationship`2.GetReferencedElements">
            <summary>
            Returns the related elements.
            </summary>
            <returns>The related elements.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry">
            <summary>
            Represents a reference from one element to another, which might be unresolved.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry.Element">
            <summary>
            The referenced element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry.FromElement">
            <summary>
            The referencing element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry.Ordinal">
            <summary>
            Describes the location of this entry in the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry.RelationshipClass">
            <summary>
            The relationship class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry.SourceCodePositions" -->
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelReverseMultiRelationship">
            <summary>
            The reverse multi relationship.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelReverseMultiRelationship`2">
            <summary>
            The reverse multi relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelReverseSingleRelationship">
            <summary>    
            The reverse single relationship.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelReverseSingleRelationship`2">
            <summary>
            The reverse single relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship">
            <summary>
            If this interface is used, there can be a single element at the right side.
            This interface, should be used by features that do not know about explicit model interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship.Element">
            <summary>
            The related element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship.GetRelationshipEntry">
            <summary>
            Returns the related relationship entry.
            </summary>
            <returns>The related relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship.RecreateRelationshipEntry">
            <summary>
            Returns new, empty relationship entry, or replaces any existing one.
            </summary>
            <returns>The new relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship.RecreateRelationshipEntry(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns new, relationship entry pointing to specified element, or replaces any existing one.
            Null as parameter is OK
            </summary>
            <returns>The new relationship entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship.Clear">
            <summary>
            Deletes relationship entry if it existed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship`2">
            <summary>
            If this interface is used, there can be a single element at the right side.
            This is the type-safe interface, which should be used by features that know about explicit model interfaces.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship`2.Element">
            <summary>
            The related element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IModelSingleRelationship`2.RecreateRelationshipEntry(`1)">
            <summary>
            Returns new, relationship entry pointing to specified element, or replaces any existing one.
            Null as parameter is OK
            </summary>
            <returns>The new relationship entry.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.InstantiableTypeAttribute">
            <summary>
            This attribute is used to define the instantiable type as an element is being registered to the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.InstantiableTypeAttribute.#ctor(System.Type)">
            <summary>
            The constructor.
            </summary>
            <param name="instantiableType">The type that is declared instantiable.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.InstantiableTypeAttribute.InstantiableType">
            <summary>
            The type that is declared instantiable.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IScriptSourcedModelElement">
            <summary>
            Interface for all Model Elements that have element script source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IScriptSourcedModelElement.PrimarySource">
            <summary>
            Gets the location of the primary source which defines this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.IScriptSourcedModelElement.SecondarySources">
            <summary>
            Gets the locations of additional sources which define this element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.IScriptSourcedModelElement.GetRelationshipEntrySources(Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            Returns the list of relationship entry sources for a relationship entry.
            </summary>
            <param name="relationshipEntry">The relationship entry.</param>
            <returns>The list of relationship entry sources for a relationship entry.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.IsPrimary">
            <summary>
            True if this source is the primary source for the element it defines.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.SourceName">
            <summary>
            The filename or other unique name indicating where the element originates from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.Offset">
            <summary>
            The offset in characters where the element started in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.Length">
            <summary>
            The length in characters of the element in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.StartLine">
            <summary>
            The start line of this element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.StartColumn">
            <summary>
            The start column of this element
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.Script">
            <summary>
            The script that caused the generation of this file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ISourceInformation.ScriptDom">
            <summary>
            The script dom representation of the element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.InstantiateAnnotationCallback`1">
            <summary>
            Callback to create an instance of an annotation
            </summary>
            <typeparam name="TAnnotation"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation">
            <summary>
            This class can be used as a proxy to the annotation.
            </summary>
            <remarks>
            <para>
            The abstract classes <see cref="!:Annotation"/>, <see cref="!:Element"/> are meant
            to be inherited by the facade implementation by the DSP. These classes provide the
            lightest weight and most performant access to property and relationship data in the
            store, and are meant to ease the burden of facade development.
            </para>        
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.RegisterAnnotationClass``1(Microsoft.Data.Tools.Schema.SchemaModel.InstantiateAnnotationCallback{``0},System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Used to register the annotation class.
            </summary>
            <typeparam name="TAnnotation">The type of the annotation.</typeparam>
            <param name="factoryMethod">The method to instantiate the annotation.</param>
            <param name="isSerializable">Indicates if this annotation can be serialized.</param>
            <param name="requiresControllerLock">If true the controller lock needs to be hold when creating, deleting or updating an annotation of this type.</param>
            <param name="sqlPlatforms">The sql platforms that this annotation is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.RegisterPropertyClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass,System.String,``0,System.UInt32,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Registers a property class on the annotation.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="annotationClass">The annotation class.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="sqlPlatforms">The sql platforms that this annotation is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.Equals(System.Object)">
            <summary>
            Returns true if the other object equals this object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if the other object equals this object.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.GetHashCode">
            <summary>
            Returns the hashcode.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.GetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Gets the asked property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.SetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,``0)">
            <summary>
            Sets the asked property.
            </summary>
            <typeparam name="TProperty">The type of property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <param name="property">The new value.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.GetElements">
            <summary>
            Returns the elements this annotation is attached.
            </summary>
            <returns>The elements this annotation is attached.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.IsAttachedToStore">
            <summary>
            Returns, if this annotation is attached to model store
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.GetRelationshipEntries">
            <summary>
            Returns the relationship entries this annotation is attached.
            </summary>
            <returns>The relationship entries this annotation is attached.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.AnnotationClass">
            <summary>
            The metadata class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.Name">
            <summary>
            The name of the annotation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.IsDeleted">
            <summary>
            Returns true if the object is deleted.
            </summary>
            <returns>True if the object is deleted.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.Model">
            <summary>
            The model reference.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotation.Delete">
            <summary>
            Deletes this instance from the model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass">
            <summary>
            The metadata class for annotations.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore"/> metadata classes provide access to the structure and instance data
            within a <c>ModelStore</c> instance at level lower than the facade layer.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.#ctor(System.Type,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.AnnotationHelper,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.ClassName">
            <summary>
            Annotation class name. 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.NameMandatory">
            <summary>
            Returns, if instances of this annotation should always have a name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.AnnotationType">
            <summary>
            CLR type corresponding to this annotation class
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.RequiresControllerLock">
            <summary>
            Shows if the controller lock is required for annotation instances of this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.IsSerializable">
            <summary>
            Shows if the annotation can be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass.SqlPlatforms">
            <summary>
            Describes the sql platforms this annotation contributes.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.InstantiateElementCallback`1">
            <summary>
            Callback to create an instance of the model element
            </summary>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement">
            <summary>
            This class can be used as a proxy to the element.
            </summary>
            <remarks>
            <para>
            The abstract classes <see cref="!:Annotation"/>, <see cref="!:Element"/> are meant
            to be inherited by the facade implementation by the DSP. These classes provide the
            lightest weight and most performant access to property and relationship data in the
            store, and are meant to ease the burden of facade development.
            </para>        
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterElementClass``1(Microsoft.Data.Tools.Schema.SchemaModel.InstantiateElementCallback{``0},Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierGroup,System.Type,System.UInt32,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Used to register the element class.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="factoryMethod">The method to instantiate the element.</param>
            <param name="identifierGroup">The IdentifierGroup to which the element class belongs.</param>
            <param name="sqlPlatforms">The sql platforms that this element is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterRelationshipClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Used to register a relationship.
            </summary>
            <typeparam name="TReferencedInterface">The referenced interface.</typeparam>
            <param name="elementClass">The element class.</param>
            <param name="relationshipName">The relationship name.</param>
            <param name="relationshipType">The relationship type.</param>
            <param name="relationshipCardinality">The relationship cardinality style.</param>
            <param name="isOrderedComparison">True if the order of the relationship entries should be considered significant.</param>
            <param name="sqlPlatforms">The sql platforms that this relationship is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterRelationshipClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)" -->
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterReverseRelationshipClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.String,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Used to register a reverse relationship.
            </summary>
            <typeparam name="TReferencedInterface">The referenced interface.</typeparam>
            <param name="elementClass">The element class.</param>
            <param name="relationshipName">The relationship name.</param>
            <param name="relationshipCardinality">The relationship cardinality style.</param>
            <param name="forwardRelationshipName">The forward relationship name.</param>
            <param name="sqlPlatforms">The sql platforms that this relationship is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterPropertyClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.String,``0,System.UInt32,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.Object},Microsoft.Data.Tools.Schema.SchemaModel.ModelEnumClass)">
            <summary>
            Used to register an internal property class.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="elementClass">The element class.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="sqlPlatforms">The sql platforms that this relationship is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RegisterExternalPropertyClass``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Used to register an external property class.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="elementClass">The element class.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="sqlPlatforms">The sql platforms that this relationship is valid.</param>
            <returns>The metadata class.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.Name">
            <summary>
            The name of the IModelElement, may be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetOwnerInfo">
            <summary>
            Returns owner info for this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetComposingChildren">
            <summary>
            Returns composing children for this element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetHierarchicalChildren">
            <summary>
            Returns hierarchical children for this element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencingRelationshipEntries">
            <summary>
            Returns all the relationship entries, that this element is on the right hand side.
            For example; when a Sql view references a Sql table, this method on the table will return the relationship entry that goes from the view to the table.
            </summary>
            <returns>The list of matching relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencedRelationshipEntries">
            <summary>
            Returns all the relationship entries, that this element is on the left hand side.
            For example; when a Sql table references a Sql column, this method on the table will return the relationship entry that goes from the table to the column.
            </summary>
            <returns>The list of matching relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencedDanglingRelationshipEntries">
            <summary>
            Returns all the dangling relationship entries, that this element is on the left hand side.
            This is similar to the GetReferencedRelationshipEntries method but only dangling relationship entries are returned.
            </summary>
            <returns>The list of matching dangling relationship entries.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencingElements">
            <summary>
            Returns all the elements, that are in a relationship with this element, where this element is on the right hand side.
            For example; when a Sql view references a Sql table, this method on the table will return the view.
            </summary>
            <returns>The list of matching relating elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencingPeerElements">
            <summary>
            Returns all the elements, that are in a "Peer" relationship with this element, where this element is on the right hand side.
            </summary>
            <returns>The list of matching relating elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencingElementIds">
            <summary>
            Returns all the element ids, whose elements are referencing this element, along with the relationship class of the relationships.
            </summary>
            <returns>The list of tuples for relating element ids and relationship classes.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencedElements">
            <summary>
            Returns all the elements, that are in a relationship with this element, where this element is on the left hand side.
            For example; when a Sql table references a Sql column, this method on the table will return the column.
            </summary>
            <returns>The list of matching related elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencedPeerElements">
            <summary>
            Returns all the elements, that are in a "Peer" relationship with this element, where this element is on the left hand side.
            </summary>
            <returns>The list of matching related elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReferencedElementIds">
            <summary>
            Returns all the element ids, whose elements are referenced by this element, along with the relationship class of the relationships.
            </summary>
            <returns>The list of tuples for related element ids and relationship classes.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetRelationships">
            <summary>
            Returns the relationships of this element.
            </summary>
            <returns>The relationships of this element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetRelationship(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <param name="relationshipClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipSetClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetSingleRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipSetClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetMultiRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipSetClass">The class of the relationship.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReverseMultiRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipSetClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetReverseSingleRelationship``2(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns the asked relationship.
            </summary>
            <typeparam name="TFrom">The relating element type.</typeparam>
            <typeparam name="TTo">The related element type.</typeparam>
            <param name="relationshipSetClass">The class of the relationship.</param>
            <returns>The asked relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.AddAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Adds an annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.RemoveAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Removes an annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations">
            <summary>
            Returns all attached annotations.
            </summary>
            <returns>All attached annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all attached annotations that are named with the given identifier.
            </summary>
            <returns>All attached annotations that are named with the given identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations``1">
            <summary>
            Returns all attached annotations that implment the given type.
            </summary>
            <returns>All attached annotations that implment the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations(System.Type)">
            <summary>
            Returns all attached annotations that implement the given type.
            </summary>
            <returns>All attached annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all attached annotations that implment the given type and have the identifier as their name.
            </summary>
            <returns>All attached annotations that implment the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type)">
            <summary>
            Returns all attached annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All attached annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.GetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Gets the asked property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.SetProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,``0)">
            <summary>
            Sets the asked property.
            </summary>
            <typeparam name="TProperty">The type of property.</typeparam>
            <param name="propertyClass">The class of the property.</param>
            <param name="property">The new value.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.ElementClass">
            <summary>
            The metadata class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.IsDeleted">
            <summary>
            Returns true if the object is deleted.
            </summary>
            <returns>True if the object is deleted.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.IsExternal">
            <summary>
            Returns true if the object is external.
            </summary>
            <returns>True if the object is external.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.Delete(System.Boolean)">
            <summary>
            Deletes this instance from the model. Will delete the hierarchical children as well if the deleteHierarchicalChildren is true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.ResolutionStatus">
            <summary>
            The model element resolution status.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.ValidationStatus">
            <summary>
            The model element validation status.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElement.Model">
            <summary>
            The model reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass">
            <summary>
            The metadata class for elements.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore"/> metadata classes provide access to the structure and instance data
            within a <c>ModelStore</c> instance at level lower than the facade layer.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.#ctor(System.Type,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ElementHelper,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierGroup,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.UInt32)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.ClassName">
            <summary>
            Element class name. Computed as basic name of the most 
            derived interface class implements (but using only interfaces derived from IModelElement)
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.NameMandatory">
            <summary>
            Returns, if instances of this element class should always have a name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.ExternalPropertyClasses">
            <summary>
            Lists the subset of the property classes that are external.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.ImplementedTypes">
            <summary>
            Returns the implemented types.
            </summary>
            <returns>The implemented types.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.ImplementsInterface(System.Type)">
            <summary>
            True if implements the given interface.
            </summary>
            <param name="interfaceType">The given interface.</param>
            <returns>True if implements the given interface.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.IdentifierGroup">
            <summary>
            Returns IdentifierGroup to which this element class belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.SqlPlatforms">
            <summary>
            Describes the sql platforms this element contributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.Version">
            <summary>
            Element type version used to decide the serialized model version.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.OnExternalPropertyClassAdded(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Called when an external property class is registered for this element class.
            </summary>
            <param name="propertyClass">The newly-registered property class.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.RelationshipClasses">
            <summary>
            Returns the relationship classes.
            </summary>
            <returns>The relationship classes.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.GetRelationshipClass(System.String)">
            <summary>
            Returns the relationship class defined by the name.
            </summary>
            <param name="name">The relationship class name.</param>
            <returns>The relationship class defined by the name.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass.HierarchicalRelationshipClass">
            <summary>
            Returns the hierarchical relationship class.
            </summary>
            <returns>The hierarchical relationship class.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementHandle">
            <summary>
            @TODO comment
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo">
            <summary>
            Holds information about element owner
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo.Owner">
            <summary>
            Return element owner
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo.OwnerRelationshipEntry">
            <summary>
            Relationship entry for the owner relationship
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo.IsComposing">
            <summary>
            True, if owner is composing, and false, if hierarchical
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementOwnerInfo.ComposingOwner">
            <summary>
            Returns composing owner or null, if there is no composing owner
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter">
            <summary>
            Defines the location of elements relevent to some query or operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter.All">
            <summary>
            All elements should be considered.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter.Internal">
            <summary>
            Only elements internal to the model should be considered.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter.External">
            <summary>
            Only elements external to the model should be considered.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus">
            <summary>
            Defines the resolution status of elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus.ResolveCandidate">
            <summary>
            Indicates that the element should be processed to resolve its relationship entries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus.Resolved">
            <summary>
            Indicates all of the relationship entries of the element are connected to other elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus.Unresolvable">
            <summary>
            Indicates there are relationship entries on the element that can't be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus.ResolveCandidatePass2">
            <summary>
            Indicates that the element should be processed to resolve its relationship entries, but could not be resolved in the first pass.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelEnumClass.SqlPlatformsSupportingAllValues">
            <summary>
            A (possibly 0) value indicating which platforms (if any) support each and every enumerated value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelEnumClass.IsSupported(System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Determines whether a particular enumerated value is supported on all of the indicated platforms.
            </summary>
            <param name="value">An enumerated value.</param>
            <param name="platforms">One or more platforms to check for compatibility.</param>
            <returns>true iff the enumerated value exists and is supported on each and every platform indicated by platforms</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.Parts">
            <summary>
            Gets the parts of the identifier.
            </summary>
            <returns>The parts of the identifier.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.ExternalParts">
            <summary>
            Gets the external reference parts.  Null if the identifier is not external.
            </summary>
            <returns>The external reference parts.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.Model">
            <summary>
            The model for this identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.Equals(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns true if this identifier is equal to the parameter other.
            </summary>
            <param name="other">The other identifier.</param>
            <returns>True if this identifier is equal to the other.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.Equals(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns true if the two identifiers are equal.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.IsExactMatch(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns true if the two identifiers compare equal in ordinal comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.Equals(System.Object)">
            <summary>
            Returns true if this identifier is equal to the parameter other.
            </summary>
            <param name="obj">The other identifier.</param>
            <returns>True if this identifier is equal to the other.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier.GetHashCode">
            <summary>
            Returns the hashcode.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierGroup">
            <summary>
            This class defines an identifier group.  Every element belongs to an identifier group.
            Identifier groups can be used together with identifiers for lookups.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierHandle">
            <summary>
            @TODO comment
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass">
            <summary>
            The metadata class for properties.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore"/> metadata classes provide access to the structure and instance data
            within a <c>ModelStore</c> instance at level lower than the facade layer.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.#ctor(System.String,System.Type,System.Int32,System.Object,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.UInt32,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.Object},Microsoft.Data.Tools.Schema.SchemaModel.ModelEnumClass)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.PropertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.EnumClass">
            <summary>
            When PropertyType is an enum, EnumClass holds a reference to the enum's metadata class. Null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.IsExternal">
            <summary>
            Shows if the property is external.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.SqlPlatforms">
            <summary>
            Describes the sql platforms this property contributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.Version">
            <summary>
            Describes the minimum model version in which this property is supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.IsDefault(System.Object,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Returns true if the property on the given element is equal to the default.
            </summary>
            <param name="propertyValue">The value to be checked.</param>
            <returns>True if given property value is equal to the default.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass.IsDefault(Microsoft.Data.Tools.Schema.SchemaModel.IModelPropertyContainer)">
            <summary>
            Returns true if the property on the given element is equal to the default.
            </summary>
            <param name="propertyContainer">The element to be checked.</param>
            <returns>True if given elements property value is equal to the default.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyContainerClass">
            <summary>
            Represents class of an entity, which can contain properties
            Provides access to properties meta-data
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyContainerClass.ThrowIfExists(System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass},Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Throws if the property class already exists.
            </summary>
            <param name="list"></param>
            <param name="propertyClass"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyContainerClass.PropertyClasses">
            <summary>
            Gets the property classes in the annotation.
            </summary>
            <returns>The property classes in the annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyContainerClass.GetPropertyClass(System.String)">
            <summary>
            Returns the property class defined by the name.
            </summary>
            <param name="name">The name of the property class.</param>
            <returns>The property class defined by the name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyContainerClass.OnExternalPropertyClassAdded(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Called when an external property class is registered for this element class.
            </summary>
            <param name="propertyClass">The newly-registered property class.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelRegistrationException">
            <summary>
            The thrown exception if there is an issue with metadata registration.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelRegistrationException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelRegistrationException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle">
            <summary>
            Defines the cardinality style of a relationship.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle.Single">
            <summary>
            A single relationship entry is allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle.Many">
            <summary>
            Many relationship entries are allowed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass">
            <summary>
            The metadata class for relationships.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore"/> metadata classes provide access to the structure and instance data
            within a <c>ModelStore</c> instance at level lower than the facade layer.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.#ctor(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.ForwardRelationshipClasses">
            <summary>
            Gets the forward relationship classes corresponding to this relationship class,
            if this is a ReverseRelationship class.
            For forward relationship classes, this property returns an empty set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.Name">
            <summary>
            The name of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.ModelRelationshipType">
            <summary>
            The type of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.ModelRelationshipCardinalityStyle">
            <summary>
            The cardinality style.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.IsOrderedComparison">
            <summary>
            True if the order is important in the comparison of the related elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.FromElementClass">
            <summary>
            The relating element's metadata type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.RelatedElement">
            <summary>
            The related elements type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass.SqlPlatforms">
            <summary>
            Describes the sql platforms this relationship contributes.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType">
            <summary>
            Defines the type of relationship.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType.Peer">
            <summary>
            Relationship between two peers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType.Hierarchical">
            <summary>
            Relationship to a parent.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType.Composing">
            <summary>
            Relationship to a child that is owned. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipType.Reverse">
            <summary>
            Reverse relationship.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema">
            <summary>
            This class holds all metadata required to instantiate a ModelStore.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.#ctor">
            <summary>
            The internal constructor meant to disable clients directly instantiating this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.SetupIdentifierCreation(System.Func{Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier},System.Int32,System.Int32)">
            <summary>
            Specifies how to create identifiers
            </summary>
            <param name="identifierFactoryMethod">The factory method for identifiers.</param>
            <param name="identifierMaxLength">The maximum lenth for identifiers.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.AddAnnotationClass(Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass)">
            <summary>
            Adds an annotation class to this schema.
            </summary>
            <param name="annotationClass">Annotation class.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.AddElementClass(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Adds an element class to this schema.
            </summary>
            <param name="elementClass">Element class.</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.DefaultVersion">
            <summary>
            Version number used for model serialization. This version can be overwritten by elements or annotations with a newer version.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.AnnotationClasses">
            <summary>
            Returns the annotation classes in this schema.
            </summary>
            <returns>The annotation classes in this schema.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.ElementClasses">
            <summary>
            Returns the element classes in this schema, in hierarchical order.
            Root parent were added to the list first, then their immediate children.
            Breath first search was used on all ElementClasses.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetImplementingElementClasses(System.Type)">
            <summary>
            Returns the list of classes which implement the given interface.
            </summary>
            <param name="interfaceType">The interface that should be implemented.</param>
            <returns>The list of classes which implement the given interface.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetEnumClass(System.Type)">
            <summary>
            Returns the enum class for a given enum type.
            </summary>
            <param name="enumType">The type of an enum defined in the model. For example, typeof(SqlAuthenticationModes)</param>
            <returns>The enum class containing enum metadata.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetInstantiatingAnnotationClass(System.Type)">
            <summary>
            Returns the annotation class that is used to instantiate the given type.
            </summary>
            <param name="interfaceType">The queried type.</param>
            <returns>The annotation class that is used to instantiate the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetInstantiatingElementClass(System.Type)">
            <summary>
            Returns the element class that is used to instantiate the given interface.
            </summary>
            <param name="interfaceType">The queried interface type.</param>
            <returns>The element class that is used to instantiate the given interface.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetIdentifierGroupElementClassMapping">
            <summary>
            Returns the map of identifierGroups to element classes.
            </summary>
            <returns>The map of identifierGroups to element classes.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetInstantiatingElementClassMapping(System.Collections.Generic.IList{System.Type})" -->
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetParentElementClasses(System.Type)">
            <summary>
            Get direct composed or hierarchical parents for an interface type.
            </summary>
            <param name="interfaceType">Child interface type</param>
            <returns>A list of parent ElementClasses</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetParentElementClasses(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get direct composed or hierarchical parents for an ElementClass
            </summary>
            <param name="elementClass">Child ElementClass</param>
            <returns>A list of immediate parents.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.RootParentElementClasses">
            <summary>
            Get all ElementClasses that are root parents of any 
            composed or hierarchical relationship for this schema.
            </summary>
            <returns>A list of root parents</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetChildElementClasses(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get composed or hierarchical children of an ElementClass.
            </summary>
            <param name="elementClass">Parent ElementClass</param>
            <returns>A list of children.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.FinishRegistration">
            <summary>
            Call to this method makes all subsequent calls to AddElementClasses and AddAnnotationClasses.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.FindElementClass(System.Type)">
            <summary>
            Returns the element class that implements the given type.
            </summary>
            <param name="type">The type to look up.</param>
            <returns>The element class that implements the given type..</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.FindElementClass(System.String)">
            <summary>
            Returns the element class that implements the given name.
            </summary>
            <param name="name">The class name, this matches the ClassName property on the returned element class.</param>
            <returns>The element class that implements the given name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.FindAnnotationClass(System.String)">
            <summary>
            Returns the annotation class that implements the given name.
            </summary>
            <param name="name">The class name, this matches the ClassName property on the returned annotation class.</param>
            <returns>The annotation type that implements the given name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.FindAnnotationClass(System.Type)">
            <summary>
            Returns the annotation type that implements the given type.
            </summary>
            <param name="type">The type to look up.</param>
            <returns>The annotation type that implements the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetTypeByName(System.String)">
            <summary>
            Returns the type that matches the given interface name.
            </summary>
            <param name="modelTypeName">The queried interface name.</param>
            <returns>The type that matches the given interface name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.CreateIdentifierGroup">
            <summary>
            Create a new IdentifierGroup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.MaxIdentifierPartLength">
            <summary>
            Gets the maximum length of any single part of an identifier in this ModelSchema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.MaxIdentifierParts">
            <summary>
            Gets the maximum number of parts any identifier can have in this ModelSchema.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetAllLevelParentElementClasses(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get direct composed or hierarchical parents and parents of parents for an ElementClass.
            </summary>
            <param name="elementClass">Child ElementClass</param>
            <returns>A list of parents of all level up.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.GetAllLevelChildElementClasses(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get direct composed or hierarchical child classes and their child classes.
            </summary>
            <param name="elementClass">ElementClass</param>
            <returns>A list of children of all level down.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.HasHierarchicalParent(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Indicates if there is a hierarchical parent for the given element class.
            </summary>
            <param name="elementClass"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.HasComposingParent(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Indicates if there is a composing parent for the given element class.
            </summary>
            <param name="elementClass"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.AddParentElementClass(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.Boolean)">
            <summary>
            Add parent ElementClass to the list of parent of child.
            Also add child to the list of children of parent.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.BuildElementClassesOrder">
            <summary>
            Build all ElementClasses in hierarchical order.
            Root parent will added to the list first, then their immediate children.
            It will use breath first search to sorting all ElementClasses.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema.MaxPossibleIdentifierParts">
            <summary>
            The maximum possible number of parts in any identifier, in any ModelSchema.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition">
            <summary>
            This class holds information about position in source (usually text file),
            which caused creation/populateion of some property for a model element
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Constuctor
            </summary>
            <param name="isPrimary">True if this is the primary source for the element it defines.</param>
            <param name="startOffset">Offset in the source at which the definition starts.</param>
            <param name="length">Length of the definition.</param>
            <param name="startLine">Line on which the definition starts.</param>
            <param name="startColumn">Column at which the definition starts.</param>
            <param name="sourceName">Name of the source (often a text file name).</param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.IsPrimary">
            <summary>
            Returns true if this is the primary source for the element it defines.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.StartOffset">
            <summary>
            Offset in the source at which the definition starts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.Length">
            <summary>
            Length of the definition.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.StartLine">
            <summary>
            Line on which the definition starts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.StartColumn">
            <summary>
            Column at which the definition starts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.SourceCodePosition.SourceName">
            <summary>
            Name of the source (often a text file name).
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.CompactHashSet`1.FindEntryIndex(`0,System.Int32,System.Int32@)">
            <summary>
            Looks for index in _entries array for a given key.
            </summary>
            <param name="key">Object to look for.</param>
            <param name="hashCode">Hashcode of the object.</param>
            <param name="prevEntry">Returns index to an entry that shares the same bucket index as the searched entry that is preceding the found one.
              -1 if this is found entry is the first one. If searched object is not found it will point to last object that shares its bucket index (-1 if
              none is).</param>
            <returns>Index in _entries array that points to searched object. -1 if object is not found.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ComposingModelFilter">
            <summary>
            Logical 'AND' of all composed filters
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.AlreadyAddedToDspFailure">
            <summary>
              Looks up a localized string similar to {0} is already used by another database platform service..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.AnnotationAlreadyAddedToElement">
            <summary>
              Looks up a localized string similar to This annotation was already added to the element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.AnnotationAlreadyAddedToRelationshipEntry">
            <summary>
              Looks up a localized string similar to This annotation was already added to the relationship entry..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.AnnotationAlreadyAddedToStore">
            <summary>
              Looks up a localized string similar to This annotation was already added to the store..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.AnnotationDeletedError">
            <summary>
              Looks up a localized string similar to Modification operation was performed on a deleted annotation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CacheIdentifierNotFound">
            <summary>
              Looks up a localized string similar to The cache identifier {0} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CacheMetadataNotFound">
            <summary>
              Looks up a localized string similar to Metadata for {0} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CannotInitializeEse">
            <summary>
              Looks up a localized string similar to Internal Error: Ese could not be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CannotWriteToAReadOnlyModel">
            <summary>
              Looks up a localized string similar to The model is read-only.  Adding or modifying the contents of the model is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ClassImplementsTooManyInterfaces">
            <summary>
              Looks up a localized string similar to Class {0} implements two or more unrelated instantiable interfaces, but should implement only one, or they should derive one from another..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ColumnIndexOutOfBounds">
            <summary>
              Looks up a localized string similar to The column index is out of bounds..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CompactHashSet_Keys_do_not_match">
            <summary>
              Looks up a localized string similar to Keys do not match..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.CycleDetected">
            <summary>
              Looks up a localized string similar to There are circular parent/child relationships registered in the model..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DataSchemaModelController_AccessReleaseError">
            <summary>
              Looks up a localized string similar to Write access was released from a thread that did not acquire it..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DataSchemaModelController_AlreadyAssigned">
            <summary>
              Looks up a localized string similar to A schema manager controller is already assigned..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DataSchemaModelController_ValidateWriteAccessFailed">
            <summary>
              Looks up a localized string similar to The write operation failed. You must first acquire write access from DataSchemaModelController..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DoubleRegistrationFinishFailure">
            <summary>
              Looks up a localized string similar to FinishRegistration method can be called only once per ModelSchema object..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DuplicateProperty">
            <summary>
              Looks up a localized string similar to Property {0} is already registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.DuplicateRelationship">
            <summary>
              Looks up a localized string similar to Relationship {0} is already registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ElementAlreadyComposed">
            <summary>
              Looks up a localized string similar to This element is already composed by some other element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ElementDeletedError">
            <summary>
              Looks up a localized string similar to Modification operation was performed on a deleted element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.EntityWithSameNameAlreadyAdded">
            <summary>
              Looks up a localized string similar to Another class or annotation with the same simple name {0} as {1} was already added to this ModelSchema..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ErrorManager_MismatchingBuildRelevance1">
            <summary>
              Looks up a localized string similar to All errors in a category {0} should block build..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ErrorManager_MismatchingBuildRelevance2">
            <summary>
              Looks up a localized string similar to All errors in a category {0} should not block build..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ImplementorLookupFailure">
            <summary>
              Looks up a localized string similar to {0} was not registered to be instantiated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.InstantiableTypeAttributeLengthMismatch">
            <summary>
              Looks up a localized string similar to There should be at least one InstantiableTypeAttribute for {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.InstantiableTypeIsNotImplemented">
            <summary>
              Looks up a localized string similar to Type {0} declares that it is instantiable for interface {1}, but does not implement that interface..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.InstantiationFailure">
            <summary>
              Looks up a localized string similar to Failed to instantiate {0} because it was not registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.InvalidOperation">
            <summary>
              Looks up a localized string similar to An unexpected exception has occurred in the model storage engine. To continue, disregard the current results and try the operation again. If this issue persists, contact Microsoft support..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.LookupFailure">
            <summary>
              Looks up a localized string similar to The requested value does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.MismatchCardinalityStyle">
            <summary>
              Looks up a localized string similar to ModelRelationshipCardinalityStyle must be {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.MismatchRelationshipType">
            <summary>
              Looks up a localized string similar to Wrong ModelRelationshipType..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.MissingCustomDataForSqlSchemaReference">
            <summary>
              Looks up a localized string similar to Missing LogicalName or FileName metadata for .dacpac artifact reference..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelCollation_UnsupportedCollation">
            <summary>
              Looks up a localized string similar to Collation ({0}) is not supported on this computer..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelOverrideWarning">
            <summary>
              Looks up a localized string similar to Overriding model.xml using file &apos;{0}&apos;.  Use of this setting may result in deployment failure and/or unintended data loss.  This setting is intended only for use when troubleshooting issues with publish, import or script generation..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelSchema_ModelInterfaceNotFound">
            <summary>
              Looks up a localized string similar to No model interface type with name {0} was found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelSchema_NotSupportedSqlSchemaVersionError">
            <summary>
              Looks up a localized string similar to Internal Error.  The internal target platform type {0} does not support schema file version &apos;{1}&apos;. (File: {2}).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelSchema_NotSupportedSqlSchemaVersionErrorNoFile">
            <summary>
              Looks up a localized string similar to Internal Error.  The internal target platform type {0} does not support schema file version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelSchema_TwoInterfacesWithSameName">
            <summary>
              Looks up a localized string similar to This model schema already contains an interface named {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelSchema_UnspecifiedModelSchemaVersion">
            <summary>
              Looks up a localized string similar to (unspecified).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_ChangingResolutionStatusOnExternalElement">
            <summary>
              Looks up a localized string similar to ResolutionStatus cannot be set on external elements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_ChangingValidationStatusOnExternalElement">
            <summary>
              Looks up a localized string similar to ValidationStatus cannot be set on external elements..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_CrossStoreOperation">
            <summary>
              Looks up a localized string similar to This operation cannot be performed on entities from different model stores..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_IdentiferPartLengthOutOfBounds">
            <summary>
              Looks up a localized string similar to Identifier part {0} exceeds the maximum identifier part length of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_NullIdentifierPart">
            <summary>
              Looks up a localized string similar to Identifier part cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_OperationCancelled">
            <summary>
              Looks up a localized string similar to Operation was canceled due to a model store write..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_RegisteringReverseRelationshipWithWrongMethod">
            <summary>
              Looks up a localized string similar to Reverse relationships should be registered using ModelElement.RegisterReverseRelationshipClass() method..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_TooManyIdentifierPartsError">
            <summary>
              Looks up a localized string similar to Too many identifier parts. Maximum number specified during model schema creation is {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Model Store does not support type {0} as non-external property type..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_WriteCountDifferent">
            <summary>
              Looks up a localized string similar to Terminating due to a write operation to the model store..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ModelStore_WrongRelationshipClass">
            <summary>
              Looks up a localized string similar to You cannot get relationship {0} because passed RelationshipClass does not belong to ElementClass {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.MultipleHierarchicalRelationships">
            <summary>
              Looks up a localized string similar to You cannot register relationship {0} as the hierarchical canonical relationship, {1} is already registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.NoNameSpecifiedAtCreation">
            <summary>
              Looks up a localized string similar to A name is required to create {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.NoReferencesInComposingRelationship">
            <summary>
              Looks up a localized string similar to You cannot establish a composing relationship by reference..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.NoReferenceWithIndex">
            <summary>
              Looks up a localized string similar to No reference exists with such an index..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.NoRootElementClassFound">
            <summary>
              Looks up a localized string similar to No root ElementClass was found.  One or more circular parent/child relationships are registered in the model..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.NotRegistered">
            <summary>
              Looks up a localized string similar to {0} is not registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ObjectIsReadOnly">
            <summary>
              Looks up a localized string similar to This object is read-only, so the write operation is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_FileCouldNotBeMoved">
            <summary>
              Looks up a localized string similar to An error occurred while moving the file. Check the inner exception..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_IdentityOverTheLimit">
            <summary>
              Looks up a localized string similar to Identity column values are over the limit. The cache should be regenerated..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_InvalidFile">
            <summary>
              Looks up a localized string similar to The persisted file is corrupt..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_NotDisposed">
            <summary>
              Looks up a localized string similar to The model was not prepared for persistence..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_NotFileManagerScriptCache">
            <summary>
              Looks up a localized string similar to Models that have a script cache other than FileManager cannot be persisted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_OptimizedForInsert">
            <summary>
              Looks up a localized string similar to Models that are optimized for insert cannot be persisted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.Persistence_VersionMismatch">
            <summary>
              Looks up a localized string similar to The persisted file versions do not match..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.RegistrationFailure">
            <summary>
              Looks up a localized string similar to {0} is already registered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.RelatingElementMismatch">
            <summary>
              Looks up a localized string similar to The relating element of this relationshipEntry is not the same as current element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.RelationshipEntryDeleted">
            <summary>
              Looks up a localized string similar to The operation failed because the relationship entry was deleted..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.RemovingNameFromNamed">
            <summary>
              Looks up a localized string similar to Name cannot be null for {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ReverseRelationshipUpdatesNotSupported">
            <summary>
              Looks up a localized string similar to Reverse relationships updates are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.SDGStatementNotSupportedExceptionMessage">
            <summary>
              Looks up a localized string similar to {0} statement generation is not supported for type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.SqlSchemaFileLoadingError">
            <summary>
              Looks up a localized string similar to Failed to load {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.StoreSchemaIdentifierCreationAlreadySetup">
            <summary>
              Looks up a localized string similar to Cannot setup identifier creation because it was already set up..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.StoreSchemaIdentifierRegistrationFinished">
            <summary>
              Looks up a localized string similar to Cannot setup identifier creation because it can only happen inside DatabaseSchemaProvider.RegisterStoreTypes() calls..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.StoreSchemaRegistrationFinished">
            <summary>
              Looks up a localized string similar to Cannot register {0} because registration can only happen inside DatabaseSchemaProvider.RegisterStoreTypes() calls..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.SubstringOutOfBounds">
            <summary>
              Looks up a localized string similar to The substring is out of the bounds for script {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.UnexpectedCardinalityStyle">
            <summary>
              Looks up a localized string similar to Unexpected ModelRelationshipCardinalityStyle.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.WrongDerivation">
            <summary>
              Looks up a localized string similar to The value does not derive from the correct store base class..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ErrorMessageResource.ZeroIdentifierPartsError">
            <summary>
              Looks up a localized string similar to At least one identifier was expected..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.IModelStoreHolder">
            <summary>
            This is implemented by serialization contexts.  When errors deserialize they could do so
            under two different context.  This interface collapses those two into an interface which
            is used by the error to deserialize.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelInstantiationException">
            <summary>
            The thrown exception when the model can not instantiate an item.
            </summary>    
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelInstantiationException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelInstantiationException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelPersistenceException">
            <summary>
            The exception thrown if an error occurs while serializing or deserializing a model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelSchemaInfo">
            <summary>
            This class assumes, that internal ids in different ModelSchema instances 
            would match if order of annotation/elements/relationships/properties matches
            If this assumption becomes false, we would need to store and compare ids here...
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException">
            <summary>
            This exception is thrown if store XML serializer encounters an error
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.LineNumber">
            <summary>
            The line number on which the problem occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.LinePosition">
            <summary>
            The offset within the line on which the problem occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="lineNumber">The line number.</param>
            <param name="linePosition">The position in line.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="lineNumber">The line number.</param>
            <param name="linePosition">The position in line.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of get object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.AmbigousResolutionError">
            <summary>
              Looks up a localized string similar to The reference to the element with the name &apos;{0}&apos; could not be resolved. More than one element with this name exists. To resolve the error, you must add one or more disambiguators..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.AnnotationClassNotSpecified">
            <summary>
              Looks up a localized string similar to You must specify a Type attribute for each Annotation element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.BinarySerialization_InMemoryError">
            <summary>
              Looks up a localized string similar to In memory model can&apos;t be binary serialized..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.DuplicateDisambiguatorError">
            <summary>
              Looks up a localized string similar to The disambiguator &apos;{0}&apos; has already been defined in this file. To resolve the error, you must specify a unique value for each Disambiguator attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.DuplicateElementInRelationshipEntryError">
            <summary>
              Looks up a localized string similar to You cannot specify more than one element in a RelationshipEntry element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.DuplicateReferenceInRelationshipEntryError">
            <summary>
              Looks up a localized string similar to You cannot specify more than one element reference in a RelationshipEntry element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.DuplicateRelationshipEntryInSingleRelationshipError">
            <summary>
              Looks up a localized string similar to You cannot specify more than one RelationshipEntry element in a Relationship of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ElementClassNotSpecified">
            <summary>
              Looks up a localized string similar to You must specify the Element Type attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ElementInNonComposingRelationshipError">
            <summary>
              Looks up a localized string similar to You can define elements inline only in a composing relationship..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.EmptyReferenceError">
            <summary>
              Looks up a localized string similar to You must specify an identifier, a disambiguator, or both for all references..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ExternalAmbiguousResolutionError">
            <summary>
              Looks up a localized string similar to The reference to the external element with the name &apos;{0}&apos; could not be resolved. More than one element with this name exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ExternalElementNotAssignableExactTypeWarning">
            <summary>
              Looks up a localized string similar to Ignoring the value of the Type property because Relationship {0} can not reference elements of type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ExternalElementNotFoundError">
            <summary>
              Looks up a localized string similar to The reference to the external element with the name &apos;{0}&apos; could not be resolved. No such element exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ExternalElementUnknownExactTypeWarning">
            <summary>
              Looks up a localized string similar to Ignoring the value of the Type property because Element class {0} can not be found..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ExternalSourceNotLoaded">
            <summary>
              Looks up a localized string similar to The reference to external elements from the source named &apos;{0}&apos; could not be resolved, because no such source is loaded..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingAnnotationNameAttributeError">
            <summary>
              Looks up a localized string similar to You must specify a Name attribute for each Annotation element of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingAnnotationWithDisambiguatorError">
            <summary>
              Looks up a localized string similar to The AttachedAnnotation node is referencing an annotation that has the disambiguator {0}, but no annotation exists with that disambiguator..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingCollationAttribute">
            <summary>
              Looks up a localized string similar to You must specify a Collation attribute for DataSchemaModel element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingCustomInfoCategoryAttribute">
            <summary>
              Looks up a localized string similar to You must specify a Category attribute for each CustomData tag..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingDisambiguatorInAnnotationReferenceError">
            <summary>
              Looks up a localized string similar to You must specify a Disambiguator attribute for each AttachedAnnotation element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementInComposingRelationshipError">
            <summary>
              Looks up a localized string similar to A composing relationship must contain an element definition that is inline..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementNameAttributeError">
            <summary>
              Looks up a localized string similar to You must specify a Name attribute for each element of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementWithDisambiguatorError">
            <summary>
              Looks up a localized string similar to The reference to an unnamed element that has the disambiguator {0} could not be resolved because no element with that disambiguator exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementWithIdentifierAndDisambiguator">
            <summary>
              Looks up a localized string similar to The reference to an element that has the name {0} and the disambiguator {1} could not be resolved because no element with that name and disambiguator exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementWithIdentifierAndWithoutDisambiguator">
            <summary>
              Looks up a localized string similar to The reference to the element that has the name {0} and no disambiguator could not be resolved because no element with that name exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingElementWithIdentifierError">
            <summary>
              Looks up a localized string similar to The reference to the element that has the name {0} could not be resolved because no element with that name exists..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingIdentifierAttribute">
            <summary>
              Looks up a localized string similar to You must specify an Identifier attribute for each CachedScript element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingMetadataNameAttribute">
            <summary>
              Looks up a localized string similar to You must specify a Name attribute for each Metadata tag..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingModelError">
            <summary>
              Looks up a localized string similar to You must specify a single Model element inside DataSchemaModel element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingOrEmptyDspNameAttribute">
            <summary>
              Looks up a localized string similar to You must specify a non-empty DspName attribute for DataSchemaModel element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingOrUnknownFileFormatError">
            <summary>
              Looks up a localized string similar to {0} attribute is missing or has unknown value..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingPropertyNameAttributeError">
            <summary>
              Looks up a localized string similar to You must specify a Name attribute for each Property element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingPropertyValueAttributeError">
            <summary>
              Looks up a localized string similar to You must specify a Value attribute for the property type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingRelationshipNameAttributeError">
            <summary>
              Looks up a localized string similar to You must specify a Name attribute for each Relationship element..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.MissingSourcePositionPropertyError">
            <summary>
              Looks up a localized string similar to You must specify a {0} attribute for each Position tag..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelSchemaBinarySerializationError">
            <summary>
              Looks up a localized string similar to An invalid ModelSchema type {0} was attempted to be deserialized from assembly {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_CheckingSchema">
            <summary>
              Looks up a localized string similar to Checking version of the model schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_CheckingUniqueIdentifierBounds">
            <summary>
              Looks up a localized string similar to Checking unique identifier bounds.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_CreatingAuxFile">
            <summary>
              Looks up a localized string similar to Creating auxiliary file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_CreatingModelFile">
            <summary>
              Looks up a localized string similar to Creating model file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_FinishingDeserialization">
            <summary>
              Looks up a localized string similar to Finishing deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_InitializingModelStore">
            <summary>
              Looks up a localized string similar to Initializing data schema model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreAttachProgress_Ready">
            <summary>
              Looks up a localized string similar to Ready..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ModelStoreBinarySerializationError">
            <summary>
              Looks up a localized string similar to An invalid ModelStore type {0} was attempted to be deserialized from assembly {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ReferenceInComposingRelationshipError">
            <summary>
              Looks up a localized string similar to You cannot use element references in composing relationships. You must define the elements inline..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.ReverseRelationshipSerializedError">
            <summary>
              Looks up a localized string similar to The file contains the reverse relationship {0}. Serialization of reverse relationships is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnexpectedElementError">
            <summary>
              Looks up a localized string similar to The file contains the XML node type {0}. This type is unsupported or in an unsupported location..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnexpectedElementTextError">
            <summary>
              Looks up a localized string similar to Unexpected element text was encountered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnexpectedEOF">
            <summary>
              Looks up a localized string similar to Unexpected end of file was encountered..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnknownAnnotationClassError">
            <summary>
              Looks up a localized string similar to The store schema does not contain the Annotation class {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnknownCollation">
            <summary>
              Looks up a localized string similar to Collation {0} is not supported. You must specify one of the supported collations in the Collation attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnknownElementClassError">
            <summary>
              Looks up a localized string similar to The store schema does not contain the Element class {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnknownPropertyClassError">
            <summary>
              Looks up a localized string similar to The Element or Annotation class {1} does not contain the Property class {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.UnknownRelationshipClassError">
            <summary>
              Looks up a localized string similar to The Element class {1} does not contain the Relationship class {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.WrongIdentifierFormatError">
            <summary>
              Looks up a localized string similar to Identifiers must include at least one name (for example, MyTable)..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.WrongSourcePositionValueFormatError">
            <summary>
              Looks up a localized string similar to The value of the attribute {0} is formatted incorrectly..
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelSerializationResource.WrongValueFormatError">
            <summary>
              Looks up a localized string similar to The value of the property type {0} is formatted incorrectly..
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore">
            <summary>
            ModelStore is the core type that implements physical storage for a SchemaModel instance.
            </summary>
            <remarks>
            <para>
            The physical store related constructs for a model are in this class. ModelStore itself has minimal services, and has
            no direct affinity for modeling databases. Instead, ModelStore is a basic modeling API, which implements Elements, Annotations
            and Relationships and Properties.
            </para>
            <para>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/> is an abstract base class which inherits ModelStore, and represents a database specific
            model API, which includes access to services for model building from script dom, and vice versa. And then from <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/>
            are derived database platform specific model implementations, such as <see cref="!:Sql90SchemaModel"/>.
            </para>
            </remarks>
            <summary>
            Methods for encoding/decoding identifiers into/from string
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.AnnotationCache">
            <summary>
            This class assumes the store lock is held when this class is called.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.AttachCancelledException">
            <summary>
            This exception is internally used for flow control in ModelStore.Attach() method
            There is no other way to cancel out of ModelStore() serialization constructor...
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CacheBase`2">
            <summary>
            Used for caching arbitrary data.  Discards the least frequently used element when cache is full.
            Keeps a count of dirty elements, this approach should work well because the dirty elements should be closer to the 
            beginning of the link list.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper">
            <summary>
            This helper class is used to help comparison on Store.
            Since comparison will be based on queries, and SqlCeManager
            is private to Store, so we have to use this helper to 
            execute queries.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.ShouldCompareElement(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Determines if the two elements should be compared to each other.
            </summary>
            <param name="sourceElement">The source element.</param>
            <param name="targetElement">The target element.</param>
            <returns>True to compare the elements, false to not compare the elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.IsGraphComputedColumn(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlSimpleColumn,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlColumnGraphType@)">
            <summary>
            Determines if the column is a graph computed column.
            </summary>
            <param name="column">The column to check.</param>
            <returns>True if the column is a graph computed column, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.CompareComposedChildren(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Boolean,System.Collections.Generic.List{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{System.Tuple{System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}}}@)">
            <summary>
            Compare all composed children on source ang target elements
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <param name="childrenToCompare"></param>
            <param name="childrenToAdd"></param>
            <param name="childrenToDrop"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.CompareHierarchicalCanonicalChildren(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.List{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{System.Tuple{System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}}}@)">
            <summary>
            Compare all hierarchical children on source and target elements
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <param name="childrenToCompare"></param>
            <param name="childrenToAdd"></param>
            <param name="childrenToDrop"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.AddChildResultRow(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}},Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ChildResultRow)">
            <summary>
            This method is used to add a child row to a list of elements.
            </summary>
            <param name="children">The reliationship dictionary.</param>
            <param name="childResultRow">The row to add.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.RowFilterChecks(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method is used to determine which rows should be added to the row comparison
            lists.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True to include the element, False to filter the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.RowDwFilterChecks(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method is used to determine which element is system generated index. 
            </summary>
            <param name="element">The element to check.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.CheckForSecurityPredicatesMatch(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ChildResultRow},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ChildResultRow},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{System.Tuple{System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}}},System.Collections.Generic.List{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}},System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}})">
            <summary>
            Match children for security predicates
            Security predicate has its own rule to build various lists based on TargetObjectName
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.Compare(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,System.Boolean,System.Collections.Generic.List{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}@,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@,System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@,System.Collections.Generic.List{System.Tuple{System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}}@)" -->
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.AddModelElementsToList(System.Collections.Generic.IList{System.Tuple{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method is used to filter out graph psuedo columns when the ModelCompareHelper is populating lists of elements.
            </summary>
            <param name="list">The target list to add the elements to.</param>
            <param name="first">The first element in the tuple.</param>
            <param name="second">The second list in the tuple.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.AddModelElementToList(System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method is used to filter out graph pseudo columns when the 'ModelCompareHelper' is populating lists of elements.
            </summary>
            <param name="list"></param>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.AddModelElementsToList(System.Collections.Generic.List{System.Tuple{System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.List{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}}},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement},System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement})">
            <summary>
            This method is used to filter out graph psuedo columns when the ModelCompareHelper is populating lists of elements.
            </summary>
            <param name="list">The target list to add elements to.</param>
            <param name="firstList">The first list.</param>
            <param name="secondList">The second list.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ComparerHelper.CompareIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Compare two identifers use source or target collation.
            </summary>
            <param name="sourceId"></param>
            <param name="targetId"></param>
            <param name="useSourceCollation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,Microsoft.Data.Tools.Schema.SchemaModel.ModelCollation,Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="platform">The target platform for the model.</param>
            <param name="collation">The collation for the model.</param>
            <param name="modelSchema">The schema of the model.</param>
            <param name="modelFileName">Name of the file in which to store the model.</param>
            <param name="modelStorageType">The type of storage for model data.</param>
            <param name="storeSourceCodePositionAnnotations">If true, model will also store source code position annotations</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CopyValueTypeMembersFromModel(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore)">
            <summary>
            Reference-type members are treated differently during copy/non-copy translation
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Comparer">
            <summary>
            Get the ModelCollationComparer initialized with current store collation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.IsDisposing">
            <summary>
            Returns true if the ModelStore is in the process of being disposed, or has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Platform">
            <summary>
            Returns the target platform for this model
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Targets(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Returns true if the model platform supports the given model element class
            </summary>
            <param name="elementClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Targets(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Returns true if the model platform supports the given model relationship class
            </summary>
            <param name="relationshipClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Targets(Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Returns true if the model platform supports the given model property class
            </summary>
            <param name="propertyClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Targets(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Returns true if the model targets asked platform.
            NOTE: Use this method sparingly; in most situations callers should call Targets(ModelElementClass),
            Targets(ModelRelationshipClass), or Targets(ModelPropertyClass) to determine if the element they are 
            referencing is supported by the model
            </summary>
            <param name="platforms"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.PlatformIsInSet(Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms)">
            <summary>
            Checks whether platforms contains the model's Platform value.
            Note: This logic differs from "Targets".
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.IsBuiltInPropertyType(System.Type)">
            <summary>
            Tells if type is supported by the ModelStore as property type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.BuiltInPropertyTypes">
            <summary>
            Returns all possible built-in property types
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.OptimizeForInitialPopulation">
            <summary>
            Makes inserts faster, but look-ups much slower.
            </summary>
            <remarks>
            Useful as a performance enhancement when performing many inserts and few or no look-ups,
            as during initial population of the model.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.OptimizeForQuery">
            <summary>
            Makes look-ups fast, but at some cost to insertion speed.  This is the default state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.HasCompositeReference">
            <summary>
            True if there is a composite reference.
            </summary>
            <returns>True if there is a composite reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetExternalProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Returns the external property value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="element">The element that encapsulates the property.</param>
            <param name="propertyClass">The class of the property.</param>
            <returns>The complex property value.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.SetExternalProperty``1(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,``0)">
            <summary>
            Sets the external properties value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="element">The element that encapsulates the property.</param>
            <param name="propertyClass">The class of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CleanupExternalProperty(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Inheriters should use this method to cleanup resources used by the external property when the element is deleted.
            </summary>
            <param name="element">The element that encapsulates the property.</param>
            <param name="propertyClass">The class of the property.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.SerializeExternalProperty(System.Xml.XmlWriter,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass,System.Object)">
            <summary>
            Overriding method emits an XML element (and any necessary sub elements) into a stream to persist a value from an external property
            </summary>
            <param name="writer"></param>
            <param name="propertyClass"></param>
            <param name="property"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DeserializeExternalProperty(System.Xml.XmlReader,Microsoft.Data.Tools.Schema.SchemaModel.ModelPropertyClass)">
            <summary>
            Overriding method reads an XML element (and any necessary sub elements) in order to reproduce the value of an external property
            </summary>
            <param name="reader"></param>
            <param name="propertyClass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateAnnotation``1">
            <summary>
            Creates an annotation.
            </summary>
            <typeparam name="TAnnotation">The type of the annotation.</typeparam>
            <returns>The created annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass)">
            <summary>
            Creates an annotation.
            </summary>
            <param name="annotationClass">The class of annotation to be created.</param>
            <returns>The created annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedAnnotation``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates a named annotation.
            </summary>
            <typeparam name="TAnnotation">The type of annotation to be created.</typeparam>
            <param name="identifier">The name of the annotation.</param>
            <returns>The created annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.ModelAnnotationClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates a named annotation.
            </summary>
            <param name="annotationClass">The class of annotation to be created.</param>
            <param name="identifier">The name of the annotation.</param>
            <returns>The created annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalReferenceParts(System.Collections.Generic.IList{System.String},System.Collections.ObjectModel.ReadOnlyCollection{System.String}@)">
            <summary>
            Creates external reference parts. Returns id and reference to copied parts
            Copy is needed to prevent weird behavior in case of changes to original parts collection
            </summary>
            <param name="parts">The strings that define the external reference.</param>
            <returns>External reference parts id.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateIdentifier(System.String[])">
            <summary>
            Creates an identifier.  If an identifier with the same parts is already created, it returns that one.
            </summary>
            <param name="parts">The parts of the identifier.</param>
            <returns>The created or looked up identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates an identifier.  If an identifier with the same parts is already created, it returns that one.
            </summary>
            <param name="parts">The parts of the identifier.</param>
            <returns>The created or looked up identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.IList{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates an identifier.  If an identifier with the same parts is already created, it returns that one.
            </summary>
            <param name="externalParts">The external reference parts of the identifier.</param>
            <param name="parts">The parts of the identifier.</param>
            <returns>The created or looked up identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalElement``1">
            <summary>
            Creates an external element.
            </summary>
            <typeparam name="TElement">The type to be used the define the element, one of the instantiable interfaces.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalElement(System.Type)">
            <summary>
            Creates an external element.
            </summary>
            <param name="elementType">The type of the element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalElement(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Creates an external element.
            </summary>
            <param name="elementClass">The class of the element to be created.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalNamedElement``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an external element with a name.
            </summary>
            <typeparam name="TElement">The type to be used the define the element, one of the instantiable interfaces.</typeparam>
            <param name="identifier">The name for the new element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalNamedElement(System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an external element with a name.
            </summary>
            <param name="elementType">The type of the element.</param>
            <param name="identifier">The name for the new element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateExternalNamedElement(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an external element with a name.
            </summary>
            <param name="elementClass">The class of the element to be created.</param>
            <param name="identifier">The name for the new element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateElement``1">
            <summary>
            Creates an element.
            </summary>
            <typeparam name="TElement">The type to be used the define the element, one of the instantiable interfaces.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateElement(System.Type)">
            <summary>
            Creates an element.
            </summary>
            <param name="elementType">The type of the element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateElement(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Creates an element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedElement``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an element with a name.
            </summary>
            <typeparam name="TElement">The type to be used the define the element, one of the instantiable interfaces.</typeparam>
            <param name="identifier">The identifier as the name of the element.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedElement(System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an element with a name.
            </summary>
            <param name="elementType">The type of the element.</param>
            <param name="identifier">The identifier.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedElement(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an element with a name.
            </summary>
            <param name="elementClass">The class of the element to be created.</param>
            <param name="identifier">The identifier.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementHandleTarget(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementHandle)">
            <summary>
            Gets an element from a handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>The element the handle refers to.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.FreeElementHandle(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementHandle)">
            <summary>
            Frees an element handle.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateIdentifierHandle(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates a handle for an identifier.
            </summary>
            <param name="identifier">The identifier</param>
            <returns>A handle to the identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetIdentifierHandleTarget(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierHandle)">
            <summary>
            Gets an identifier from a handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>The identifier the handle refers to.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetIdentifier(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Get identifier from model by scope id and a list of strings.  If not found, return null.
            </summary>
            <param name="parts">List of identifier strings</param>
            <returns>Related identifier, if nothing found, return null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetIdentifier(System.String[])">
            <summary>
            Get ModelIdentifier with scopeId and identifiers, if not found, return null.
            </summary>
            <param name="parts">Identifier strings</param>
            <returns>Related identifier. If not found, return null.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetIdentifier(System.Collections.Generic.IList{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Get identifier from model by scope id and a list of strings.  If not found, return null.
            </summary>
            <param name="externalParts">The external reference parts of the identifier.</param>
            <param name="parts">List of internal identifier parts</param>
            <returns>Related identifier, if nothing found, return null</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Schema">
            <summary>
            The schema of the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Collation">
            <summary>
            The collation of the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.IsOptimizedForInsert">
            <summary>
            Returns true if the ModelStore is currently optimized for inserts rather than look-ups.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.IsOptimizedForQuery">
            <summary>
            Returns true if the ModelStore is currently optimized for look-ups rather than inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifierGroup,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns elements with given identifier belonging to given identifier group.
            Since the identifier defines if the element is external or not, there is no GetExternalElements variation for this overload.
            </summary>
            <param name="identifier">Identifier</param>
            <param name="identifierGroup">Identifier group</param>
            <param name="filter">A filter specifying a subset of the elements to return.</param>
            <returns>Elements with given identifier belonging to given identifier group.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementsFrom``1(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Get the elements of a given type which are defined in a given source.
            </summary>
            <typeparam name="TElement">The type the elements must implement.</typeparam>
            <param name="sourceName">The name of the source where the elements are defined.</param>
            <param name="filter">A filter specifying a subset of the elements to return.</param>
            <returns>A list of elements fulfilling the conditions.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementsFrom(System.String,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementsFrom(System.String,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)" -->
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns all the elements in the model that matches the given type.
            </summary>
            <typeparam name="TElement">The type element implements.</typeparam>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns>All the matching elements.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns elements that derive from the given type.
            </summary>
            <param name="classOrInterfaceType">The type returned elements must derive from.</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns>Elements that derive from the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns elements of a given type.
            </summary>
            <param name="elementClass">The class of the returned elements.</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns>Elements that derive from the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns all the elements in the model that matches the given type and the identifier as the name of the element.
            Since the identifier defines if the element is external or not, there is no GetExternalElements variation for this overload.
            </summary>
            <typeparam name="TElement">The type element implements.</typeparam>
            <param name="identifier">The name of the element.</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns>All the matching elements.</returns>        
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns elements with given identifier that derives from the given type.
            Since the identifier defines if the element is external or not, there is no GetExternalElements variation for this overload.
            </summary>
            <param name="identifier">Identifier</param>
            <param name="elementType">Element type</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            Returns elements with given identifier of a given class.
            Since the identifier defines if the element is external or not, there is no GetExternalElements variation for this overload.
            </summary>
            <param name="identifier">Identifier</param>
            <param name="elementClass">Element class</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.IsElementCreated(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementQueryFilter)">
            <summary>
            True if there are one or more matching elements.
            </summary>
            <param name="identifier">Identifier</param>
            <param name="elementClass">Element class</param>
            <param name="filter">A filter defining a subset of elements to be returned</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus)">
            <summary>
            This method returns all the elements in the store that has the given resolution status.
            </summary>
            <param name="status">The status.</param>
            <returns>The elements that match the criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementValidationStatus)">
            <summary>
            This method returns all the elements in the store that has the given validation status.
            </summary>
            <param name="status">The status.</param>
            <returns>The elements that match the criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementValidationStatus,System.Int32)">
            <summary>
            This method returns the elements determined by the count that has the given validation status.
            </summary>
            <param name="status">The status.</param>
            <param name="count">The number of elements asked.</param>
            <returns>The elements that match the criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus,System.Int32)">
            <summary>
            This method returns the elements determined by the count that has the given resolution status.
            </summary>
            <param name="status">The status.</param>
            <param name="count">The number of elements asked.</param>
            <returns>The elements that match the criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementsCount(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementResolutionStatus)">
            <summary>
            Returns the number of elements in the store that match the given status.
            </summary>
            <param name="status">The status.</param>
            <returns>The number of elements in the store that match the given status.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementsCount(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementValidationStatus)">
            <summary>
            Returns the number of elements in the store that match the given status.
            </summary>
            <param name="status">The status.</param>
            <returns>The number of elements in the store that match the given status.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.InstantiateElementFromResultSet``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.StorageResultSet,System.Int32)">
            <summary>
            Instantiate a model element from a result set.
            </summary>
            <typeparam name="TElement">Type of the element to be instantiated.</typeparam>
            <param name="rs">result set.</param>
            <param name="idColumn">column to treat as the element ID.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.InstantiateElementFromResultSet``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.StorageResultSet)">
            <summary>
            Instantiate a model element from a result set on the CoreElements table.
            </summary>
            <remarks>
            If you need to instantiate an element on the basis of some other sort of result set,
            call the overload which takes a column number instead.
            </remarks>
            <typeparam name="TElement">Type of the element to be instantiated.</typeparam>
            <param name="rs">result set on the CoreElements table.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.AddAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Adds an annotation to the model .
            </summary>
            <param name="annotation">The annotation to be added.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.RemoveAnnotation(Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation)">
            <summary>
            Removes an annotation from the model. 
            </summary>
            <param name="annotation">The annotation to be removed.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations">
            <summary>
            Returns all the annotations on the model.
            </summary>
            <returns>The annotations on the model.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all the annotations on the model that matches the given identifier as their name.
            </summary>
            <param name="identifier">The name for the annotation.</param>
            <returns>All the matching annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations``1">
            <summary>
            Returns all the annotations on the model that implements the given type.
            </summary>
            <typeparam name="TType">The type for annotation.</typeparam>
            <returns>All the annotations on the model that implements the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations(System.Type)">
            <summary>
            Returns all attached annotations that implement the given type.
            </summary>
            <returns>All attached annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all the annotations on the model that implements the given type and the identifier as their name.
            </summary>
            <typeparam name="TType">The type for annotation.</typeparam>
            <param name="identifier">The name for the annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type)">
            <summary>
            Returns all attached annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All attached annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations">
            <summary>
            Returns all annotations.
            </summary>
            <returns>All annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all annotations that are named with the given identifier.
            </summary>
            <returns>All annotations that are named with the given identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations``1">
            <summary>
            Returns all annotations that implement the given type.
            </summary>
            <returns>All annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations(System.Type)">
            <summary>
            Returns all annotations that implement the given type.
            </summary>
            <returns>All annotations that implement the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations``1(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns all annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetAllAnnotations(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,System.Type)">
            <summary>
            Returns all annotations that implement the given type and have the identifier as their name.
            </summary>
            <returns>All annotations that implement the given type and have the identifier as their name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.GetElementFromId``1(System.Int32)">
            <summary>
            Entrypoint in to internal model from the SchemaApi
            </summary>
            <typeparam name="T">type of model element which implements IModelElement</typeparam>
            <param name="elementId">ElementId</param>
            <returns>model element instance which implements IModelElement</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Dispose">
            <summary>
            Disposes the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Dispose(System.Boolean)">
            <summary>
            The implementation of dispose that can be overridden.
            </summary>
            <param name="disposing">Shows if disposing.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DisposeImpl(System.Boolean,System.String)">
            <summary>
            Separated dispose implementation to make calls from constructor safe
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateAnnotation(System.Type)">
            <summary>
            Creates an annotation of the given type.
            </summary>
            <param name="annotationType">The type to create</param>
            <returns>The created annotation</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.CreateNamedAnnotation(System.Type,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Creates an annotation of the given type with the given name.
            </summary>
            <param name="annotationType">The type to create</param>
            <param name="identifier">Name for the annotation</param>
            <returns>The created annotation</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ValidateWriteAccess">
            <summary>
            This method is called by model store methods that alter contents of the store other than annotations.
            The derived classes can control the access by overriding this method and throwing if the write is undesirable.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.TestWriteCount(System.Int32)">
            <summary>
            Tests the write count with the given value.
            </summary>
            <param name="writeCount">The value to be tested.</param>
            <returns>True if the tested values are equal.</returns>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.WriteCount">
            <summary>
            Returns the current write count.  Can be used by features to determine if any write operations 
            happened in the model store in a time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Attach(Microsoft.Data.Tools.Schema.SchemaModel.ModelSchema,Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms,System.String,System.Func{System.String,System.Boolean,System.Boolean})">
            <summary>
            Deserialize a ModelStore from a file.  The file will continue to be used by the new ModelStore.
            </summary>
            <param name="modelSchema">The schema of the model.</param>
            <param name="sqlPlatforms">The version of the SqlPlatform.</param>
            <param name="modelFilename">The file from which to deserialize.</param>
            <param name="progressReporter">Delegate for reporting progress. 
            First parameter describes the progress, second parameter is true if Attach() is still cancellable.
            Delegate should return true if cancellation was requested</param>
            <returns>A new ModelStore backed by the file, or null if Attach() was cancelled.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ModelStoreDeserializationBinder">
            <summary>
            Serialization binder class used for both ModelStore and ModelSchemaInfo
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.Detach(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore,System.String)">
            <summary>
            Serialize a ModelStore to disk and dispose of it.
            </summary>
            <param name="model">The ModelStore to serialize and dispose.</param>
            <param name="newModelFileName">The file to which the ModelStore will be persisted.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.UpdateSourceNamePrefixes(System.String,System.String)">
            <summary>
            @TODO comment
            </summary>
            <param name="oldSourceNamePrefix"></param>
            <param name="newSourceNamePrefix"></param>
        </member>
        <member name="E:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ModelChanged">
            <summary>
            Indicates changes that happen to elements like; addition, deletion, update.        
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.OnModelElementChanged(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.ModelEventType)">
            <summary>
            Called by the store operations to indicate what happened.
            </summary>
            <param name="element">The changed element.</param>
            <param name="type">The type of change.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.RaiseModelElementChanged(Microsoft.Data.Tools.Schema.SchemaModel.ModelEventArgs)">
            <summary>
            Raises the model element changed.
            </summary>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.DwTablesWithIndexChanges">
            <summary>
            Dw table is added in to this set when we have a IndexType change on Dw table
            Possible cases: Heap-CCI, Heap-CI, CCI-CI, CI-CCI, CCI-Heap, CI-Heap
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.DropCCIforDwTables">
            <summary>
            Indexes are added in to this set to generate Drop CCI when there is Alter on column with
            Large Data Type. Possible cases: nvarchar-> char, Date->nvarchar
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.CreateCCIforDwTables">
            <summary>
            Indexes are added in to this set to generate Create CCI when there is Alter on column with
            Large Data Type. Possible cases: nvarchar-> char, Date->nvarchar
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.largeDataTypes">
            <summary>
            List of large DataTypes
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.IsSystemGeneratedDwIndex(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            Returns whether the given model element is a system generated index for Dw platform.
            </summary>
            <param name="element">An element of type IModelElement. 
            For e.g. Any element that could be related to a Table like SqlIndex, SqlConstraint, SqlColumnStoreIndex, etc.</param>
            <returns>True if index has system generated name else false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.IsSystemGeneratedDwConstraint(System.String)">
            <summary>
            When Dw table with unnamed table constraint (PRIMARY KEY or UNIQUE KEY) is created on the server, the specified constraint is created
            with system generated name like Cnstr_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX. Check the pattern of constraint name to identify if it is system
            generated name.
            </summary>
            <param name="name">Constraint name.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.IsHeapIndexOnDwTable(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method returns if the element is heap index or not
            For Dw table if inline index is Heap, no index should be created.
            </summary>
            <param name="element">Object of type IModelElement</param>
            <returns>True if element is heap else false</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DwTableHelper.IsCCIWithOrderedColumns(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement)">
            <summary>
            This method returns if the element is cci with ordered columns or not
            </summary>
            <param name="element">Object of type IModelElement</param>
            <returns>True or else false</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ElementCache">
            <summary>
            This class assumes the store lock is held when this class is called.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ExternalPartsDictionaryKey">
            <summary>
            Used as the key in the dictionary to always compare equal and get the hash code right.
            The ExternalReferenceParts has the objects default behavior, to behave same only per model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.HierarchyHelper">
            <summary>
            This helper class is used to help getting model elements
            and children in hierarchical order
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.HierarchyHelper.CompileRelationships(System.Collections.Generic.IDictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelRelationshipEntry}}})">
            <summary>
            Cached relationships are immutable and so must be built 'inside out' with all their entries already in place.
            We get relationshipentries one at a time from the query, so this method compiles those results into IModelRelationships.
            </summary>
            <param name="tempEntries"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.HierarchyHelper.GetAllChildren(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.SchemaModel.IModelElement}@)" -->
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ElementResultRow">
            <summary>
            Helper class to store query result row for elements
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ChildResultRow">
            <summary>
            Helper class to store query result row for children
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.ExternalTableRelationshipEntryComparer">
            <summary>
            External table comparer is added since any change in the relationship elements needs dropping and recreateing of the external table
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.InMemoryRelationshipEntry.#ctor(Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.HierarchyHelper,System.Int32,Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Int32)">
            <summary>
            The constructor.
            The referenceId is used to get equality right.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.SerializationHelper">
            <summary>
            Provides access to Store internals...
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.SerializationHelper.PopulateAnnotationAttachmentCounts(System.Collections.Generic.Dictionary{Microsoft.Data.Tools.Schema.SchemaModel.IModelAnnotation,System.Int32})">
            <summary>
            Returns list of unattached annotation, populates annotation attachment counts
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.SourceNameMapper">
            <summary>
            Translates 'source name' external representation into internal, and back
            Translation performed to avoid problems with collation-based comparisons in SQL CE
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.TypeInfo">
            <summary>
            Describes various properties of a type supported by a Model Store
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.EncodeIdentifier(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier)">
            <summary>
            Returns a string representation of the identifier,
            encoded with appropriate quotation and separator characters to demarcate its parts.
            </summary>
            <param name="identifier">The identifier to encode</param>
            <returns>A normalized string representation of the identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DecodeIdentifier(System.String)">
            <summary>
            Returns an identifier corresponding to a string in normalized form.
            </summary>
            <param name="encodedIdentifier">The string to parse.</param>
            <returns>The identifier corresponding to the string.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStore.DecodeIdentifier(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Returns internal parts and external parts corresponding to a string in normalized form.
            </summary>
            <param name="encodedIdentifier">The string to parse.</param>
            <param name="externalParts">The external parts corresponding to the string.</param>
            <param name="internalParts">The internal parts corresponding to the string.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelStoreSerializationContext.Dispose">
            <summary>
            Clears the context of any data to free up memory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ModelTranslationValidator.ValidationContext.HandleUnsupportedElementError(System.String,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Int32,System.Object[])">
            <summary>
            Looks up element name and passes it as the first argument ({0}) to string.Format, followed by the contents of args.
            </summary>
            /// <param name="format">A format string that takes at least one argument. The element name will be used as the first argument ({0}).</param>
            <param name="element">An unsupported model element.</param>
            <param name="args">The additional arguments to the format string.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerExtensionMethods.PopulateBaseTypes(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Creates a new model with the following types populated:
                SqlType
                ISql90XmlSchemaCollection
                ISqlFileGroup
                ISql90PartitionScheme
                ISql90PartitionFunction
                SqlDatabaseOptions
            </summary>
            <remarks>This method should be called on a model before calling Populate.</remarks>
            <param name="reverseEngineer">The SqlReverseEngineer instance to call the method on</param>
            <param name="context">Database connection for Reverse Engineer operation to use</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>      
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerExtensionMethods.PopulateChildren``2(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
             Adds Elements of the specified type that are a child of the element with the specified ModelIdentifier.
            </summary>
            <typeparam name="TParentType">The parent type of model elements to add to the model</typeparam>
            <typeparam name="TChildType">The type of model elements to add to the model</typeparam>
            <param name="reverseEngineer">The ReverseEngineer instance to call the method on</param>
            <param name="conn">Database connection for Reverse Engineer operation to use</param>
            <param name="parent">The parent element</param>
            <param name="model">The model instance to add elements to</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerExtensionMethods.PopulateElements``1(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Add all model elements of the specified type to the model
            </summary>        
            <typeparam name="T">The type of model elements to add to the model</typeparam>
            <param name="reverseEngineer">The ReverseEngineer instance to call the method on</param>
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="model">The model instance to add elements to</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>        
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerExtensionMethods.PopulateElement``1(Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Add all model elements of the specified type to the model
            </summary>        
            <typeparam name="T">The type of model elements to add to the model</typeparam>
            <param name="reverseEngineer">The ReverseEngineer instance to call the method on</param>
            <param name="context">Database connection for Reverse Engineer operation to use</param>
            <param name="model">The model instance to add elements to</param>
            <param name="identity">The identity of the model element to return</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>     
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerExtensionMethods.ImportDatabase(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineer,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Boolean)">
            <summary>
            Creates a model and populates it with all the elements from the database.
            </summary>
            <param name="reverseEngineer">The ReverseEngineer instance to call the method on</param>
            <param name="context">Database connection for Reverse Engineer operation to use</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
            <param name="filterManagementScopedElements">If true, only application scoped elements are imported</param>
            <param name="populateReferencedServerScopedElements">If true any referenced server level objects will also be imported</param>
            <param name="trimDanglingReferencesOnServerScopedElements">If true and populateReferencedServerScopedElements is true then remove any dangling refernces on server scoped objects</param>
            <param name="removeUnReferencedServerObjects">If true and <paramref name="populateReferencedServerScopedElements"/> is true then any un-referenced server objects are removed from the model</param>
            <param name="modelStorageType">Model storage type</param>
            <param name="removeUnreferencedDbCredential">If true with filterManagementScopedElements removes unreferenced db scoped credentials</param>
            <returns>Populated model</returns>
            <remarks>
                This method extends the standard import and allows retrieving referenced server objects. This only applies if the target database is not master.        
                These server level objects include:
                    <ul>
                        <li>SqlLogins referenced by SqlUsers.</li>
                        <li>SqlServerAudits referenced by SqlAuditSpecifications.</li>
                        <li>SqlCredential referenced by SqlLogins</li>
                    </ul>
                    
                The following elements have any dangling referenced removed so the model resolves without errors:
                <ul>
                    <li>SqlLogin</li>
                    <li>SqlServerAudit</li>
                    <li>SqlDatabaseEncryptionKey</li>
                </ul>
                
                This method extends the standard import and allows retrieving database and non application scoped elements like Master keys and database scoped credentials
            If the target database is the master database then all objects, Server and Database, are imported regardless of the values of populateReferencedServerScopedElements. Also
            when the target database is master the trimDanglingReferencesOnServerScopedElements value is ignored and NO references are trimmed.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer">
            <summary>
            The component used to create a new DataSchemaModel, and populate the DataSchemaModel
            with schema objects from source database 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.ReverseEngineerErrorCategory">
            <summary>
            The category in which ReverseEngineer errors should be reported to the ErrorManager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.CreateEmptyModel(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType,System.Boolean)">
            <summary>
             Create an empty model instance
            </summary>
            <param name="context">Connection context to retrieve default model values</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
            <param name="optimizeForQuery">Initial state for model indexes</param>
            <param name="isMsdb">Whether the DB is "msdb"</param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.PopulateElements(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="type">The type of model elements to add to the model</param>
            <param name="model">The model instance to add elements to</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.PopulateElement(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Adds the specified model element to the model
            </summary>
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="type">The type of model elements to add to the model</param>
            <param name="model">The model instance to add elements to</param>
            <param name="identity">The identity of the model element to return</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.PopulateChildren(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,System.Type,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
             Adds Elements of the specified type that are a child of the specified parent element
            </summary>
            <param name="conn">Database context for Reverse Engineer operation to use</param>
            <param name="parentType">The parent type of model elements to add to the model</param>
            <param name="parent">The parent element</param>
            <param name="childType">The type of model elements to add to the model</param>
            <param name="model">The model instance to add elements to</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.PopulateAll(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineerOption,Microsoft.Data.Tools.Schema.ErrorManager,System.Boolean,Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlImportScope,System.Boolean,Microsoft.Data.Tools.Schema.SchemaModel.ModelStorageType)">
            <summary>
            Populate a new model from a database.
            </summary>
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="option">Options for what related elements are populated</param>
            <param name="errorManager">Errors will be reported to this ErrorManager</param>
            <param name="filterManagementScopedElements">If true, only application scoped elements are imported</param>
            <param name="importScope">Defines which elements should be populated</param>
            <returns>New model instance</returns>        
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.WarmupDatabase(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager)" -->
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.CanQueryServerLevelObjects(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager,System.Nullable{Microsoft.Data.Tools.Schema.ErrorSeverity})">
            <summary>
            Returns if the current user has enough permissions to query server scoped elements
            when permissions enforced.
            </summary>
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="errorManager">ErrorManager to report errors</param>
            <param name="severity">The severity to use when reporting errors</param>
            <returns>True if the current user has required permissions</returns>
            <remarks>
            A null value for severity means no validation errors are report.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ReverseEngineer.CanQueryDatabaseLevelObjects(Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlReverseEngineerConnectionContext,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Returns if the current user has enough permissions to query database scoped elements
            when permissions enforced.
            </summary>
            <param name="context">Database context for Reverse Engineer operation to use</param>
            <param name="errorManager">ErrorManager to report errors</param>
            <returns>True if the current user has required permissions</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache">
            <summary>
            Used to access ElementSource given a model element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.AllCacheIdentifiers">
            <summary>
            Returns all the loaded cache identifiers.
            </summary>
            <returns>All the loaded cache identifiers.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.AddOrUpdate(Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData,Microsoft.Data.Tools.Schema.SchemaModel.CustomSchemaData@)">
            <summary>
            Tracks custom data (like references)
            </summary>
            <param name="customSchemaData"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.AddOrUpdateScript(Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle)">
            <summary>
            Adds a file to the DataSchemaModel, or updates the one that is existing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.IsScriptChanged(Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle)">
            <summary>
            This will return true if the script and it's metadata last processed by the 
            cache represent the specified version.
            </summary>
            <param name="externalNameParts">The external name parts</param>
            <param name="taskItem"></param>
            <returns>True if the task item is unchanged</returns>
            <exception cref="!:SecurityException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetScript(System.String)">
            <summary>
            Returns the script for the given cache identifier.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <returns>The script for the given cache identifier.</returns>
            <summary>
            Returns the script for the given cacheIdentifier.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <returns>The script for the given cache identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.TryGetScriptSize(System.String,System.Int32@)">
            <summary>
            Returns the size of the given identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetScript(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the part of the script that is defined by the start offset and length in the given file.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="startOffset">The start offset in file in characters.</param>
            <param name="length">The length.</param>
            <returns>The partial script.</returns>
            <summary>
            Returns the part of the script that is defined by the start offset and length in the given file.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <param name="startOffset">The start offset in file in characters.</param>
            <param name="length">The length.</param>
            <returns>The partial script.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.ContainsCacheIdentifier(System.String)">
            <summary>
            Returns true if the given cache identifier is in the script cache.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <returns>True if the given cache identifier is in the script cache.</returns>
            <summary>
            Returns true if the given cache identifier is in the script cache.
            </summary>
            <param name="cacheIdentifier">The cache identifier.</param>
            <returns>True if the given cache identifier is in the script cache.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GenerateUniqueCacheIdentifier">
            <summary>
            Returns a unique identifier that can be used with the cache.
            </summary>
            <returns>A unique identifier that can be used with the cache.</returns>
            <summary>
            Returns a unique identifier that can be used with the cache.
            </summary>
            <returns>A unique identifier that can be used with the cache.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetAllCustomSchemaDataFileNames">
            <summary>
            Returns all loaded custom schema data filenames which contain a metadata of "FileName"
            </summary>
            <returns>All the file-based CustomSchemaDatas</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetMetadata(System.String)">
            <summary>
            Gets metadata associated with a cache entry.
            Throws if there is no such metadata.
            </summary>
            <param name="cacheIdentifier">The identifier of the cache entry</param>
            <returns>Metadata associated with that entry.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.TryGetMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Gets metadata associated with a cache entry, or returns false if there is no such metadata.
            </summary>
            <param name="cacheIdentifier">The identifier of the cache entry</param>
            <param name="metadata">Metadata associated with that entry, or null if there is no such metadata.</param>
            <returns>True if metadata was found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.RemoveCustomSchemaData(System.String)">
            <summary>
            Removes custom data to the schema manager (like references)
            </summary>
            <param name="fullPathFilename">The full path to the custom schema data file to remove</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.DeleteScript(System.String)">
            <summary>
            Deletes a file from DataSchemaModel.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.CanonicalizeIdentifier(System.String)">
            <summary>
            Canonicalizes the filename for lookup in the cache
            </summary>
            <param name="fileName">The filename</param>
            <returns>The canonical form of the filename</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.FixupAfterDeserialization(System.String,System.String)">
            <summary>
            Called to return object state after deserialization.  This method handles the
            possibility that deserialization may be occuring in a different directory than the
            one serialize to.
            </summary>
            <param name="oldPath"></param>
            <param name="newPath"></param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetCustomSchemaDataWithMatchingFilename(System.String)">
            <summary>
            Returns the custom schema data which is already in the model matching the
            full file path argument.
            </summary>
            <param name="fullFilePath"></param>
            <returns>The custom schema data currently in the model or null</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetCustomSchemaDataWithMatchingFilename(System.String,System.Byte[]@)">
            <summary>
            Returns the custom schema data which is already in the model matching the
            full file path argument.
            </summary>
            <param name="fullFilePath"></param>
            <param name="hashValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.RemoveCustomSchemaDataWithMatchingFilename(System.String)">
            <summary>
            Removes the custom schema data which is already in the model matching the
            full file path argument.
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.GetCustomSchemaDataWithMatchingFilenameImpl(System.String,System.Boolean,System.Byte[]@)">
            <summary>
            Returns the custom schema data in our cache and, optionally, removes it.
            </summary>
            <param name="fullFilePath"></param>
            <param name="remove"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.IsScriptHandleChangedImpl(Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle,System.Boolean)">
            <summary>
            This will return true if the specified script is different from the
            one in the cache
            </summary>
            <param name="taskItem">The filename and metadata</param>
            <param name="updateCache">Should we update the cache with the calculated hash value?</param>
            <returns>True if the script is unchanged</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.IsScriptChangedImpl(Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle,System.Boolean)">
            <summary>
            Determines if the script does not exist or has been changed from the cached version.
            </summary>
            <param name="cacheIdentifier"></param>
            <param name="updateCache">Should we update the cache with the calculated hash value?</param>
            <returns>True if the script does not exist or has changed</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.RemoveFromCustomMetadataCache(System.String)">
            <summary>
            Remove all metadata from a cache entry.
            </summary>
            <param name="canonicalFileName">The identifier of the cache entry.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.ThrowIfDisposed">
            <summary>
            Helper that throws if the cache was disposed of
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.AddToCustomMetadataCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the metadata associated with a cache entry.
            </summary>
            <param name="canonicalFileName">The identifier of the cache entry.</param>
            <param name="customMetadata">The metadata to add.  If the entry had metadata already, it will be replaced.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.IsCustomMetadataCacheChanged(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Returns true if the custom metadata associated with a cache entry matches that given.
            </summary>
            <param name="canonicalName">The identifier of the cache entry.</param>
            <param name="taskItemMetadata">The metadata to compare against.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCache.CheckGetScriptArguments(System.Int32,System.Int32)">
            <summary>
            Ensures that the offsets given are both non-negative.
            Throws ArgumentOutOfRangeException if not.
            </summary>
            <param name="startOffset">The start offset to check.</param>
            <param name="length">The length to check.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCacheException.#ctor">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCacheException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCacheException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomGeneratorException">
            <summary>
            Exception thrown when an error occurs during ScriptDom generation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.String)">
            <summary>
            Construct ScriptDomGeneratorException with exception message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct ScriptDomGeneratorException with exception message and inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptDomOperation">
            <summary>
            Enum indicates which operation to take when calling ScriptDom Generator
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle">
            <summary>
            This class represents a script that could be sourced from a variety of different locations
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.#ctor(System.String,System.String,Microsoft.Data.Tools.Schema.Common.CachedString.ScriptCacheStyle)">
            <summary>
            Class can only be constructed through factory
            </summary>
            <param name="cacheId"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.PossibleObjectMetadata">
            <summary>
            The metadata that can be used to decorate objects and affect how they are built
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.Create(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Data.Tools.Schema.Common.CachedString.ScriptCacheStyle)">
            <summary>
            Factory method to create a script handle from a script
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.Create(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Data.Tools.Schema.Common.CachedString.ScriptCacheStyle)">
            <summary>
            Factory to create a script handle from a text reader
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.Create(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Factory to create a script handle from a MSBuild item.  Custom metadata from the item is used
            to populate the metadata on the handle.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a script handle based on full path and the project item (design-time object)
            used to provide metadata to decorate the handle
            </summary>
            <param name="fullFilePath"></param>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.CacheId">
            <summary>
            The canonicalized cacheId for this handle
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.HasMetadata">
            <summary>
            Returns true if this handle has any metadata associated with it
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.AddMetadata(System.String,System.String)">
            <summary>
            Adds metadata to the handle.  This method determines whether the
            metadata is object or handle and adds it to the correct dictionary
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.RetrieveObjectMetadata">
            <summary>
            Returns the metadata current set on 
            the handle that affects processing of the script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.RetrieveHandleMetadata">
            <summary>
            Retrieves metadata about the cache item itself but not metadata that decorates the
            objects in the script and affects their processing by the model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.ComputeHash">
            <summary>
            Generates a byte[] containing the hashcode of the script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.OpenReader">
            <summary>
            Returns the script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.GetCachedScript">
            <summary>
            Returns the cached script as an optimization when the script handle
            is added to the script cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandle.CreateHandleFromFile(System.String)">
            <summary>
            Helper method to encapsulate exception handling that
            can occur when interacting with the file system
            </summary>
            <param name="cacheId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.ScriptHandleCreationException">
            <summary>
            Thrown when an error occurs during script handle creation
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.Abstract.ExternalSourceAnnotation">
            <summary>
            An annotation which tracks the source file for externally-defined elements.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.SchemaModel.Abstract.ExternalReferenceAnnotation">
            <summary>
            An annotation used to disambiguate references between ElementClasses during model serialization.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ServiceConstructor">
            <summary>
            This class is the base class for a ServiceConstructor.  It is here to be able to define a
            template parameter without specifying the actual service that is expected from the constructor.
            Client code is not expected to derive directly from this class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.ServiceConstructor.DatabaseSchemaProvider">
            <summary>
            DatabaseSchemaProvider reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.ServiceConstructor`1">
            <summary>
            This class is a service constructor.  It is used to gather properties that will be used at construction.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ServiceConstructor`1.ConstructService">
            <summary>
            This is called by the client code.  It disposes itself when it's called.
            Client code is expected to implement the impl. version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ServiceConstructor`1.ConstructServiceImplementation">
            <summary>
            Implemented by inheritors to return actual service instance
            </summary>
            <returns>Constructed service instance</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.ServiceConstructor`1.Clone">
            <summary>
            Clones service constructor. Default implementation constructs new instance, but only clones members in the base class, inheritors should call base.Clone, then apply copies for its fields.
            </summary>
            <returns>Cloned copy of the service constructor.</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.UserInteractionServices">
            <summary>
            Helper class to provide <see cref="P:Microsoft.Data.Tools.Schema.UserInteractionServices.DatabaseSchemaProvider"/> related UI information.
            </summary>
            <remarks>
            The term "user interaction" in this case refers to both graphical UI, command line UI, and non UI related user interaction, such as the
            declaration of valid source extensions, etc. 
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails">
            <summary>
            Property bag for deciding how to format element names
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails.Style">
            <summary>
            The Style for the name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails.EscapeStyle">
            <summary>
            Escape style, the name should be escaped, not escaped, or escaped only when necessary
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails.FullName">
            <summary>
            Indicates if the name is constructed in full or only the significant last part is used.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails.IncludeType">
            <summary>
            Indicates if the type of the element is included.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails.NumberOfPartsToSkip">
            <summary>
            Number of parts from beginning that will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.Unnamed">
            <summary>
            Used for objects that are not named.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.DatabaseSchemaProvider">
            <summary>
            DSP related for this UserInteractionServices.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.DatabaseSchemaProviderDisplayName">
            <summary>
            Get Dsp display name
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.BatchSeparator">
            <summary>
            The keyword that's used to denote the end of a batch.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Tools.Schema.UserInteractionServices.DisplayableElementClasses">
            <summary>
            Returns the list of element classes that should be displayed by the user interface components.
            </summary>
            <returns>The list of element classes that should be displayed by the user interface components.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Get element name string using different display style.
            </summary>
            <param name="element"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Tools.Schema.ElementNameStyle)">
            <summary>
            Get element name string using different display style.
            </summary>
            <param name="id">Model identifier.</param>
            <param name="elementClass">Element class.</param>
            <param name="style">Element name style.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetElementTypeDescription(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get element type description
            </summary>
            <param name="elementClass">The element type</param>
            <returns>The description of that element type.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetEscapedNameString(System.String)">
            <summary>
            Pass in a short name string, return back an escaped version of the name string.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.NeedEscape(System.String)">
            <summary>
            Pass in a string, return back a boolean to indicate whether the escape is needed
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetFolderName(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get folder name for certain StoreElement type.
            Such as Tables, Views, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetFileExtension(Microsoft.Data.Tools.Schema.SchemaModel.ModelElementClass)">
            <summary>
            Get file extension for certain StoreElement type.
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetRelatedElementTypeDescription(Microsoft.Data.Tools.Schema.SchemaModel.ModelRelationshipClass)">
            <summary>
            Get the description of related element type of a relationship
            </summary>
            <param name="relationship">The RelationshipClass</param>
            <returns>Type description.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.UserInteractionServices.ElementNameDetails)">
            <summary>
            Gets the name of an element.
            </summary>
            <param name="element">The element.</param>
            <param name="details">Information about how to display the name.</param>
            <returns>The name of an element</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Tools.Schema.SchemaModel.IModelElement,Microsoft.Data.Tools.Schema.EscapeStyle,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets the name of an element.
            </summary>
            <param name="element">The element.</param>
            <param name="escapeStyle">Escape style.</param>
            <param name="fullName">Indicates if the name is constructed in full or only the significant last part is used.</param>
            <param name="allowUnnamed">false to replace use classname for unnamed elements</param>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetDisplayName(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.EscapeStyle,System.Boolean)">
            <summary>
            Get display name of an identifier with specified to get escape character on the name
            or get full name or short name.
            </summary>
            <param name="identifier">The name identifier that can contain multiple parts.</param>
            <param name="escapeStyle">Escape style</param>
            <param name="fullName">Indicates if the name is constructed in full or only the significant last part is used.</param>
            <returns>Display name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetDisplayName(Microsoft.Data.Tools.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Tools.Schema.EscapeStyle,System.Boolean,System.Int32)">
            <summary>
            Get display name of an identifier with specified to get escape character on the name
            or get full name or short name.
            </summary>
            <param name="identifier">The name identifier that can contain multiple parts.</param>
            <param name="escapeStyle">Escape style</param>
            <param name="fullName">Indicates if the name is constructed in full or only the significant last part is used.</param>
            <param name="numberOfPartsToSkip">Number of parts from beginning that will be skipped.</param>
            <returns>Display name.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetNameString(System.String,Microsoft.Data.Tools.Schema.EscapeStyle)">
            <summary>
            Escapes a given name if necessary.
            </summary>
            <param name="name">The name.</param>
            <param name="escapeStyle">Escape style.</param>
            <returns>The escaped name if the escape value was true, original name otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.GetModelCollation(System.Int32,System.Boolean)">
            <summary>
            Convert lcid to ModelCollation.
            </summary>
            <param name="lcid"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Tools.Schema.UserInteractionServices.TryConstructConnectionStringAndProvider(System.String,System.String,System.String@)">
            <summary>
            Used to get the connection string and the guid of the provider
            This information is used to add the connection to the server explorer
            Returns true if it was able to construct the connection string and get the correct Guid
            Else, returns false
            </summary>
            <returns>True if it was able to construct the connection string and get the correct Guid</returns>
        </member>
        <member name="T:Microsoft.Data.Tools.Schema.VersionInformation">
            <summary>
            This class should be used in managed code to access the assembly version of the product.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties">
            <summary>
            Defines properties to use when creating an ExtensionManager. These include catalogs and export providers to use,
            what TSqlPlatform compatibility to specify, whether to use the default catalog.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.UseDefaultCatalog">
            <summary>
            Should the default catalog be used for composition? This searches well known locations
            for extensions. Defaults to true
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.AssemblyLookupPath">
            <summary>
            Semicolon delimited path specifying directories and assembly locations which
            should be searched for exports.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.Catalogs">
            <summary>
            Catalogs to be used during composition
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.Providers">
            <summary>
            ExportProviders to be used during composition.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.PlatformCompatibility">
            <summary>
            Platform compatibility level. Will filter exports based on this if defined. A 0 value
            or TSqlPlatformCompatibility.All indicates no filtering should happen
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.PartCreationPolicy">
            <summary>
            Defines the creation policy  
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.#ctor">
            <summary>
            The default properties allow any SQL Server version and the default catalog
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.#ctor(Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility,System.String)">
            <summary>
            Constructs a properties object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.#ctor(Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility,System.String,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog},System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Hosting.ExportProvider[])">
            <summary>
            Constructs a properties object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.AddCatalogs(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
            <summary>
            Adds catalogs to the extensions probe list
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.AddCatalog(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Adds a catalog to the extensions probe list
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties.ShouldFilterByPlatformCompatability">
            <summary>
            Returns true if the properties should filter by SQL Server version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DacExtensionHelper.CreateStandardExtensionProperties">
            <summary>
            Creates a standard CompositionProperties object defining where to look for extensions. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DacExtensionHelper.GetUserExtensionsInstallDirectories">
            <summary>
            Returns the directories where user extensions can be added
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DacExtensionHelper.TryGetVsExtensionDirectory(System.String@)">
            <summary>
            Returns the Extensions directory under Visual Studio this assembly
            filename is installed under VS.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DacExtensionHelper.ConvertToDataSchemaError(Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError)">
            <summary>
            Converts an ExtensibilityError to a DataSchemaError
            </summary>
            <param name="error"></param>
            <returns>DataSchemaError</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DacExtensionHelper.IsValidExtensionIdentifier(System.String)">
            <summary>
            Used to validate an identifier that gets persisted as a property value in DacOrigin and/or
            used as a folder/stream name inside the DAC package (i.e. contributor id, contributor configuration stream name)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IDependencyManager">
            <summary>
            Provides functionality to discover services and providers that exported to the extension manager.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.IDependencyManager.GetServiceDescriptors``1">
            <summary>
            Returns the list of service descriptors for given type and metadata
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.DependencyManager">
            <summary>
            Provides functionality to discover services and providers that exported to the extension manager.
            </summary>   
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.#ctor(Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties)">
            <summary>
            Uses the given properties to initialize the loadres
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.GetServiceDescriptors``1">
            <summary>
            Returns the list of service descriptors for given type and metadata
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.Initialize">
            <summary>
            Initializes the loaders
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.GetService``1">
            <summary>
            Returns the service for specific type with the highest priority
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.GetService``1(System.Func{System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>
            Returns the service for specific type with the highest priority
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.GetAllServiceDescriptors``1">
            <summary>
            Retrurns all services for given type 
            </summary>        
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.DependencyManager.GetLoader``1">
            <summary>
            Returns the loaders for given type
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute">
            <summary>
            Attribute defining a service export, and the metadata about that service. Implements IServiceMetadata,
            which should be used on the importer side to ensure type consistency. Services and providers have to add this property 
            in order to be found by the extension manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.#ctor(System.Type,System.String,System.Int32,System.String,Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility)">
            <summary>
            Default constructor to initialize the metadata of the exportable
            </summary>
            <param name="type">The type of the exportable to be used by the extension manager to find the exportable</param>
            <param name="id">The unique id of the exportable. Used by the extension manager to pick only one from exportables with same id in the same assembly</param>
            <param name="priority">The priority of the exportable. The extension manager will pick the exportable with the highest priority if multiple found</param>
            <param name="displayName">The display name of the exportable. This field is optional</param>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.PlatformCompatibility">
            <summary>
            Which platform is this extension valid for
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.Version">
            <summary>
             The version of this extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.Id">
            <summary>
            The id of the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.DisplayName">
            <summary>
            The display name for the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute.Priority">
            <summary>
            priority of the extension. Can be used to filter the extensions if multiple found
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportableBase">
            <summary>
            The base class for all exportable classes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableBase.Metadata">
            <summary>
            The exportable metadata
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableBase.DependencyManager">
            <summary>
            Gets or sets the dependency manager to provider the dependencies of the class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportableBase.GetService``1">
            <summary>
            Finds a service of specific type which has the same metadata as class using the dependency manager.
            If multiple services found, the one with the highest priority will be returned
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <returns>A service of type T or null if not found</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportableBase.GetService``1(Microsoft.SqlServer.Dac.Extensibility.IExportableMetadata)">
            <summary>
            Finds a service of specific type which has the same metadata as class using the dependency manager.
            If multiple services found, the one with the highest priority will be returned
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <returns>A service of type T or null if not found</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableBase.Trace">
            <summary>
            An instance of ITrace which is exported to the extension manager
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1">
            <summary>
            Describes a service discovered by the service and supports configuration of its properties.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.DisplayName">
            <summary>
            Display name describing the service.
            
            This is automatically read from the <see cref="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.Metadata"/> property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.Exportable">
            <summary>
            The actual instance of the <typeparamref name="T"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.Metadata">
            <summary>       
            This is a required property that must be defined by subclasses.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.MatchMetaData(System.String,System.String)">
            <summary>
            Returns true if the metadata value matches the given value
            </summary>   
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor`1.ExportableId">
            <summary>
            Id assigned to the service
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptorImpl`1.Exportable">
            <summary>
            The actual instance of the <typeparamref name="T"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptorImpl`1.Metadata">
            <summary>
            The metadata for the service
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportableStatus">
            <summary>
            Includes the status of the exportable. If it failed to load and any error message
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableStatus.LoadingFailed">
            <summary>
            Returns true if the loading of the exportable failed
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableStatus.ErrorMessage">
            <summary>
            An error message if the loading failed
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportableStatus.InfoLink">
            <summary>
            An info link to navigate to 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IStore`1">
            <summary>
            A ServiceStore that stores services and their metadata. Services are accessible in their original form
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.IStore`1.GetDescriptors(System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Gets the Code Analysis services and their metadata wrapped inside ServiceDescriptorImpl objects. The EngineProperties are used to
            filter services by platform and to run a service descriptor updater (if present), which can flag the service as enabled/disabled
            and update the severity 
            </summary>
            <param name="errors">Errors found while processing services - are there duplicate services or services that do not include required metadata</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportableStore`1">
            <summary>
            For now only ISqlCodeAnalysisService is supported via MEF - can change in the future if other service types are required.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportableStore`1.GetDescriptors(System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Gets the Code Analysis services and their metadata wrapped inside ServiceDescriptorImpl objects. The EngineProperties are used to
            filter services by platform and to run a service descriptor updater (if present), which can flag the service as enabled/disabled
            and update the severity 
            </summary>
            <param name="errors">Errors found while processing services - are there duplicate services or services that do not include required metadata</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute">
            <summary>
            Base attribute class for all export definitions. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute.#ctor(System.Type,Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility,System.String,System.String)">
            <summary>
            Base class for DAC extensibility exports
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute.PlatformCompatibility">
            <summary>
            Which platform is this extension valid for
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute.Version">
            <summary>
            The version of this extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute.Id">
            <summary>
            The id of the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExportStandardMetadataAttribute.DisplayName">
            <summary>
            The display name for the extension
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError">
            <summary>
            Represents an error message coming from the extensibility layer
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Exception">
            <summary>
            Exception associated with the error, or null
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Severity">
            <summary>
            Severity of this error
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Document">
            <summary>
            The source document for the error, if defined.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.ErrorCode">
            <summary>
            An error code identifying the error, if defined.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Line">
            <summary>
            Line Number of the error, if defined.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.Column">
            <summary>
            Column Number of the error, if defined.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.#ctor(System.String,Microsoft.SqlServer.Dac.Extensibility.Severity)">
            <summary>
            Constructs an extensibility error
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.#ctor(System.String,System.Exception,System.Int32,Microsoft.SqlServer.Dac.Extensibility.Severity)">
            <summary>
            Constructs an extensibility error
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.#ctor(System.String,System.Exception,System.String,System.Int32,System.Int32,System.Int32,Microsoft.SqlServer.Dac.Extensibility.Severity)">
            <summary>
            Constructs an extensibility error
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError.CreateExtensibilityError(System.String,System.Object[])">
            <summary>
            Creates an extensibility error with default severity of Warning
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.Severity">
            <summary>
            The error level of an ExtensibilityError
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.Severity.Unknown">
            <summary>
            Unknown level of severity
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.Severity.Error">
            <summary>
            Represents an error in the extension manager
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.Severity.Warning">
            <summary>
            This severity is a warning coming from the extension manager
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.Severity.Message">
            <summary>
            Used as a verbose message to track status
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.InvalidLookupPath">
            <summary>
              Looks up a localized string similar to Path [{0}] is not a valid directory or assembly..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.InvalidVersion">
            <summary>
              Looks up a localized string similar to Extension &apos;{0}&apos; in assembly &apos;{1}&apos; was ignored because it has an invalid version &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.MissingDisplayName">
            <summary>
              Looks up a localized string similar to Extension &apos;{0}&apos; in assembly &apos;{1}&apos; was ignored because it is missing a DisplayName..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.MissingId">
            <summary>
              Looks up a localized string similar to Extension &apos;{0}&apos; in assembly &apos;{1}&apos; was ignored because it is missing an ID..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.NotSupportedMetadata">
            <summary>
              Looks up a localized string similar to Extension &apos;{0}&apos; in assembly &apos;{1}&apos; was ignored because it&apos;s metadata is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.UnloadableExtensionErrorMessage">
            <summary>
              Looks up a localized string similar to Two or more extensions were ignored because they have the same namespace and identifier (ID, assembly):.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.UnloadableExtensionList">
            <summary>
              Looks up a localized string similar to &lt;{0}, {1}&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensibilityResources.VersionMismatch">
            <summary>
              Looks up a localized string similar to Extension with ID &apos;{0}&apos; could not be loaded as its version &apos;{1}&apos; is incompatible with required version &apos;{2}&apos;. .
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.#ctor(System.Lazy{`0,`1})">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.ExtensionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.ExtensionAssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.GetExtensionType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.GetExtensionAssembly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.HasVersionInfo">
            <summary>
            Is there some Versioning information for this extension
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor`2.IsExtensionVersionCompatible(System.Version)">
            <summary>
            The extension version is compatible with an expected version if
            it has a valid version, the major revision is the same, and the minor
            version is equal to or greater than the expected minor version.
            Hence an extension with version "2.1.0.0" is compatible with
            version "2.0.0.0" and version "2.1.2.3", but is not compatible with
            "1.0.0.0" or "2.2.0.0".
            </summary>
            <param name="expectedMinVersion"><see cref="T:System.Version"/> to check for compatibility against. </param>
            <returns>true if extension is compatible</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionLoader`1">
            <summary>
            Loads the services of specific type using the given catalogs
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionLoader`1.SetServiceStoreFactory(Microsoft.SqlServer.Dac.Extensibility.IExtensionStoreFactory{`0})">
            <summary>
            For testing purposes only - injects a new Servicestore factory for use when finding Services
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionLoader`1.#ctor(Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties)">
            <summary>
            Initializes the <see cref="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionLoader`1"/>
            </summary>
            <param name="serviceProperties"><see cref="T:Microsoft.SqlServer.Dac.Extensibility.CompositionProperties"/> defining how Services should be loaded</param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionLoader`1.GetAllServices(System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Gets all Services.
            </summary>
            <param name="typeLoadErrors">Output <see cref="T:System.Collections.Generic.List`1"/> containing all errors that occurred during load. This will include general load errors
            for all contributors on the machine, plus load errors relating to version mismatch between requested contributor version
            and the available contributors on the machine</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetCompositionContainer">
            <summary>
            Primarily used for testing purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetExports``1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetExports``2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetExport``1">
            <summary>
                Returns the export with the contract name derived from the specified type parameter, 
                throwing an exception if there is not exactly one matching export.
            </summary>
            <typeparam name="T">
                The type of the <see cref="T:System.Lazy`1"/> object to return. The contract name is also 
                derived from this type parameter.
            </typeparam>
            <returns>
                The <see cref="T:System.Lazy`1"/> object with the contract name derived from 
                <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetExport``2">
            <summary>
                Returns the export with the contract name derived from the specified type parameter, 
                throwing an exception if there is not exactly one matching export.
            </summary>
            <typeparam name="T">
                The type of the <see cref="T:System.Lazy`2"/> object to return. The 
                contract name is also derived from this type parameter.
            </typeparam>
            <typeparam name="TMetadataView">
                The type of the metadata view of the <see cref="T:System.Lazy`2"/> object
                to return.
            </typeparam>
            <returns>
                The <see cref="T:System.Lazy`2"/> object with the contract name derived 
                from <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.TryGetExport``1(System.Lazy{``0}@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.TryGetExport``2(System.Lazy{``0,``1}@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManager.GetSingleExport``1(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IExtensionManagerFactory">
            <summary>
            Factory that creates CompositionContainers. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.IExtensionManagerFactory.CreateExtensionManager(Microsoft.SqlServer.Dac.Extensibility.CompositionProperties,System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Creates a new ExtensionManager. From the CompositionProperties it uses the providers passed as parameters for lookup,
            plus the default catalog if defined
            </summary>
            <param name="properties">Defines options for filtering, use of default location </param>
            <param name="errors">Errors found while creating an Extension Manager </param>
            <returns>ExtensionManager that can be used to find MEF exports</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.PlatformCompatibilityMetadataString">
            <summary>
            String defining the name of the metadata to use for filtering
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.DefaultCatalog">
            <summary>
            Lazy loaded directory catalog based on the default location
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.SetInstance(Microsoft.SqlServer.Dac.Extensibility.IExtensionManagerFactory)">
            <summary>
            Internal - for test purposes only. Overrides the default instance returned by <see cref="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.Instance"/>. 
            </summary>
            <param name="factory"><see cref="T:Microsoft.SqlServer.Dac.Extensibility.IExtensionManagerFactory"/> to be used for loading extensions</param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionManagerFactory.CreateExtensionManager(Microsoft.SqlServer.Dac.Extensibility.CompositionProperties,System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties">
            <summary>
            Properties to use when creating a services engine. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties.#ctor(System.Boolean)">
            <summary>
            constructor to initializes the default catalog 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties.HasNoExtensionsLookupSet">
            <summary>
            Returns true if there's any catalog or provider to look for extensions
            </summary>      
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties.SupportsMetadata(Microsoft.SqlServer.Dac.Extensibility.IExportableMetadata)">
            <summary>
            Returns true if given meta data is supported
            </summary>      
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2">
            <summary>
            Provides a container for related extensions. Enables extensions to be filtered based on 
            conflicting IDs and other metadata
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{`0,`1}})">
            <summary>
            Constructs a store with a list of desired extensions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.GetExtensionDescriptors(System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Gets the Extensions and their metadata wrapped inside ExtensionDescriptor objects. 
            </summary>
            <param name="errors">Errors found while processing extensions - are there duplicate extensions or extensions that do not include required metadata</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.FilterExtensionDescriptors(System.Collections.Generic.Dictionary{System.String,Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor{`0,`1}},System.Collections.Generic.List{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError})">
            <summary>
            Provides subclasses with a mechanism to filter the descriptors returned from <see cref="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.GetExtensionDescriptors(System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)"/>. 
            Default is to simply return 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStore`2.ExtensionHasRequiredData(Microsoft.SqlServer.Dac.Extensibility.ExtensionDescriptor{`0,`1},System.Collections.Generic.List{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IExtensionStoreFactory`1">
            <summary>
            Factory for loading services via MEF extensibility. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.IExtensionStoreFactory`1.CreateStore(Microsoft.SqlServer.Dac.Extensibility.ExtensionProperties,System.Collections.Generic.IList{Microsoft.SqlServer.Dac.Extensibility.ExtensibilityError}@)">
            <summary>
            Creates an IServiceStore with services found by MEF
            </summary>
            <param name="properties">Properties defining the configuration for extensibility loading etc</param>
            <param name="errors">Errors found while loading service extensions </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionStoreFactory`1.SetExtensionManagerFactory(Microsoft.SqlServer.Dac.Extensibility.IExtensionManagerFactory)">
            <summary>
            For testing purposes only - injects a new IExtensionManagerFactory which supplies types
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ExtensionUtils">
            <summary>
            Extension methods for exportable descriptor and service 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionUtils.FindMatchedDescriptor``1(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor{``0}})">
            <summary>
            Filters the given list based on the meta data and returns the one with highest priority
            </summary>        
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ExtensionUtils.Filter``1(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Dac.Extensibility.ExportableDescriptor{``0}})">
            <summary>
            Filters the given list based on the meta data and returns the one with highest priority
            </summary> 
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.FilteringCompositionContainer">
            <summary>
            A CompositionContainer that filters exports based on some filtering condition
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IExportable">
            <summary>
            An interface to be implemented by any class that needs to be exportable
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IExportable.Metadata">
            <summary>
            The metadata assigned to the exportable
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IExportable.DependencyManager">
            <summary>
            Dependency manager
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IExportable.Status">
            <summary>
            Returns the status of the exportable
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IExportableMetadata">
            <summary>
            The metadata describing an extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IExportableMetadata.Priority">
            <summary>
            Exportable priority tobe used when multiple of same type found
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.Impl.TraceWrapper">
            <summary>
            The default implementation of ITrace
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.Impl.TraceWrapper.Metadata">
            <summary>
            Trace export metadata
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.Impl.TraceWrapper.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Write a trace event message to the underlying trace source.
            </summary>      
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.Impl.TraceWrapper.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.IStandardMetadata">
            <summary>
            Standard Metadata needed for extensions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IStandardMetadata.PlatformCompatibility">
            <summary>
            The platforms supported by an extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IStandardMetadata.Version">
            <summary>
            Extension version. Should be in the format "1.0.0.0" or similar
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IStandardMetadata.Id">
            <summary>
            Unique Id used to identify the export.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.IStandardMetadata.DisplayName">
            <summary>
            Optional Display name describing the export type 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ITrace">
            <summary>
            Provides facility to trace code execution through calls to Trace* methods.
            Implementing classes must add a <see cref="T:Microsoft.SqlServer.Dac.Extensibility.ExportableAttribute" />
            to the class in order to be found by the extension manager
            </summary>  
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ITrace.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Write a formatted trace event message to the underlying trace source.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="message">Format string of the message to be traced along with the event.</param>
            <param name="args">Object array containing zero or more objects to format.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ITrace.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">String message to be traced along with the event.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.SafeAssemblyCatalog">
            <summary>
            Wraps an AssemblyCatalog since in some MEF versions assembly load failures will
            only happen on a call to GetExports
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.SafeDirectoryCatalog">
            <summary>
            Replaces the standard MEF DirectoryCatalog, used to examine all DLLs in a 
            directory and find MEF components within them
            The standard MEF DirectoryCatalog cannot correctly handle DLLs with 
            ReflectionTypeLoadExceptions and other issues. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.SafeDirectoryCatalog.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.SafeDirectoryCatalog.FullPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.ServiceManager`1">
            <summary>
            A wrapper on service collection for given type that are created by the dependency manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ServiceManager`1.#ctor(Microsoft.SqlServer.Dac.Extensibility.IDependencyManager)">
            <summary>
            Initializes the services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ServiceManager`1.GetService">
            <summary>
            Returns the service for given server definition. Returns the first instance if more than one services found
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.ServiceManager`1.GetServiceDescriptor">
            <summary>
            Returns the service descriptor for given server definition. Returns the first instance if more than one services found
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.Traceable">
            <summary>
            Enables tracing feature for classes
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.TraceableBase">
            <summary>
            An abstract class to be used for classes that need to have trace feature
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.Trace">
            <summary>
            Returns the first implementation of trace in the catalog that has highest priority
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.TraceEvent(System.Diagnostics.TraceEventType,Microsoft.Data.Tools.Diagnostics.TraceId,System.String,System.Object[])">
            <summary>
             Write a trace event message to the underlying trace source.
            </summary>       
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
             Write a trace event message to the underlying trace source.
            </summary>       
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.AssertTraceEvent(System.Boolean,System.Diagnostics.TraceEventType,Microsoft.Data.Tools.Diagnostics.TraceId,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() call
            if condition is false.
            </summary>     
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.AssertTraceEvent(System.Boolean,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() call
            if condition is false.
            </summary>     
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.AssertTraceException(System.Boolean,System.Diagnostics.TraceEventType,Microsoft.Data.Tools.Diagnostics.TraceId,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call if the condition is false.
            </summary>
            <remarks>
            Note: often the fact that an exception has been thrown by itself is enough to determine that the message
            should be logged. If so please use DebugTraceException() instead. This method is for if the exception should
            only be logged if some additional condition is also false.
            </remarks>
            <param name="condition">Must be false for Debug or Trace event to be issued.</param>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written or the condition was true</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.AssertTraceException(System.Boolean,System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call if the condition is false.
            </summary>
            <remarks>
            Note: often the fact that an exception has been thrown by itself is enough to determine that the message
            should be logged. If so please use DebugTraceException() instead. This method is for if the exception should
            only be logged if some additional condition is also false.
            </remarks>
            <param name="condition">Must be false for Debug or Trace event to be issued.</param>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written or the condition was true</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.DebugTraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call with the same message.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.TraceException(System.Diagnostics.TraceEventType,Microsoft.Data.Tools.Diagnostics.TraceId,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.DebugTraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() with
            the same message.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="message">Message to be output via Debug.Fail() and traced along with the event.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.SafeTrace(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies ITrace instance is  not null before tracing
            </summary>        
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensibility.TraceableBase.SafeTraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Verifies ITrace instance is  not null before tracing the exception
            </summary>        
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility">
            <summary>
            Identifies the SQL Server version(s) for which the extension is applicable
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql90">
            <summary>
            SQL Server 2005
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql100">
            <summary>
            SQL Server 2008
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.SqlAzure">
            <summary>
            Microsoft Azure SQL Database (SQL Azure)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql110">
            <summary>
            SQL Server 2012
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql120">
            <summary>
            SQL Server 2014
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql130">
            <summary>
            SQL Server 2016
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql140">
            <summary>
            SQL Server 14
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql150">
            <summary>
            SQL Server 15
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Sql160">
            <summary>
            SQL Server 16
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.SqlAzureV12">
            <summary>
            Microsoft Azure SQL Database (version 12)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.SqlDw">
            <summary>
            Microsoft Azure SQL DW 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.SqlServerless">
            <summary>
            Synapse Analytics Serverless SQL Pools
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.OnPremises">
            <summary>
            Applies to all on premise versions
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.Cloud">
            <summary>
            Applies to all cloud versions
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.AllDw">
            <summary>
            Applies to all DataWarehouse versions
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.AllNotDw">
            <summary>
            Applies to all versions excluding DataWarehouse 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.Extensibility.TSqlPlatformCompatibility.All">
            <summary>
            Applies to all SQL Server Versions
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TeamSystem.Data.UnitTests.UTDataPackage.SchemaAndDataCompare.Common.SchemaDiffEntryUtilities">
            <summary>
            Helper methods to process Schema Compare diff entries.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ArrayFabricatedConstructorInfo">
            <summary>
            Represent the fabricated constructors on an array class. 
            See Ecma IIb 14.2.
            Each array has 2 constructors which just take a vector of integers for the parameter.
            One ctor has an Int32 parameter for each dimension.
            The other ctor has 2 Int32 parameters for each dimension
            </summary>
            <remarks>
            Reflection requires constructors derive from ConstructorInfo. However, we want to share
            extensive functionality with the fabricated methods. 
            So we have an internal Adapter that uses the array fabricated MethodInfo support,
            and then we publicly wrap it in a ConstructorInfo for public consumption.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedConstructorInfo.#ctor(System.Type,System.Int32)">
            <summary>
            Ctor for array fabricated constructor.
            </summary>
            <param name="arrayType">The declaring type that the ctor is on. arrayType.IsArrayType must be true.</param>
            <param name="numParams">the number of Int32 parameters in the ctor's signature.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedConstructorInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            To make it easier for LMR clients that extend LMR objects, we directly
            return empty arrays here so they don't need to go through factory.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedConstructorInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            To make it easier for LMR clients that extend LMR objects, we directly
            return empty arrays here so they don't need to go through factory.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ArrayFabricatedConstructorInfo.Adapter">
            <summary>
            Internal Adapter to provide functionality using ArrayFabricatedMethodInfo.
            This is then publicly wrapped in a constructorInfo to match the reflection construct. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ArrayFabricatedGetMethodInfo">
            <summary>
            MethodInfo represented the fabricated method for an Array getter.
            Signature is:
                T Get(...)
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ArrayFabricatedSetMethodInfo">
            <summary>
            MethodInfo represented the fabricated method for an Array setter.
            Signature is:
                void Set(..., T)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.MetadataReader.ArrayFabricatedAddressMethodInfo" -->
        <member name="T:Microsoft.MetadataReader.ArrayFabricatedMethodInfo">
            <summary>
            Base class for MethodInfos for fabricated methods on an array (Get/Set/Address).
            Each specific method can have its own derived class. This avoids having to eagerly populate
            all the properties and facilates quickly creating tearoff objects with lazy properties. 
            
            The MethodInfo's signatures are a function of the declaring type's Array rank and element type.
             "..." represents a set of parameters, one int32 for each dimension in the array. This depends on the rank.
             "T" represents the declaring type's element type.
             
            You can see this codepath by inspecting something like:
               elementType.MakeArrayType(n).GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public).
            
            Unfortunately, most of the values here are not specified. These are reverse engineered from observing the CLR's behavior.    
            </summary>
            <remarks>
            This derives directly from MethodInfo (and not some LMR equivalent), and so this is technically a non-LMR implementation.
            So this exercises mixing non-LMR and LMR implementations.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedMethodInfo.#ctor(System.Type)">
            <summary>
            Protected constructor for derived classes.
            </summary>
            <param name="arrayType"></param>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedMethodInfo.MakeParameterHelper(System.Int32)">
            <summary>
            Helper to Get the fabricated parameters for the rank.
            See Ecma IIb 14.2 for details. This is an System.Int32 parameter for each rank in the array
            </summary>
            <param name="extra">Allocate extra slots at the end of the ParameterInfo array. 
            Some signatures (eg, Set(..., T)) have additional parameters. So we allow allocating extra space so 
            that the caller can just fill in the extra parameters without reallocating a new array.
            </param>
            <returns>an array of ParameterInfos of length (this.Rank + extra).
            </returns>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedMethodInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            To make it easier for LMR clients that extend LMR objects, we directly
            return empty arrays here so they don't need to go through factory.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.ArrayFabricatedMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            To make it easier for LMR clients that extend LMR objects, we directly
            return empty arrays here so they don't need to go through factory.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyFactory">
            <summary>
            Public factory to allow callers to create an Assembly implementation without needing to expose the assembly
            implementation directly. 
            This is the most basic building block for allocation. Caller is reponsible for:
            - getting the MetadataFile (IMetadataImport) in the first place. 
            - updating the Universe with the new assembly. 
            MetadataFileLoader class layers on top of this to provide better universe integration.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyFactory.CreateAssembly(Microsoft.MetadataReader.MetadataOnlyModule,System.String)">
            <summary>
            Pass in TokenResolver (module) so that the caller can create a derived instance.
            This only supports creating single-module assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyFactory.CreateAssembly(System.Reflection.Adds.ITypeUniverse,System.Reflection.Adds.MetadataFile,System.String)">
            <summary>
            Create a single-module assembly around the metadata importer.
            </summary>
            <param name="typeUniverse">Type universe in which types are resolved.</param>
            <param name="metadataImport">IMetadataImport representing single-module assembly.</param>
            <returns>Assembly object representing single-module assembly.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyFactory.CreateAssembly(System.Reflection.Adds.ITypeUniverse,System.Reflection.Adds.MetadataFile,Microsoft.MetadataReader.IReflectionFactory,System.String)">
            <summary>
            Overload taking an IReflection factory
            </summary>
            <param name="typeUniverse">Type universe in which types are resolved.</param>
            <param name="metadataImport">IMetadataImport representing single-module assembly.</param>
            <param name="factory">reflection factory to use in assembly</param>
            <returns>Assembly object representing single-module assembly.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyFactory.CreateAssembly(System.Reflection.Adds.ITypeUniverse,System.Reflection.Adds.MetadataFile,System.Reflection.Adds.MetadataFile[],System.String,System.String[])">
            <summary>
            Create a multi-module assembly around the metadata importer.
            </summary>
            <param name="typeUniverse">Type universe in which types are resolved.</param>
            <param name="manifestModuleImport">IMetadataImport representing module with manifest.</param>
            <param name="netModuleImports">Array of IMetadataImports representing netmodules. 
            Can be null or zero lenght in which case created assembly is a single-module assembly.</param>
            <returns>Assembly object representing multi-module assembly.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyFactory.CreateAssembly(System.Reflection.Adds.ITypeUniverse,System.Reflection.Adds.MetadataFile,System.Reflection.Adds.MetadataFile[],Microsoft.MetadataReader.IReflectionFactory,System.String,System.String[])">
            <summary>
            Create a multi-module assembly around the metadata importer.
            </summary>
            <param name="typeUniverse">Type universe in which types are resolved.</param>
            <param name="manifestModuleImport">IMetadataImport representing module with manifest.</param>
            <param name="netModuleImports">Array of IMetadataImports representing netmodules. 
            Can be null or zero lenght in which case created assembly is a single-module assembly.</param>
            <param name="factory">reflection factory to use in assembly</param>
            <returns>Assembly object representing multi-module assembly.</returns>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyNameHelper">
            <summary>
            Helpers for computing AssemblyName objects from metadata information.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameBuilder">
            <summary>
            This class helps build a System.Reflection.AssemblyName from the raw metadata structures.        
            Since the marshaling is very meticulous and involves unmanaged data structures and memory,  we
            wanted a single unified marshaling path for both the AssemblyRef and AssemblyDef paths.
            
            Derived classes provide the actually call to the metadata APIs.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameBuilder.Fetch">
            <summary>
            Derived class implements this to fetch the fields from the appropriate metadata API.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameBuilder.CalculateName">
            <summary>
            Calculate the AssemblyName object from the metadata structures.
            </summary>
            <returns>AssemblyName object</returns>
        </member>
        <member name="P:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameBuilder.AssemblyNameFlags">
            <summary>
            Exposes original assembly name flags read from metadata. Setting Flags property
            on AssemblyName masks some of the bits that are important for determining 
            assembly architecture.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameFromDefitionBuilder">
            <summary>
            Derived class for getting an AssemblyName from an assembly definition.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyNameHelper.GetAssemblyName(Microsoft.MetadataReader.MetadataOnlyModule)">
            <summary>
            Get an assembly name from the metadata for the manifest module
            </summary>
            <param name="module">the manifest module</param>
            <returns>AssemblyName object of the assembly.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyNameHelper.HasV1Metadata(Microsoft.MetadataReader.IMetadataImport2)">
            <summary>
            Determines if assembly as built against CLR v1.0 or v1.1.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyNameHelper.AssemblyNameFromRefBuilder">
            <summary>
            Derived class to get an assembly name for an assembly Ref token.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.AssemblyNameHelper.GetAssemblyNameFromRef(System.Reflection.Adds.Token,Microsoft.MetadataReader.MetadataOnlyModule,Microsoft.MetadataReader.IMetadataAssemblyImport)">
            <summary>
            Get an AssemblyName for an assembly ref token in the given metadata scope
            </summary>
            <param name="assemblyRefToken">an assemblyRef token</param>
            <param name="assemblyImport">a metadata scope containing the token</param>
            <returns>AssemblyName object</returns>
        </member>
        <member name="T:Microsoft.MetadataReader.AssemblyRef">
            <summary>
            An Assembly proxy object given just the assembly name.
            </summary>
            <remarks>This is just a container for AssemblyName. 
            Ideally, this would also implement GetType(string,...) and hand out TypeRefs, and be consumed by the TypeNameParser.
            </remarks>
        </member>
        <member name="F:Microsoft.MetadataReader.AssemblyRef.m_name">
            <summary>
            The assembly name that this assembly is for.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ConstructorInfoRef">
            <summary>
            Simple proxy to just chain back to the declaring type. 
            This is used in custom attributes so facilitate the design pattern of:
               Ca.Constructor.DeclaringType.FullName
            so that we can get the custom attribute name without resolving.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.CustomModifiers">
            <summary>
            The class is used to represent custom modifiers, defined using modreq ("required modifier") 
            and modopt ("optional modifier"). See Standard II.7.1.1 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.DefaultFactory.CreateConstructorInfo(System.Reflection.MethodBase)">
            <summary>
            Create a constructor info around the given method
            </summary>
            <param name="method">method for the constructor</param>
            <returns>a constructor info for the given method</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.DefaultFactory.CreateMethodInfo(Microsoft.MetadataReader.MetadataOnlyMethodInfo)">
            <summary>
            Create a MethodInfo for the given method. 
            </summary>
            <param name="method">method to create</param>
            <returns>can return method directly, or create a new wrapper arodun it.</returns>
            <remarks> ConstructorInfo and MethodInfo both correspond to a MethodDef token. LMR needs to
            call into the metadata to determine which factory method to call for the token. 
            The factory would also need to call into the metadata again to create the instantiated
            ConstructorInfo/MethodInfo object. 
            To avoid double calls into the metadata, LMR provides the results via an instantiated
            MethodInfo. A default factory could just return that method. Or it could create its own derived
            method and instantiate it with that data.
            </remarks>
        </member>
        <member name="T:Microsoft.MetadataReader.DefaultUniverse">
            <summary>
            A Type Universe that explicitly provides convenience methods for easily loading metadata 
            files with LMR. This is just a trivial wrapper around a LMR Loader object, and then any interesting 
            logic should be in the Loader object so that other universe implementations can easily pick it up.
            Non-LMR modules can still be loaded into the universe. 
            </summary> // add XML comments....
        </member>
        <member name="P:Microsoft.MetadataReader.DefaultUniverse.Loader">
            <summary>
            The underlying Loader object. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.IReflectionFactory">
            <summary>
            Factory object supplied to LMR, allow creation of custom derived objects.
            See code:DefaultFactory
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.IReflectionFactory.CreateTypeVariable(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Creates a type variable.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.IReflectionFactory.CreateMethodOrConstructor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Type[],System.Type[])">
            <summary>
            Hook creating a MethodInfo or ConstructorInfo based on methodDef token. This does not work for ref tokens.
            </summary>
            <param name="resolver">module that the token is scoped to</param>
            <param name="methodToken">a methodDef token for a Constructor or methodInfo.</param>
            <param name="typeArgs">type arguments for a generic method. May be null or 0-length. </param>
            <param name="methodArgs">method arguments for a generic method. May be null or 0-length. </param>
            <returns>a MethodBase</returns>
            <remarks>Normally, you need to access the metadata to determine whether a token represents a Method or a Constructor.
            The metadata access can be expensive, and using a token allows a factory to do efficient caching on results without having 
            to access the metadata.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.IReflectionFactory.TryCreateMethodBody(Microsoft.MetadataReader.MetadataOnlyMethodInfo,System.Reflection.MethodBody@)">
            <summary>
            Allow creating an IL method body for the given method. A method may not have a method body (such
            as a pinvoke). So this has 3 states:
            1. If the factory does not hook, return false. Ignore body parameter. 
            2. If the factory does hook, return true
                2a. and there is no method body, set body=null.
                2b. if there is a method body, set body= created instance of the body.
             
            The factory can use the code:LMRMethodBody to help implement the method body.
            </summary>
            <param name="method">method to create the body for. </param>
            <param name="body">null or newly created method body.</param>
            <returns>true if the body is valid, else false.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.IReflectionFactory.CreateTypeRef(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Create for a TypeRef token.
            - could implementing caching for TypeRefs
            - could eagerly resolve Types (so return type may not implement ITypeReference)
            - could return an ITypeReference with an arbitrary resolution policy)
            
            Since a TypeRef can resolve to a non-LMR type, the return type here must be
            System.Type instead of a LMR-specific type.
            </summary>
            <param name="scope">the module that the token is valid in </param>
            <param name="tokenTypeRef">a typeRef token within the module</param>
            <returns>a Type object corresponding to the typeref token. The factory may eagerly resolve the token, 
            or return a proxy object that does deferred resolution. </returns>
        </member>
        <member name="M:Microsoft.MetadataReader.IReflectionFactory.CreateTypeSpec(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Type[],System.Type[])">
            <summary>
            Create for a TypeSpec token. This is similar to a TypeRef that it can create a proxy type.
            </summary>
            <param name="module">module scope that the token is valid in. </param>
            <param name="typeSpecToken">a typespec token in that scope</param>
            <param name="typeArgs">the generic type args for resolving vars</param>
            <param name="methodArgs">the generic method args for resolving mvars.</param>
        </member>
        <member name="T:Microsoft.MetadataReader.GenericContext">
            <summary>
            Convenience class to group type arg and method args together.
            This is similar to:
              Type.GetGenericArguments.
              Method.GetGenericArguments.
              
            Signatures also can directly refer to type arguments from the generic context 
            ( eg Type arg #2; method arg #1), so this can be passed to a signature resolver to convert an open
            generic type to a closed generic type.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.GenericContext.VerifyAndUpdateMethodArguments(System.Int32)">
            <summary>
            Verifies that generic context contains the right number of method arguments.
            </summary>
            <remarks>
            Checking number of type arguments is easy since we can get them from class' metadata
            (regardless if we have TypeDef or TypeRef tokens). 
            But method arguments are not as easy and we can only get them from signature blob
            if we have MemberRef token. That's why we use this API to check if we are in
            consistent state after we read signature blob context. See OpenGenericContext class
            for alternative implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.GenericContext.DeleteMethodArgs">
            <summary>
            Returns a generic context with the method args removed.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.GenericContext.IsNullOrEmptyMethodArgs(Microsoft.MetadataReader.GenericContext)">
            <summary>
            Checks if generic context is null or has empty method arguments list.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.GenericContext.IsNullOrEmptyTypeArgs(Microsoft.MetadataReader.GenericContext)">
            <summary>
            Checks if generic context is null or has empty type arguments list.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.HCORENUM">
            <summary>
            Wrapper around unmanaged HCORENUM structure. Metadata enumerators can be rich objects with dynamically allocated memory.
            An HCORENUM can be cast to a direct native pointer and calling IMDI.Close() will delete the underlying memory.
            HCORENUM have all the same dangers as regular unmanaged memory:
            - if we forget to call Close(), we may leak memory
            - if we call Close() and then call another method on the enumerator, we may access deleted memory and crash.
            Because of these dangers, we wrap them and take special care.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.UnmanagedStringMemoryHandle">
            <summary>
            Safehandle for dynamically allocated unicode string. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.UnmanagedStringMemoryHandle.GetAsString(System.Int32)">
            <summary>
            Get the unmanaged string as a System.String. This copies the data from the unmanaged buffer
            so that it can safely be deleted.
            </summary>
            <param name="countCharsNoNull">count of unicode characters not including the null. 
            This will be the length of the string</param>
            <returns>System.String representation </returns>
            <remarks>Having a safe accessor here allows us to never expose the raw IntPtr.</remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.AssemblyMetaData.LocaleString">
            <summary>
            Get the locale as a System.String which copies data from szLocale field . Caller must allocate the szLocale buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.AssemblyMetaData.Locale">
            <summary>
            Get a CultureInfo object for the szLocale field.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.Loader">
            <summary>
            Helpers for loading LMR assemblies into a universe.
            This providers various friendly Load() overloads.
            </summary>
            <remarks>Whereas the AssemblyFactory class instantiates LMR objects from low-level IMetadataImports, 
            this Loader creates the the IMDIs from things like filenames or byte arrays. 
            The Loader also updates the containing universe to provide a consistent model.
            The Loader can also share state across creation calls, such as a shared dispenser or configuration options
            (such as a LMR factory).
            The specific signatures on the loader are somewhat arbitrary with the main goal of providing useful convenience
            methods for loading LMR assemblies into a mutable universe.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.#ctor(System.Reflection.Adds.IMutableTypeUniverse)">
            <summary>
            Creates a metadata loader object and associate it with a universe.
            </summary>
            <param name="universe">The universe that all loaded assemblies will be loaded into.</param>
        </member>
        <member name="P:Microsoft.MetadataReader.Loader.Factory">
            <summary>
            Gets or sets the LMR Factory object associated with new modules.
            This will use a default factory rather than return null. 
            A factory can be shared across multiple module instances. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.LoadAssemblyFromFile(System.String)">
            <summary>
            Load an assembly at the given filename
            </summary>
            <param name="file">filename of assembly to load into the universe</param>
            <returns>an assembly for the given file</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.LoadAssemblyFromFile(System.String,System.String[])">
            <summary>
            Load a multi-module assembly, explicitly specifying all modules.
            </summary>
            <param name="manifestFile">the filename to the manifest module</param>
            <param name="netModuleFiles">the filenames for the rest of the modules</param>
            <returns>An assembly containing all the modules.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.LoadAssemblyFromByteArray(System.Byte[])">
            <summary>
            Open assembly from a byte-array containing the same contents as the file.
            This is similar to Assembly.Load(byte[]). 
            </summary>
            <param name="data">raw byte array. This starts at the 'mz' signature not the 'bsjb' signature. </param>
            <returns>assembly instantiated around the byte array.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.LoadModuleFromFile(System.String)">
            <summary>
            Load just the module (without the assembly) given the filename.
            An isolated module may not include the manifest and so certain operations may not be valid.
            For general use, use LoadAssembly() instead of LoadModule().
            </summary>
            <param name="moduleFileName">filename to the module</param>
            <returns>A module which may not have a manifest. Some operations may be inavlid.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.Loader.ResolveModule(System.Reflection.Assembly,System.String)">
            <summary>
            Load a module with the given name as part of a mulit-module assembly
            </summary>
            <param name="containingAssembly">the assembly contaning the module</param>
            <param name="moduleName">the modules name from the metadata as recorded in the containing assembly's module table.</param>
            <returns>a module in the given assembly</returns>
            <remarks>This uses a default policy of looking for the module on disk next to the containing assembly.</remarks>
        </member>
        <member name="T:Microsoft.MetadataReader.IMetadataExtensionsPolicy">
            <summary>
            Callback object to encapsulate information that's exposed in reflection but not explicitly defined in
            the metadata. This could be due to members injected by the loader, or impedence mismatch between reflection
            object model vs. metadata object model.
            This provides a centralized location for such hooks in the reflection implementation.
            
            Possible things controlled by this:
            - Pseudo members on Arrays
            - Pseudo custom attributes
            - whether we hide Transparent Proxy 
            - whether we expose  __ComObject as a base class
            
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.GetExtraArrayInterfaces(System.Type)">
            <summary>
            An array T[] inherits from System.Array so it implements those interfaces, but the loader
            may add additional interfaces too. This returns any additional interfaces not already on System.Array.
            </summary>
            <param name="elementType">type of the array</param>
            <returns>non-null array of types (may be 0-length) of unique interfaces. </returns>
            <remarks>
            See
            http://blogs.msdn.com/jmstall/archive/2008/05/23/stuff-in-reflection-that-s-not-in-metadata.aspx 
            for example and further explanation of this difference.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.GetExtraArrayMethods(System.Type)" -->
        <member name="M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.GetExtraArrayConstructors(System.Type)">
            <summary>
            Get the rutime-added constructors on an array.
            Constructor counterpart to GetExtraArrayMethods
            Since Clr 1.0, these include:
                .ctor(...)
                .ctor(... ...)
            </summary>
            <param name="arrayType">the array type. This should be an array type and will serve as the declaring type for the returned methods</param>
            <returns>a set of ConstructorInfos for the array.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.GetFakeParameterInfo(System.Reflection.MemberInfo,System.Type,System.Int32)">
            <summary>
            Get a ParameterInfo based only from the method signature. Use this when there is no parameter metadata available. 
            Many of the ParameterInfo properties will return arbitrary (usually 0) values. This is
            considered policy because these arbitrary values are not represented in the metadata.
            </summary>
            <param name="member">method containing the parameter </param>
            <param name="paramType">type of the parameter</param>
            <param name="position">0-based position of the parameter</param>
            <returns>a ParameterInfo with the supplied properties. </returns>
        </member>
        <member name="M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.GetPseudoCustomAttributes(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Gets list of pseudo-custom attributes on an object.
            </summary>
            <param name="module">Module in which object is valid.</param>
            <param name="token">Token representing an object we want PCAs on.</param>
            <returns>List of pseudo-custom attributes on a given object.</returns>
            <remarks>This is considered policy since list of PCAs depends on the runtime version.
            Extracting PCAs is also expensive so hosts might want to skip this steps if they
            don't need any of PCAs.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.IMetadataExtensionsPolicy.TryTypeForwardResolution(Microsoft.MetadataReader.MetadataOnlyAssembly,System.String,System.Boolean)">
             <summary>
              Try to resolve a type name which may be forwarded. 
             </summary>
             <param name="assembly">assembly that containing the TypeForwardedTo attribute</param>
             <param name="fullname">full name of type, as specified in the attribute</param>
             <param name="ignoreCase">true for a case in-sensitive comparison of fullname against the type name in each attribute, false for a case-sensitive comparsion.</param>
             <returns>Null if the type name is not specified in a type forwareded attribute</returns>
             <remarks>
             This is policy because the exact resolution algorithm is tied to the CLR Loader and may change from version to version. For example, type forwarding
             didn't exist in CLR 1.0.
            
             TODO: Ideally, this should return a TypeRef to an AssemblyRef and never eagerly force resolution. 
             However, since we don't yet support AssemblyRefs, this may invoke the type universe to load new assemblies.
             </remarks>                
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataExtensionsPolicy20">
            <summary>
            Policy to implement semantics from Whidbey (.Net 2.0)
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataExtensionsPolicy20.GetExtraArrayInterfaces(System.Type)">
            <summary>
            With generics, arrays implemenent generic interfaces.          
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataExtensionsPolicy20.GetPseudoCustomAttributes(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Only returns TypeForwardedToAttribute and SerializableAttribute currently.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataExtensionsPolicy20.TryTypeForwardResolution(Microsoft.MetadataReader.MetadataOnlyAssembly,System.String,System.Boolean)">
            <summary>
            Inspects TypeForwardedTo attributes on the assembly and if the name matches (using a case comparsion specified by ignoreCase)
            resolves it. If names don't match no resolution is performed.
            A TypeForwardTo attribute looks like:
              [assembly: TypeForwardedTo(typeof(Widget))]
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyArrayType">
            <summary>
            This class represents multi-dimentional arrays.
            The CLR makes a distinction between vectors (that is, one-dimensional 
            arrays that are always zero-based) and multidimensional arrays. 
            A vector, which always has only one dimension, is not the same
            as a multidimensional array that happens to have only one dimension.
            You cannot use this method overload to create a vector type; if rank
            is 1, this method overload returns a multidimensional array type that
            happens to have one dimension.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyAssembly">
            <summary>
            Represent a System.Reflection.Assembly 
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyAssembly.m_modules">
            <summary>
            m_modules[0] is always the manifest module. It's the only module for single-module 
            assemblies. For multi-module assemblies m_modules[1..n] contains netmodules.
            Modules have to be of type Module and not MetadataOnlyModule because Module resolver
            could return any Module type.
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyAssembly.m_manifestModule">
            <summary>
            Same as m_modules[0]. Used to avoid casting in cases when we just need LMR
            specific information about manifest module. Manifest module always has to be
            of ManifestOnlyModule type.
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyAssembly.m_manifestFile">
            <summary>
            The file containing the manifest information for the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyAssembly.m_name">
            <summary>
            A profile of running Fib(20) using a naive recursive algorithm showed that caching the
            AssemblyName reduced execution speed by 40%. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.String)">
            <summary>
            Creates an instance of a single-module or multi-module assembly.
            </summary>
            <param name="manifestModule">Module containing manifest for an assembly.</param>
            <param name="manifestFile">File containing the manifest information.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.#ctor(Microsoft.MetadataReader.MetadataOnlyModule[],System.String)">
            <summary>
            Creates an instance of a multi-module assembly.
            </summary>
            <param name="modules">Array of modules that form a multi-module assembly. The first one
            must be the manifest module.</param>
            <param name="manifestFile">File containing the manifest information.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.Dispose">
            <summary>        
            This should only be called in the context of disposing the parent Universe.
            Caller is responsible for thread safey here and to not dispose while another thread is using.
            Caller should not use after this has been diposed.        
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.VerifyModules(Microsoft.MetadataReader.MetadataOnlyModule[])">
            <summary>
            Verifies that modules have these properties:
                1) First module contains manifest.
                2) All other modules (if provided) do not contain manifest.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetFileNamesFromFilesTable(Microsoft.MetadataReader.MetadataOnlyModule,System.Boolean)">
            <summary>
            Gets list of names of all dependent files from Files table based on manifest module. 
            </summary>
            <remarks>
            The CLI spec is not clear on where exactly netmodules should be listed: in ModuleRefs table or in 
            Files table, or both. C# compiler lists them in both places. That's what Serge Lidin's book on IL
            Assembler describes as correct. Dynamic modules generated with Reflection.Emit have both of these
            tables empty - until dynamic assembly is persisted to disk, when it becomes single module assembly.
            The only thing stored in a manifest of a dynamic assembly is information about assembly level
            custom attributes.
            
            ModuleRefs table is hard to use since, in addition to net modules, it lists native DLL dependencies.
            There is no way to distinguish between native and managed binaries. The table only contains names
            like mscoree.dll or moduleA.netmodule. ModuleRefs table doesn't list full closure of dependencies 
            either. It only lists direct dependencies. E.g. if manifest module has dependency on module A, and 
            module A in turn has dependency on module B, ModuleRefs table will only have module A listed.
            
            In contrast, Files table lists the full closure of all dependent netmodules, direct and indirect. 
            </remarks>
            <param name="manifestModule">Module with manifest that needs to be inspected.</param>
            <param name="getResources">Specifies whether the result includes resource files.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetManifestResourceStream(System.Type,System.String)">
            <summary>
            Gets resource stream for a given resource name using type for namespace name.
            </summary>
            <remarks>We can't currently rely on Reflection to do this part since they
            call their internal API from their overload (instead of calling 
            GetManifestResourceStream(string name) overload.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetManifestResourceStream(System.String)">
            <summary>
            Gets resource stream for a given resource name.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetTypes">
            <summary>
            Gets all types on the assembly. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetModule(System.String)">
            <summary>
            Gets module with the specified name. Returns null if there is no such module.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetCodeBaseFromManifestModule(Microsoft.MetadataReader.MetadataOnlyModule)">
            <summary>
            The method returns a string representing the CodeBase property
            of an Assembly or AssemblyName from the manifest module.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyAssembly.GetAssemblyToken(Microsoft.MetadataReader.MetadataOnlyModule)">
            <summary>
            Gets the assembly token for a module. If module contains manifest, it returns
            a valid assembly token; otherwise returns Token.Nil.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyCommonArrayType">
            <summary>
            This class defines a common base type for vector types and multi-dimensional array types.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.MetadataReader.MetadataOnlyCommonType" -->
        <member name="P:Microsoft.MetadataReader.MetadataOnlyCommonType.Resolver">
            <summary>
            Get the resolver object that the type's TypeDef token is valid in.
            The resolver provides the tie back to LMR and LMR services, such as:
            - the raw metadata import,
            - the creation Factory.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyCommonType.GetDeclaredMethods">
            <summary>
            Internal helper for implementing Type.GetMethods().
            This returns *all* the methods declared on the current type including:
            - public, private
            - static, instance
            - fabricated (eg, on Array)
            This does not including any inherited methods. 
            
            Type.GetMethods() is a complicated algorithm that uses this information. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyCommonType.Equals(System.Object)">
            <remarks>
            We can't rely on System.Type's default implementation since that assume object equality.  
            </remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyCommonType.ContainsGenericParameters">
            <summary>
            Recursive check if this type has any unresolved generics.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyCommonType.IsSubclassOf(System.Type)">
            <summary>
            Determines if this type is a subclass of a given type.
            </summary>
            <remarks>We can't rely on Reflection's implementation of
            this method since it uses reference equality (operator ==).</remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyCommonType.ReflectedType">
            <summary>
            LMR types doesn't support ReflectedType.
            ReflectedType is not actually in the metadata. Instead, it tracks which Type this object was obtained from.
            Mostly makes sense for MethodInfos, PropertyInfos, etc.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyCommonType.DeclaringMethod">
            <remarks>
            Runtime type throws here for types that are not type variables.
            </remarks>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyConstructorInfo">
            <summary>
            Represent an System.Reflection.ConstructorInfo. 
            
            Reflection requires that constructors derive from ConstructorInfo, not MethodInfo.
            However, Constructors are just methods at the metadata level complete with MethodDef tokens.
            Since we can only have a single base class, this makes it hard to share between Constructors and Methods.
            
            This class is an adapter that lets LMR represent constructors as MethodInfos underneath 
            (which leads to a more natural implementation and significantly better sharing with methods)
            but wraps everything and expose sit as a ConstructorInfo.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyConstructorInfo.#ctor(System.Reflection.MethodBase)">
            <summary>
            Create a ConstructorInfo around the given method base. This is done purely for conformance to
            reflection's object model and does not provide any additional benefit.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyCustomAttributeData">
            <summary>
            Represent a custom attribute. ConstructorInfo is eagerly fetched here since that's usually what
            a caller wants when the fetch the custom attributes. The argument blob (for typed and named
            arguments) is lazily fetched. Many code paths will just check the presence of an attribute, and so
            just need the constructor info. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyCustomAttributeData.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Reflection.ConstructorInfo)">
            <summary>
            Constructor used when attribute info is obtained by parsing CA blobs. 
            </summary>
            <param name="module">module that the custom attribute token is valid in. This will be the module
            containing the member that the attribute is on. </param>
            <param name="token">custom attribute token.</param>
            <param name="ctor">constructor for attributer. This provides the name of the attribute.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyCustomAttributeData.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument},System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument})">
            <summary>
            Constructor used for pseudo-custom attributes.
            </summary>
            <param name="ctor">Attribute's constructor.</param>
            <param name="typedArguments">List of attribute's typed arguments. Can't be null.</param>
            <param name="namedArguments">List of attribute's named arguments. Can't be null.</param>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyEventInfo">
            <summary>
            Implement a FieldInfo based off an IMetadataImport. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyEventInfo.InitializeName">
            <summary>
            Lookup event name only when really needed and cache it in this instance.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyFieldInfo">
            <summary>
            Implement a FieldInfo based off an IMetadataImport. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyFieldInfo.InitializeName">
            <summary>
            Gets just field name. If this is never needed we avoid allocating string for it.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyFieldInfo.GetRvaField">
            <summary>
            implementation of IField2
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBody">
            <summary>
            Base implementation for a MethodBody. This provides stub implementations of the methods. It also
            provides a default implementation of the LocalVariables property built on the LocalSignatureMetadataToken property.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBody.#ctor(Microsoft.MetadataReader.MetadataOnlyMethodInfo)">
            <summary>
            constructor
            </summary>
            <param name="method">method that this body corresponds to.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBody.TryCreate(Microsoft.MetadataReader.MetadataOnlyMethodInfo)">
            <summary>
            Helper to create a method body and invoke the reflection factory .
            </summary>
            <param name="method">method to request the body for</param>
            <returns>null if the method does not have an IL body, else the instantiated body.</returns>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.Method">
            <summary>
            Method that this body belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.ExceptionHandlingClauses">
            <summary>
            empty implementation from base class
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.InitLocals">
            <summary>
            empty implementation from base class
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.LocalSignatureMetadataToken">
            <summary>
            empty implementation from base class. 
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.LocalVariables">
            <summary>
            Default implementation built on top of code:LocalSignatureMetadataToken
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBody.MaxStackSize">
            <summary>
            empty implementation from base class. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBody.GetILAsByteArray">
            <summary>
            empty implementation from base class. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker">
            <summary>
            MethodBody implementation that reads data from static metadata.
            This may not work in cases where the metadata is not valid (like dynamic modules or edit-and-continue).
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.m_header">
            <summary>
            unmanaged header from metadata. This may be a tiny or fat header.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.#ctor(Microsoft.MetadataReader.MetadataOnlyMethodInfo,Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader)">
            <summary>
            Constructor
            </summary>
            <param name="method">method that the body is for</param>
            <param name="header">raw metadata header containing information for body</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.Create(Microsoft.MetadataReader.MetadataOnlyMethodInfo)">
            <summary>
            Helper function to create. 
            </summary>
            <param name="method">method to create body for</param>
            <returns>null if no method body, else the new method body.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.GetMethodHeader(System.UInt32,Microsoft.MetadataReader.MetadataOnlyModule)">
            <summary>
            Get the method header from the metadata at the given RVA.
            </summary>
            <param name="rva">rva of method header, from MethodDefProps. </param>
            <param name="scope">scope that the RVA is valid in.</param>
            <returns>a method header</returns>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MaxStackSize">
            <summary>
            override from base class
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.GetILAsByteArray">
            <summary>
            override from base class
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.InitLocals">
            <summary>
            override from base class
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.LocalSignatureMetadataToken">
            <summary>
            override from base class
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader">
            <summary>
            Base interface to provide uniform access to tiny and fat method headers.
            Since the headers are LayoutKind.Sequential, they can't inherit from a base class, so this must
            be an interface.
            
            See IIb.24.4 for details on MethodBody layout in the metadata.
            This somewhat corresponds to the IMAGE_COR_ILMETHOD in CorHdr.h.
            
            A method header is located at the RVA specified in the GetMethodProps(). The method header is
            followed by the IL bytes stream. That's followed by 'extra' sections', which may describe
            exception handling regions.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader.MaxStack">
            <summary>
            maximum il stack depth that this function may use.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader.CodeSize">
            <summary>
            Size of the IL code in bytes
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader.LocalVarSigTok">
            <summary>
            Local signature token. 0 if no locals.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader.Flags">
            <summary>
            Flags for this method
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IMethodHeader.HeaderSizeBytes">
            <summary>
            Size of the method header in bytes. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MethodHeaderFlags">
            <summary>
            Flags for method headers. See spec IIb.24.4.4
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MethodHeaderFlags.FatFormat">
            <summary>
            Method header is fat. Use code:FatHeader
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MethodHeaderFlags.TinyFormat">
            <summary>
            Method header is tiny. Use code:TinyHeader
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MethodHeaderFlags.MoreSects">
            <summary>
            More sections follow after this header. See IIb.24.4.5.
            </summary>
        </member>
        <member name="F:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.MethodHeaderFlags.InitLocals">
            <summary>
            Call default constructor on all local variables.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader">
            <summary>
            Tiny header layout. spec IIb.24.4.2. This corresponds to IMAGE_COR_ILMETHOD_TINY in CorHdr.h
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader.Flags">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader.CodeSize">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader.MaxStack">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader.LocalVarSigTok">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.TinyHeader.HeaderSizeBytes">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader">
            <summary>
            Fat header layout. spec IIb.24.4.3. This corresponds to IMAGE_COR_ILMETHOD_FAT in CorHdr.h
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader.Flags">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader.MaxStack">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader.CodeSize">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader.LocalVarSigTok">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.FatHeader.HeaderSizeBytes">
            <summary>
            Implement IMethodHeader
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.Flags">
            <summary>
            Flags describing exception clause type (catch-block, filter, finally, or fault)
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.TryOffset">
            <summary>
            IL offset in bytes from start of header
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.TryLength">
            <summary>
            Length in bytes of the try block
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.HandlerOffset">
            <summary>
            IL offset in bytes of the handler for the try block
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.HandlerLength">
            <summary>
            length in bytes of the IL code for the handler
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.ClassToken">
            <summary>
            metadata Token for a type-based exception handler. This is valid in the scope of the method
            containing the IL code.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.IEHClause.FilterOffset">
            <summary>
            Offset in method body ofr filter-based exception handler.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.EHSmall">
            <summary>
            Raw layout of a small version of an EH Clause.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodBodyWorker.EHFat">
            <summary>
            Raw layout of a fat version of an EH clause.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyMethodInfo">
            <summary>
            Represent a LMR implementation of System.Reflection.MethodInfo. 
            This is for MethodInfos backed by real metadata with real a MethodDef token. 
            Use a different derived class for fabricated methodInfos.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.Create(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Helper method to create a MethodInfo or a Constructor
            </summary>
            <param name="resolver">module resolution scope</param>
            <param name="methodDef">metadata token for methodDef of method body</param>
            <param name="context">generic arguments</param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.#ctor(Microsoft.MetadataReader.MetadataOnlyMethodInfo)">
            <summary>
            Copy constructor for a MethodInfo. This allows a derived class to easily override a MethodInfo
            without having to wrap every property.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Type[],System.Type[])">
            <summary>
            Internal constructor for creating a MethodInfo. If method is a constructor, it must get wrapped in
            a ConstructorInfo object before being handed out.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.Initialize">
            <summary>
            Get all the non-core information about the method from metadata. This is relatively expensive
            so we perform it only when needed. 
            </summary>
            <remarks>We have to use lock here to avoid race condition in updating m_tOwner field.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.GetOwnerTypeAndTypeArgs(System.Type@,System.Type[]@)">
            <summary>
            Retreives information about containing type and its context from metadata.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.GetGenericMethodArgs">
            <summary>
            Retreives information about method's generic arguments if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyMethodInfo.GetParameters">
            <summary>
            Get parameters, not including this arg and get return parameter 
            (if it's present).
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyModule">
            <summary>
            TokenResolver represents a module. Derived classes may:
            - override caching and creation policy. (although this could be deferred to a policy object)
            - associate auxillary data (although they could do this via a Hash; or via a 'object Tag' property)
            
            Token resolver for scopes within an MDbgModule
            This will create Type, MethodInfo, etc for metadata tokens within the module. 
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyModule.Policy">
            <summary>
            Get policy object that specifies reflection behavior not directly corresponding to metadata.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.ReadEmbeddedBlob(System.Reflection.Adds.EmbeddedBlobPointer,System.Int32)">
            <summary>
            Helper to read bytes embedded in metadata blob.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyModule.RawMetadata">
            <summary>
            Get the raw low level metadata file.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetThreadSafeImporter">
            <summary>
            CLR v4.0: Gets a raw Importer that's usable by all threads since in v4.0 object that
            implements this interface implements FTM too. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.MetadataOnlyModule.ResolveTypeTokenInternal(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.MetadataOnlyModule.GetGenericType(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)" -->
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.ResolveMethodSpec(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Resolves a reference to an instantiated generic method.
            </summary>
            <param name="methodToken">MethodSpec token.</param>
            <param name="context">Generic context containing types used for intantiation.</param>
            <returns>MethodInfo instance containing info about an instantiated generic method.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.ResolveMethodRef(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext,System.Type[])">
            <summary>
            Resolves a MethodRef token to a method/constructor.
            </summary>
            <remarks>
            Since ResolveTypeTokenInternal could return a non-LMR type we can't rely on having
            access to its metadata through IMetaDataImport interface. Instead, we have to go through 
            public Reflection APIs only. Future optimization: If this approach happens to be too slow, 
            we could check its type and go through a fast path is it's a LMR type (or TypeRef around
            LMR type).
            
            This can be used to get the constructor for a custom-attribute. 
            </remarks>
            <param name="memberRef">member ref token to resolve</param>
            <param name="context">generic context of caller. </param>
            <param name="genericMethodParameters">generic parameters to method, or null</param>        
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.LookupTypeToken(System.String)">
            <summary>
            Lookup a TypeDef token for a given top-level type name. Does not handle nested classes.
            This is useful for looking up system types (Enum, Int32, etc)</summary>
            <param name="className">top-level type name to lookup</param>
            <returns>typedef token of type. Throws it type not found.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetMethodRva(System.Int32)">
            <summary>
            Get the RVA for the given method token. Return 0 if no RVA. 
            In some cases (dynamic modules, edit-and-continue), there may not be a usable RVA.
            </summary>
            <param name="methodDef">method def token to get the RVA for</param>
            <returns>the RVA of the method. </returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetConstructorsOnType(Microsoft.MetadataReader.MetadataOnlyCommonType,System.Reflection.BindingFlags)">
            <summary>
            Get the constructors that match flags on a given type. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.FilterMethod(System.Reflection.MethodInfo[],System.String,System.Reflection.BindingFlags,System.Reflection.CallingConventions,System.Type[])">
            <summary>
            Find the method matching all the criteria in the method array.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetMethodsOnType(Microsoft.MetadataReader.MetadataOnlyCommonType,System.Reflection.BindingFlags)">
            <summary>
            Returns the methods (but not constructors) on the given Type and its base types (if requested in the flags).
            </summary>
            <remarks>
            This a helper function shared by multiple MetadataOnlyCommonType derivations to implement: 
                MethodInfo[] Type.GetMethods(...) 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.WalkInheritanceChain(System.Reflection.BindingFlags)">
            <summary>
            Determines if walk up the inheritance chain is requested based on flags. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.FilterInheritedProperties(System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Reflection.BindingFlags)">
            <summary>
            Filters inherited properties by eliminating overloads.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.FilterInheritedEvents(System.Collections.Generic.IList{System.Reflection.EventInfo},System.Collections.Generic.IList{System.Reflection.EventInfo})">
            <summary>
            Filters inherited events by eliminating overloads. Overload in case of events is 
            simply any inherited event that has the same name as an event directly on a type. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IncludeInheritedMethod(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
            <summary>
            Determines if an inherited method should be included when walking up inheritance chain.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IncludeInheritedAccessor(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
            <summary>
            Determines if an inherited property getter/setter should be included when walking up inheritance chain.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IncludeInheritedField(System.Reflection.FieldInfo,System.Reflection.BindingFlags)">
            <summary>
            Determines if an inherited field should be included when walking up inheritance chain.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyModule.EMethodKind">
            <summary>
            Filter to use with code:GetMethodsOnDeclaredTypeOnly
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetMethodBasesOnDeclaredTypeOnly(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext,Microsoft.MetadataReader.MetadataOnlyModule.EMethodKind)">
            <summary>
            Common helper function for
              MethodInfo[] Type.GetMethods(...) and 
              ConstructorInfo[] Type.GetConstructor().
            Gets just the methods and constructors that this type implements, not the ones it inherits. 
            </summary>
            <remarks>
            This is on the TokenResolver so that it can be shared by multiple Type implementations. 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IsOverride(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Reflection.MethodInfo)">
             <summary>
            Check if method m overrides any of passed methods.       
             </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IsOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
             <summary>
            Check if two methods override each other.       
             </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetFieldsOnType(Microsoft.MetadataReader.MetadataOnlyCommonType,System.Reflection.BindingFlags)">
            <summary>
            Returns the fields on the given Type and its base types (if requested in the flags).
            </summary>
            <remarks>
            This a helper function shared by multiple MetadataOnlyCommonType derivations to implement: 
                FieldInfo[] Type.GetFields(...) 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetFieldsOnDeclaredTypeOnly(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Gets fields on a specified type using IMetadataImport API. Does not get fields 
            on base classes.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetPropertiesOnType(Microsoft.MetadataReader.MetadataOnlyCommonType,System.Reflection.BindingFlags)">
            <summary>
            Returns the properties on the given Type and its base types (if requested in the flags).
            </summary>
            <remarks>
            This a helper function shared by multiple MetadataOnlyCommonType derivations to implement: 
                MethodInfo[] Type.GetProperties(...) 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetPropertiesOnDeclaredTypeOnly(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Common helper function for
              PropertyInfo[] Type.GetProperties(...) 
            Gets just properties that this type implements, not the ones it inherits. 
            </summary>
            <remarks>
            This is on the TokenResolver so that it can be shared by multiple Type implementations. 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetEventsOnType(Microsoft.MetadataReader.MetadataOnlyCommonType,System.Reflection.BindingFlags)">
            <summary>
            Returns the events on the given Type and its base types (if requested in the flags).
            </summary>
            <remarks>
            This a helper function shared by multiple MetadataOnlyCommonType derivations to implement: 
                MethodInfo[] Type.GetEvents(...) 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetEventsOnDeclaredTypeOnly(System.Reflection.Adds.Token,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Common helper function for
              PropertyInfo[] Type.GetEvents(...) 
            Gets just events that this type implements, not the ones it inherits. 
            </summary>
            <remarks>
            This is on the TokenResolver so that it can be shared by multiple Type implementations. 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetCustomAttributeData(System.Int32)">
            <summary>
            Gets all custom attributes on a member.
            </summary>
            <param name="memberTokenValue">Member's metadata token.</param>
            <returns>List of CustomAttributeData instances describing all custom attributes.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.ResolveCustomAttributeConstructor(System.Reflection.Adds.Token)">
             <summary>
             Return a ConstructorInfo proxy for the ctor token which can be used in a Custom Attribute information.  
             This proxy just supports getting the custom attribute name without resolving (eg, calling ctor.DeclaringType.FullName.)
             </summary>
             <param name="customAttributeConstructorTokenValue">token from custom attr  representing the contstructor. </param>
             <returns></returns>
             <remarks>
             Reflection API has Custom Attributes expose the constructor Info, but what clients really want
             is a fast way to get to the string name without resolution. 
            
             We want to do lazy resolution here:
             - performance: faster filtering of custom attributes. Clients just need the string name and
                not the fully resolved constructor Info (which would require resolving all the type parameters
                too).
             - avoid eager assembly resolution. CustomAttr args require assembly resolution, but not 
                if we're just getting the attribute name,
             </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.LazyAttributeParse(System.Reflection.Adds.Token,System.Reflection.ConstructorInfo,System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}@,System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}@)">
            <summary>
            Parses the custom attribute blob and returns list of constructor arguments and
            list of named arguments. This allows lazily parsing the attribute blob.
            </summary>
            <param name="token">metadata token for the attribute instance. This can be used to lookup the
            attribute's parameter blob.</param>
            <param name="constructorInfo"> constructor for the attribute. </param>
            <param name="constructorArguments"> out parameter set to non-null (potentially 0-length)  list of constructor arguments. </param>
            <param name="namedArguments">out parameter set to non-null (potentially 0-length) list of named arguments. </param>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetConstructorArguments(System.Reflection.ConstructorInfo,System.Byte[],System.Int32@)">
            <summary>
            Parses the custom attribute blob and returns list of constructor arguments. Assumes that prolog is 
            already verified and skipped.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetNamedArguments(System.Reflection.ConstructorInfo,System.Byte[],System.Int32@)">
            <summary>
            Parses the custom attribute blob and returns list of named arguments. Assumes that typed
            arguments are already parsed.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetCustomAttributeArgumentValue(System.Reflection.Adds.CorElementType,System.Type,System.Byte[],System.Int32@)">
            <summary>
            Gets custom attribute argument's value from the blob.
            </summary>
            <param name="typeId">Value's type ID.</param>
            <param name="type">Value's type. Only needed for values that are arrays. Ignored for other values.</param>
            <param name="customAttributeBlob">Blob that contains custom attribute encoding.</param>
            <param name="index">Current index into the blob.</param>
            <returns>Custom attributes argument's value.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetUnderlyingType(System.Type)">
            <summary>
            Finds the underlying type of an enum type.
            </summary>
            <remarks>We might need to expose this on our own Enum derivation if it turns out that our types
            can't be passed to System.Enum.GetUnderlyingType.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetAssemblyNameFromAssemblyRef(System.Reflection.Adds.Token)">
            <summary>
            Gets the Assembly Name for the given assembly ref token.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.GetGenericParameterTokens(System.Int32)">
            <summary>
            Get the tokens of the generic parameters in the type or method. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.CheckIsStaticAndIsPublicOnProperty(System.Reflection.PropertyInfo,System.Boolean@,System.Boolean@)">
            <summary>
            Checks if property is static and/or public.
            Property is static if one of its set/get accessors is static.
            Property is public if one of its set/get accessors is public.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.CheckIsStaticAndIsPublicOnEvent(System.Reflection.EventInfo,System.Boolean@,System.Boolean@)">
            <summary>
            Checks if event is static and/or public.
            Event is static if one of its add/remove/raise accessors is static.
            Event is public if one of its add/remove/raise accessors is public.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.CheckIsStaticAndIsPublic(System.Reflection.MethodInfo,System.Boolean@,System.Boolean@)">
            <summary>
            Check if a Method is static or public. Used for properties and events. They are considered static/public
            if any of accessor methods are static/public.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.IsSystemModule">
            <summary>
            Determine if this module is the symbol module, as decided by the TypeUniverse.
            </summary>
            <returns>Return true iff this is the system module (mscorlib). </returns>
            <remarks>This is needed if the caller wants to compare cached token or name values for
            builtin types.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.CreateTypeCodeMapping">
            <summary>
            Return a mapping for code:m_typeCodeMapping. See that field for exact semantics of this array.
            This must be called from the assembly's module.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.Dispose">
            <summary>
            Dispose this module. This should be called in the context of disposing the parent assembly.
            This will release the unmanaged metadata pointers this module owns.
            Caller is responsible for thread safey here and to not dispose while another thread is using.
            Caller should not use after this has been diposed.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyModule.RowCount(System.Reflection.Adds.MetadataTable)">
            <summary>
            Gets number of rows in a metadata table.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyPropertyInfo">
            <summary>
            Implement a PropertyInfo based off an IMetadataImport. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyTypeDef">
            <summary>
            Represent a TypeDef token. It can contain generic arguments: opened, closed or partialy closed.
            See http://msdn.microsoft.com/en-us/library/system.type.isgenerictype.aspx for a list of key invariants
            of generic-related properties on System.Type.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Type[])">
            <summary>
            Creates LMR representation for TypeDef token.
            </summary>
            <param name="scope">Module in which TypeDef token is defined.</param>
            <param name="tokenTypeDef">TypeDef token representing a type.</param>
            <param name="typeParameters">Generic type arguments, if this is generic type.</param>
            <remarks>
            If this type represents generic type instantiation, here is how it's represented in metadata.
            From the Ecma spec:
             TypeSpecBlob ::=
               GENERICINST (CLASS | VALUETYPE) TypeDefOrRefEncoded GenArgCount Type Type*
            TypeDefOrRefEncoded can be a TypeRef,Def or Spec token. (And spec can be anything, like an Array)
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.MetadataReader.MetadataOnlyTypeDef.FullName" -->
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.GetSimpleName(System.Text.StringBuilder)">
            <summary>
            Constructs simple portion of type's complete name i.e. it does not
            include generic argument list (if there is any).
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyTypeDef.Namespace">
            <summary>
            Gets namespace for this type.
            </summary>
            <remarks>
            E.g. fullName = System.Reflection.MethodInfo
                namespace = System.Reflection
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.ToString">
            <summary>
            Constructs string representation for this type. 
            </summary>
            <remarks>
            ToString is different than FullName when there are generic parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyTypeDef.BaseType">
            <summary>
            Get the base type that this derives from.
            Null if the curernt type is System.Object. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.Equals(System.Type)">
            <summary>
            Determines if two types are the same.
            </summary>
            <remarks>
            EqualsImpl should not call FullName since that could create infinite recursion for generic
            types. FullName needs to call IsGenericTypeDefinition, which in turn needs to call EqualsImpl.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.MakeGenericType(System.Type[])">
            <summary>
            Creates generic type from generic type definition.
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-us/library/system.type.makegenerictype.aspx for details on invariants here. 
            </remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyTypeDef.IsGenericType">
            <summary>
            Determines if this is a generic type based on number of type arguments.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.GetGenericArguments">
            <summary>
            Creates type array of generic arguments. Returns empty array if this
            is not generic type.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeDef.GetGenericTypeDefinition">
            <summary>
            Gets generic type definition (aka template) if this is generic type.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyTypeDef.IsGenericTypeDefinition">
            <summary>
            Determines if this is a generic type definition i.e. fully open generic type.
            </summary>
            <remarks>
            Important: this method should not be directly or indirectly called from EqualsImpl
            since it would cause infinite reqursion. E.g. that's why EqualsImpl does not call
            FullName or ToString(); both of these APIs call IsGenericTypeDefinition.
            </remarks>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyTypeVariable">
            <summary>
            Represents an uninstantiated type variable.  For now, most method are unimplemented.
            The defining property of this is that IsGenericParameter returns true; whereas most other Type
            implementations return false.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyTypeVariableRef">
            <summary>
            Represents a type variable extracted from memberRef signature. 
            It is only used for signature matching.
            </summary>
            <remarks>
            This class is used internally only and it should not be exposed
            publicly even when all LMR APIs become public. That's why most
            methods throw exceptions. 
            </remarks>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyVectorType">
            <summary>
            This class represents vector types.
            The CLR makes a distinction between vectors (that is, one-dimensional 
            arrays that are always zero-based) and multidimensional arrays. 
            A vector, which always has only one dimension, is not the same
            as a multidimensional array that happens to have only one dimension.
            You cannot use this method overload to create a vector type; if rank
            is 1, this method overload returns a multidimensional array type that
            happens to have one dimension.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.OpenGenericContext">
            <summary>
            Represents generic context used for signature blob parsing when we have MemberRef. 
            Lets us create method's template that we can use for comparison with all the methods
            on a target class.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.OpenGenericContext.#ctor(System.Type[],System.Type[])">
            <summary>
            Initializes both type arguments and method arguments. 
            Used when we already know number of method arguments i.e.
            after verification. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.OpenGenericContext.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Type,System.Reflection.Adds.Token)">
            <summary>
            Only initializes type arguments (if there are any). Method arguments are initialized
            later, once we have information for signature blob.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.OpenGenericContext.VerifyAndUpdateMethodArguments(System.Int32)">
            <summary>
            Called once we know generic method's arity to initialize metod arguments.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.ProxyGenericType">
            <summary>
            Type proxy for generic instantiation around another type-proxy. 
            This can be used to build up type algebra trees without resolution. 
            This is similar to ModifierType and ArrayType. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.PseudoCustomAttributes">
            <summary>
            Utility class that parses metadata for information about pseudo-custom attributes.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetTypeForwardedToAttributes(Microsoft.MetadataReader.MetadataOnlyAssembly)">
            <summary>
            Get the TypeForwardedToAttributes on an assembly.
            </summary>
            <param name="assembly">assembly to look for attributes on.</param>
            <returns>List of CustomAttributeData instances describing TypeForwardedToAttributes if present.
            Empty list if TypeForwardedToAttribute is not present.</returns>
            <remarks>
            TypeForwardedTo attributes only occur on the assembly. So this overload is useful when we're explicitly operating with the assembly and
            looking for these attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetTypeForwardedToAttributes(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Finds info about TypeForwardedToAttributes if present.
            </summary>
            <param name="module">Module in which a given token is valid.</param>
            <param name="token">Token representing object that's target of attributes. Must be a mtAssembly</param>
            <returns>List of CustomAttributeData instances describing TypeForwardedToAttributes if present.
            Empty list if TypeForwardedToAttribute is not present.</returns>
            <remarks>This calls the Type Name Parser which will force assembly resolution because it will force loading the forwarded type to store it as a System.Type arg 
            in the custom attribute data</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetRawTypeForwardedToAttributes(Microsoft.MetadataReader.MetadataOnlyAssembly)">
            <summary>
            Convenience overload for assemblies.
            </summary>        
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetRawTypeForwardedToAttributes(Microsoft.MetadataReader.MetadataOnlyModule)">
            <summary>
            Enumerate type forwarders. This provides the raw metadata and explicitly avoids doing any resolution.
            Returns UnresolvedTypeNames instead of Type to avoid doing an eager resolution.
            </summary>
            <param name="manifestModule">the manifest module to search. TypeForward data is only on a manifest module</param>
            <returns>enumerate of TypeForward data in the module.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetRawTypeForwardedToAttribute(Microsoft.MetadataReader.MetadataOnlyAssembly,System.String,System.Boolean)">
            <summary>
            Convenience overload for assemblies.
            </summary>        
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetRawTypeForwardedToAttribute(Microsoft.MetadataReader.MetadataOnlyModule,System.String,System.Boolean)">
            <summary>
            Enumerate type forwarders and finds one that matches given full name. 
            Returns UnresolvedTypeNames instead of Type to avoid doing an eager resolution.
            </summary>
            <param name="manifestModule">The module to search in.</param>
            <param name="fullname">Type's full name.</param>
            <param name="ignoreCase">If true, the fullname comparison will be not be case sensitive.</param>
            <returns>An unresolved type retrieved from type forwarded attributes or null if type with given name 
            cannot be found.</returns>
            <remarks>
            Having this version of API saves us from converting StringBuilder content to string when we are only looking
            for one specific forwarder.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetTypeFromTypeForwardToAttribute(System.Reflection.CustomAttributeData)">
            <summary>
            Given the representation of a TypeForwarededToAttribute, get the Type parameter from it.
            </summary>
            <param name="data">a custom attribute representation for a TypeForwardedAttribute</param>
            <returns>the System.Type parameter stored in the attribute. This encapsulates where the type is forwarded to.</returns>
            <remarks>
            This is the inverse on GetTypeForwardedToAttributes.
            Given an attribute of: [assembly: TypeForwardedTo(typeof(Widget))]
            This returns Typeof(Widget).
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetSerializableAttribute(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Finds info about SerializableAttribute if present on a type.
            </summary>
            <param name="module">Module in which a given token is valid.</param>
            <param name="token">Token representing object that's target of attribute.</param>
            <returns>CustomAttributeData instance describing SerializableAttribute if present.
            Null otherwise.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.PseudoCustomAttributes.GetSerializableAttribute(Microsoft.MetadataReader.MetadataOnlyModule,System.Boolean)">
            <summary>
            Creates attribute data for SerializableAttribute.
            </summary>
            <param name="module">Module to be used to get appropriate type universe and system assembly.</param>
            <param name="isRequired">If true, SerializableAttribute must be present in the system assembly (mscorlib).
            If false, returns null if SerializableAttribute cannot be found. E.g. Silverlight mscorlib does not
            contain this attribute.</param>
        </member>
        <member name="T:Microsoft.MetadataReader.MethodFilter">
            <summary>
            Describes criteria used to filter methods. 
            This filter will find methods that have right "shape" i.e. that share same:
                a) name
                b) generic or not; if generic share the same number of generic arguments
                c) number of parameters
                d) calling convention
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodFilter.Name">
            <summary>
            Name of a method
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodFilter.GenericParameterCount">
            <summary>
            Number of generic parameters that method has.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodFilter.ParameterCount">
            <summary>
            Number of arguments that method has.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodFilter.CallingConvention">
            <summary>
            Calling convention that method uses.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.SignatureComparer">
            <summary>
            Compares method signatures (calling convention, parameter types, etc) to find matches. 
            </summary>
            <remarks>Comparing signatures is safer and more flexible than converting signature blobs, 
            which requires complete knowledge of signature blob structure, including all corner cases
            and accross all metadata versions.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureComparer.FilterMethods(Microsoft.MetadataReader.MethodFilter,System.Reflection.MethodInfo[])">
            <summary>
            Filters methods based on passed filter.
            </summary>
            <returns>Subset of methods that have requested "shape".</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureComparer.FilterConstructors(Microsoft.MetadataReader.MethodFilter,System.Reflection.ConstructorInfo[])">
            <summary>
            Filters constructors based on passed filter.
            </summary>
            <returns>Subset of constructors that have requested "shape".</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureComparer.IsParametersTypeMatch(System.Reflection.MethodBase,Microsoft.MetadataReader.TypeSignatureDescriptor[])">
            <summary>
            Determines if method's parameters match corresponding parameter descriptors.
            </summary>
            <remarks>
            Method parameters come from open version of declaring type since that's what's described
            in a signature blob. For non-generic types, this is just direct list of method's parameters.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.SignatureComparer.FindMatchingMethod(System.String,System.Type,Microsoft.MetadataReader.MethodSignatureDescriptor,Microsoft.MetadataReader.GenericContext)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.SignatureComparer.GetTemplateMethod(System.Type,System.Int32)" -->
        <member name="T:Microsoft.MetadataReader.NamedArgumentType">
            <summary>
            Custom attribute named argument identificators.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.TypeSignatureDescriptor">
            <summary>
            Encapsulates information about types as encoded in signature blobs.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.TypeSignatureDescriptor.Type">
            <summary>
            Final type encoded in sig blob. For generic types, this could be type after instantiation.
            E.g T is instantiated with int.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.TypeSignatureDescriptor.CustomModifiers">
            <summary>
            Custom modifiers for this parameter, if any are present.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.TypeSignatureDescriptor.IsPinned">
            <summary>
            Determines if parameter was pinned or not.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MethodSignatureDescriptor">
            <summary>
            Encapsulates information encoded in method signature blobs.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodSignatureDescriptor.CallingConvention">
            <summary>
            Method's calling convention.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodSignatureDescriptor.GenericParameterCount">
            <summary>
            Number of generic method arguments if this is a generic method.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodSignatureDescriptor.ReturnParameter">
            <summary>
            Descriptor of return parameter.
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.MethodSignatureDescriptor.Parameters">
            <summary>
            Descriptors of all parameters.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractCustomModifiers(System.Byte[],System.Int32@,Microsoft.MetadataReader.MetadataOnlyModule,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Extract optional and required custom modifiers from the signature blob.
            An optional modifier is a type following CorElementType.CModOpt.
            An required modifier is a type following CorElementType.CModReqd.
            </summary>
            <returns>
            return null if there is no custom modifiers.
            </returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractType(System.Byte[],System.Int32@,Microsoft.MetadataReader.MetadataOnlyModule,Microsoft.MetadataReader.GenericContext,System.Boolean)">
            <summary>
            Extracts type from method signature + any additional information encoded.
            </summary>
            <param name="sig">Signature blob.</param>
            <param name="index">Current index into signature blob; updated as type is extracted</param>
            <param name="resolver">Module in which this signature is valid.</param>
            <param name="context">Generic context that should be used when type variables need to be instantiated.</param>
            <param name="fAllowPinned">Determines if pinned types are allowed.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractCustomAttributeArgumentType(System.Reflection.Adds.ITypeUniverse,System.Reflection.Module,System.Byte[],System.Int32@,System.Reflection.Adds.CorElementType@,System.Type@)">
            <summary>
            Constructs type of a custom attribute argument (typed or named) based on its
            type ID extracted from the custom attribute blob. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.MetadataReader.SignatureUtil.ExtractInt(System.Byte[],System.Int32@)" -->
        <member name="M:Microsoft.MetadataReader.SignatureUtil.GetTypeId(System.Type)">
            <summary>
            Maps Type to its CorElementType value for Types valid in custom attribute signatures.
            This throws if the type is not a primitive type definde in the system assembly, an enum, or array.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractStringValue(System.Byte[],System.Int32@)">
            <summary>
            Extracts a string value from the blob array.
            </summary>
            <remarks>This is just a convenience method to make dealing with strings easier.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractUIntValue(System.Byte[],System.Int32@)">
            <summary>
            Extracts an unsigned int value from the blob array.
            </summary>
            <remarks>This is just a convenience method to make dealing with uints easier.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractTypeValue(System.Reflection.Adds.ITypeUniverse,System.Reflection.Module,System.Byte[],System.Int32@)">
            <summary>
            Extracts full name of a type from custom attribute blob and uses that name to 
            construct appropriate type object instance.
            </summary>
            <param name="universe">Universe that type resolution should happen in.</param>
            <param name="module">Module that contains this custom attribute blob.</param>
            <param name="blob">Custom attribute blob that's being parsed.</param>
            <param name="index">Current index inside the blob. Updated as type name is extracted.</param>
            <returns>Appropriate type instance or null if type name is null.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractValue(System.Reflection.Adds.CorElementType,System.Byte[],System.Int32@)">
            <summary>
            Extracts value at a given index from blob using passed type ID.
            </summary>
            <remarks>Implementation depends on BitConverter class. This is important from
            little/big-endian perspective since custom attribute signatures are encoded in
            little-endian format. This is ok on Windows but might not be ok on Mac for example.</remarks>
            <param name="typeId">Type ID of value that needs to be extracted.</param>
            <param name="blob">Byte array containing value.</param>
            <param name="index">Offset from which to start extracting value.</param>
            <returns>Value extracted from byte array.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractListOfValues(System.Type,System.Reflection.Adds.ITypeUniverse,System.Reflection.Module,System.UInt32,System.Byte[],System.Int32@)">
            <summary>
            Creates a ready-only list of typed arguments populated by values extracted from byte array.
            </summary>
            <remarks>Reflection wraps each array element into CustomAttributeTypedArgument even when 
            custom attribute's constructor parameter is stronly typed array like int[]. That's why we don't 
            create int[] but list of wrapped integers.</remarks>
            <param name="elementType">Type of list elements.</param>
            <param name="universe">Universe in which type resolution should happen.</param>
            <param name="module">Module that contains custom attribute blob.</param>
            <param name="size">Size of list - previously extracted from the same custom attribute blob.</param>
            <param name="blob">Custom attribute blob.</param>
            <param name="index">Current index into custom attribute blob. Will be updated to new position
            as list elements are parsed.</param>
            <returns>Read only list of CustomAttributeTypedArguments that describe each element in the list.
            This matches what Reflection constructs and returns.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.IsValidCustomAttributeElementType(System.Reflection.Adds.CorElementType)">
            <summary>
            Detemines if a given element type can be a custom attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.VerifyElementType(System.Reflection.Adds.CorElementType)">
            <summary>
            Verifies that element type read from a custom attribute blob is
            one of allowed types. 
            </summary>
            <remarks>These values come straight from metadata so we have to 
            make sure they make sense before interpreting them.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractNamedArgumentType(System.Byte[],System.Int32@)">
            <summary>
            Determines if named argument represents field or property.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.ExtractMethodSignature(Microsoft.MetadataReader.SignatureBlob,Microsoft.MetadataReader.MetadataOnlyModule,Microsoft.MetadataReader.GenericContext)">
            <summary>
            Extracts information about a method from its signature blob.
            </summary>
            <param name="methodSignatureBlob">Encoded method signature.</param>
            <param name="resolver">Module in which signature blob is valid.</param>
            <param name="context">Generic context that should be used when type variables need to be instantiated.</param>
            <returns>Method signature description.</returns>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.GetReflectionCallingConvention(Microsoft.MetadataReader.CorCallingConvention)">
            <summary>
            Gets Reflection calling convention coresponding to passed CorCallingConvention.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.IsCallingConventionMatch(System.Reflection.MethodBase,System.Reflection.CallingConventions)">
            <summary>
            Determines if method's calling convention matches passed calling convention. 
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.IsGenericParametersCountMatch(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Checks if method has expected number of generic parameters.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.IsParametersTypeMatch(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Determines if method's parameter types match the passed type array.
            The types need to be exactly the same.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.GetStringComparison(System.Reflection.BindingFlags)">
            <summary>
            Determines which string comparison should be used based on
            binding flags passed in. It could be either case sensitive or
            case insensitive.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.TypeMapForAttributes.IsValidCustomAttributeElementType(System.Reflection.Adds.CorElementType)">
            <summary>
            Detemines if a given element type can be a custom attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureUtil.TypeMapForAttributes.LookupPrimitive(System.Type,System.Reflection.Adds.CorElementType@)">
            <summary>
            lookup the given primitive type
            </summary>
            <param name="type">type to lookup. Must be a primitive</param>
            <param name="result">the corelement type for the name</param>
            <returns>true if result is valid</returns>
        </member>
        <member name="T:Microsoft.MetadataReader.SignatureBlob">
            <summary>
            Represent a raw signature blob from the Metadata.
            Run this through a signature parser to get a friendly form.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureBlob.#ctor(System.Byte[])">
            <summary>
            create a signature blob around a set of bytes.
            </summary>
            <param name="data">raw bytes in the signature</param>
            <remarks>This just provides the semantics that the given byte[] is a metadata signature.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureBlob.ReadSignature(System.Reflection.Adds.MetadataFile,System.Reflection.Adds.EmbeddedBlobPointer,System.Int32)">
            <summary>
            Read a signature blob from metadata storage.
            </summary>
            <param name="storage">the raw metadata storage that provides the backing unmanaged memory</param>
            <param name="pointer">a pointer into the raw metadata storage</param>
            <param name="countBytes">number of bytes to read</param>
            <returns>signature copied from the storage</returns>
            <remarks>This is conceptually just a ReadMemory() at the pointer's address. We pass in the underlying 
            storage object so that we can validate that the unmanaged memory address is actually valid.</remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.SignatureBlob.GetSignatureAsByteArray">
            <summary>
            Get the signature as a byte-array. Caller should not mutate the bytes; although we don't enforce
            this for efficiency.
            </summary>
            <returns>A byte array of the signature.</returns>
        </member>
        <member name="T:Microsoft.MetadataReader.SimpleParameterInfo">
            <summary>
            A ParameterInfo constructed purely from information in the method signature without any other
            backing metadata. Contrast to code:MetadataOnlyParameterInfo, which is backed by real metadata.
            The CLR just needs the method signature and doesn't actually need parameter metadata. Compilers may
            emit parameter metadata at their discretion. One case where the C# compiler omits the metadata is
            for anonymous delegates whose body does not use any parameters.
            
            Properties not passed to the constructor return values to match reflection's existing
            implementation. Reflection's choice here is arguably an arbitrary policy decision, which is why
            these ParameterInfos are routed through code:IMetadataExtensionsPolicy. 
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.StringBuilderPool">
            <summary>
            This is a very simple pool with a fixed size (MaxListSize). Additional allocations are allowed to GC.
            Exposes two static methods, Get and Release which are threadsafe and protected via a synclock.
            </summary>
            <remarks>
            Used to decrease GC pressure and avoid lots of small allocation for each interop call. 
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.StringBuilderPool.Get">
            <summary>
            Returns a stringbuilder from the pool or creates a new one with the default capacity.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.StringBuilderPool.Get(System.Int32)">
            <summary>
            Returns a stringbuilder from the pool or creates a new one, ensuring the capacity is at least "capacity".
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.StringBuilderPool.Release(System.Text.StringBuilder@)">
            <summary>
            Releases the stringbuilder back into the pool.
            The parameter is passed by reference and set to null so that no further access to it is done.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.TypeNameQuoter">
            <summary>
            The class is used to quote type names (including the namespace name).
            The type names in the metadata are all unquoted but reflection returns the quoted name. 
            For example, if a type name is "[Foo]", reflection returns "\[Foo\]" for the Name property of the type.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.TypeProxy">
            <summary>
            Base class helper for implementing a LMR Type that proxies to another type (such as a TypeRef or TypeSpec)
            </summary>
            <remarks>
            Explicitly have a DebuggerDisplay here to avoid 
            1) inheriting from debug display of MetadataOnlyCommonType for calling Name and FullName,
            2) the debugger implicitly calling ToString() here,
            which could throw exceptions when the type resolution fails.
            This derives from MetadataOnlyCommonType instead of System.Type directly because we can only have 1 base class,
            and derived classes need to derive from CommonType.
            
            Important: TypeProxy must overload and forward all virtual methods from System.Type instead of providing its
            own implementation - even when this implementation is correct for all LMR types. This is because proxy could
            resolve to non-LMR representation of Type and they might have their own implementation to which we should
            forward to. 
            </remarks>
        </member>
        <member name="P:Microsoft.MetadataReader.TypeProxy.Resolver">
             <summary>
            Implements MetadataOnlyCommonType.Resolver
            Unlike Type.DeclaringScope, this specifically returns a LMR module, not just a Reflection module.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.TypeProxy.GetResolvedType">
            <summary>
            Implementation of ITypeProxy.GetResolvedType().
            Get the resolved type that we proxy to. 
            Every other method then forwards to this type.
            </summary>
            <remarks>
            Resolution is bad when it requires external information which we may not have or which may be 
            very difficult to get. This is the case for TypeRefs.
            It's not as bad for type aliasing, such as with TypeSpecs.
            
            Note: this can still return a proxy i.e. not resolve completely.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.TypeProxy.ToString">
            <summary>
            We need to forward ToString() calls for correctness, but that means we have a non-trivial ToString()
            impl that may invoke assembly resolution callbacks. Therefore we don't want the debugger to call
            it implicitly via func-evals. So Use a DebuggerDisplay() attribute on this class to mitigate. 
            This isn't bullet proof since any other implicit eval could potentially call this ToString().
            </summary>
        </member>
        <member name="P:Microsoft.MetadataReader.TypeProxy.FullName">
            <summary>
            Helpers to get various pieces of the name.
            Derived class may be able to use their extra knowledge to avoid resolution here.
            Typenames can get complicated (especially with generics, especated chars), so it's hard
            to correctly compute the namespace,name from the FullName.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.TypeProxy.GetHashCode">
            <summary>
            TypeRef's values for those must match that of the proxy.
            (eg this.GetHashCode() == this.GetResolvedType().GetHashCode()). 
            Since the resolved type does not need to be a MetadataOnlyCommonType, TypeRef can't just inherits
            MetadataOnlyCommonType's impls of GetHashCode().         
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.MetadataOnlyTypeReference">
            <summary>
            TypeReference (TypeRef token).
            This implements the TypeReference interface to allow getting TypeRef specific data.
            It also implements the regular Type interface, and then forwards on that to the resolved type.     
            The base implementations will call these derived properties which will resolve the proxy.
            See code:Ilrun.ITypeReference for more details on the contract.
            </summary>
            <remarks>
            MetadataOnlyTypeReference does not inherit DebuggerDisplayAttribute from TypeProxy. Instead,
            it contains Name and FullName, the same as MetadataOnlyCommonType. This is safe since Name and FullName  
            are always available for MetadataOnlyTypeReference. Also, the token of the typeref is included.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.MetadataOnlyTypeReference.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token)">
            <summary>
            Encapsulate a type reference from a metadata scope. 
            </summary>
            <param name="resolver">metadata scope that the typeref is in (this is likely not the 
            scope that the type will actually resolve to.</param>
            <param name="typeRef">typeref token for the typeref.</param>
        </member>
        <member name="P:Microsoft.MetadataReader.MetadataOnlyTypeReference.RequestedAssemblyName">
            <summary>
            Get the asssembly name that this TypeRef requests to be resolved to. This is a higher level view
            over the ResolutionScope token. 
            A sane universe should resolve an assembly to the requested name or fail. However, if the universe
            does resolve the assembly to something else, then the actual assembly name may not match the requested 
            assembly name.
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.UnresolvedTypeName">
            <summary>
            Represents raw data from the metadata, prior to being converted into the reflection object model. 
            This class is useful for representing typerefs that are encoded as strings names, such as how TypeRefs 
            are stored in custom attributes.
            
            This is semantically equivalent to a TypeRef, but this form gaurantees we don't do any eager resolution.
            
            Once LMR is fully fixed to avoid eager resolution, then this class can safely be replaced with usages 
            of Type.    
            This is converted to a System.Type by parsing it.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.UnresolvedTypeName.#ctor(System.String,System.Reflection.AssemblyName)">
            <summary>
            Constructor 
            </summary>
            <param name="typeName">The full type name, which will eventually be parsed.</param>
            <param name="assemblyName">the assembly that the type will be resolved to.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.UnresolvedTypeName.ConvertToType(System.Reflection.Adds.ITypeUniverse,System.Reflection.Module)">
            <summary>
            Parse the name to convert to a reflection System.Type.
            </summary>
            <param name="universe">type universe that resulting type will be valid in.</param>
            <param name="moduleContext">module that the typeName was obtained from. This is passed to the parser
            and may be required to disambiguate the type name. See type name parser for details.</param>
            <returns>a System.Type for the given type.</returns>
        </member>
        <member name="P:Microsoft.MetadataReader.UnresolvedTypeName.TypeName">
            <summary>
            Get the full type name, excluding assembly
            </summary>
        </member>
        <member name="T:Microsoft.MetadataReader.TypeSpec">
            <summary>
            Represent a type object around a TypeSpec token.  
            A TypeSpec could become any other type, including a TypeDef, TypeRef, Generic instantation, array, modifier, etc.
            TypeSpecs become very common when dealing with generics.
            </summary>
            Explicitly have a DebuggerDisplay here to display the typespec token and not inherit the debugger display from 
            TypeProxy. ToString(), Name and FullName cannot be used in the debugger display since they may cause exceptions when
            the type resolution fails.
        </member>
        <member name="M:Microsoft.MetadataReader.TypeSpec.#ctor(Microsoft.MetadataReader.MetadataOnlyModule,System.Reflection.Adds.Token,System.Type[],System.Type[])">
            <summary>
            Represent a type spec
            </summary>
            <param name="module">module scope that the token is valid in. </param>
            <param name="typeSpecToken">a typespec token in that scope</param>
            <param name="typeArgs">the generic type args for resolving vars</param>
            <param name="methodArgs">the generic method args for resolving mvars.</param>
        </member>
        <member name="T:Microsoft.MetadataReader.Utility">
            <summary>
            Provide utility functionality to LMR consumers.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Do a string comparison, respecting case sensitivity flag.
            </summary>
            <param name="string1">first string</param>
            <param name="string2">second string</param>
            <param name="ignoreCase">true if strings should be compares case insensitive; else false to compare case sensitive</param>
            <returns>true if strings are equal, else false</returns>
            <remarks>
            Many of the name lookup functions take a boolean ignoreCase flag. This helper provides a convenient signature that matches up 
            with the reflection conventions.
            </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.IsBindingFlagsMatching(System.Reflection.MemberInfo,System.Boolean,System.Boolean,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Helper to filter our a MemberInfo against BindingFlags.
            </summary>
            <param name="memberInfo">member to check against binding flags.</param>
            <param name="isStatic">true iff the member is static.</param>
            <param name="isPublic">true iff the member is public. </param>
            <param name="isInherited">true if filtering will allow inherited members. </param>
            <param name="bindingFlags">binding flags to match against the member</param>
            <returns>true if the members static,public,inherited values match that of the binding flags.</returns>
            <remarks>Public and Static can be fetched directly from certain derived members, like FieldInfo. But not other members, like PropertyInfo. </remarks>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.GetNamespaceHelper(System.String)">
            <summary>
            Extracts namespace portion of type's name. Assumes that fullName
            parameter doesn't contain any generic arguments listed.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.GetTypeNameFromFullNameHelper(System.String,System.Boolean)">
            <summary>
            Gets the type name from its full name.
            </summary>
            <param name="fullname">Type's full name. Can't have any generic arguments listed.</param>
            <param name="isNested">Is type nested or not.</param>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.VerifyNotByRef(Microsoft.MetadataReader.MetadataOnlyCommonType)">
            <summary>
            Verifies that type is not one of ByRef types. If it is, it throws TypeLoadException.
            </summary>
        </member>
        <member name="M:Microsoft.MetadataReader.Utility.IsValidPath(System.String)">
            <summary>
            Checks path to a module.
            </summary>
            <remarks>
            We use this instead of File.Exists for these reasons:
            
            1)	File.Exists throws first-chance exceptions if the path isn’t valid. 
                It catches them internally, which makes debugging more difficult.
            2)	File.Exist() is not correct because, as long as the path is valid, we still want to 
                call the Uri constructor, even if the path doesn’t exist on the local machine. 
                For example, if VS interpreter us used for minidump debugging, the code base will 
                be the path on the machine the dump was collected on, which might not exist on 
                the machine that is being used to examine the dump. 
            3)	We want to disallow cases where a filename is specified without a full path. 
                File.Exist() will succeed here, but the Uri constructor down the line will throw.
            </remarks>
        </member>
        <member name="T:Microsoft.Isam.Esent.Interop.JET_coltyp">
            <summary>
            ESENT column types.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Nil">
            <summary>
            Null column type. Invalid for column creation.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Bit">
            <summary>
            True, False or NULL.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.UnsignedByte">
            <summary>
            1-byte integer, unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Short">
            <summary>
            2-byte integer, signed.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Long">
            <summary>
            4-byte integer, signed.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Currency">
            <summary>
            8-byte integer, signed.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.IEEESingle">
            <summary>
            4-byte IEEE single-precisions.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.IEEEDouble">
            <summary>
            8-byte IEEE double-precision.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.DateTime">
            <summary>
            Integral date, fractional time.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Binary">
            <summary>
            Binary data, up to 255 bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.Text">
            <summary>
            Text data, up to 255 bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.LongBinary">
            <summary>
            Binary data, up to 2GB.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.JET_coltyp.LongText">
            <summary>
            Text data, up to 2GB.
            </summary>
        </member>
        <member name="T:Microsoft.Isam.Esent.Interop.Vista.VistaColtyp">
            <summary>
            Column types that have been added to the Vista version of ESENT.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.Vista.VistaColtyp.UnsignedLong">
            <summary>
            Unsigned 32-bit number.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.Vista.VistaColtyp.LongLong">
            <summary>
            Signed 64-bit number.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.Vista.VistaColtyp.GUID">
            <summary>
            16-byte GUID.
            </summary>
        </member>
        <member name="F:Microsoft.Isam.Esent.Interop.Vista.VistaColtyp.UnsignedShort">
            <summary>
            Unsigned 16-bit number.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Reflection.Adds.AssemblyProxy" -->
        <member name="M:System.Reflection.Adds.AssemblyProxy.Dispose">
            <summary>        
            This should only be called in the context of disposing the parent Universe.
            Caller is responsible for thread safey here and to not dispose while another thread is using.
            Caller should not use after this has been diposed.        
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.AssemblyProxy.GetResolvedAssemblyWorker">
            <summary>
            Implemented by derived class to resolve the assembly.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ConstructorInfoProxy">
            <summary>
            Helper for proxy ConstructorInfo that forwards all calls.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ConstructorInfoProxy.GetResolvedWorker">
            <summary>
            Derived classes implement to provide the real constructor object that we forward to. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.Adds.CorElementType">
            <summary>
            Represents a raw element type.  Values in this enum are chosen to be castable to the CorElementType enumeration
            used by the CLR api's, as well as the internal PrimitiveType enumeration.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ElementTypeUtility">
            <summary>
            Provides a utility mapping to get string names from built in types.  
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.FileMapping">
            <summary>
            Map a file into memory and expose access.
            This is internal and intended to support Metadata files.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.FileMapping.#ctor(System.IntPtr,System.Int64,System.String)">
            <summary>
            Create a file mapping around the given filename with already available
            base address and file size.
            </summary>
            <param name="fileName">Path to the mapped file; can be relative.</param>
        </member>
        <member name="M:System.Reflection.Adds.FileMapping.#ctor(System.String)">
            <summary>
            Create a file mapping around the given filename
            </summary>
            <param name="fileName">filename to open; can be relative</param>
        </member>
        <member name="P:System.Reflection.Adds.FileMapping.Path">
            <summary>
            Full path to the file.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.FileMapping.Length">
            <summary>
            Length of file in bytes.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.FileMapping.BaseAddress">
            <summary>
            Base address of file. This can be used in direct memory operations to read the file contents.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.NativeMethods">
            <summary>
            Import of native definitions supporting FileMapping class.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.NativeMethods.SafeOpenFile(System.String)">
            <summary>
            Wrapper method to directly get a file handle from Win32 API.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.NativeMethods.FileSize(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wrapper to get file size as long.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper">
            <summary>
            Internal support for cracking PE files.  
            The metadata import interfaces just give RVAs to key data (like method bodies), and so fully
            cracking the metadata requires resolving those RVAs.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.ImageHelper.ImageType">
            <summary>
            Defines image type: 32-bit or 64-bit.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ImageHelper.GetResourcesSectionStart">
            <summary>
            Finds real pointer to the start of managed resources section.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ImageHelper.GetCor20Header">
            <summary>
            Get the IMAGE_COR20_HEADER.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Adds.ImageHelper.GetEntryPointToken">
            <summary>
            Get the token that specifies the method  where execution in this module should start (as defined in ecma II.25.3.3.2 )
            or a null token if no such method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Adds.ImageHelper.ResolveRva(System.Int64)">
            <summary>
            Resolve an Relative-Virtual-Address (RVA) within a file to a real address.
            The RVA is likely obtained as data embedded in the PE image, and used to refer to data elsewhere
            in the PE image.
            </summary>
            <param name="rva">rva within the PE image</param>
            <returns>a real address within the process, or 0 if the RVA can't be resolved. </returns>
            <remarks>You can't just resolve an RVA by adding it to the base address because RVAs the loaded
            image and the on-disk image are different. RVAs baked into the image are designed to be used in
            the loaded case, in which case it can just be added to the base address. But the on-disk image
            may have the sections in a compressed form. So we need to walk the sections to determine where
            the RVA would go. </remarks>
        </member>
        <member name="P:System.Reflection.Adds.ImageHelper.IMAGE_DOS_HEADER.IsValid">
            <summary>
            Determine if this is a valid DOS image. 
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_FILE_HEADER">
            <summary>
            Native import for IMAGE_FILE_HEADER.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_NT_HEADERS_HELPER">
            <summary>
            Defines first part of IMAGE_NT_HEADERS that's processor architecture independant.
            Used to read "Magic" field that contains image type: 32-bit or 64-bit.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_NT_HEADERS_32">
            <summary>
            Native import for IMAGE_NT_HEADER on 32-bit architecture.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_NT_HEADERS_64">
            <summary>
            Native import for IMAGE_NT_HEADER on 64-bit architecture.
            </summary> 
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_SECTION_HEADER">
            <summary>
            Native import for IMAGE_NT_HEADERs.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_OPTIONAL_HEADER_32">
            <summary>
            Managed definition for IMAGE_OPTIONAL_HEADER32 from Winnt.h.
            See Serge Lidin's book .NET IL assembler (page 47) for full description.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_OPTIONAL_HEADER_64">
            <summary>
            Managed definition for IMAGE_OPTIONAL_HEADER64 from Winnt.h.
            See Serge Lidin's book .NET IL assembler (page 47) for full description.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_DATA_DIRECTORY">
            <summary>
            Managed definition for IMAGE_DATA_DIRECTORY from Winnt.h.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ImageHelper.IMAGE_COR20_HEADER">
            <summary>
            Managed definition for CLR Header structure.
            See Serge Lidin's book .NET IL assembler (page 56) for full description.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ImageHelper.MarshalAt``1(System.UInt32)">
            <summary>
            Marshal an unmanaged data structure from the image
            </summary>
            <typeparam name="T">managed type for the data structure to marshal</typeparam>
            <param name="offset">offset within the image to copy from. This must be in the image's range. </param>
            <returns>a managed version of the data structure marshaled from the image.</returns>
        </member>
        <member name="T:System.Reflection.Adds.IMutableTypeUniverse">
            <summary>
            Mutable universe extends a ITypeUniverse with operations to actually load assemblies into the universe.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.IMutableTypeUniverse.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Register the assembly as being loaded into this universe
            </summary>
            <param name="assembly">An assembly that was created to be in this universe. It should implement IAssembly2
            and have its TypeUniverse set to this instance.</param>
        </member>
        <member name="T:System.Reflection.Adds.ITypeProxy">
            <summary>
            Represents a type that can resolve to another type. 
            This can commonly handle TypeRef and TypeSpecs in the metadata.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.ITypeProxy.TypeUniverse">
            <summary>
            Get the type universe that this type is in. A type and its resolved type are in the same universe.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ITypeSignatureBlob">
            <summary>
            Represents a type signature blob.  
            This derives from ITypeProxy to provide a Type object model over the raw byte array.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.ITypeSignatureBlob.Blob">
            <summary>
            Get the raw bytes for the blob. 
            Anything that has a blob also means a signature parser and TypeAlgebra tree. 
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.ITypeSignatureBlob.DeclaringScope">
            <summary>
            The scope that the tokens in the blob are valid in.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.ITypeSpec">
            <summary>
            Represents a TypeSpec in the metadata.
            Represents a metadata signature.  
            </summary>
            <remarks>
            Some metadata items return a TypeSpec (such as a Type's base type token)
            Others return the signature blob directly (such as a Field's Type).
            </remarks>
        </member>
        <member name="T:System.Reflection.Adds.ITypeUniverse">
            <summary>
            This describes a "TypeUniverse".
            This is a full transitive closure of all possible types, along with key operations on the universe
            such as type-lookup and resolution between scopes. 
            Universes are completely isolated and so a host can maintain multiple type universes.
            
            Common universe implementations may be:
            1. A static universe -  a host may implement a universe based on static metadata. In this case, the
            host can resolve assemblies using arbitrary policy. 
            2. A "debuggee process" universe - a debugger application may implement a universe to describe the
            types in another process. In this case, the assembly resolution must match what the existing process
            actually did, so use ICorDebugModule2.ResolveAssembly.
            
            Some functionality is explicitly not on the type universe:
            - Enumerate all assemblies: this can impede lazily loading assemblies into the universe. 
            </summary>
            <remarks>
            An ITypeUniverse is read-only and doesn't provide loading facilities. See IMutableTypeUniverse for loading. 
            </remarks>
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.GetBuiltInType(System.Reflection.Adds.CorElementType)">
            <summary>
            Callback to the universe to resolve the builtin types.
            
            From standard I.8.2.2: Builtin types, determined by the virtual execution system.
            Also, encoding for builtin types must use the short form (I4) instead of the long form
            (TypeRef("System.Int32", mscorlib).        
            Get a type for a given CLR element type (eg, COR_ELEMENT_TYPE I4)                
            This is redundant with GetSystemAssembly().GetType(NameFrom(elementType), true, false)), however
            the lookup by type code allows a more efficient lookup without having to go through strings.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.GetTypeXFromName(System.String)">
            <summary>
            Get a type from the given full name, (eg  "System.Object").
            This is only valid for types in mscorlib.
            This is redundant with GetSystemAssembly().GetType()
            </summary>        /// 
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.GetSystemAssembly">
             <summary>
             The CLR execution implicitly requires a single system assembly.  On desktop CLR, this is "mscorlib.dll".
             This is used for things including:
             - resolving built-in types such as I4 --> "mscorlib!System.Int32". 
             - providing critical types such as System.Object and System.Array (base class for all Arrays)
             - providing System.ValueType, System.Enum, System.Delegate
             Many APIs on reflection require knowing the system assembly such as Type.IsEnum
            
             The type-universe can fail to implement this, but many APIs that require knowledge of the system
             assembly will fail. APIs that don't innately require that knowledge should still be able to work.
             </summary>
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.ResolveAssembly(System.Reflection.AssemblyName)">
            <summary>
            Simple assembly resolution by name. This is similar to Assembly.Load(AssemblyName).         
            This can not properly model multiple loader contexts (see Assembly.LoadFrom), and therefore it
            can not fully model an existing process. 
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.ResolveAssembly(System.Reflection.Module,System.Reflection.Adds.Token)">
            <summary>
            Fine-grain Assembly resolution using the calling assembly and the token of the assembly ref. 
            Scope represents a module that has an IMetadataImport scope.
            tokenAssemblyRef is an assembly ref token valid in the given scope. 
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.ITypeUniverse.ResolveModule(System.Reflection.Assembly,System.String)">
            <summary>
            Netmodule resolution by name for multi-module assemblies. 
            </summary>
            <param name="containingAssembly">Multi-module assembly resolved module will be part of. 
            It should already contain manifest module. 
            ITypeUniverse implementation can use information like assembly location to determine
            where dependent netmodules should be loaded from.</param>
            <param name="moduleName">Name of a net module that needs to be resolved. This name comes from
            the manifest module and its Files table. It's equal to the module's Name property.</param>
        </member>
        <member name="T:System.Reflection.Adds.MetadataDispenser">
            <summary>
            Helper class to open up a Metadata scope from a file.
            This can be called on multiple threads.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.GetDispenserShim">
            <summary>
            Creates dispenser appropriately based on runtime version. 
            </summary>
            <remarks>
            In v4, interfaces in mscoree need to be created through indirection
            to make sure we'll get v4 implementation instead of v2. This is due
            to in-proc SxS changes introduced in CLR v4.
            </remarks>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.OpenFromByteArray(System.Byte[])">
            <summary>
            Open a metadata file from the given stream. The stream should contain the same contents as the file on disk.        
            This will read all bytes from the stream. 
            </summary>
            <param name="data">stream for metadata file. This should start with 'mz', not 'bsjb'.</param>
            <returns>a wrapper around a raw importer created on the raw bytes of data.</returns>
        </member>
        <member name="T:System.Reflection.Adds.MetadataDispenser.MetadataFileOnByteArray">
            <summary>
            MetadataFile for an in-memory importer. This protects the backing memory.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.MetadataFileOnByteArray.#ctor(System.Runtime.InteropServices.GCHandle@,System.IntPtr)">
            <summary>
            constructor
            </summary>
            <param name="h">gchandle pinning the memory pointed to by pUnk. If the ctor succeeds,
            it will clear h to indicate to caller that we've taken ownership of freeing the GC handle.</param>
            <param name="pUnk">pointer to raw metadata bytes</param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.OpenFileAsFileMapping(System.String)">
            <summary>
            Open file retrieving the RVA so that we have full access to metadata. 
            </summary>
            <param name="fileName">filename to open</param>
            <returns>a metadata file object with RVA resolution abilities</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.OpenFileAsFileMapping(System.Object,System.String)">
            <summary>
            Creates MetadataFile object over already available IMetadataImport interface (instead of opening 
            scope and getting it manually like in other overloads). E.g. this is useful when clients need to use
            IVsSmartOpenScope to faciliate sharing. It will also retrieve the RVA so that we have full access to metadata. 
            </summary>
            <param name="importer">An RCW around an IMetadataImport interface. Caller is responsible for importer's lifetime.</param>
            <param name="fileName">Full path to the opened file in case we need to fall back on mapping the file manually.
            E.g. this would happen when the file is in the GAC because CLR doesn't support it.</param>
            <returns>A metadata file object with RVA resolution abilities.</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataDispenser.OpenFile(System.String)">
            <summary>
            Open a metadata scope from a file on disk for read-only.
            </summary>
            <param name="fileName">filename to pass to </param>
            <returns>a metadata scope object representing the file. It can't resolve RVAs.</returns>
        </member>
        <member name="T:System.Reflection.Adds.EmbeddedBlobPointer">
            <summary>
            Represents an live IntPtr that points into the loaded metadata blob. 
            This wraps the live pointer to protect access to it.
            The only way to actually read the contents from the pointer requires going through the MetadataFile,
            which can validate that the region of memory is valid.
            </summary>
            <remarks>The danger of exposing this pointer directly is that if the underlying storage was unloaded, the read 
            becomes invalid. For example, a bug would be caching the raw pointer in a global, and then the underlying metadata
            file may get unloaded, and then reading from the pointer may crash.
            By wrapping these embedded poitnters here, we force the read to go through the MetadataFile, which owns
            the storage and can thus vouch that the read is safe.</remarks>
        </member>
        <member name="P:System.Reflection.Adds.EmbeddedBlobPointer.GetDangerousLivePointer">
            <summary>
            internal helper to get the pointer for reading. Caller should validate.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.MetadataFile">
            <summary>
            Represents a raw IMetadataImporter. 
            Metadata has RVAs to data. However, a raw importer object doesn't have a base address. Since the creator of the metadata
            almost always has a base address, so we couple the base address and metadata object together.
            This is also disposable, which will just Release the underlying native IMetadataImport pointer. That's important because it 
            may hold file locks.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.#ctor(System.Object)">
            <summary>
            Create a wrapper around an existing imported Metadata reader object.  This is problematic
            because the importer may have thread affinity.
            </summary>
            <param name="importer">a RCW around an IMetadataImport interface</param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.#ctor(System.IntPtr)">
            <summary>
            Create a wrapper around a raw intPtr to a raw IMetadataImport
            This will take a reference to importer, so the caller can release their reference to transfer
            ownership to this object.
            </summary>
            <param name="rawImporter">a direct pointer to a IMetadataImport interface </param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.Dispose">
            <summary>
            Implementation of IDisposable.Dispose. Explcitly release resources.        
            Caller is responsible for thread safey here and to not dispose while another thread is using.
            Caller should not use after this has been diposed.        
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.MetadataFile.RawPtr">
            <summary>
            The raw IMetadataImport pointer. This may not yet have a RCW associated with it. 
            This class owns a reference on the ptr and will call Release().
            This uses a IntPtr instead of a System.Object to avoid having an RCW to avoid thread-affinity issues.
            See code:MetadataDispenser.OpenFile for details. 
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.MetadataFile.FilePath">
            <summary>
            The path of the metadata file.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ReadRva(System.Int64,System.Int32)">
            <summary>
            Read a region of memory specified by a Relative Virtual Address (RVA) in the given metadata scope.
            Fails if the data can't be read. This can
            include cases where the scope may not have a base address (dynamic modules, enc, etc)
            Never returns null.
            This can be used to read the raw bytes of RVA based static fields, such as in the case of the
            opaque struct blobs used in arrayliteral intializers, as well as MethodBody data.
            </summary>
            <param name="rva">rva encoded in metadata. </param>
            <param name="countBytes">number of bytes to read at</param>
            <returns>an array of bytes for the rva data. Throws on any failures. Never returns null.</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ReadResource(System.Int64)">
            <summary>
            Reads managed resource based on a given offset. 
            </summary>
            <param name="offset">Offset on which a resource starts.</param>
            <returns>Content of resource. Throws on any failures. Never returns null.</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ReadEmbeddedBlob(System.Reflection.Adds.EmbeddedBlobPointer,System.Int32)">
            <summary>
            Read a blob embedded in the metadata
            </summary>
            <param name="pointer">live pointer into the metadata blob</param>
            <param name="countBytes">count of bytes to read</param>
            <returns>array of bytes of requested length copied from metadata blob.</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ValidateRange(System.IntPtr,System.Int32)">
            <summary>
            Derived class (which knows about the underlying storage of the IMDI) can validate that the region
            of memory is valid to read from.
            </summary>
            <param name="ptr">live pointer to within metadata blob</param>
            <param name="countBytes">count of bytes to read</param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ReadEntryPointToken">
            <summary>
            Get the entry point token from the IMAGE_COR20_HEADER in the PE file. 
            See Ecma II 24.3.3.2 for details. 
            This can be a MethodDEf or a File token. Although in C# apps, this will usually be the methodDef for Main().
            This requires RVA resolution.
            </summary>
            <returns>entry point token from the headers. Nil token if no entry point specified (such as with dlls).</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.ReadRvaStruct``1(System.Int64)">
            <summary>
            Read a unmanaged structure at the region memory at the given RVA.
            </summary>
            <typeparam name="T">type of structure to be read</typeparam>
            <param name="rva">rva encoded in metadata. </param>
            <returns>an instance of T marshaled from the given RVA</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFile.EnsureNotDispose">
            <summary>
            internal helper to throw if the object is disposed. Nop if class is ok.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.MetadataFileAndRvaResolver">
            <summary>
            Metadata file wrapper with RVA resolver capabilities.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.#ctor(System.IntPtr,System.Reflection.Adds.FileMapping)">
            <summary>
            Bind a metadata importer scope together with a file mapping that can be used to fully resolve
            any RVAs.
            </summary>
            <param name="importer">a raw pointer to an IMetadataImporter object. The importer should be
            retrieved via Dispenser.OpenScopeOnMemory() for memory backed by the file mapping.</param>
            <param name="file">a file mapping object that owns the raw buffer that the importer operates on.</param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.#ctor(System.Object,System.Reflection.Adds.FileMapping)">
            <summary>
            Bind a metadata importer scope together with a file mapping that can be used to fully resolve
            any RVAs.
            </summary>
            <param name="importer">An RCW around an IMetadataImport interface.</param>
            <param name="file">a file mapping object that owns the raw buffer that the importer operates on.</param>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.ResolveRva(System.Int64)">
            <summary>
            Resolve an RVA to its real virtual address within this process space.
            </summary>
            <param name="rva">rva from this metadata file.</param>
            <returns>the resolved address</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.ReadRva(System.Int64,System.Int32)">
            <summary>
            override base class definition.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.ReadResource(System.Int64)">
            <summary>
            Reads managed resource based on a given offset. 
            </summary>
            <param name="offset">Offset on which a resource starts.</param>
            <returns>Resource content. Throws on any failures. Never returns null.</returns>
        </member>
        <member name="M:System.Reflection.Adds.MetadataFileAndRvaResolver.ReadRvaStruct``1(System.Int64)">
            <summary>
            override base class definition.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.IAssembly2">
            <summary>
            New APIs on System.Reflection.Assembly
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.IFieldInfo2">
            <summary>
            New APIs on System.Reflection.FieldInfo
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.IFieldInfo2.GetRvaField">
            <summary>
            Read the raw bytes for an Rva based field
            </summary>
            <returns>byte array of contents</returns>
            <remarks>See Ecma IIa.15.3.2 for more details. 
            A common case for RVA fields is array literal initialization. </remarks>
        </member>
        <member name="T:System.Reflection.Adds.IModule2">
            <summary>
            New APIs on System.Reflection.Module
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.IModule2.RowCount(System.Reflection.Adds.MetadataTable)">
            <summary>
            Gets number of rows in a metadata table.
            </summary>
            <param name="metadataTableIndex">Metadata table index.</param>
            <returns>Number of rows in the specified metadata table.</returns>
        </member>
        <member name="M:System.Reflection.Adds.IModule2.GetAssemblyNameFromAssemblyRef(System.Reflection.Adds.Token)">
            <summary>
            Get the assembly name for the given assembly token in the metadata scope.
            </summary>
            <param name="token">assembly ref token valid in this module's scope.</param>
            <returns>Assembly name containing information from the metadata scope for the given assembly token.</returns>
            <remarks>An AssemblyName object represents the metadata stored in an assembly ref token. 
            This is similar to Assembly.GetReferencedAssemblies(), except that this provides information at the module
            granularity and it can map a specific assembly ref token.</remarks>
        </member>
        <member name="M:System.Reflection.Adds.Helpers.Universe(System.Type)">
            <summary>
            Get the type universe from a type.
            </summary>
            <param name="type">type to get universe.</param>
            <returns>Returns null if type is not in a universe (such as with refleciton types) 
            For ITypeProxy, get universe without resolving. </returns>
        </member>
        <member name="M:System.Reflection.Adds.Helpers.EnsureResolve(System.Type)">
            <summary>
            Return a resolved version of the type, if applicable.
            </summary>
            <param name="type">type to ensure resolved</param>
            <returns>a resolved version of the type</returns>
            <remarks>LMR's deferred resolution is directly at odds with Reflection's eager validation.
            This can be used to resolve a type and force validation to occur to get reflection error semantics.
            </remarks>
        </member>
        <member name="T:System.Reflection.Adds.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ArrayInsideArrayInAttributeNotSupported">
            <summary>
              Looks up a localized string similar to Arrays inside other arrays in custom attributes is not supported..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.AssemblyRefTokenExpected">
            <summary>
              Looks up a localized string similar to Assembly reference token expected..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CannotDetermineSystemAssembly">
            <summary>
              Looks up a localized string similar to Type universe has not selected an assembly as the system assembly..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CannotFindTypeInModule">
            <summary>
              Looks up a localized string similar to Cannot find type {0} in module {1}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CannotResolveModuleRefOnNetModule">
            <summary>
              Looks up a localized string similar to Cannot resolve module reference on a single net module..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CannotResolveRVA">
            <summary>
              Looks up a localized string similar to Cannot resolve RVA..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CaseInsensitiveTypeLookupNotImplemented">
            <summary>
              Looks up a localized string similar to Case insensitive type lookup is not implemented..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.CorruptImage">
            <summary>
              Looks up a localized string similar to Image is corrupt. Attempting to read an out of range RVA..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.DefaultTokenResolverRequired">
            <summary>
              Looks up a localized string similar to Without an assembly qualified name, a default token resolver is required..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.DifferentTokenResolverForOuterType">
            <summary>
              Looks up a localized string similar to Outer type has different token resolver..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.EscapeSequenceMissingCharacter">
            <summary>
              Looks up a localized string similar to Escape sequence missing character after the backslash..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExpectedPositiveNumberOfGenericParameters">
            <summary>
              Looks up a localized string similar to Expected positive number of generic parameters. .
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExpectedPropertyOrFieldId">
            <summary>
              Looks up a localized string similar to Expected property or field ID..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExpectedTokenType">
            <summary>
              Looks up a localized string similar to {0} token expected..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExtraAssemblyManifest">
            <summary>
              Looks up a localized string similar to Non-manifest module contains assembly manifest or module is corrupted..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExtraCharactersAfterTypeName">
            <summary>
              Looks up a localized string similar to Extra characters after type name..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ExtraInformationAfterLastParameter">
            <summary>
              Looks up a localized string similar to More information left after last parameter is processed..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.HostSpecifierMissing">
            <summary>
              Looks up a localized string similar to Assembly qualified name requires a host..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.IdTokenTypeExpected">
            <summary>
              Looks up a localized string similar to Id token type expected..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.IllegalElementType">
            <summary>
              Looks up a localized string similar to Illegal element type {0}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.IllegalLayoutMask">
            <summary>
              Looks up a localized string similar to Illegal layout mask..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.IncorrectElementTypeValue">
            <summary>
              Looks up a localized string similar to Incorrect core element type value..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidCustomAttributeFormat">
            <summary>
              Looks up a localized string similar to Invalid custom attribute format..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidCustomAttributeFormatForEnum">
            <summary>
              Looks up a localized string similar to Invalid custom attribute blob. Enum parameters must have full type name specified..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidElementTypeInAttribute">
            <summary>
              Looks up a localized string similar to Invalid core element type in custom attribute blob..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidFileFormat">
            <summary>
              Looks up a localized string similar to Invalid file format..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidFileName">
            <summary>
              Looks up a localized string similar to Invalid file name: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidMetadata">
            <summary>
              Looks up a localized string similar to Invalid metadata..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidMetadataSignature">
            <summary>
              Looks up a localized string similar to Invalid metadata signature..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidMetadataToken">
            <summary>
              Looks up a localized string similar to Invalid metadata token {0}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.InvalidPublicKeyTokenLength">
            <summary>
              Looks up a localized string similar to Length of public key token must be even..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.JaggedArrayInAttributeNotSupported">
            <summary>
              Looks up a localized string similar to Jagged array in custom attributes is not supported..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ManifestModuleMustBeProvided">
            <summary>
              Looks up a localized string similar to Manifest module must be provided..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.MethodIsUsingUnsupportedBindingFlags">
            <summary>
              Looks up a localized string similar to {0} is using unsupported binding flags {1}.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.MethodTokenExpected">
            <summary>
              Looks up a localized string similar to Method token expected..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.NoAssemblyManifest">
            <summary>
              Looks up a localized string similar to Manifest module does not contain assembly manifest or module is corrupted..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.OperationInvalidOnAutoLayoutFields">
            <summary>
              Looks up a localized string similar to This operation cannot be be applied to RVA fields with auto-layout..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.OperationValidOnArrayTypeOnly">
            <summary>
              Looks up a localized string similar to This operation is valid on an array type only..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.OperationValidOnEnumOnly">
            <summary>
              Looks up a localized string similar to This operation is valid on Enum types only..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.OperationValidOnLiteralFieldsOnly">
            <summary>
              Looks up a localized string similar to This operation can be applied to literal fields only..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.OperationValidOnRVAFieldsOnly">
            <summary>
              Looks up a localized string similar to This operation is valid on RVA fields only..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ResolvedAssemblyMustBeWithinSameUniverse">
            <summary>
              Looks up a localized string similar to Resolved assembly must be within the same universe..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ResolverMustResolveToValidAssembly">
            <summary>
              Looks up a localized string similar to Resolver must resolve to a valid assembly..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ResolverMustResolveToValidModule">
            <summary>
              Looks up a localized string similar to Resolver must resolve module reference to a valid module..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ResolverMustSetAssemblyProperty">
            <summary>
              Looks up a localized string similar to Resolver must set assembly property to this assembly..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.RVAUnsupported">
            <summary>
              Looks up a localized string similar to This metadata importer doesn&apos;t have a base address to resolve RVA address against..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.TypeArgumentCannotBeResolved">
            <summary>
              Looks up a localized string similar to Type argument cannot be resolved..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.TypeTokenExpected">
            <summary>
              Looks up a localized string similar to Type token expected..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnexpectedCharacterFound">
            <summary>
              Looks up a localized string similar to Unexpected character found while parsing..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnexpectedEndOfInput">
            <summary>
              Looks up a localized string similar to Unexpected end of input..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UniverseCannotResolveAssembly">
            <summary>
              Looks up a localized string similar to Type universe cannot resolve assembly: {0}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnrecognizedAssemblyAttribute">
            <summary>
              Looks up a localized string similar to Unrecognized assembly attribute: {0}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnsupportedExceptionFlags">
            <summary>
              Looks up a localized string similar to Unsupported exception flags {0}..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnsupportedImageType">
            <summary>
              Looks up a localized string similar to Unsupported image type..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.UnsupportedTypeInAttributeSignature">
            <summary>
              Looks up a localized string similar to Unsupported type argument in custom attribute signature..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.ValidOnGenericParameterTypeOnly">
            <summary>
              Looks up a localized string similar to Method may only be called on a Type for which Type.IsGenericParameter is true..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.VarargSignaturesNotImplemented">
            <summary>
              Looks up a localized string similar to Signatures with variable number of arguments are not implemented..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.VersionAlreadyDefined">
            <summary>
              Looks up a localized string similar to Version already defined..
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Resources.WrongNumberOfGenericArguments">
            <summary>
              Looks up a localized string similar to Wrong number of generic arguments..
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.SimpleUniverse">
            <summary>
            A basic universe implementation that is agnostic to any particular type provider implementation. 
            This provides services like:
            - default implementations of universe methods 
            - tracking a list of loaded assemblies
            - picking the system assembly
            - default resolution policy, plus a resolution callback for further customization.
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.SimpleUniverse.Assemblies">
            <summary>
            Get list of assemblies that have been explicitly loaded into this universe.
            Clients can use this to detect if an assembly is already loaded to avoid double-loading it. 
            This can also be used to search the entire set of types in the universe.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.SimpleUniverse.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Register the assembly as part of this universe. This is agnostic to the assembly implementation.
            </summary>
            <param name="assembly">an assembly in this universe. The assembly should implement IAssembly2
            and already be associated with this universe.</param>
            <remarks></remarks>
        </member>
        <member name="M:System.Reflection.Adds.SimpleUniverse.SetSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Explicitly set the system assembly.  This will be used by ITypeUniverse.GetSystemAssembly(). 
            </summary>
            <param name="systemAssembly">The system assembly. This should already be in this universe.</param>
            <remarks>If this isn't called ITU.GetsystemAssembly() will use heuristics to select 
            the most likely assembly.</remarks>
        </member>
        <member name="E:System.Reflection.Adds.SimpleUniverse.OnResolveEvent">
            <summary>
            Invoke the delegate when an assembly name doesn't resolve to within the loaded set.
            The delegate implementation can then add the assembly (or even multiple assemblies) into the universe
            and return the assembly it resolves to. 
            
            This is only fired if the default implementation of ResolveAssembly can't match the assembly name
            to within the loaded set. Override ResolveAssembly to get ealier notification.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.SimpleUniverse.FindSystemAssembly">
            <summary>
            Search amongst the loaded assemblies for one that may be the system assembly
            </summary>
            <returns>the system assembly, or null if none found.</returns>
            <remarks>This can't invoke assembly resolve events. It's tempting to define the system assembly as
            ResolveAssembly("mscorlib"), but 
            1) that chooses arbitrary policy for the assembly name (eg, "mscorlib"), 
            2) that just punts the problem back to the host. </remarks>
        </member>
        <member name="M:System.Reflection.Adds.SimpleUniverse.Dispose">
            <summary>
            Dispose this universe. This will release all native metadata objects within this universes's 
            assemblies and modules.  
            Do not use this universe after it's disposed.
            Caller is responsible for thread-safety and ensuring no other threads are using universe once
            the dispose is called.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.UnresolvedAssemblyException">
            <summary>
            Exception thrown when assembly can't resolve. 
            </summary>
            Having an internal exception class deriving from System.Exception causes the following FxCop violation.
            It is ok to suppress it now since the exception type is only internally used and is not supposed to be
            caught by external users.
        </member>
        <member name="T:System.Reflection.Adds.ResolveAssemblyNameEventArgs">
            <summary>
            Assembly resolution callback, used by the AgnosticUniverse.
            </summary>
            <param name="args">an assembly name for that could not be matched to an already loaded assembly. </param>
            <returns>The assembly that the name resolves to. </returns>
        </member>
        <member name="T:System.Reflection.Adds.TokenType">
            <summary>
            Types for metadata tokens. These are from the unmanaged metadata interfaces in Cor.h
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.MetadataTable">
            <summary>
            Metadata table indexes as defined by the CLI standard.
            </summary>
        </member>
        <member name="T:System.Reflection.Adds.Token">
            <summary>
            Wrapper around an arbitrary metadata token. This should be sizeof(int).
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Token.Value">
            <summary>
            Get the token as an integer
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Token.TokenType">
            <summary>
            Get the type of token (MethodDef, MethodRef, TypeDef, etc)
            </summary>
        </member>
        <member name="P:System.Reflection.Adds.Token.Index">
            <summary>
            Get the row index (RID) of the token. This generally starts at 1,
            but 0 can be used for special cases (like invalid token)
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.Token.IsType(System.Reflection.Adds.TokenType)">
            <summary>
            Check if this token is of the given type.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.Token.ToString">
            <summary>
            Get a user-friendly string representation of the token.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.ParseTypeName(System.Reflection.Adds.ITypeUniverse,System.Reflection.Module,System.String)">
            <summary>
            Parses type name and returns type instance represented by type name.  
            </summary>
            <param name="universe">If non-null, the univese that the returned type is valid in. This 
            can be used to search for names.</param>
            <param name="module">If non-null, this is the module that input is valid in. 
            If null, then universe must be non-null and the type is search throughout the entire universe.</param>
            <param name="input">String containing type name.</param>
            <returns>Type that corresponds to given type name.</returns>
            <exception cref="T:System.TypeLoadException">Thrown when type can't be found in a given module/universe.</exception>
            <exception cref="T:System.ArgumentException">Thrown when input contains more characters than expected.</exception>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.ParseTypeName(System.Reflection.Adds.ITypeUniverse,System.Reflection.Module,System.String,System.Boolean)">
            <summary>
            Parses type name and returns type instance represented by type name. Uses CLR's type name
            parser that's new in CLR v4.
            </summary>
            <param name="universe">If non-null, the univese that the returned type is valid in. This 
            can be used to search for names.</param>
            <param name="module">If non-null, this is the module that input is valid in. 
            If null, then universe must be non-null and the type is search throughout the entire universe.</param>
            <param name="input">String containing type name.</param>
            <param name="throwOnError">Controls behavior for cases when type with a given name cannot be found.</param>
            <returns>Type that corresponds to given type name. Can return null if type cannot be found and 
            throwOnError flag is false.</returns>
            <exception cref="T:System.TypeLoadException">Thrown when type can't be found in a given module/universe and
            throwOnError flag is true.</exception>
            <exception cref="T:System.ArgumentException">Thrown when input contains more characters than expected.</exception>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.IsGenericType(System.String,System.Int32)">
            <summary>
            Determines if input contains generic type specifier.
            </summary>
            <remarks>
            A left-bracket could either be a generic arg list or an array
             []  [,]  [*]  are arrays
             [T] [T1, T2] [[T1, AssemblyName], T2]  are generic arg lists            
               Elements in the generic arg list are enclosed in a set of [] if it has an assembly
               qualified name. (AQNs include commas; so this determine whether the comma is separating
               generic args or separating the type from the AssemblyName)
            </remarks>
            <param name="input">String containing type name that's being parsed.</param>
            <param name="idx">Current index in input string.</param>
            <returns>True if type is generic type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.Resolve(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Type},System.Reflection.Assembly)">
            <summary>
            Given the parsed string components of a type, create an actual type object.
            Caller can then apply modifiers to this.
            </summary>
            <param name="path">Type name parts.</param>
            <param name="genericTypeArgs">Type arguments for generic types.</param>
            <param name="assembly">Assembly in which type should be looked up.</param>
            <returns>Type that corresponds to given type name or null if type cannot be found.</returns>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.ReadIdToken(System.String,System.Int32@)">
            <summary>
            The string returned for the IdToken may contain whitespaces,
            including leading and ending whitespaces, e.g. " Foo ".
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.ReadIdWithoutLeadingSpaces(System.String,System.Int32@)">
            <summary>
            Return a string without leading spaces, e.g. used for type name.
            The result can have ending spaces, e.g. "Type Name ".
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.ReadIdWithoutLeadingAndEndingSpaces(System.String,System.Int32@)">
            <summary>
            Return a string without leading end ending spaces, e.g. for assmbly name.
            The result may contain spaces in the middle, e.g. "Assembly Name".
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.TrimLeadingSpaces(System.String)">
            <summary>
            The method rips off the leading whitespaces in the input.
            The result is String.Empty if the input only contains whitespaces.
            </summary>
        </member>
        <member name="M:System.Reflection.Adds.TypeNameParser.IsCompoundType(System.String)">
            <summary>
            Detemines if given type name represents a compound type (e.g. generic, array, nested,
            pointer, or reference).
            </summary>
            <returns>True if the typename requires any parsing and is not just found in the TypeDef name table.</returns>
        </member>
        <member name="T:System.Reflection.Mock.Type">
            <summary>
            This class is corresponding to System.Type.
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.Type.FullName">
            <summary>
            Get the full name of the type, including namespace.
            Fullname is non-deterministic on generic types since the generic arguments may decorated the
            name in an unspecified manner.
            </summary>
        </member>
        <member name="M:System.Reflection.Mock.Type.MakeArrayType">
            <summary>
            Creates a type representing an array of this types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Mock.Type.MakeByRefType">
            <summary>
            Creates a type representing an byref of this types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Mock.Type.MakePointerType">
            <summary>
            Creates a type representing an pointer of this types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Mock.Type.IsArrayImpl">
            <summary>
            Returns true if this type is an array type.
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.Type.IsByRef">
            <summary>
            Returns true if this type is a ByRef type
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.Type.IsEnum">
            <summary>
            Returns true if this type is an enumeration type
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.Type.IsPointer">
            <summary>
            Returns true if this type is a pointer type.
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.Type.IsNested">
            <summary>
            Gets a value indicating whether the current Type object represents 
            a type whose definition is nested inside the definition of another type.
            </summary>
        </member>
        <member name="M:System.Reflection.Mock.Type.GetElementType">
            <summary>
            If this is an array, pointer, or ByRef type, returns the underlying type.
            </summary>
        </member>
        <member name="M:System.Reflection.Mock.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.Mock.MemberFilter,System.Object)">
            <summary>
            This is copy of System.Type implementation. 
            </summary>
        </member>
        <member name="T:System.Reflection.Mock.ExceptionHandlingClause">
            <summary>
            Mock definition for an exception handling clause 
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.MethodInfo.ReturnType">
            <summary>
            Return type of this method; null for void or constructors.
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.MethodBase.Attributes">
            <summary>
            Gets the attributes associated with this method.
            </summary>
        </member>
        <member name="P:System.Reflection.Mock.MethodBase.CallingConvention">
            <summary>
            Gets a value indicating the calling conventions for this method.
            </summary>
        </member>
        <member name="M:System.Reflection.Mock.MethodBase.GetParameters">
            <summary>
            Get the parameters of the method.
            </summary>
            <returns>
            An array of type ParameterInfo containing information that matches the signature of the method (or constructor) reflected by this MethodBase instance.
            </returns>
        </member>
        <member name="P:System.Reflection.Mock.MethodBase.IsConstructor">
            <summary>
            Reflection's implementation only returns true for instance constructors. CLR tried
            to change this during v4.0 but it turned out to be too breaking. 
            </summary>
        </member>
        <member name="T:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer">
            <summary>
            Text serializer for SchemaDiffEntry elements
            </summary>
        </member>
        <member name="P:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.Builder">
            <summary>
            Builder holding the serialized form.
            </summary>
        </member>
        <member name="P:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.IndentCount">
            <summary>
            Number of spaces to indent per level of indentation depth
            </summary>
        </member>
        <member name="P:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.Depth">
            <summary>
            Current indentation depth
            </summary>
        </member>
        <member name="M:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.Walk(Microsoft.Data.Tools.Schema.Utilities.Sql.SchemaCompare.SchemaDiffEntry)">
            <summary>
            Walk the diff entry tree and serialize it
            </summary>
            <param name="entry">Entry to serialize.  If null is a no-op.</param>
        </member>
        <member name="M:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.Clear">
            <summary>
            Reset the serializer to the default state.
            </summary>
        </member>
        <member name="M:SqlStudio.Tests.UTSchemaToolsSql.Utilities.SchemaDiffEntryTextSerializer.ToString">
            <summary>
            Get the current serialized string.
            </summary>
            <returns>Serialized form of the diff entry</returns>
        </member>
    </members>
</doc>
